
SPI_实现基本功能.elf:     file format elf32-littlearm
SPI_实现基本功能.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00006c59

Program Header:
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000068c0 memsz 0x000068c0 flags r--
    LOAD off    0x00006c00 vaddr 0x00006c00 paddr 0x00006c00 align 2**16
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00006c10 vaddr 0x00006c10 paddr 0x00006c10 align 2**16
         filesz 0x000038c0 memsz 0x000038c0 flags rwx
    LOAD off    0x00000400 vaddr 0x20000400 paddr 0x20000400 align 2**16
         filesz 0x00000000 memsz 0x00000530 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts     000000c0  00006800  00006800  00006800  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_config   00000010  00006c00  00006c00  00006c00  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text           000038b0  00006c10  00006c10  00006c10  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM            00000008  0000a4c0  0000a4c0  0000a4c0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array     00000004  0000a4c8  0000a4c8  0000a4c8  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array     00000004  0000a4cc  0000a4cc  0000a4cc  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .mtb            00000000  20000400  20000400  0000a4d0  2**0  CONTENTS
  7 .data           00000000  20000400  20000400  0000a4d0  2**0  CONTENTS, ALLOC, LOAD, DATA
  8 .bss            0000022c  20000400  20000400  00010400  2**2  ALLOC
  9 .heap           00000204  2000062c  2000062c  00010400  2**0  ALLOC
 10 .stack          00000100  20000830  20000830  00010400  2**0  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a4d0  2**0  CONTENTS, READONLY
 12 .debug_info     000087cd  00000000  00000000  0000a4f8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev   00001ab3  00000000  00000000  00012cc5  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges  000002e8  00000000  00000000  00014778  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges   00000228  00000000  00000000  00014a60  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro    0000215d  00000000  00000000  00014c88  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line     00003eb4  00000000  00000000  00016de5  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str      0004f17e  00000000  00000000  0001ac99  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment        0000004c  00000000  00000000  00069e17  2**0  CONTENTS, READONLY
 20 .debug_frame    00000884  00000000  00000000  00069e64  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00006800 l    d  .interrupts	00000000 .interrupts
00006c00 l    d  .flash_config	00000000 .flash_config
00006c10 l    d  .text	00000000 .text
0000a4c0 l    d  .ARM	00000000 .ARM
0000a4c8 l    d  .init_array	00000000 .init_array
0000a4cc l    d  .fini_array	00000000 .fini_array
20000400 l    d  .mtb	00000000 .mtb
20000400 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
2000062c l    d  .heap	00000000 .heap
20000830 l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./obj/startup_MKL36Z4.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000a4a8 l     O .text	00000000 __EH_FRAME_BEGIN__
00006c10 l     F .text	00000000 __do_global_dtors_aux
20000400 l       .bss	00000001 completed.8914
0000a4cc l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00006c38 l     F .text	00000000 frame_dummy
20000404 l       .bss	00000018 object.8919
0000a4c8 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _udivsi3.o
00006ca8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00006dbc l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 _clzdi2.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 system_MKL36Z4.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 suart.c
000085b8 l     F .text	0000002c NVIC_EnableIRQ
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 spi.c
00008f28 l     F .text	0000002c NVIC_EnableIRQ
2000041c l     O .bss	00000004 index.5589
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 isr.c
00000000 l    df *ABS*	00000000 printf.c
00009718 l     F .text	0000004c printk_putc
000099dc l     F .text	000000f8 printk_mknumstr
00009ad4 l     F .text	00000034 printk_pad_zero
00009b08 l     F .text	00000034 printk_pad_space
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 d:/tools/armnoneeabi/bin/../lib/gcc/arm-none-eabi/9.3.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/tools/armnoneeabi/bin/../lib/gcc/arm-none-eabi/9.3.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 
0000a4cc l       .init_array	00000000 __init_array_end
0000a4c8 l       .init_array	00000000 __preinit_array_end
0000a4c8 l       .init_array	00000000 __init_array_start
0000a4c8 l       .init_array	00000000 __preinit_array_start
20000630 g       .heap	00000000 __HeapBase
00006fd4 g     F .text	00000012 .hidden __aeabi_dcmple
000084b4 g     F .text	00000028 flash_read_physical
00007260 g     F .text	00000078 .hidden __eqdf2
20000400 g       .data	00000000 __data_start__
00000100 g       *ABS*	00000000 STACK_SIZE
00006ca0  w    F .text	00000006 I2C0_IRQHandler
00008814 g     F .text	00000278 suart_send
0000003e g       *ABS*	00000000 GEC_USER_SECTOR_END
00006ca0  w    F .text	00000006 HardFault_Handler
00008738 g     F .text	0000009c suart_set
00006ca0  w    F .text	00000006 SysTick_Handler
00006ca0  w    F .text	00000006 PendSV_Handler
00006ca0  w    F .text	00000006 NMI_Handler
0000a4c8 g       .ARM	00000000 __exidx_end
00009634 g     F .text	0000003c PORTC_PORTD_IRQHandler
00006ca0  w    F .text	00000006 I2C1_IRQHandler
00006ca0  w    F .text	00000006 UART1_IRQHandler
000072d8 g     F .text	000000e4 .hidden __gtdf2
0000a4d0 g       .fini_array	00000000 __etext
00006ca0  w    F .text	00000006 DMA2_IRQHandler
00009470 g     F .text	00000024 spi_enable_re_int
20000420 g     O .bss	00000200 gRecvBuff
00006ca0  w    F .text	00000006 TPM0_IRQHandler
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmple
00006ca0  w    F .text	00000006 I2S0_IRQHandler
00006ca0  w    F .text	00000006 LLWU_IRQHandler
00008df0 g     F .text	000000e8 suart_enable_receive_interupt
0000001a g       *ABS*	00000000 GEC_USER_SECTOR_START
00006ca0  w    F .text	00000006 TSI0_IRQHandler
000085e4 g     F .text	00000154 suart_init
00006ca0  w    F .text	00000006 UART0_IRQHandler
0000a28c g     F .text	00000012 memcpy
00006f94 g     F .text	00000020 .hidden __aeabi_cdrcmple
000073bc g     F .text	000000e0 .hidden __ltdf2
0000a4c8 g       .init_array	00000000 __DTOR_END__
00007010 g     F .text	0000003e .hidden __aeabi_uldivmod
00006ca0  w    F .text	00000006 ADC0_IRQHandler
00006ca8 g     F .text	0000010a .hidden __udivsi3
20000400 g       .bss	00000000 __START_BSS
00008f54 g     F .text	000003bc spi_init
00007050 g     F .text	0000003c .hidden __fixunsdfsi
20000830 g       .heap	00000000 __HeapLimit
20000400 g       .bss	00000000 __bss_start__
0000838c g     F .text	00000098 flash_erase
00008104 g     F .text	0000004c .hidden __aeabi_ui2d
000096b4 g     F .text	00000044 SPI1_IRQHandler
000070c8 g     F .text	00000196 .hidden __udivmoddi4
00006ca0  w    F .text	00000006 DefaultISR
00006fc0 g     F .text	00000012 .hidden __aeabi_dcmplt
0000a4c0 g       .ARM	00000000 __exidx_start
0000749c g     F .text	000004d8 .hidden __aeabi_dmul
00009764 g     F .text	00000278 printk_mkfloatstr
0000a4a8 g     F .text	00000000 _init
00006ca0  w    F .text	00000006 TPM2_IRQHandler
0000708c g     F .text	0000003c .hidden __aeabi_d2ulz
00006ca0  w    F .text	00000006 RTC_IRQHandler
00000400 g       *ABS*	00000000 MCU_SECTORSIZE
00006c58  w    F .text	00000048 Reset_Handler
00006ca0  w    F .text	00000006 LCD_IRQHandler
000073bc g     F .text	000000e0 .hidden __ledf2
200017ff g       *ABS*	00000000 GEC_USER_RAM_END
0000a250 g     F .text	0000003c myprintf
00006ca0  w    F .text	00000006 RTC_Seconds_IRQHandler
00006dbc g     F .text	00000000 .hidden __aeabi_idiv
00006ca0  w    F .text	00000006 MCG_IRQHandler
00006ca0  w    F .text	00000006 UART2_IRQHandler
20000400 g       .data	00000000 __data_end__
0000a4c8 g       .init_array	00000000 __CTOR_LIST__
00000200 g       *ABS*	00000000 HEAP_SIZE
00006fe8 g     F .text	00000012 .hidden __aeabi_dcmpgt
00008150 g     F .text	0000003c .hidden __clzsi2
2000062c g       .bss	00000000 __bss_end__
00006ca0  w    F .text	00000006 Reserved20_IRQHandler
00006ffc g     F .text	00000012 .hidden __aeabi_dcmpge
00008550 g     F .text	00000068 flash_cmd_launch
20000620 g     O .bss	00000003 gTime
00007974 g     F .text	00000724 .hidden __aeabi_dsub
20000624 g     O .bss	00000004 component_fun
20000400 g       *ABS*	00000000 GEC_USER_RAM_START
00008a8c g     F .text	00000364 suart_receive
0000a3d8 g     O .text	00000008 UART_ARR
00009310 g     F .text	00000074 spi_send1
000096f8 g     F .text	00000020 out_char
00009b3c g     F .text	00000714 printk
00006f90  w    F .text	00000002 .hidden __aeabi_ldiv0
0000a29e g     F .text	00000010 memset
00006800 g       .interrupts	000000c0 __isr_vector
000082cc g     F .text	000000c0 main
00008ed8 g     F .text	00000030 suart_get_port_pin
00006ca0  w    F .text	00000006 PIT_IRQHandler
00006ca8 g     F .text	00000000 .hidden __aeabi_uidiv
00006ca0  w    F .text	00000006 SVC_Handler
20000400 g       .data	00000000 __DATA_RAM
20000630 g       .heap	00000000 __end__
00006dbc g     F .text	000001cc .hidden __divsi3
0000a4c8 g       .init_array	00000000 __CTOR_END__
00006ca0  w    F .text	00000006 DMA3_IRQHandler
0000a4c8 g       .init_array	00000000 __DTOR_LIST__
2000062c g       .bss	00000000 __END_BSS
000081b4 g     F .text	00000118 SystemInit
00006ca0  w    F .text	00000006 DMA0_IRQHandler
00007260 g     F .text	00000078 .hidden __nedf2
0000708c g     F .text	0000003c .hidden __fixunsdfdi
0000a4b4 g     F .text	00000000 _fini
00006ca0  w    F .text	00000006 DAC0_IRQHandler
20001800 g       .stack	00000000 __StackTop
00008424 g     F .text	00000090 flash_write_physical
20000400 g       .mtb	00000000 _mtb_end
000087d4 g     F .text	00000040 suart_get
0000a4d0 g       *ABS*	00000000 __DATA_END
000084dc g     F .text	00000072 flash_isempty
00007050 g     F .text	0000003c .hidden __aeabi_d2uiz
00006ca0  w    F .text	00000006 TPM1_IRQHandler
00009494 g     F .text	000000d4 Vectors_Init
20001800 g       *ABS*	00000000 __stack
00006db4 g     F .text	00000008 .hidden __aeabi_uidivmod
00006fb4 g     F .text	0000000c .hidden __aeabi_dcmpeq
20000628 g     O .bss	00000001 gSendFlag
00006ca0  w    F .text	00000006 LVD_LVW_IRQHandler
00009670 g     F .text	00000044 SPI0_IRQHandler
00006ca0  w    F .text	00000006 PORTA_IRQHandler
00006800 g       .interrupts	00000000 __VECTOR_TABLE
0000a4d0 g       .fini_array	00000000 __DATA_ROM
20001700 g       *ABS*	00000000 __StackLimit
00006ca0  w    F .text	00000006 FTFA_IRQHandler
00008098 g     F .text	0000006c .hidden __aeabi_d2iz
20000400 g       .mtb	00000000 _mtb_start
00006ca0  w    F .text	00000006 Reserved40_IRQHandler
00006f90  w    F .text	00000002 .hidden __aeabi_idiv0
00006ca0  w    F .text	00000006 LPTMR0_IRQHandler
000081a4 g     F .text	0000000e strlen
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000072d8 g     F .text	000000e4 .hidden __gedf2
00009568 g     F .text	000000ac uart_send1
00008f08 g     F .text	00000020 wdog_stop
00009614 g     F .text	00000020 uart_is_uartNo
00009384 g     F .text	00000058 spi_sendN
0000818c g     F .text	00000016 .hidden __clzdi2
00006ca0  w    F .text	00000006 CMP0_IRQHandler
00006f88 g     F .text	00000008 .hidden __aeabi_idivmod
000093dc g     F .text	00000038 spi_receive1
00009414 g     F .text	0000005c spi_receiveN
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START
00006ca0  w    F .text	00000006 DMA1_IRQHandler



Disassembly of section .text:

00006c10 <__do_global_dtors_aux>:
__do_global_dtors_aux():
    6c10:	b510      	push	{r4, lr}
    6c12:	4c06      	ldr	r4, [pc, #24]	; (6c2c <__do_global_dtors_aux+0x1c>)
    6c14:	7823      	ldrb	r3, [r4, #0]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d107      	bne.n	6c2a <__do_global_dtors_aux+0x1a>
    6c1a:	4b05      	ldr	r3, [pc, #20]	; (6c30 <__do_global_dtors_aux+0x20>)
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d002      	beq.n	6c26 <__do_global_dtors_aux+0x16>
    6c20:	4804      	ldr	r0, [pc, #16]	; (6c34 <__do_global_dtors_aux+0x24>)
    6c22:	e000      	b.n	6c26 <__do_global_dtors_aux+0x16>
    6c24:	bf00      	nop
    6c26:	2301      	movs	r3, #1
    6c28:	7023      	strb	r3, [r4, #0]
    6c2a:	bd10      	pop	{r4, pc}
    6c2c:	20000400 	.word	0x20000400
    6c30:	00000000 	.word	0x00000000
    6c34:	0000a4a8 	.word	0x0000a4a8

00006c38 <frame_dummy>:
frame_dummy():
    6c38:	4b04      	ldr	r3, [pc, #16]	; (6c4c <frame_dummy+0x14>)
    6c3a:	b510      	push	{r4, lr}
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d003      	beq.n	6c48 <frame_dummy+0x10>
    6c40:	4903      	ldr	r1, [pc, #12]	; (6c50 <frame_dummy+0x18>)
    6c42:	4804      	ldr	r0, [pc, #16]	; (6c54 <frame_dummy+0x1c>)
    6c44:	e000      	b.n	6c48 <frame_dummy+0x10>
    6c46:	bf00      	nop
    6c48:	bd10      	pop	{r4, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	00000000 	.word	0x00000000
    6c50:	20000404 	.word	0x20000404
    6c54:	0000a4a8 	.word	0x0000a4a8

00006c58 <Reset_Handler>:
Reset_Handler():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:118
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
    6c58:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:120
#ifndef __NO_SYSTEM_INIT
    bl SystemInit
    6c5a:	f001 faab 	bl	81b4 <SystemInit>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:122
#endif
    cpsie   i               /* Unmask interrupts */
    6c5e:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:130
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    6c60:	490a      	ldr	r1, [pc, #40]	; (6c8c <Reset_Handler+0x34>)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c62:	4a0b      	ldr	r2, [pc, #44]	; (6c90 <Reset_Handler+0x38>)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c64:	4b0b      	ldr	r3, [pc, #44]	; (6c94 <Reset_Handler+0x3c>)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:134

    subs    r3, r2
    6c66:	1a9b      	subs	r3, r3, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:135
    ble     .LC0
    6c68:	dd03      	ble.n	6c72 <Reset_Handler+0x1a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:138

.LC1:
    subs    r3, 4
    6c6a:	3b04      	subs	r3, #4
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:139
    ldr    r0, [r1,r3]
    6c6c:	58c8      	ldr	r0, [r1, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:140
    str    r0, [r2,r3]
    6c6e:	50d0      	str	r0, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:141
    bgt    .LC1
    6c70:	dcfb      	bgt.n	6c6a <Reset_Handler+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:154
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
    6c72:	4909      	ldr	r1, [pc, #36]	; (6c98 <Reset_Handler+0x40>)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c74:	4a09      	ldr	r2, [pc, #36]	; (6c9c <Reset_Handler+0x44>)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:157

    subs    r2, r1
    6c76:	1a52      	subs	r2, r2, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:158
    ble .LC3
    6c78:	dd03      	ble.n	6c82 <Reset_Handler+0x2a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:160

    movs    r0, 0
    6c7a:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:162
.LC2:
    str r0, [r1, r2]
    6c7c:	5088      	str	r0, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:163
    subs    r2, 4
    6c7e:	3a04      	subs	r2, #4
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:164
    bge .LC2
    6c80:	dafc      	bge.n	6c7c <Reset_Handler+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:173
#define __START _start
#endif


/*【User程序修改处1】*/
	bl	 Vectors_Init  
    6c82:	f002 fc07 	bl	9494 <Vectors_Init>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:175
  //  bl    __START
   bl main
    6c86:	f001 fb21 	bl	82cc <main>
    6c8a:	0000      	.short	0x0000
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:130
    ldr    r1, =__etext
    6c8c:	0000a4d0 	.word	0x0000a4d0
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c90:	20000400 	.word	0x20000400
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c94:	20000400 	.word	0x20000400
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:154
    ldr r1, =__bss_start__
    6c98:	20000400 	.word	0x20000400
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c9c:	2000062c 	.word	0x2000062c

00006ca0 <ADC0_IRQHandler>:
I2C0_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:186
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:    
    //ldr	r0, =DefaultISR   //误中断，进入无限循环
    //bx r0
       push  {lr}        //【20200326】WYH改，误中断，回原处
    6ca0:	b500      	push	{lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:187
       nop
    6ca2:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcs/startup_MKL36Z4.S:188
       pop   {pc}
    6ca4:	bd00      	pop	{pc}
    6ca6:	46c0      	nop			; (mov r8, r8)

00006ca8 <__udivsi3>:
__udivsi3():
    6ca8:	2200      	movs	r2, #0
    6caa:	0843      	lsrs	r3, r0, #1
    6cac:	428b      	cmp	r3, r1
    6cae:	d374      	bcc.n	6d9a <__udivsi3+0xf2>
    6cb0:	0903      	lsrs	r3, r0, #4
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d35f      	bcc.n	6d76 <__udivsi3+0xce>
    6cb6:	0a03      	lsrs	r3, r0, #8
    6cb8:	428b      	cmp	r3, r1
    6cba:	d344      	bcc.n	6d46 <__udivsi3+0x9e>
    6cbc:	0b03      	lsrs	r3, r0, #12
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d328      	bcc.n	6d14 <__udivsi3+0x6c>
    6cc2:	0c03      	lsrs	r3, r0, #16
    6cc4:	428b      	cmp	r3, r1
    6cc6:	d30d      	bcc.n	6ce4 <__udivsi3+0x3c>
    6cc8:	22ff      	movs	r2, #255	; 0xff
    6cca:	0209      	lsls	r1, r1, #8
    6ccc:	ba12      	rev	r2, r2
    6cce:	0c03      	lsrs	r3, r0, #16
    6cd0:	428b      	cmp	r3, r1
    6cd2:	d302      	bcc.n	6cda <__udivsi3+0x32>
    6cd4:	1212      	asrs	r2, r2, #8
    6cd6:	0209      	lsls	r1, r1, #8
    6cd8:	d065      	beq.n	6da6 <__udivsi3+0xfe>
    6cda:	0b03      	lsrs	r3, r0, #12
    6cdc:	428b      	cmp	r3, r1
    6cde:	d319      	bcc.n	6d14 <__udivsi3+0x6c>
    6ce0:	e000      	b.n	6ce4 <__udivsi3+0x3c>
    6ce2:	0a09      	lsrs	r1, r1, #8
    6ce4:	0bc3      	lsrs	r3, r0, #15
    6ce6:	428b      	cmp	r3, r1
    6ce8:	d301      	bcc.n	6cee <__udivsi3+0x46>
    6cea:	03cb      	lsls	r3, r1, #15
    6cec:	1ac0      	subs	r0, r0, r3
    6cee:	4152      	adcs	r2, r2
    6cf0:	0b83      	lsrs	r3, r0, #14
    6cf2:	428b      	cmp	r3, r1
    6cf4:	d301      	bcc.n	6cfa <__udivsi3+0x52>
    6cf6:	038b      	lsls	r3, r1, #14
    6cf8:	1ac0      	subs	r0, r0, r3
    6cfa:	4152      	adcs	r2, r2
    6cfc:	0b43      	lsrs	r3, r0, #13
    6cfe:	428b      	cmp	r3, r1
    6d00:	d301      	bcc.n	6d06 <__udivsi3+0x5e>
    6d02:	034b      	lsls	r3, r1, #13
    6d04:	1ac0      	subs	r0, r0, r3
    6d06:	4152      	adcs	r2, r2
    6d08:	0b03      	lsrs	r3, r0, #12
    6d0a:	428b      	cmp	r3, r1
    6d0c:	d301      	bcc.n	6d12 <__udivsi3+0x6a>
    6d0e:	030b      	lsls	r3, r1, #12
    6d10:	1ac0      	subs	r0, r0, r3
    6d12:	4152      	adcs	r2, r2
    6d14:	0ac3      	lsrs	r3, r0, #11
    6d16:	428b      	cmp	r3, r1
    6d18:	d301      	bcc.n	6d1e <__udivsi3+0x76>
    6d1a:	02cb      	lsls	r3, r1, #11
    6d1c:	1ac0      	subs	r0, r0, r3
    6d1e:	4152      	adcs	r2, r2
    6d20:	0a83      	lsrs	r3, r0, #10
    6d22:	428b      	cmp	r3, r1
    6d24:	d301      	bcc.n	6d2a <__udivsi3+0x82>
    6d26:	028b      	lsls	r3, r1, #10
    6d28:	1ac0      	subs	r0, r0, r3
    6d2a:	4152      	adcs	r2, r2
    6d2c:	0a43      	lsrs	r3, r0, #9
    6d2e:	428b      	cmp	r3, r1
    6d30:	d301      	bcc.n	6d36 <__udivsi3+0x8e>
    6d32:	024b      	lsls	r3, r1, #9
    6d34:	1ac0      	subs	r0, r0, r3
    6d36:	4152      	adcs	r2, r2
    6d38:	0a03      	lsrs	r3, r0, #8
    6d3a:	428b      	cmp	r3, r1
    6d3c:	d301      	bcc.n	6d42 <__udivsi3+0x9a>
    6d3e:	020b      	lsls	r3, r1, #8
    6d40:	1ac0      	subs	r0, r0, r3
    6d42:	4152      	adcs	r2, r2
    6d44:	d2cd      	bcs.n	6ce2 <__udivsi3+0x3a>
    6d46:	09c3      	lsrs	r3, r0, #7
    6d48:	428b      	cmp	r3, r1
    6d4a:	d301      	bcc.n	6d50 <__udivsi3+0xa8>
    6d4c:	01cb      	lsls	r3, r1, #7
    6d4e:	1ac0      	subs	r0, r0, r3
    6d50:	4152      	adcs	r2, r2
    6d52:	0983      	lsrs	r3, r0, #6
    6d54:	428b      	cmp	r3, r1
    6d56:	d301      	bcc.n	6d5c <__udivsi3+0xb4>
    6d58:	018b      	lsls	r3, r1, #6
    6d5a:	1ac0      	subs	r0, r0, r3
    6d5c:	4152      	adcs	r2, r2
    6d5e:	0943      	lsrs	r3, r0, #5
    6d60:	428b      	cmp	r3, r1
    6d62:	d301      	bcc.n	6d68 <__udivsi3+0xc0>
    6d64:	014b      	lsls	r3, r1, #5
    6d66:	1ac0      	subs	r0, r0, r3
    6d68:	4152      	adcs	r2, r2
    6d6a:	0903      	lsrs	r3, r0, #4
    6d6c:	428b      	cmp	r3, r1
    6d6e:	d301      	bcc.n	6d74 <__udivsi3+0xcc>
    6d70:	010b      	lsls	r3, r1, #4
    6d72:	1ac0      	subs	r0, r0, r3
    6d74:	4152      	adcs	r2, r2
    6d76:	08c3      	lsrs	r3, r0, #3
    6d78:	428b      	cmp	r3, r1
    6d7a:	d301      	bcc.n	6d80 <__udivsi3+0xd8>
    6d7c:	00cb      	lsls	r3, r1, #3
    6d7e:	1ac0      	subs	r0, r0, r3
    6d80:	4152      	adcs	r2, r2
    6d82:	0883      	lsrs	r3, r0, #2
    6d84:	428b      	cmp	r3, r1
    6d86:	d301      	bcc.n	6d8c <__udivsi3+0xe4>
    6d88:	008b      	lsls	r3, r1, #2
    6d8a:	1ac0      	subs	r0, r0, r3
    6d8c:	4152      	adcs	r2, r2
    6d8e:	0843      	lsrs	r3, r0, #1
    6d90:	428b      	cmp	r3, r1
    6d92:	d301      	bcc.n	6d98 <__udivsi3+0xf0>
    6d94:	004b      	lsls	r3, r1, #1
    6d96:	1ac0      	subs	r0, r0, r3
    6d98:	4152      	adcs	r2, r2
    6d9a:	1a41      	subs	r1, r0, r1
    6d9c:	d200      	bcs.n	6da0 <__udivsi3+0xf8>
    6d9e:	4601      	mov	r1, r0
    6da0:	4152      	adcs	r2, r2
    6da2:	4610      	mov	r0, r2
    6da4:	4770      	bx	lr
    6da6:	e7ff      	b.n	6da8 <__udivsi3+0x100>
    6da8:	b501      	push	{r0, lr}
    6daa:	2000      	movs	r0, #0
    6dac:	f000 f8f0 	bl	6f90 <__aeabi_idiv0>
    6db0:	bd02      	pop	{r1, pc}
    6db2:	46c0      	nop			; (mov r8, r8)

00006db4 <__aeabi_uidivmod>:
__aeabi_uidivmod():
    6db4:	2900      	cmp	r1, #0
    6db6:	d0f7      	beq.n	6da8 <__udivsi3+0x100>
    6db8:	e776      	b.n	6ca8 <__udivsi3>
    6dba:	4770      	bx	lr

00006dbc <__divsi3>:
__divsi3():
    6dbc:	4603      	mov	r3, r0
    6dbe:	430b      	orrs	r3, r1
    6dc0:	d47f      	bmi.n	6ec2 <__divsi3+0x106>
    6dc2:	2200      	movs	r2, #0
    6dc4:	0843      	lsrs	r3, r0, #1
    6dc6:	428b      	cmp	r3, r1
    6dc8:	d374      	bcc.n	6eb4 <__divsi3+0xf8>
    6dca:	0903      	lsrs	r3, r0, #4
    6dcc:	428b      	cmp	r3, r1
    6dce:	d35f      	bcc.n	6e90 <__divsi3+0xd4>
    6dd0:	0a03      	lsrs	r3, r0, #8
    6dd2:	428b      	cmp	r3, r1
    6dd4:	d344      	bcc.n	6e60 <__divsi3+0xa4>
    6dd6:	0b03      	lsrs	r3, r0, #12
    6dd8:	428b      	cmp	r3, r1
    6dda:	d328      	bcc.n	6e2e <__divsi3+0x72>
    6ddc:	0c03      	lsrs	r3, r0, #16
    6dde:	428b      	cmp	r3, r1
    6de0:	d30d      	bcc.n	6dfe <__divsi3+0x42>
    6de2:	22ff      	movs	r2, #255	; 0xff
    6de4:	0209      	lsls	r1, r1, #8
    6de6:	ba12      	rev	r2, r2
    6de8:	0c03      	lsrs	r3, r0, #16
    6dea:	428b      	cmp	r3, r1
    6dec:	d302      	bcc.n	6df4 <__divsi3+0x38>
    6dee:	1212      	asrs	r2, r2, #8
    6df0:	0209      	lsls	r1, r1, #8
    6df2:	d065      	beq.n	6ec0 <__divsi3+0x104>
    6df4:	0b03      	lsrs	r3, r0, #12
    6df6:	428b      	cmp	r3, r1
    6df8:	d319      	bcc.n	6e2e <__divsi3+0x72>
    6dfa:	e000      	b.n	6dfe <__divsi3+0x42>
    6dfc:	0a09      	lsrs	r1, r1, #8
    6dfe:	0bc3      	lsrs	r3, r0, #15
    6e00:	428b      	cmp	r3, r1
    6e02:	d301      	bcc.n	6e08 <__divsi3+0x4c>
    6e04:	03cb      	lsls	r3, r1, #15
    6e06:	1ac0      	subs	r0, r0, r3
    6e08:	4152      	adcs	r2, r2
    6e0a:	0b83      	lsrs	r3, r0, #14
    6e0c:	428b      	cmp	r3, r1
    6e0e:	d301      	bcc.n	6e14 <__divsi3+0x58>
    6e10:	038b      	lsls	r3, r1, #14
    6e12:	1ac0      	subs	r0, r0, r3
    6e14:	4152      	adcs	r2, r2
    6e16:	0b43      	lsrs	r3, r0, #13
    6e18:	428b      	cmp	r3, r1
    6e1a:	d301      	bcc.n	6e20 <__divsi3+0x64>
    6e1c:	034b      	lsls	r3, r1, #13
    6e1e:	1ac0      	subs	r0, r0, r3
    6e20:	4152      	adcs	r2, r2
    6e22:	0b03      	lsrs	r3, r0, #12
    6e24:	428b      	cmp	r3, r1
    6e26:	d301      	bcc.n	6e2c <__divsi3+0x70>
    6e28:	030b      	lsls	r3, r1, #12
    6e2a:	1ac0      	subs	r0, r0, r3
    6e2c:	4152      	adcs	r2, r2
    6e2e:	0ac3      	lsrs	r3, r0, #11
    6e30:	428b      	cmp	r3, r1
    6e32:	d301      	bcc.n	6e38 <__divsi3+0x7c>
    6e34:	02cb      	lsls	r3, r1, #11
    6e36:	1ac0      	subs	r0, r0, r3
    6e38:	4152      	adcs	r2, r2
    6e3a:	0a83      	lsrs	r3, r0, #10
    6e3c:	428b      	cmp	r3, r1
    6e3e:	d301      	bcc.n	6e44 <__divsi3+0x88>
    6e40:	028b      	lsls	r3, r1, #10
    6e42:	1ac0      	subs	r0, r0, r3
    6e44:	4152      	adcs	r2, r2
    6e46:	0a43      	lsrs	r3, r0, #9
    6e48:	428b      	cmp	r3, r1
    6e4a:	d301      	bcc.n	6e50 <__divsi3+0x94>
    6e4c:	024b      	lsls	r3, r1, #9
    6e4e:	1ac0      	subs	r0, r0, r3
    6e50:	4152      	adcs	r2, r2
    6e52:	0a03      	lsrs	r3, r0, #8
    6e54:	428b      	cmp	r3, r1
    6e56:	d301      	bcc.n	6e5c <__divsi3+0xa0>
    6e58:	020b      	lsls	r3, r1, #8
    6e5a:	1ac0      	subs	r0, r0, r3
    6e5c:	4152      	adcs	r2, r2
    6e5e:	d2cd      	bcs.n	6dfc <__divsi3+0x40>
    6e60:	09c3      	lsrs	r3, r0, #7
    6e62:	428b      	cmp	r3, r1
    6e64:	d301      	bcc.n	6e6a <__divsi3+0xae>
    6e66:	01cb      	lsls	r3, r1, #7
    6e68:	1ac0      	subs	r0, r0, r3
    6e6a:	4152      	adcs	r2, r2
    6e6c:	0983      	lsrs	r3, r0, #6
    6e6e:	428b      	cmp	r3, r1
    6e70:	d301      	bcc.n	6e76 <__divsi3+0xba>
    6e72:	018b      	lsls	r3, r1, #6
    6e74:	1ac0      	subs	r0, r0, r3
    6e76:	4152      	adcs	r2, r2
    6e78:	0943      	lsrs	r3, r0, #5
    6e7a:	428b      	cmp	r3, r1
    6e7c:	d301      	bcc.n	6e82 <__divsi3+0xc6>
    6e7e:	014b      	lsls	r3, r1, #5
    6e80:	1ac0      	subs	r0, r0, r3
    6e82:	4152      	adcs	r2, r2
    6e84:	0903      	lsrs	r3, r0, #4
    6e86:	428b      	cmp	r3, r1
    6e88:	d301      	bcc.n	6e8e <__divsi3+0xd2>
    6e8a:	010b      	lsls	r3, r1, #4
    6e8c:	1ac0      	subs	r0, r0, r3
    6e8e:	4152      	adcs	r2, r2
    6e90:	08c3      	lsrs	r3, r0, #3
    6e92:	428b      	cmp	r3, r1
    6e94:	d301      	bcc.n	6e9a <__divsi3+0xde>
    6e96:	00cb      	lsls	r3, r1, #3
    6e98:	1ac0      	subs	r0, r0, r3
    6e9a:	4152      	adcs	r2, r2
    6e9c:	0883      	lsrs	r3, r0, #2
    6e9e:	428b      	cmp	r3, r1
    6ea0:	d301      	bcc.n	6ea6 <__divsi3+0xea>
    6ea2:	008b      	lsls	r3, r1, #2
    6ea4:	1ac0      	subs	r0, r0, r3
    6ea6:	4152      	adcs	r2, r2
    6ea8:	0843      	lsrs	r3, r0, #1
    6eaa:	428b      	cmp	r3, r1
    6eac:	d301      	bcc.n	6eb2 <__divsi3+0xf6>
    6eae:	004b      	lsls	r3, r1, #1
    6eb0:	1ac0      	subs	r0, r0, r3
    6eb2:	4152      	adcs	r2, r2
    6eb4:	1a41      	subs	r1, r0, r1
    6eb6:	d200      	bcs.n	6eba <__divsi3+0xfe>
    6eb8:	4601      	mov	r1, r0
    6eba:	4152      	adcs	r2, r2
    6ebc:	4610      	mov	r0, r2
    6ebe:	4770      	bx	lr
    6ec0:	e05d      	b.n	6f7e <__divsi3+0x1c2>
    6ec2:	0fca      	lsrs	r2, r1, #31
    6ec4:	d000      	beq.n	6ec8 <__divsi3+0x10c>
    6ec6:	4249      	negs	r1, r1
    6ec8:	1003      	asrs	r3, r0, #32
    6eca:	d300      	bcc.n	6ece <__divsi3+0x112>
    6ecc:	4240      	negs	r0, r0
    6ece:	4053      	eors	r3, r2
    6ed0:	2200      	movs	r2, #0
    6ed2:	469c      	mov	ip, r3
    6ed4:	0903      	lsrs	r3, r0, #4
    6ed6:	428b      	cmp	r3, r1
    6ed8:	d32d      	bcc.n	6f36 <__divsi3+0x17a>
    6eda:	0a03      	lsrs	r3, r0, #8
    6edc:	428b      	cmp	r3, r1
    6ede:	d312      	bcc.n	6f06 <__divsi3+0x14a>
    6ee0:	22fc      	movs	r2, #252	; 0xfc
    6ee2:	0189      	lsls	r1, r1, #6
    6ee4:	ba12      	rev	r2, r2
    6ee6:	0a03      	lsrs	r3, r0, #8
    6ee8:	428b      	cmp	r3, r1
    6eea:	d30c      	bcc.n	6f06 <__divsi3+0x14a>
    6eec:	0189      	lsls	r1, r1, #6
    6eee:	1192      	asrs	r2, r2, #6
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d308      	bcc.n	6f06 <__divsi3+0x14a>
    6ef4:	0189      	lsls	r1, r1, #6
    6ef6:	1192      	asrs	r2, r2, #6
    6ef8:	428b      	cmp	r3, r1
    6efa:	d304      	bcc.n	6f06 <__divsi3+0x14a>
    6efc:	0189      	lsls	r1, r1, #6
    6efe:	d03a      	beq.n	6f76 <__divsi3+0x1ba>
    6f00:	1192      	asrs	r2, r2, #6
    6f02:	e000      	b.n	6f06 <__divsi3+0x14a>
    6f04:	0989      	lsrs	r1, r1, #6
    6f06:	09c3      	lsrs	r3, r0, #7
    6f08:	428b      	cmp	r3, r1
    6f0a:	d301      	bcc.n	6f10 <__divsi3+0x154>
    6f0c:	01cb      	lsls	r3, r1, #7
    6f0e:	1ac0      	subs	r0, r0, r3
    6f10:	4152      	adcs	r2, r2
    6f12:	0983      	lsrs	r3, r0, #6
    6f14:	428b      	cmp	r3, r1
    6f16:	d301      	bcc.n	6f1c <__divsi3+0x160>
    6f18:	018b      	lsls	r3, r1, #6
    6f1a:	1ac0      	subs	r0, r0, r3
    6f1c:	4152      	adcs	r2, r2
    6f1e:	0943      	lsrs	r3, r0, #5
    6f20:	428b      	cmp	r3, r1
    6f22:	d301      	bcc.n	6f28 <__divsi3+0x16c>
    6f24:	014b      	lsls	r3, r1, #5
    6f26:	1ac0      	subs	r0, r0, r3
    6f28:	4152      	adcs	r2, r2
    6f2a:	0903      	lsrs	r3, r0, #4
    6f2c:	428b      	cmp	r3, r1
    6f2e:	d301      	bcc.n	6f34 <__divsi3+0x178>
    6f30:	010b      	lsls	r3, r1, #4
    6f32:	1ac0      	subs	r0, r0, r3
    6f34:	4152      	adcs	r2, r2
    6f36:	08c3      	lsrs	r3, r0, #3
    6f38:	428b      	cmp	r3, r1
    6f3a:	d301      	bcc.n	6f40 <__divsi3+0x184>
    6f3c:	00cb      	lsls	r3, r1, #3
    6f3e:	1ac0      	subs	r0, r0, r3
    6f40:	4152      	adcs	r2, r2
    6f42:	0883      	lsrs	r3, r0, #2
    6f44:	428b      	cmp	r3, r1
    6f46:	d301      	bcc.n	6f4c <__divsi3+0x190>
    6f48:	008b      	lsls	r3, r1, #2
    6f4a:	1ac0      	subs	r0, r0, r3
    6f4c:	4152      	adcs	r2, r2
    6f4e:	d2d9      	bcs.n	6f04 <__divsi3+0x148>
    6f50:	0843      	lsrs	r3, r0, #1
    6f52:	428b      	cmp	r3, r1
    6f54:	d301      	bcc.n	6f5a <__divsi3+0x19e>
    6f56:	004b      	lsls	r3, r1, #1
    6f58:	1ac0      	subs	r0, r0, r3
    6f5a:	4152      	adcs	r2, r2
    6f5c:	1a41      	subs	r1, r0, r1
    6f5e:	d200      	bcs.n	6f62 <__divsi3+0x1a6>
    6f60:	4601      	mov	r1, r0
    6f62:	4663      	mov	r3, ip
    6f64:	4152      	adcs	r2, r2
    6f66:	105b      	asrs	r3, r3, #1
    6f68:	4610      	mov	r0, r2
    6f6a:	d301      	bcc.n	6f70 <__divsi3+0x1b4>
    6f6c:	4240      	negs	r0, r0
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d500      	bpl.n	6f74 <__divsi3+0x1b8>
    6f72:	4249      	negs	r1, r1
    6f74:	4770      	bx	lr
    6f76:	4663      	mov	r3, ip
    6f78:	105b      	asrs	r3, r3, #1
    6f7a:	d300      	bcc.n	6f7e <__divsi3+0x1c2>
    6f7c:	4240      	negs	r0, r0
    6f7e:	b501      	push	{r0, lr}
    6f80:	2000      	movs	r0, #0
    6f82:	f000 f805 	bl	6f90 <__aeabi_idiv0>
    6f86:	bd02      	pop	{r1, pc}

00006f88 <__aeabi_idivmod>:
__aeabi_idivmod():
    6f88:	2900      	cmp	r1, #0
    6f8a:	d0f8      	beq.n	6f7e <__divsi3+0x1c2>
    6f8c:	e716      	b.n	6dbc <__divsi3>
    6f8e:	4770      	bx	lr

00006f90 <__aeabi_idiv0>:
__aeabi_ldiv0():
    6f90:	4770      	bx	lr
    6f92:	46c0      	nop			; (mov r8, r8)

00006f94 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
    6f94:	4684      	mov	ip, r0
    6f96:	1c10      	adds	r0, r2, #0
    6f98:	4662      	mov	r2, ip
    6f9a:	468c      	mov	ip, r1
    6f9c:	1c19      	adds	r1, r3, #0
    6f9e:	4663      	mov	r3, ip
    6fa0:	e000      	b.n	6fa4 <__aeabi_cdcmpeq>
    6fa2:	46c0      	nop			; (mov r8, r8)

00006fa4 <__aeabi_cdcmpeq>:
    6fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6fa6:	f000 fa09 	bl	73bc <__ledf2>
    6faa:	2800      	cmp	r0, #0
    6fac:	d401      	bmi.n	6fb2 <__aeabi_cdcmpeq+0xe>
    6fae:	2100      	movs	r1, #0
    6fb0:	42c8      	cmn	r0, r1
    6fb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006fb4 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
    6fb4:	b510      	push	{r4, lr}
    6fb6:	f000 f953 	bl	7260 <__eqdf2>
    6fba:	4240      	negs	r0, r0
    6fbc:	3001      	adds	r0, #1
    6fbe:	bd10      	pop	{r4, pc}

00006fc0 <__aeabi_dcmplt>:
__aeabi_dcmplt():
    6fc0:	b510      	push	{r4, lr}
    6fc2:	f000 f9fb 	bl	73bc <__ledf2>
    6fc6:	2800      	cmp	r0, #0
    6fc8:	db01      	blt.n	6fce <__aeabi_dcmplt+0xe>
    6fca:	2000      	movs	r0, #0
    6fcc:	bd10      	pop	{r4, pc}
    6fce:	2001      	movs	r0, #1
    6fd0:	bd10      	pop	{r4, pc}
    6fd2:	46c0      	nop			; (mov r8, r8)

00006fd4 <__aeabi_dcmple>:
__aeabi_dcmple():
    6fd4:	b510      	push	{r4, lr}
    6fd6:	f000 f9f1 	bl	73bc <__ledf2>
    6fda:	2800      	cmp	r0, #0
    6fdc:	dd01      	ble.n	6fe2 <__aeabi_dcmple+0xe>
    6fde:	2000      	movs	r0, #0
    6fe0:	bd10      	pop	{r4, pc}
    6fe2:	2001      	movs	r0, #1
    6fe4:	bd10      	pop	{r4, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)

00006fe8 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
    6fe8:	b510      	push	{r4, lr}
    6fea:	f000 f975 	bl	72d8 <__gedf2>
    6fee:	2800      	cmp	r0, #0
    6ff0:	dc01      	bgt.n	6ff6 <__aeabi_dcmpgt+0xe>
    6ff2:	2000      	movs	r0, #0
    6ff4:	bd10      	pop	{r4, pc}
    6ff6:	2001      	movs	r0, #1
    6ff8:	bd10      	pop	{r4, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)

00006ffc <__aeabi_dcmpge>:
__aeabi_dcmpge():
    6ffc:	b510      	push	{r4, lr}
    6ffe:	f000 f96b 	bl	72d8 <__gedf2>
    7002:	2800      	cmp	r0, #0
    7004:	da01      	bge.n	700a <__aeabi_dcmpge+0xe>
    7006:	2000      	movs	r0, #0
    7008:	bd10      	pop	{r4, pc}
    700a:	2001      	movs	r0, #1
    700c:	bd10      	pop	{r4, pc}
    700e:	46c0      	nop			; (mov r8, r8)

00007010 <__aeabi_uldivmod>:
__aeabi_uldivmod():
    7010:	2b00      	cmp	r3, #0
    7012:	d111      	bne.n	7038 <__aeabi_uldivmod+0x28>
    7014:	2a00      	cmp	r2, #0
    7016:	d10f      	bne.n	7038 <__aeabi_uldivmod+0x28>
    7018:	2900      	cmp	r1, #0
    701a:	d100      	bne.n	701e <__aeabi_uldivmod+0xe>
    701c:	2800      	cmp	r0, #0
    701e:	d002      	beq.n	7026 <__aeabi_uldivmod+0x16>
    7020:	2100      	movs	r1, #0
    7022:	43c9      	mvns	r1, r1
    7024:	1c08      	adds	r0, r1, #0
    7026:	b407      	push	{r0, r1, r2}
    7028:	4802      	ldr	r0, [pc, #8]	; (7034 <__aeabi_uldivmod+0x24>)
    702a:	a102      	add	r1, pc, #8	; (adr r1, 7034 <__aeabi_uldivmod+0x24>)
    702c:	1840      	adds	r0, r0, r1
    702e:	9002      	str	r0, [sp, #8]
    7030:	bd03      	pop	{r0, r1, pc}
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	ffffff5d 	.word	0xffffff5d
    7038:	b403      	push	{r0, r1}
    703a:	4668      	mov	r0, sp
    703c:	b501      	push	{r0, lr}
    703e:	9802      	ldr	r0, [sp, #8]
    7040:	f000 f842 	bl	70c8 <__udivmoddi4>
    7044:	9b01      	ldr	r3, [sp, #4]
    7046:	469e      	mov	lr, r3
    7048:	b002      	add	sp, #8
    704a:	bc0c      	pop	{r2, r3}
    704c:	4770      	bx	lr
    704e:	46c0      	nop			; (mov r8, r8)

00007050 <__aeabi_d2uiz>:
__fixunsdfsi():
    7050:	b570      	push	{r4, r5, r6, lr}
    7052:	2200      	movs	r2, #0
    7054:	4b0c      	ldr	r3, [pc, #48]	; (7088 <__aeabi_d2uiz+0x38>)
    7056:	0004      	movs	r4, r0
    7058:	000d      	movs	r5, r1
    705a:	f7ff ffcf 	bl	6ffc <__aeabi_dcmpge>
    705e:	2800      	cmp	r0, #0
    7060:	d104      	bne.n	706c <__aeabi_d2uiz+0x1c>
    7062:	0020      	movs	r0, r4
    7064:	0029      	movs	r1, r5
    7066:	f001 f817 	bl	8098 <__aeabi_d2iz>
    706a:	bd70      	pop	{r4, r5, r6, pc}
    706c:	4b06      	ldr	r3, [pc, #24]	; (7088 <__aeabi_d2uiz+0x38>)
    706e:	2200      	movs	r2, #0
    7070:	0020      	movs	r0, r4
    7072:	0029      	movs	r1, r5
    7074:	f000 fc7e 	bl	7974 <__aeabi_dsub>
    7078:	f001 f80e 	bl	8098 <__aeabi_d2iz>
    707c:	2380      	movs	r3, #128	; 0x80
    707e:	061b      	lsls	r3, r3, #24
    7080:	469c      	mov	ip, r3
    7082:	4460      	add	r0, ip
    7084:	e7f1      	b.n	706a <__aeabi_d2uiz+0x1a>
    7086:	46c0      	nop			; (mov r8, r8)
    7088:	41e00000 	.word	0x41e00000

0000708c <__aeabi_d2ulz>:
__aeabi_d2ulz():
    708c:	b570      	push	{r4, r5, r6, lr}
    708e:	2200      	movs	r2, #0
    7090:	4b0b      	ldr	r3, [pc, #44]	; (70c0 <__aeabi_d2ulz+0x34>)
    7092:	000d      	movs	r5, r1
    7094:	0004      	movs	r4, r0
    7096:	f000 fa01 	bl	749c <__aeabi_dmul>
    709a:	f7ff ffd9 	bl	7050 <__aeabi_d2uiz>
    709e:	0006      	movs	r6, r0
    70a0:	f001 f830 	bl	8104 <__aeabi_ui2d>
    70a4:	2200      	movs	r2, #0
    70a6:	4b07      	ldr	r3, [pc, #28]	; (70c4 <__aeabi_d2ulz+0x38>)
    70a8:	f000 f9f8 	bl	749c <__aeabi_dmul>
    70ac:	0002      	movs	r2, r0
    70ae:	000b      	movs	r3, r1
    70b0:	0020      	movs	r0, r4
    70b2:	0029      	movs	r1, r5
    70b4:	f000 fc5e 	bl	7974 <__aeabi_dsub>
    70b8:	f7ff ffca 	bl	7050 <__aeabi_d2uiz>
    70bc:	0031      	movs	r1, r6
    70be:	bd70      	pop	{r4, r5, r6, pc}
    70c0:	3df00000 	.word	0x3df00000
    70c4:	41f00000 	.word	0x41f00000

000070c8 <__udivmoddi4>:
__udivmoddi4():
    70c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ca:	4657      	mov	r7, sl
    70cc:	464e      	mov	r6, r9
    70ce:	4645      	mov	r5, r8
    70d0:	46de      	mov	lr, fp
    70d2:	b5e0      	push	{r5, r6, r7, lr}
    70d4:	0004      	movs	r4, r0
    70d6:	000d      	movs	r5, r1
    70d8:	4692      	mov	sl, r2
    70da:	4699      	mov	r9, r3
    70dc:	b083      	sub	sp, #12
    70de:	428b      	cmp	r3, r1
    70e0:	d830      	bhi.n	7144 <__udivmoddi4+0x7c>
    70e2:	d02d      	beq.n	7140 <__udivmoddi4+0x78>
    70e4:	4649      	mov	r1, r9
    70e6:	4650      	mov	r0, sl
    70e8:	f001 f850 	bl	818c <__clzdi2>
    70ec:	0029      	movs	r1, r5
    70ee:	0006      	movs	r6, r0
    70f0:	0020      	movs	r0, r4
    70f2:	f001 f84b 	bl	818c <__clzdi2>
    70f6:	1a33      	subs	r3, r6, r0
    70f8:	4698      	mov	r8, r3
    70fa:	3b20      	subs	r3, #32
    70fc:	469b      	mov	fp, r3
    70fe:	d433      	bmi.n	7168 <__udivmoddi4+0xa0>
    7100:	465a      	mov	r2, fp
    7102:	4653      	mov	r3, sl
    7104:	4093      	lsls	r3, r2
    7106:	4642      	mov	r2, r8
    7108:	001f      	movs	r7, r3
    710a:	4653      	mov	r3, sl
    710c:	4093      	lsls	r3, r2
    710e:	001e      	movs	r6, r3
    7110:	42af      	cmp	r7, r5
    7112:	d83a      	bhi.n	718a <__udivmoddi4+0xc2>
    7114:	42af      	cmp	r7, r5
    7116:	d100      	bne.n	711a <__udivmoddi4+0x52>
    7118:	e078      	b.n	720c <__udivmoddi4+0x144>
    711a:	465b      	mov	r3, fp
    711c:	1ba4      	subs	r4, r4, r6
    711e:	41bd      	sbcs	r5, r7
    7120:	2b00      	cmp	r3, #0
    7122:	da00      	bge.n	7126 <__udivmoddi4+0x5e>
    7124:	e075      	b.n	7212 <__udivmoddi4+0x14a>
    7126:	2200      	movs	r2, #0
    7128:	2300      	movs	r3, #0
    712a:	9200      	str	r2, [sp, #0]
    712c:	9301      	str	r3, [sp, #4]
    712e:	2301      	movs	r3, #1
    7130:	465a      	mov	r2, fp
    7132:	4093      	lsls	r3, r2
    7134:	9301      	str	r3, [sp, #4]
    7136:	2301      	movs	r3, #1
    7138:	4642      	mov	r2, r8
    713a:	4093      	lsls	r3, r2
    713c:	9300      	str	r3, [sp, #0]
    713e:	e028      	b.n	7192 <__udivmoddi4+0xca>
    7140:	4282      	cmp	r2, r0
    7142:	d9cf      	bls.n	70e4 <__udivmoddi4+0x1c>
    7144:	2200      	movs	r2, #0
    7146:	2300      	movs	r3, #0
    7148:	9200      	str	r2, [sp, #0]
    714a:	9301      	str	r3, [sp, #4]
    714c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    714e:	2b00      	cmp	r3, #0
    7150:	d001      	beq.n	7156 <__udivmoddi4+0x8e>
    7152:	601c      	str	r4, [r3, #0]
    7154:	605d      	str	r5, [r3, #4]
    7156:	9800      	ldr	r0, [sp, #0]
    7158:	9901      	ldr	r1, [sp, #4]
    715a:	b003      	add	sp, #12
    715c:	bcf0      	pop	{r4, r5, r6, r7}
    715e:	46bb      	mov	fp, r7
    7160:	46b2      	mov	sl, r6
    7162:	46a9      	mov	r9, r5
    7164:	46a0      	mov	r8, r4
    7166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7168:	4642      	mov	r2, r8
    716a:	2320      	movs	r3, #32
    716c:	1a9b      	subs	r3, r3, r2
    716e:	4652      	mov	r2, sl
    7170:	40da      	lsrs	r2, r3
    7172:	4641      	mov	r1, r8
    7174:	0013      	movs	r3, r2
    7176:	464a      	mov	r2, r9
    7178:	408a      	lsls	r2, r1
    717a:	0017      	movs	r7, r2
    717c:	4642      	mov	r2, r8
    717e:	431f      	orrs	r7, r3
    7180:	4653      	mov	r3, sl
    7182:	4093      	lsls	r3, r2
    7184:	001e      	movs	r6, r3
    7186:	42af      	cmp	r7, r5
    7188:	d9c4      	bls.n	7114 <__udivmoddi4+0x4c>
    718a:	2200      	movs	r2, #0
    718c:	2300      	movs	r3, #0
    718e:	9200      	str	r2, [sp, #0]
    7190:	9301      	str	r3, [sp, #4]
    7192:	4643      	mov	r3, r8
    7194:	2b00      	cmp	r3, #0
    7196:	d0d9      	beq.n	714c <__udivmoddi4+0x84>
    7198:	07fb      	lsls	r3, r7, #31
    719a:	0872      	lsrs	r2, r6, #1
    719c:	431a      	orrs	r2, r3
    719e:	4646      	mov	r6, r8
    71a0:	087b      	lsrs	r3, r7, #1
    71a2:	e00e      	b.n	71c2 <__udivmoddi4+0xfa>
    71a4:	42ab      	cmp	r3, r5
    71a6:	d101      	bne.n	71ac <__udivmoddi4+0xe4>
    71a8:	42a2      	cmp	r2, r4
    71aa:	d80c      	bhi.n	71c6 <__udivmoddi4+0xfe>
    71ac:	1aa4      	subs	r4, r4, r2
    71ae:	419d      	sbcs	r5, r3
    71b0:	2001      	movs	r0, #1
    71b2:	1924      	adds	r4, r4, r4
    71b4:	416d      	adcs	r5, r5
    71b6:	2100      	movs	r1, #0
    71b8:	3e01      	subs	r6, #1
    71ba:	1824      	adds	r4, r4, r0
    71bc:	414d      	adcs	r5, r1
    71be:	2e00      	cmp	r6, #0
    71c0:	d006      	beq.n	71d0 <__udivmoddi4+0x108>
    71c2:	42ab      	cmp	r3, r5
    71c4:	d9ee      	bls.n	71a4 <__udivmoddi4+0xdc>
    71c6:	3e01      	subs	r6, #1
    71c8:	1924      	adds	r4, r4, r4
    71ca:	416d      	adcs	r5, r5
    71cc:	2e00      	cmp	r6, #0
    71ce:	d1f8      	bne.n	71c2 <__udivmoddi4+0xfa>
    71d0:	9800      	ldr	r0, [sp, #0]
    71d2:	9901      	ldr	r1, [sp, #4]
    71d4:	465b      	mov	r3, fp
    71d6:	1900      	adds	r0, r0, r4
    71d8:	4169      	adcs	r1, r5
    71da:	2b00      	cmp	r3, #0
    71dc:	db24      	blt.n	7228 <__udivmoddi4+0x160>
    71de:	002b      	movs	r3, r5
    71e0:	465a      	mov	r2, fp
    71e2:	4644      	mov	r4, r8
    71e4:	40d3      	lsrs	r3, r2
    71e6:	002a      	movs	r2, r5
    71e8:	40e2      	lsrs	r2, r4
    71ea:	001c      	movs	r4, r3
    71ec:	465b      	mov	r3, fp
    71ee:	0015      	movs	r5, r2
    71f0:	2b00      	cmp	r3, #0
    71f2:	db2a      	blt.n	724a <__udivmoddi4+0x182>
    71f4:	0026      	movs	r6, r4
    71f6:	409e      	lsls	r6, r3
    71f8:	0033      	movs	r3, r6
    71fa:	0026      	movs	r6, r4
    71fc:	4647      	mov	r7, r8
    71fe:	40be      	lsls	r6, r7
    7200:	0032      	movs	r2, r6
    7202:	1a80      	subs	r0, r0, r2
    7204:	4199      	sbcs	r1, r3
    7206:	9000      	str	r0, [sp, #0]
    7208:	9101      	str	r1, [sp, #4]
    720a:	e79f      	b.n	714c <__udivmoddi4+0x84>
    720c:	42a3      	cmp	r3, r4
    720e:	d8bc      	bhi.n	718a <__udivmoddi4+0xc2>
    7210:	e783      	b.n	711a <__udivmoddi4+0x52>
    7212:	4642      	mov	r2, r8
    7214:	2320      	movs	r3, #32
    7216:	2100      	movs	r1, #0
    7218:	1a9b      	subs	r3, r3, r2
    721a:	2200      	movs	r2, #0
    721c:	9100      	str	r1, [sp, #0]
    721e:	9201      	str	r2, [sp, #4]
    7220:	2201      	movs	r2, #1
    7222:	40da      	lsrs	r2, r3
    7224:	9201      	str	r2, [sp, #4]
    7226:	e786      	b.n	7136 <__udivmoddi4+0x6e>
    7228:	4642      	mov	r2, r8
    722a:	2320      	movs	r3, #32
    722c:	1a9b      	subs	r3, r3, r2
    722e:	002a      	movs	r2, r5
    7230:	4646      	mov	r6, r8
    7232:	409a      	lsls	r2, r3
    7234:	0023      	movs	r3, r4
    7236:	40f3      	lsrs	r3, r6
    7238:	4644      	mov	r4, r8
    723a:	4313      	orrs	r3, r2
    723c:	002a      	movs	r2, r5
    723e:	40e2      	lsrs	r2, r4
    7240:	001c      	movs	r4, r3
    7242:	465b      	mov	r3, fp
    7244:	0015      	movs	r5, r2
    7246:	2b00      	cmp	r3, #0
    7248:	dad4      	bge.n	71f4 <__udivmoddi4+0x12c>
    724a:	4642      	mov	r2, r8
    724c:	002f      	movs	r7, r5
    724e:	2320      	movs	r3, #32
    7250:	0026      	movs	r6, r4
    7252:	4097      	lsls	r7, r2
    7254:	1a9b      	subs	r3, r3, r2
    7256:	40de      	lsrs	r6, r3
    7258:	003b      	movs	r3, r7
    725a:	4333      	orrs	r3, r6
    725c:	e7cd      	b.n	71fa <__udivmoddi4+0x132>
    725e:	46c0      	nop			; (mov r8, r8)

00007260 <__eqdf2>:
__eqdf2():
    7260:	b5f0      	push	{r4, r5, r6, r7, lr}
    7262:	464f      	mov	r7, r9
    7264:	4646      	mov	r6, r8
    7266:	46d6      	mov	lr, sl
    7268:	4694      	mov	ip, r2
    726a:	4691      	mov	r9, r2
    726c:	031a      	lsls	r2, r3, #12
    726e:	0b12      	lsrs	r2, r2, #12
    7270:	4d18      	ldr	r5, [pc, #96]	; (72d4 <__eqdf2+0x74>)
    7272:	b5c0      	push	{r6, r7, lr}
    7274:	004c      	lsls	r4, r1, #1
    7276:	030f      	lsls	r7, r1, #12
    7278:	4692      	mov	sl, r2
    727a:	005a      	lsls	r2, r3, #1
    727c:	0006      	movs	r6, r0
    727e:	4680      	mov	r8, r0
    7280:	0b3f      	lsrs	r7, r7, #12
    7282:	2001      	movs	r0, #1
    7284:	0d64      	lsrs	r4, r4, #21
    7286:	0fc9      	lsrs	r1, r1, #31
    7288:	0d52      	lsrs	r2, r2, #21
    728a:	0fdb      	lsrs	r3, r3, #31
    728c:	42ac      	cmp	r4, r5
    728e:	d00a      	beq.n	72a6 <__eqdf2+0x46>
    7290:	42aa      	cmp	r2, r5
    7292:	d003      	beq.n	729c <__eqdf2+0x3c>
    7294:	4294      	cmp	r4, r2
    7296:	d101      	bne.n	729c <__eqdf2+0x3c>
    7298:	4557      	cmp	r7, sl
    729a:	d00d      	beq.n	72b8 <__eqdf2+0x58>
    729c:	bce0      	pop	{r5, r6, r7}
    729e:	46ba      	mov	sl, r7
    72a0:	46b1      	mov	r9, r6
    72a2:	46a8      	mov	r8, r5
    72a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72a6:	003d      	movs	r5, r7
    72a8:	4335      	orrs	r5, r6
    72aa:	d1f7      	bne.n	729c <__eqdf2+0x3c>
    72ac:	42a2      	cmp	r2, r4
    72ae:	d1f5      	bne.n	729c <__eqdf2+0x3c>
    72b0:	4652      	mov	r2, sl
    72b2:	4665      	mov	r5, ip
    72b4:	432a      	orrs	r2, r5
    72b6:	d1f1      	bne.n	729c <__eqdf2+0x3c>
    72b8:	2001      	movs	r0, #1
    72ba:	45c8      	cmp	r8, r9
    72bc:	d1ee      	bne.n	729c <__eqdf2+0x3c>
    72be:	4299      	cmp	r1, r3
    72c0:	d006      	beq.n	72d0 <__eqdf2+0x70>
    72c2:	2c00      	cmp	r4, #0
    72c4:	d1ea      	bne.n	729c <__eqdf2+0x3c>
    72c6:	433e      	orrs	r6, r7
    72c8:	0030      	movs	r0, r6
    72ca:	1e46      	subs	r6, r0, #1
    72cc:	41b0      	sbcs	r0, r6
    72ce:	e7e5      	b.n	729c <__eqdf2+0x3c>
    72d0:	2000      	movs	r0, #0
    72d2:	e7e3      	b.n	729c <__eqdf2+0x3c>
    72d4:	000007ff 	.word	0x000007ff

000072d8 <__gedf2>:
__gtdf2():
    72d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72da:	464e      	mov	r6, r9
    72dc:	4645      	mov	r5, r8
    72de:	4657      	mov	r7, sl
    72e0:	46de      	mov	lr, fp
    72e2:	0004      	movs	r4, r0
    72e4:	0018      	movs	r0, r3
    72e6:	b5e0      	push	{r5, r6, r7, lr}
    72e8:	0016      	movs	r6, r2
    72ea:	031b      	lsls	r3, r3, #12
    72ec:	0b1b      	lsrs	r3, r3, #12
    72ee:	4d32      	ldr	r5, [pc, #200]	; (73b8 <__gedf2+0xe0>)
    72f0:	030f      	lsls	r7, r1, #12
    72f2:	004a      	lsls	r2, r1, #1
    72f4:	4699      	mov	r9, r3
    72f6:	0043      	lsls	r3, r0, #1
    72f8:	46a4      	mov	ip, r4
    72fa:	46b0      	mov	r8, r6
    72fc:	0b3f      	lsrs	r7, r7, #12
    72fe:	0d52      	lsrs	r2, r2, #21
    7300:	0fc9      	lsrs	r1, r1, #31
    7302:	0d5b      	lsrs	r3, r3, #21
    7304:	0fc0      	lsrs	r0, r0, #31
    7306:	42aa      	cmp	r2, r5
    7308:	d029      	beq.n	735e <__gedf2+0x86>
    730a:	42ab      	cmp	r3, r5
    730c:	d018      	beq.n	7340 <__gedf2+0x68>
    730e:	2a00      	cmp	r2, #0
    7310:	d12a      	bne.n	7368 <__gedf2+0x90>
    7312:	433c      	orrs	r4, r7
    7314:	46a3      	mov	fp, r4
    7316:	4265      	negs	r5, r4
    7318:	4165      	adcs	r5, r4
    731a:	2b00      	cmp	r3, #0
    731c:	d102      	bne.n	7324 <__gedf2+0x4c>
    731e:	464c      	mov	r4, r9
    7320:	4326      	orrs	r6, r4
    7322:	d027      	beq.n	7374 <__gedf2+0x9c>
    7324:	2d00      	cmp	r5, #0
    7326:	d115      	bne.n	7354 <__gedf2+0x7c>
    7328:	4281      	cmp	r1, r0
    732a:	d028      	beq.n	737e <__gedf2+0xa6>
    732c:	2002      	movs	r0, #2
    732e:	3901      	subs	r1, #1
    7330:	4008      	ands	r0, r1
    7332:	3801      	subs	r0, #1
    7334:	bcf0      	pop	{r4, r5, r6, r7}
    7336:	46bb      	mov	fp, r7
    7338:	46b2      	mov	sl, r6
    733a:	46a9      	mov	r9, r5
    733c:	46a0      	mov	r8, r4
    733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7340:	464d      	mov	r5, r9
    7342:	432e      	orrs	r6, r5
    7344:	d12f      	bne.n	73a6 <__gedf2+0xce>
    7346:	2a00      	cmp	r2, #0
    7348:	d1ee      	bne.n	7328 <__gedf2+0x50>
    734a:	433c      	orrs	r4, r7
    734c:	4265      	negs	r5, r4
    734e:	4165      	adcs	r5, r4
    7350:	2d00      	cmp	r5, #0
    7352:	d0e9      	beq.n	7328 <__gedf2+0x50>
    7354:	2800      	cmp	r0, #0
    7356:	d1ed      	bne.n	7334 <__gedf2+0x5c>
    7358:	2001      	movs	r0, #1
    735a:	4240      	negs	r0, r0
    735c:	e7ea      	b.n	7334 <__gedf2+0x5c>
    735e:	003d      	movs	r5, r7
    7360:	4325      	orrs	r5, r4
    7362:	d120      	bne.n	73a6 <__gedf2+0xce>
    7364:	4293      	cmp	r3, r2
    7366:	d0eb      	beq.n	7340 <__gedf2+0x68>
    7368:	2b00      	cmp	r3, #0
    736a:	d1dd      	bne.n	7328 <__gedf2+0x50>
    736c:	464c      	mov	r4, r9
    736e:	4326      	orrs	r6, r4
    7370:	d1da      	bne.n	7328 <__gedf2+0x50>
    7372:	e7db      	b.n	732c <__gedf2+0x54>
    7374:	465b      	mov	r3, fp
    7376:	2000      	movs	r0, #0
    7378:	2b00      	cmp	r3, #0
    737a:	d0db      	beq.n	7334 <__gedf2+0x5c>
    737c:	e7d6      	b.n	732c <__gedf2+0x54>
    737e:	429a      	cmp	r2, r3
    7380:	dc0a      	bgt.n	7398 <__gedf2+0xc0>
    7382:	dbe7      	blt.n	7354 <__gedf2+0x7c>
    7384:	454f      	cmp	r7, r9
    7386:	d8d1      	bhi.n	732c <__gedf2+0x54>
    7388:	d010      	beq.n	73ac <__gedf2+0xd4>
    738a:	2000      	movs	r0, #0
    738c:	454f      	cmp	r7, r9
    738e:	d2d1      	bcs.n	7334 <__gedf2+0x5c>
    7390:	2900      	cmp	r1, #0
    7392:	d0e1      	beq.n	7358 <__gedf2+0x80>
    7394:	0008      	movs	r0, r1
    7396:	e7cd      	b.n	7334 <__gedf2+0x5c>
    7398:	4243      	negs	r3, r0
    739a:	4158      	adcs	r0, r3
    739c:	2302      	movs	r3, #2
    739e:	4240      	negs	r0, r0
    73a0:	4018      	ands	r0, r3
    73a2:	3801      	subs	r0, #1
    73a4:	e7c6      	b.n	7334 <__gedf2+0x5c>
    73a6:	2002      	movs	r0, #2
    73a8:	4240      	negs	r0, r0
    73aa:	e7c3      	b.n	7334 <__gedf2+0x5c>
    73ac:	45c4      	cmp	ip, r8
    73ae:	d8bd      	bhi.n	732c <__gedf2+0x54>
    73b0:	2000      	movs	r0, #0
    73b2:	45c4      	cmp	ip, r8
    73b4:	d2be      	bcs.n	7334 <__gedf2+0x5c>
    73b6:	e7eb      	b.n	7390 <__gedf2+0xb8>
    73b8:	000007ff 	.word	0x000007ff

000073bc <__ledf2>:
__ltdf2():
    73bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    73be:	464e      	mov	r6, r9
    73c0:	4645      	mov	r5, r8
    73c2:	4657      	mov	r7, sl
    73c4:	46de      	mov	lr, fp
    73c6:	0004      	movs	r4, r0
    73c8:	0018      	movs	r0, r3
    73ca:	b5e0      	push	{r5, r6, r7, lr}
    73cc:	0016      	movs	r6, r2
    73ce:	031b      	lsls	r3, r3, #12
    73d0:	0b1b      	lsrs	r3, r3, #12
    73d2:	4d31      	ldr	r5, [pc, #196]	; (7498 <__ledf2+0xdc>)
    73d4:	030f      	lsls	r7, r1, #12
    73d6:	004a      	lsls	r2, r1, #1
    73d8:	4699      	mov	r9, r3
    73da:	0043      	lsls	r3, r0, #1
    73dc:	46a4      	mov	ip, r4
    73de:	46b0      	mov	r8, r6
    73e0:	0b3f      	lsrs	r7, r7, #12
    73e2:	0d52      	lsrs	r2, r2, #21
    73e4:	0fc9      	lsrs	r1, r1, #31
    73e6:	0d5b      	lsrs	r3, r3, #21
    73e8:	0fc0      	lsrs	r0, r0, #31
    73ea:	42aa      	cmp	r2, r5
    73ec:	d011      	beq.n	7412 <__ledf2+0x56>
    73ee:	42ab      	cmp	r3, r5
    73f0:	d014      	beq.n	741c <__ledf2+0x60>
    73f2:	2a00      	cmp	r2, #0
    73f4:	d12f      	bne.n	7456 <__ledf2+0x9a>
    73f6:	433c      	orrs	r4, r7
    73f8:	46a3      	mov	fp, r4
    73fa:	4265      	negs	r5, r4
    73fc:	4165      	adcs	r5, r4
    73fe:	2b00      	cmp	r3, #0
    7400:	d114      	bne.n	742c <__ledf2+0x70>
    7402:	464c      	mov	r4, r9
    7404:	4326      	orrs	r6, r4
    7406:	d111      	bne.n	742c <__ledf2+0x70>
    7408:	465b      	mov	r3, fp
    740a:	2000      	movs	r0, #0
    740c:	2b00      	cmp	r3, #0
    740e:	d017      	beq.n	7440 <__ledf2+0x84>
    7410:	e010      	b.n	7434 <__ledf2+0x78>
    7412:	003d      	movs	r5, r7
    7414:	4325      	orrs	r5, r4
    7416:	d112      	bne.n	743e <__ledf2+0x82>
    7418:	4293      	cmp	r3, r2
    741a:	d11c      	bne.n	7456 <__ledf2+0x9a>
    741c:	464d      	mov	r5, r9
    741e:	432e      	orrs	r6, r5
    7420:	d10d      	bne.n	743e <__ledf2+0x82>
    7422:	2a00      	cmp	r2, #0
    7424:	d104      	bne.n	7430 <__ledf2+0x74>
    7426:	433c      	orrs	r4, r7
    7428:	4265      	negs	r5, r4
    742a:	4165      	adcs	r5, r4
    742c:	2d00      	cmp	r5, #0
    742e:	d10d      	bne.n	744c <__ledf2+0x90>
    7430:	4281      	cmp	r1, r0
    7432:	d016      	beq.n	7462 <__ledf2+0xa6>
    7434:	2002      	movs	r0, #2
    7436:	3901      	subs	r1, #1
    7438:	4008      	ands	r0, r1
    743a:	3801      	subs	r0, #1
    743c:	e000      	b.n	7440 <__ledf2+0x84>
    743e:	2002      	movs	r0, #2
    7440:	bcf0      	pop	{r4, r5, r6, r7}
    7442:	46bb      	mov	fp, r7
    7444:	46b2      	mov	sl, r6
    7446:	46a9      	mov	r9, r5
    7448:	46a0      	mov	r8, r4
    744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    744c:	2800      	cmp	r0, #0
    744e:	d1f7      	bne.n	7440 <__ledf2+0x84>
    7450:	2001      	movs	r0, #1
    7452:	4240      	negs	r0, r0
    7454:	e7f4      	b.n	7440 <__ledf2+0x84>
    7456:	2b00      	cmp	r3, #0
    7458:	d1ea      	bne.n	7430 <__ledf2+0x74>
    745a:	464c      	mov	r4, r9
    745c:	4326      	orrs	r6, r4
    745e:	d1e7      	bne.n	7430 <__ledf2+0x74>
    7460:	e7e8      	b.n	7434 <__ledf2+0x78>
    7462:	429a      	cmp	r2, r3
    7464:	dd06      	ble.n	7474 <__ledf2+0xb8>
    7466:	4243      	negs	r3, r0
    7468:	4158      	adcs	r0, r3
    746a:	2302      	movs	r3, #2
    746c:	4240      	negs	r0, r0
    746e:	4018      	ands	r0, r3
    7470:	3801      	subs	r0, #1
    7472:	e7e5      	b.n	7440 <__ledf2+0x84>
    7474:	429a      	cmp	r2, r3
    7476:	dbe9      	blt.n	744c <__ledf2+0x90>
    7478:	454f      	cmp	r7, r9
    747a:	d8db      	bhi.n	7434 <__ledf2+0x78>
    747c:	d006      	beq.n	748c <__ledf2+0xd0>
    747e:	2000      	movs	r0, #0
    7480:	454f      	cmp	r7, r9
    7482:	d2dd      	bcs.n	7440 <__ledf2+0x84>
    7484:	2900      	cmp	r1, #0
    7486:	d0e3      	beq.n	7450 <__ledf2+0x94>
    7488:	0008      	movs	r0, r1
    748a:	e7d9      	b.n	7440 <__ledf2+0x84>
    748c:	45c4      	cmp	ip, r8
    748e:	d8d1      	bhi.n	7434 <__ledf2+0x78>
    7490:	2000      	movs	r0, #0
    7492:	45c4      	cmp	ip, r8
    7494:	d2d4      	bcs.n	7440 <__ledf2+0x84>
    7496:	e7f5      	b.n	7484 <__ledf2+0xc8>
    7498:	000007ff 	.word	0x000007ff

0000749c <__aeabi_dmul>:
__aeabi_dmul():
    749c:	b5f0      	push	{r4, r5, r6, r7, lr}
    749e:	4657      	mov	r7, sl
    74a0:	464e      	mov	r6, r9
    74a2:	4645      	mov	r5, r8
    74a4:	46de      	mov	lr, fp
    74a6:	b5e0      	push	{r5, r6, r7, lr}
    74a8:	4698      	mov	r8, r3
    74aa:	030c      	lsls	r4, r1, #12
    74ac:	004b      	lsls	r3, r1, #1
    74ae:	0006      	movs	r6, r0
    74b0:	4692      	mov	sl, r2
    74b2:	b087      	sub	sp, #28
    74b4:	0b24      	lsrs	r4, r4, #12
    74b6:	0d5b      	lsrs	r3, r3, #21
    74b8:	0fcf      	lsrs	r7, r1, #31
    74ba:	2b00      	cmp	r3, #0
    74bc:	d06c      	beq.n	7598 <__aeabi_dmul+0xfc>
    74be:	4add      	ldr	r2, [pc, #884]	; (7834 <__aeabi_dmul+0x398>)
    74c0:	4293      	cmp	r3, r2
    74c2:	d100      	bne.n	74c6 <__aeabi_dmul+0x2a>
    74c4:	e086      	b.n	75d4 <__aeabi_dmul+0x138>
    74c6:	0f42      	lsrs	r2, r0, #29
    74c8:	00e4      	lsls	r4, r4, #3
    74ca:	4314      	orrs	r4, r2
    74cc:	2280      	movs	r2, #128	; 0x80
    74ce:	0412      	lsls	r2, r2, #16
    74d0:	4314      	orrs	r4, r2
    74d2:	4ad9      	ldr	r2, [pc, #868]	; (7838 <__aeabi_dmul+0x39c>)
    74d4:	00c5      	lsls	r5, r0, #3
    74d6:	4694      	mov	ip, r2
    74d8:	4463      	add	r3, ip
    74da:	9300      	str	r3, [sp, #0]
    74dc:	2300      	movs	r3, #0
    74de:	4699      	mov	r9, r3
    74e0:	469b      	mov	fp, r3
    74e2:	4643      	mov	r3, r8
    74e4:	4642      	mov	r2, r8
    74e6:	031e      	lsls	r6, r3, #12
    74e8:	0fd2      	lsrs	r2, r2, #31
    74ea:	005b      	lsls	r3, r3, #1
    74ec:	4650      	mov	r0, sl
    74ee:	4690      	mov	r8, r2
    74f0:	0b36      	lsrs	r6, r6, #12
    74f2:	0d5b      	lsrs	r3, r3, #21
    74f4:	d100      	bne.n	74f8 <__aeabi_dmul+0x5c>
    74f6:	e078      	b.n	75ea <__aeabi_dmul+0x14e>
    74f8:	4ace      	ldr	r2, [pc, #824]	; (7834 <__aeabi_dmul+0x398>)
    74fa:	4293      	cmp	r3, r2
    74fc:	d01d      	beq.n	753a <__aeabi_dmul+0x9e>
    74fe:	49ce      	ldr	r1, [pc, #824]	; (7838 <__aeabi_dmul+0x39c>)
    7500:	0f42      	lsrs	r2, r0, #29
    7502:	468c      	mov	ip, r1
    7504:	9900      	ldr	r1, [sp, #0]
    7506:	4463      	add	r3, ip
    7508:	00f6      	lsls	r6, r6, #3
    750a:	468c      	mov	ip, r1
    750c:	4316      	orrs	r6, r2
    750e:	2280      	movs	r2, #128	; 0x80
    7510:	449c      	add	ip, r3
    7512:	0412      	lsls	r2, r2, #16
    7514:	4663      	mov	r3, ip
    7516:	4316      	orrs	r6, r2
    7518:	00c2      	lsls	r2, r0, #3
    751a:	2000      	movs	r0, #0
    751c:	9300      	str	r3, [sp, #0]
    751e:	9900      	ldr	r1, [sp, #0]
    7520:	4643      	mov	r3, r8
    7522:	3101      	adds	r1, #1
    7524:	468c      	mov	ip, r1
    7526:	4649      	mov	r1, r9
    7528:	407b      	eors	r3, r7
    752a:	9301      	str	r3, [sp, #4]
    752c:	290f      	cmp	r1, #15
    752e:	d900      	bls.n	7532 <__aeabi_dmul+0x96>
    7530:	e07e      	b.n	7630 <__aeabi_dmul+0x194>
    7532:	4bc2      	ldr	r3, [pc, #776]	; (783c <__aeabi_dmul+0x3a0>)
    7534:	0089      	lsls	r1, r1, #2
    7536:	5859      	ldr	r1, [r3, r1]
    7538:	468f      	mov	pc, r1
    753a:	4652      	mov	r2, sl
    753c:	9b00      	ldr	r3, [sp, #0]
    753e:	4332      	orrs	r2, r6
    7540:	d000      	beq.n	7544 <__aeabi_dmul+0xa8>
    7542:	e156      	b.n	77f2 <__aeabi_dmul+0x356>
    7544:	49bb      	ldr	r1, [pc, #748]	; (7834 <__aeabi_dmul+0x398>)
    7546:	2600      	movs	r6, #0
    7548:	468c      	mov	ip, r1
    754a:	4463      	add	r3, ip
    754c:	4649      	mov	r1, r9
    754e:	9300      	str	r3, [sp, #0]
    7550:	2302      	movs	r3, #2
    7552:	4319      	orrs	r1, r3
    7554:	4689      	mov	r9, r1
    7556:	2002      	movs	r0, #2
    7558:	e7e1      	b.n	751e <__aeabi_dmul+0x82>
    755a:	4643      	mov	r3, r8
    755c:	9301      	str	r3, [sp, #4]
    755e:	0034      	movs	r4, r6
    7560:	0015      	movs	r5, r2
    7562:	4683      	mov	fp, r0
    7564:	465b      	mov	r3, fp
    7566:	2b02      	cmp	r3, #2
    7568:	d05e      	beq.n	7628 <__aeabi_dmul+0x18c>
    756a:	2b03      	cmp	r3, #3
    756c:	d100      	bne.n	7570 <__aeabi_dmul+0xd4>
    756e:	e1f3      	b.n	7958 <__aeabi_dmul+0x4bc>
    7570:	2b01      	cmp	r3, #1
    7572:	d000      	beq.n	7576 <__aeabi_dmul+0xda>
    7574:	e118      	b.n	77a8 <__aeabi_dmul+0x30c>
    7576:	2200      	movs	r2, #0
    7578:	2400      	movs	r4, #0
    757a:	2500      	movs	r5, #0
    757c:	9b01      	ldr	r3, [sp, #4]
    757e:	0512      	lsls	r2, r2, #20
    7580:	4322      	orrs	r2, r4
    7582:	07db      	lsls	r3, r3, #31
    7584:	431a      	orrs	r2, r3
    7586:	0028      	movs	r0, r5
    7588:	0011      	movs	r1, r2
    758a:	b007      	add	sp, #28
    758c:	bcf0      	pop	{r4, r5, r6, r7}
    758e:	46bb      	mov	fp, r7
    7590:	46b2      	mov	sl, r6
    7592:	46a9      	mov	r9, r5
    7594:	46a0      	mov	r8, r4
    7596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7598:	0025      	movs	r5, r4
    759a:	4305      	orrs	r5, r0
    759c:	d100      	bne.n	75a0 <__aeabi_dmul+0x104>
    759e:	e141      	b.n	7824 <__aeabi_dmul+0x388>
    75a0:	2c00      	cmp	r4, #0
    75a2:	d100      	bne.n	75a6 <__aeabi_dmul+0x10a>
    75a4:	e1ad      	b.n	7902 <__aeabi_dmul+0x466>
    75a6:	0020      	movs	r0, r4
    75a8:	f000 fdd2 	bl	8150 <__clzsi2>
    75ac:	0001      	movs	r1, r0
    75ae:	0002      	movs	r2, r0
    75b0:	390b      	subs	r1, #11
    75b2:	231d      	movs	r3, #29
    75b4:	0010      	movs	r0, r2
    75b6:	1a5b      	subs	r3, r3, r1
    75b8:	0031      	movs	r1, r6
    75ba:	0035      	movs	r5, r6
    75bc:	3808      	subs	r0, #8
    75be:	4084      	lsls	r4, r0
    75c0:	40d9      	lsrs	r1, r3
    75c2:	4085      	lsls	r5, r0
    75c4:	430c      	orrs	r4, r1
    75c6:	489e      	ldr	r0, [pc, #632]	; (7840 <__aeabi_dmul+0x3a4>)
    75c8:	1a83      	subs	r3, r0, r2
    75ca:	9300      	str	r3, [sp, #0]
    75cc:	2300      	movs	r3, #0
    75ce:	4699      	mov	r9, r3
    75d0:	469b      	mov	fp, r3
    75d2:	e786      	b.n	74e2 <__aeabi_dmul+0x46>
    75d4:	0005      	movs	r5, r0
    75d6:	4325      	orrs	r5, r4
    75d8:	d000      	beq.n	75dc <__aeabi_dmul+0x140>
    75da:	e11c      	b.n	7816 <__aeabi_dmul+0x37a>
    75dc:	2208      	movs	r2, #8
    75de:	9300      	str	r3, [sp, #0]
    75e0:	2302      	movs	r3, #2
    75e2:	2400      	movs	r4, #0
    75e4:	4691      	mov	r9, r2
    75e6:	469b      	mov	fp, r3
    75e8:	e77b      	b.n	74e2 <__aeabi_dmul+0x46>
    75ea:	4652      	mov	r2, sl
    75ec:	4332      	orrs	r2, r6
    75ee:	d100      	bne.n	75f2 <__aeabi_dmul+0x156>
    75f0:	e10a      	b.n	7808 <__aeabi_dmul+0x36c>
    75f2:	2e00      	cmp	r6, #0
    75f4:	d100      	bne.n	75f8 <__aeabi_dmul+0x15c>
    75f6:	e176      	b.n	78e6 <__aeabi_dmul+0x44a>
    75f8:	0030      	movs	r0, r6
    75fa:	f000 fda9 	bl	8150 <__clzsi2>
    75fe:	0002      	movs	r2, r0
    7600:	3a0b      	subs	r2, #11
    7602:	231d      	movs	r3, #29
    7604:	0001      	movs	r1, r0
    7606:	1a9b      	subs	r3, r3, r2
    7608:	4652      	mov	r2, sl
    760a:	3908      	subs	r1, #8
    760c:	40da      	lsrs	r2, r3
    760e:	408e      	lsls	r6, r1
    7610:	4316      	orrs	r6, r2
    7612:	4652      	mov	r2, sl
    7614:	408a      	lsls	r2, r1
    7616:	9b00      	ldr	r3, [sp, #0]
    7618:	4989      	ldr	r1, [pc, #548]	; (7840 <__aeabi_dmul+0x3a4>)
    761a:	1a18      	subs	r0, r3, r0
    761c:	0003      	movs	r3, r0
    761e:	468c      	mov	ip, r1
    7620:	4463      	add	r3, ip
    7622:	2000      	movs	r0, #0
    7624:	9300      	str	r3, [sp, #0]
    7626:	e77a      	b.n	751e <__aeabi_dmul+0x82>
    7628:	2400      	movs	r4, #0
    762a:	2500      	movs	r5, #0
    762c:	4a81      	ldr	r2, [pc, #516]	; (7834 <__aeabi_dmul+0x398>)
    762e:	e7a5      	b.n	757c <__aeabi_dmul+0xe0>
    7630:	0c2f      	lsrs	r7, r5, #16
    7632:	042d      	lsls	r5, r5, #16
    7634:	0c2d      	lsrs	r5, r5, #16
    7636:	002b      	movs	r3, r5
    7638:	0c11      	lsrs	r1, r2, #16
    763a:	0412      	lsls	r2, r2, #16
    763c:	0c12      	lsrs	r2, r2, #16
    763e:	4353      	muls	r3, r2
    7640:	4698      	mov	r8, r3
    7642:	0013      	movs	r3, r2
    7644:	0028      	movs	r0, r5
    7646:	437b      	muls	r3, r7
    7648:	4699      	mov	r9, r3
    764a:	4348      	muls	r0, r1
    764c:	4448      	add	r0, r9
    764e:	4683      	mov	fp, r0
    7650:	4640      	mov	r0, r8
    7652:	000b      	movs	r3, r1
    7654:	0c00      	lsrs	r0, r0, #16
    7656:	4682      	mov	sl, r0
    7658:	4658      	mov	r0, fp
    765a:	437b      	muls	r3, r7
    765c:	4450      	add	r0, sl
    765e:	9302      	str	r3, [sp, #8]
    7660:	4581      	cmp	r9, r0
    7662:	d906      	bls.n	7672 <__aeabi_dmul+0x1d6>
    7664:	469a      	mov	sl, r3
    7666:	2380      	movs	r3, #128	; 0x80
    7668:	025b      	lsls	r3, r3, #9
    766a:	4699      	mov	r9, r3
    766c:	44ca      	add	sl, r9
    766e:	4653      	mov	r3, sl
    7670:	9302      	str	r3, [sp, #8]
    7672:	0c03      	lsrs	r3, r0, #16
    7674:	469b      	mov	fp, r3
    7676:	4643      	mov	r3, r8
    7678:	041b      	lsls	r3, r3, #16
    767a:	0400      	lsls	r0, r0, #16
    767c:	0c1b      	lsrs	r3, r3, #16
    767e:	4698      	mov	r8, r3
    7680:	0003      	movs	r3, r0
    7682:	4443      	add	r3, r8
    7684:	9304      	str	r3, [sp, #16]
    7686:	0c33      	lsrs	r3, r6, #16
    7688:	4699      	mov	r9, r3
    768a:	002b      	movs	r3, r5
    768c:	0436      	lsls	r6, r6, #16
    768e:	0c36      	lsrs	r6, r6, #16
    7690:	4373      	muls	r3, r6
    7692:	4698      	mov	r8, r3
    7694:	0033      	movs	r3, r6
    7696:	437b      	muls	r3, r7
    7698:	469a      	mov	sl, r3
    769a:	464b      	mov	r3, r9
    769c:	435d      	muls	r5, r3
    769e:	435f      	muls	r7, r3
    76a0:	4643      	mov	r3, r8
    76a2:	4455      	add	r5, sl
    76a4:	0c18      	lsrs	r0, r3, #16
    76a6:	1940      	adds	r0, r0, r5
    76a8:	4582      	cmp	sl, r0
    76aa:	d903      	bls.n	76b4 <__aeabi_dmul+0x218>
    76ac:	2380      	movs	r3, #128	; 0x80
    76ae:	025b      	lsls	r3, r3, #9
    76b0:	469a      	mov	sl, r3
    76b2:	4457      	add	r7, sl
    76b4:	0c05      	lsrs	r5, r0, #16
    76b6:	19eb      	adds	r3, r5, r7
    76b8:	9305      	str	r3, [sp, #20]
    76ba:	4643      	mov	r3, r8
    76bc:	041d      	lsls	r5, r3, #16
    76be:	0c2d      	lsrs	r5, r5, #16
    76c0:	0400      	lsls	r0, r0, #16
    76c2:	1940      	adds	r0, r0, r5
    76c4:	0c25      	lsrs	r5, r4, #16
    76c6:	0424      	lsls	r4, r4, #16
    76c8:	0c24      	lsrs	r4, r4, #16
    76ca:	0027      	movs	r7, r4
    76cc:	4357      	muls	r7, r2
    76ce:	436a      	muls	r2, r5
    76d0:	4690      	mov	r8, r2
    76d2:	002a      	movs	r2, r5
    76d4:	0c3b      	lsrs	r3, r7, #16
    76d6:	469a      	mov	sl, r3
    76d8:	434a      	muls	r2, r1
    76da:	4361      	muls	r1, r4
    76dc:	4441      	add	r1, r8
    76de:	4451      	add	r1, sl
    76e0:	4483      	add	fp, r0
    76e2:	4588      	cmp	r8, r1
    76e4:	d903      	bls.n	76ee <__aeabi_dmul+0x252>
    76e6:	2380      	movs	r3, #128	; 0x80
    76e8:	025b      	lsls	r3, r3, #9
    76ea:	4698      	mov	r8, r3
    76ec:	4442      	add	r2, r8
    76ee:	043f      	lsls	r7, r7, #16
    76f0:	0c0b      	lsrs	r3, r1, #16
    76f2:	0c3f      	lsrs	r7, r7, #16
    76f4:	0409      	lsls	r1, r1, #16
    76f6:	19c9      	adds	r1, r1, r7
    76f8:	0027      	movs	r7, r4
    76fa:	4698      	mov	r8, r3
    76fc:	464b      	mov	r3, r9
    76fe:	4377      	muls	r7, r6
    7700:	435c      	muls	r4, r3
    7702:	436e      	muls	r6, r5
    7704:	435d      	muls	r5, r3
    7706:	0c3b      	lsrs	r3, r7, #16
    7708:	4699      	mov	r9, r3
    770a:	19a4      	adds	r4, r4, r6
    770c:	444c      	add	r4, r9
    770e:	4442      	add	r2, r8
    7710:	9503      	str	r5, [sp, #12]
    7712:	42a6      	cmp	r6, r4
    7714:	d904      	bls.n	7720 <__aeabi_dmul+0x284>
    7716:	2380      	movs	r3, #128	; 0x80
    7718:	025b      	lsls	r3, r3, #9
    771a:	4698      	mov	r8, r3
    771c:	4445      	add	r5, r8
    771e:	9503      	str	r5, [sp, #12]
    7720:	9b02      	ldr	r3, [sp, #8]
    7722:	043f      	lsls	r7, r7, #16
    7724:	445b      	add	r3, fp
    7726:	001e      	movs	r6, r3
    7728:	4283      	cmp	r3, r0
    772a:	4180      	sbcs	r0, r0
    772c:	0423      	lsls	r3, r4, #16
    772e:	4698      	mov	r8, r3
    7730:	9b05      	ldr	r3, [sp, #20]
    7732:	0c3f      	lsrs	r7, r7, #16
    7734:	4447      	add	r7, r8
    7736:	4698      	mov	r8, r3
    7738:	1876      	adds	r6, r6, r1
    773a:	428e      	cmp	r6, r1
    773c:	4189      	sbcs	r1, r1
    773e:	4447      	add	r7, r8
    7740:	4240      	negs	r0, r0
    7742:	183d      	adds	r5, r7, r0
    7744:	46a8      	mov	r8, r5
    7746:	4693      	mov	fp, r2
    7748:	4249      	negs	r1, r1
    774a:	468a      	mov	sl, r1
    774c:	44c3      	add	fp, r8
    774e:	429f      	cmp	r7, r3
    7750:	41bf      	sbcs	r7, r7
    7752:	4580      	cmp	r8, r0
    7754:	4180      	sbcs	r0, r0
    7756:	9b03      	ldr	r3, [sp, #12]
    7758:	44da      	add	sl, fp
    775a:	4698      	mov	r8, r3
    775c:	4653      	mov	r3, sl
    775e:	4240      	negs	r0, r0
    7760:	427f      	negs	r7, r7
    7762:	4307      	orrs	r7, r0
    7764:	0c24      	lsrs	r4, r4, #16
    7766:	4593      	cmp	fp, r2
    7768:	4192      	sbcs	r2, r2
    776a:	458a      	cmp	sl, r1
    776c:	4189      	sbcs	r1, r1
    776e:	193f      	adds	r7, r7, r4
    7770:	0ddc      	lsrs	r4, r3, #23
    7772:	9b04      	ldr	r3, [sp, #16]
    7774:	0275      	lsls	r5, r6, #9
    7776:	431d      	orrs	r5, r3
    7778:	1e68      	subs	r0, r5, #1
    777a:	4185      	sbcs	r5, r0
    777c:	4653      	mov	r3, sl
    777e:	4252      	negs	r2, r2
    7780:	4249      	negs	r1, r1
    7782:	430a      	orrs	r2, r1
    7784:	18bf      	adds	r7, r7, r2
    7786:	4447      	add	r7, r8
    7788:	0df6      	lsrs	r6, r6, #23
    778a:	027f      	lsls	r7, r7, #9
    778c:	4335      	orrs	r5, r6
    778e:	025a      	lsls	r2, r3, #9
    7790:	433c      	orrs	r4, r7
    7792:	4315      	orrs	r5, r2
    7794:	01fb      	lsls	r3, r7, #7
    7796:	d400      	bmi.n	779a <__aeabi_dmul+0x2fe>
    7798:	e0c1      	b.n	791e <__aeabi_dmul+0x482>
    779a:	2101      	movs	r1, #1
    779c:	086a      	lsrs	r2, r5, #1
    779e:	400d      	ands	r5, r1
    77a0:	4315      	orrs	r5, r2
    77a2:	07e2      	lsls	r2, r4, #31
    77a4:	4315      	orrs	r5, r2
    77a6:	0864      	lsrs	r4, r4, #1
    77a8:	4926      	ldr	r1, [pc, #152]	; (7844 <__aeabi_dmul+0x3a8>)
    77aa:	4461      	add	r1, ip
    77ac:	2900      	cmp	r1, #0
    77ae:	dd56      	ble.n	785e <__aeabi_dmul+0x3c2>
    77b0:	076b      	lsls	r3, r5, #29
    77b2:	d009      	beq.n	77c8 <__aeabi_dmul+0x32c>
    77b4:	220f      	movs	r2, #15
    77b6:	402a      	ands	r2, r5
    77b8:	2a04      	cmp	r2, #4
    77ba:	d005      	beq.n	77c8 <__aeabi_dmul+0x32c>
    77bc:	1d2a      	adds	r2, r5, #4
    77be:	42aa      	cmp	r2, r5
    77c0:	41ad      	sbcs	r5, r5
    77c2:	426d      	negs	r5, r5
    77c4:	1964      	adds	r4, r4, r5
    77c6:	0015      	movs	r5, r2
    77c8:	01e3      	lsls	r3, r4, #7
    77ca:	d504      	bpl.n	77d6 <__aeabi_dmul+0x33a>
    77cc:	2180      	movs	r1, #128	; 0x80
    77ce:	4a1e      	ldr	r2, [pc, #120]	; (7848 <__aeabi_dmul+0x3ac>)
    77d0:	00c9      	lsls	r1, r1, #3
    77d2:	4014      	ands	r4, r2
    77d4:	4461      	add	r1, ip
    77d6:	4a1d      	ldr	r2, [pc, #116]	; (784c <__aeabi_dmul+0x3b0>)
    77d8:	4291      	cmp	r1, r2
    77da:	dd00      	ble.n	77de <__aeabi_dmul+0x342>
    77dc:	e724      	b.n	7628 <__aeabi_dmul+0x18c>
    77de:	0762      	lsls	r2, r4, #29
    77e0:	08ed      	lsrs	r5, r5, #3
    77e2:	0264      	lsls	r4, r4, #9
    77e4:	0549      	lsls	r1, r1, #21
    77e6:	4315      	orrs	r5, r2
    77e8:	0b24      	lsrs	r4, r4, #12
    77ea:	0d4a      	lsrs	r2, r1, #21
    77ec:	e6c6      	b.n	757c <__aeabi_dmul+0xe0>
    77ee:	9701      	str	r7, [sp, #4]
    77f0:	e6b8      	b.n	7564 <__aeabi_dmul+0xc8>
    77f2:	4a10      	ldr	r2, [pc, #64]	; (7834 <__aeabi_dmul+0x398>)
    77f4:	2003      	movs	r0, #3
    77f6:	4694      	mov	ip, r2
    77f8:	4463      	add	r3, ip
    77fa:	464a      	mov	r2, r9
    77fc:	9300      	str	r3, [sp, #0]
    77fe:	2303      	movs	r3, #3
    7800:	431a      	orrs	r2, r3
    7802:	4691      	mov	r9, r2
    7804:	4652      	mov	r2, sl
    7806:	e68a      	b.n	751e <__aeabi_dmul+0x82>
    7808:	4649      	mov	r1, r9
    780a:	2301      	movs	r3, #1
    780c:	4319      	orrs	r1, r3
    780e:	4689      	mov	r9, r1
    7810:	2600      	movs	r6, #0
    7812:	2001      	movs	r0, #1
    7814:	e683      	b.n	751e <__aeabi_dmul+0x82>
    7816:	220c      	movs	r2, #12
    7818:	9300      	str	r3, [sp, #0]
    781a:	2303      	movs	r3, #3
    781c:	0005      	movs	r5, r0
    781e:	4691      	mov	r9, r2
    7820:	469b      	mov	fp, r3
    7822:	e65e      	b.n	74e2 <__aeabi_dmul+0x46>
    7824:	2304      	movs	r3, #4
    7826:	4699      	mov	r9, r3
    7828:	2300      	movs	r3, #0
    782a:	9300      	str	r3, [sp, #0]
    782c:	3301      	adds	r3, #1
    782e:	2400      	movs	r4, #0
    7830:	469b      	mov	fp, r3
    7832:	e656      	b.n	74e2 <__aeabi_dmul+0x46>
    7834:	000007ff 	.word	0x000007ff
    7838:	fffffc01 	.word	0xfffffc01
    783c:	0000a398 	.word	0x0000a398
    7840:	fffffc0d 	.word	0xfffffc0d
    7844:	000003ff 	.word	0x000003ff
    7848:	feffffff 	.word	0xfeffffff
    784c:	000007fe 	.word	0x000007fe
    7850:	2300      	movs	r3, #0
    7852:	2480      	movs	r4, #128	; 0x80
    7854:	2500      	movs	r5, #0
    7856:	4a44      	ldr	r2, [pc, #272]	; (7968 <__aeabi_dmul+0x4cc>)
    7858:	9301      	str	r3, [sp, #4]
    785a:	0324      	lsls	r4, r4, #12
    785c:	e68e      	b.n	757c <__aeabi_dmul+0xe0>
    785e:	2001      	movs	r0, #1
    7860:	1a40      	subs	r0, r0, r1
    7862:	2838      	cmp	r0, #56	; 0x38
    7864:	dd00      	ble.n	7868 <__aeabi_dmul+0x3cc>
    7866:	e686      	b.n	7576 <__aeabi_dmul+0xda>
    7868:	281f      	cmp	r0, #31
    786a:	dd5b      	ble.n	7924 <__aeabi_dmul+0x488>
    786c:	221f      	movs	r2, #31
    786e:	0023      	movs	r3, r4
    7870:	4252      	negs	r2, r2
    7872:	1a51      	subs	r1, r2, r1
    7874:	40cb      	lsrs	r3, r1
    7876:	0019      	movs	r1, r3
    7878:	2820      	cmp	r0, #32
    787a:	d003      	beq.n	7884 <__aeabi_dmul+0x3e8>
    787c:	4a3b      	ldr	r2, [pc, #236]	; (796c <__aeabi_dmul+0x4d0>)
    787e:	4462      	add	r2, ip
    7880:	4094      	lsls	r4, r2
    7882:	4325      	orrs	r5, r4
    7884:	1e6a      	subs	r2, r5, #1
    7886:	4195      	sbcs	r5, r2
    7888:	002a      	movs	r2, r5
    788a:	430a      	orrs	r2, r1
    788c:	2107      	movs	r1, #7
    788e:	000d      	movs	r5, r1
    7890:	2400      	movs	r4, #0
    7892:	4015      	ands	r5, r2
    7894:	4211      	tst	r1, r2
    7896:	d05b      	beq.n	7950 <__aeabi_dmul+0x4b4>
    7898:	210f      	movs	r1, #15
    789a:	2400      	movs	r4, #0
    789c:	4011      	ands	r1, r2
    789e:	2904      	cmp	r1, #4
    78a0:	d053      	beq.n	794a <__aeabi_dmul+0x4ae>
    78a2:	1d11      	adds	r1, r2, #4
    78a4:	4291      	cmp	r1, r2
    78a6:	4192      	sbcs	r2, r2
    78a8:	4252      	negs	r2, r2
    78aa:	18a4      	adds	r4, r4, r2
    78ac:	000a      	movs	r2, r1
    78ae:	0223      	lsls	r3, r4, #8
    78b0:	d54b      	bpl.n	794a <__aeabi_dmul+0x4ae>
    78b2:	2201      	movs	r2, #1
    78b4:	2400      	movs	r4, #0
    78b6:	2500      	movs	r5, #0
    78b8:	e660      	b.n	757c <__aeabi_dmul+0xe0>
    78ba:	2380      	movs	r3, #128	; 0x80
    78bc:	031b      	lsls	r3, r3, #12
    78be:	421c      	tst	r4, r3
    78c0:	d009      	beq.n	78d6 <__aeabi_dmul+0x43a>
    78c2:	421e      	tst	r6, r3
    78c4:	d107      	bne.n	78d6 <__aeabi_dmul+0x43a>
    78c6:	4333      	orrs	r3, r6
    78c8:	031c      	lsls	r4, r3, #12
    78ca:	4643      	mov	r3, r8
    78cc:	0015      	movs	r5, r2
    78ce:	0b24      	lsrs	r4, r4, #12
    78d0:	4a25      	ldr	r2, [pc, #148]	; (7968 <__aeabi_dmul+0x4cc>)
    78d2:	9301      	str	r3, [sp, #4]
    78d4:	e652      	b.n	757c <__aeabi_dmul+0xe0>
    78d6:	2280      	movs	r2, #128	; 0x80
    78d8:	0312      	lsls	r2, r2, #12
    78da:	4314      	orrs	r4, r2
    78dc:	0324      	lsls	r4, r4, #12
    78de:	4a22      	ldr	r2, [pc, #136]	; (7968 <__aeabi_dmul+0x4cc>)
    78e0:	0b24      	lsrs	r4, r4, #12
    78e2:	9701      	str	r7, [sp, #4]
    78e4:	e64a      	b.n	757c <__aeabi_dmul+0xe0>
    78e6:	f000 fc33 	bl	8150 <__clzsi2>
    78ea:	0003      	movs	r3, r0
    78ec:	001a      	movs	r2, r3
    78ee:	3215      	adds	r2, #21
    78f0:	3020      	adds	r0, #32
    78f2:	2a1c      	cmp	r2, #28
    78f4:	dc00      	bgt.n	78f8 <__aeabi_dmul+0x45c>
    78f6:	e684      	b.n	7602 <__aeabi_dmul+0x166>
    78f8:	4656      	mov	r6, sl
    78fa:	3b08      	subs	r3, #8
    78fc:	2200      	movs	r2, #0
    78fe:	409e      	lsls	r6, r3
    7900:	e689      	b.n	7616 <__aeabi_dmul+0x17a>
    7902:	f000 fc25 	bl	8150 <__clzsi2>
    7906:	0001      	movs	r1, r0
    7908:	0002      	movs	r2, r0
    790a:	3115      	adds	r1, #21
    790c:	3220      	adds	r2, #32
    790e:	291c      	cmp	r1, #28
    7910:	dc00      	bgt.n	7914 <__aeabi_dmul+0x478>
    7912:	e64e      	b.n	75b2 <__aeabi_dmul+0x116>
    7914:	0034      	movs	r4, r6
    7916:	3808      	subs	r0, #8
    7918:	2500      	movs	r5, #0
    791a:	4084      	lsls	r4, r0
    791c:	e653      	b.n	75c6 <__aeabi_dmul+0x12a>
    791e:	9b00      	ldr	r3, [sp, #0]
    7920:	469c      	mov	ip, r3
    7922:	e741      	b.n	77a8 <__aeabi_dmul+0x30c>
    7924:	4912      	ldr	r1, [pc, #72]	; (7970 <__aeabi_dmul+0x4d4>)
    7926:	0022      	movs	r2, r4
    7928:	4461      	add	r1, ip
    792a:	002e      	movs	r6, r5
    792c:	408d      	lsls	r5, r1
    792e:	408a      	lsls	r2, r1
    7930:	40c6      	lsrs	r6, r0
    7932:	1e69      	subs	r1, r5, #1
    7934:	418d      	sbcs	r5, r1
    7936:	4332      	orrs	r2, r6
    7938:	432a      	orrs	r2, r5
    793a:	40c4      	lsrs	r4, r0
    793c:	0753      	lsls	r3, r2, #29
    793e:	d0b6      	beq.n	78ae <__aeabi_dmul+0x412>
    7940:	210f      	movs	r1, #15
    7942:	4011      	ands	r1, r2
    7944:	2904      	cmp	r1, #4
    7946:	d1ac      	bne.n	78a2 <__aeabi_dmul+0x406>
    7948:	e7b1      	b.n	78ae <__aeabi_dmul+0x412>
    794a:	0765      	lsls	r5, r4, #29
    794c:	0264      	lsls	r4, r4, #9
    794e:	0b24      	lsrs	r4, r4, #12
    7950:	08d2      	lsrs	r2, r2, #3
    7952:	4315      	orrs	r5, r2
    7954:	2200      	movs	r2, #0
    7956:	e611      	b.n	757c <__aeabi_dmul+0xe0>
    7958:	2280      	movs	r2, #128	; 0x80
    795a:	0312      	lsls	r2, r2, #12
    795c:	4314      	orrs	r4, r2
    795e:	0324      	lsls	r4, r4, #12
    7960:	4a01      	ldr	r2, [pc, #4]	; (7968 <__aeabi_dmul+0x4cc>)
    7962:	0b24      	lsrs	r4, r4, #12
    7964:	e60a      	b.n	757c <__aeabi_dmul+0xe0>
    7966:	46c0      	nop			; (mov r8, r8)
    7968:	000007ff 	.word	0x000007ff
    796c:	0000043e 	.word	0x0000043e
    7970:	0000041e 	.word	0x0000041e

00007974 <__aeabi_dsub>:
__aeabi_dsub():
    7974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7976:	4657      	mov	r7, sl
    7978:	464e      	mov	r6, r9
    797a:	4645      	mov	r5, r8
    797c:	46de      	mov	lr, fp
    797e:	0004      	movs	r4, r0
    7980:	b5e0      	push	{r5, r6, r7, lr}
    7982:	001f      	movs	r7, r3
    7984:	0010      	movs	r0, r2
    7986:	030b      	lsls	r3, r1, #12
    7988:	0f62      	lsrs	r2, r4, #29
    798a:	004e      	lsls	r6, r1, #1
    798c:	0fcd      	lsrs	r5, r1, #31
    798e:	0a5b      	lsrs	r3, r3, #9
    7990:	0339      	lsls	r1, r7, #12
    7992:	4313      	orrs	r3, r2
    7994:	0a49      	lsrs	r1, r1, #9
    7996:	00e2      	lsls	r2, r4, #3
    7998:	0f44      	lsrs	r4, r0, #29
    799a:	4321      	orrs	r1, r4
    799c:	4cc2      	ldr	r4, [pc, #776]	; (7ca8 <__aeabi_dsub+0x334>)
    799e:	4691      	mov	r9, r2
    79a0:	4692      	mov	sl, r2
    79a2:	00c0      	lsls	r0, r0, #3
    79a4:	007a      	lsls	r2, r7, #1
    79a6:	4680      	mov	r8, r0
    79a8:	0d76      	lsrs	r6, r6, #21
    79aa:	0d52      	lsrs	r2, r2, #21
    79ac:	0fff      	lsrs	r7, r7, #31
    79ae:	42a2      	cmp	r2, r4
    79b0:	d100      	bne.n	79b4 <__aeabi_dsub+0x40>
    79b2:	e0b4      	b.n	7b1e <__aeabi_dsub+0x1aa>
    79b4:	2401      	movs	r4, #1
    79b6:	4067      	eors	r7, r4
    79b8:	46bb      	mov	fp, r7
    79ba:	42bd      	cmp	r5, r7
    79bc:	d100      	bne.n	79c0 <__aeabi_dsub+0x4c>
    79be:	e088      	b.n	7ad2 <__aeabi_dsub+0x15e>
    79c0:	1ab4      	subs	r4, r6, r2
    79c2:	46a4      	mov	ip, r4
    79c4:	2c00      	cmp	r4, #0
    79c6:	dc00      	bgt.n	79ca <__aeabi_dsub+0x56>
    79c8:	e0b2      	b.n	7b30 <__aeabi_dsub+0x1bc>
    79ca:	2a00      	cmp	r2, #0
    79cc:	d100      	bne.n	79d0 <__aeabi_dsub+0x5c>
    79ce:	e0c5      	b.n	7b5c <__aeabi_dsub+0x1e8>
    79d0:	4ab5      	ldr	r2, [pc, #724]	; (7ca8 <__aeabi_dsub+0x334>)
    79d2:	4296      	cmp	r6, r2
    79d4:	d100      	bne.n	79d8 <__aeabi_dsub+0x64>
    79d6:	e28b      	b.n	7ef0 <__aeabi_dsub+0x57c>
    79d8:	2280      	movs	r2, #128	; 0x80
    79da:	0412      	lsls	r2, r2, #16
    79dc:	4311      	orrs	r1, r2
    79de:	4662      	mov	r2, ip
    79e0:	2a38      	cmp	r2, #56	; 0x38
    79e2:	dd00      	ble.n	79e6 <__aeabi_dsub+0x72>
    79e4:	e1a1      	b.n	7d2a <__aeabi_dsub+0x3b6>
    79e6:	2a1f      	cmp	r2, #31
    79e8:	dd00      	ble.n	79ec <__aeabi_dsub+0x78>
    79ea:	e216      	b.n	7e1a <__aeabi_dsub+0x4a6>
    79ec:	2720      	movs	r7, #32
    79ee:	000c      	movs	r4, r1
    79f0:	1abf      	subs	r7, r7, r2
    79f2:	40bc      	lsls	r4, r7
    79f4:	0002      	movs	r2, r0
    79f6:	46a0      	mov	r8, r4
    79f8:	4664      	mov	r4, ip
    79fa:	40b8      	lsls	r0, r7
    79fc:	40e2      	lsrs	r2, r4
    79fe:	4644      	mov	r4, r8
    7a00:	4314      	orrs	r4, r2
    7a02:	0002      	movs	r2, r0
    7a04:	1e50      	subs	r0, r2, #1
    7a06:	4182      	sbcs	r2, r0
    7a08:	4660      	mov	r0, ip
    7a0a:	40c1      	lsrs	r1, r0
    7a0c:	4322      	orrs	r2, r4
    7a0e:	1a5b      	subs	r3, r3, r1
    7a10:	4649      	mov	r1, r9
    7a12:	1a8c      	subs	r4, r1, r2
    7a14:	45a1      	cmp	r9, r4
    7a16:	4192      	sbcs	r2, r2
    7a18:	4252      	negs	r2, r2
    7a1a:	1a9b      	subs	r3, r3, r2
    7a1c:	4698      	mov	r8, r3
    7a1e:	4643      	mov	r3, r8
    7a20:	021b      	lsls	r3, r3, #8
    7a22:	d400      	bmi.n	7a26 <__aeabi_dsub+0xb2>
    7a24:	e117      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7a26:	4643      	mov	r3, r8
    7a28:	025b      	lsls	r3, r3, #9
    7a2a:	0a5b      	lsrs	r3, r3, #9
    7a2c:	4698      	mov	r8, r3
    7a2e:	4643      	mov	r3, r8
    7a30:	2b00      	cmp	r3, #0
    7a32:	d100      	bne.n	7a36 <__aeabi_dsub+0xc2>
    7a34:	e16c      	b.n	7d10 <__aeabi_dsub+0x39c>
    7a36:	4640      	mov	r0, r8
    7a38:	f000 fb8a 	bl	8150 <__clzsi2>
    7a3c:	0002      	movs	r2, r0
    7a3e:	3a08      	subs	r2, #8
    7a40:	2120      	movs	r1, #32
    7a42:	0020      	movs	r0, r4
    7a44:	4643      	mov	r3, r8
    7a46:	1a89      	subs	r1, r1, r2
    7a48:	4093      	lsls	r3, r2
    7a4a:	40c8      	lsrs	r0, r1
    7a4c:	4094      	lsls	r4, r2
    7a4e:	4303      	orrs	r3, r0
    7a50:	4296      	cmp	r6, r2
    7a52:	dd00      	ble.n	7a56 <__aeabi_dsub+0xe2>
    7a54:	e157      	b.n	7d06 <__aeabi_dsub+0x392>
    7a56:	1b96      	subs	r6, r2, r6
    7a58:	1c71      	adds	r1, r6, #1
    7a5a:	291f      	cmp	r1, #31
    7a5c:	dd00      	ble.n	7a60 <__aeabi_dsub+0xec>
    7a5e:	e1cb      	b.n	7df8 <__aeabi_dsub+0x484>
    7a60:	2220      	movs	r2, #32
    7a62:	0018      	movs	r0, r3
    7a64:	0026      	movs	r6, r4
    7a66:	1a52      	subs	r2, r2, r1
    7a68:	4094      	lsls	r4, r2
    7a6a:	4090      	lsls	r0, r2
    7a6c:	40ce      	lsrs	r6, r1
    7a6e:	40cb      	lsrs	r3, r1
    7a70:	1e62      	subs	r2, r4, #1
    7a72:	4194      	sbcs	r4, r2
    7a74:	4330      	orrs	r0, r6
    7a76:	4698      	mov	r8, r3
    7a78:	2600      	movs	r6, #0
    7a7a:	4304      	orrs	r4, r0
    7a7c:	0763      	lsls	r3, r4, #29
    7a7e:	d009      	beq.n	7a94 <__aeabi_dsub+0x120>
    7a80:	230f      	movs	r3, #15
    7a82:	4023      	ands	r3, r4
    7a84:	2b04      	cmp	r3, #4
    7a86:	d005      	beq.n	7a94 <__aeabi_dsub+0x120>
    7a88:	1d23      	adds	r3, r4, #4
    7a8a:	42a3      	cmp	r3, r4
    7a8c:	41a4      	sbcs	r4, r4
    7a8e:	4264      	negs	r4, r4
    7a90:	44a0      	add	r8, r4
    7a92:	001c      	movs	r4, r3
    7a94:	4643      	mov	r3, r8
    7a96:	021b      	lsls	r3, r3, #8
    7a98:	d400      	bmi.n	7a9c <__aeabi_dsub+0x128>
    7a9a:	e0df      	b.n	7c5c <__aeabi_dsub+0x2e8>
    7a9c:	4b82      	ldr	r3, [pc, #520]	; (7ca8 <__aeabi_dsub+0x334>)
    7a9e:	3601      	adds	r6, #1
    7aa0:	429e      	cmp	r6, r3
    7aa2:	d100      	bne.n	7aa6 <__aeabi_dsub+0x132>
    7aa4:	e0fb      	b.n	7c9e <__aeabi_dsub+0x32a>
    7aa6:	4642      	mov	r2, r8
    7aa8:	4b80      	ldr	r3, [pc, #512]	; (7cac <__aeabi_dsub+0x338>)
    7aaa:	08e4      	lsrs	r4, r4, #3
    7aac:	401a      	ands	r2, r3
    7aae:	0013      	movs	r3, r2
    7ab0:	0571      	lsls	r1, r6, #21
    7ab2:	0752      	lsls	r2, r2, #29
    7ab4:	025b      	lsls	r3, r3, #9
    7ab6:	4322      	orrs	r2, r4
    7ab8:	0b1b      	lsrs	r3, r3, #12
    7aba:	0d49      	lsrs	r1, r1, #21
    7abc:	0509      	lsls	r1, r1, #20
    7abe:	07ed      	lsls	r5, r5, #31
    7ac0:	4319      	orrs	r1, r3
    7ac2:	4329      	orrs	r1, r5
    7ac4:	0010      	movs	r0, r2
    7ac6:	bcf0      	pop	{r4, r5, r6, r7}
    7ac8:	46bb      	mov	fp, r7
    7aca:	46b2      	mov	sl, r6
    7acc:	46a9      	mov	r9, r5
    7ace:	46a0      	mov	r8, r4
    7ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ad2:	1ab4      	subs	r4, r6, r2
    7ad4:	46a4      	mov	ip, r4
    7ad6:	2c00      	cmp	r4, #0
    7ad8:	dd58      	ble.n	7b8c <__aeabi_dsub+0x218>
    7ada:	2a00      	cmp	r2, #0
    7adc:	d100      	bne.n	7ae0 <__aeabi_dsub+0x16c>
    7ade:	e09e      	b.n	7c1e <__aeabi_dsub+0x2aa>
    7ae0:	4a71      	ldr	r2, [pc, #452]	; (7ca8 <__aeabi_dsub+0x334>)
    7ae2:	4296      	cmp	r6, r2
    7ae4:	d100      	bne.n	7ae8 <__aeabi_dsub+0x174>
    7ae6:	e13b      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7ae8:	2280      	movs	r2, #128	; 0x80
    7aea:	0412      	lsls	r2, r2, #16
    7aec:	4311      	orrs	r1, r2
    7aee:	4662      	mov	r2, ip
    7af0:	2a38      	cmp	r2, #56	; 0x38
    7af2:	dd00      	ble.n	7af6 <__aeabi_dsub+0x182>
    7af4:	e0c1      	b.n	7c7a <__aeabi_dsub+0x306>
    7af6:	2a1f      	cmp	r2, #31
    7af8:	dc00      	bgt.n	7afc <__aeabi_dsub+0x188>
    7afa:	e1bb      	b.n	7e74 <__aeabi_dsub+0x500>
    7afc:	000c      	movs	r4, r1
    7afe:	3a20      	subs	r2, #32
    7b00:	40d4      	lsrs	r4, r2
    7b02:	0022      	movs	r2, r4
    7b04:	4664      	mov	r4, ip
    7b06:	2c20      	cmp	r4, #32
    7b08:	d004      	beq.n	7b14 <__aeabi_dsub+0x1a0>
    7b0a:	2740      	movs	r7, #64	; 0x40
    7b0c:	1b3f      	subs	r7, r7, r4
    7b0e:	40b9      	lsls	r1, r7
    7b10:	4308      	orrs	r0, r1
    7b12:	4680      	mov	r8, r0
    7b14:	4644      	mov	r4, r8
    7b16:	1e61      	subs	r1, r4, #1
    7b18:	418c      	sbcs	r4, r1
    7b1a:	4314      	orrs	r4, r2
    7b1c:	e0b1      	b.n	7c82 <__aeabi_dsub+0x30e>
    7b1e:	000c      	movs	r4, r1
    7b20:	4304      	orrs	r4, r0
    7b22:	d02a      	beq.n	7b7a <__aeabi_dsub+0x206>
    7b24:	46bb      	mov	fp, r7
    7b26:	42bd      	cmp	r5, r7
    7b28:	d02d      	beq.n	7b86 <__aeabi_dsub+0x212>
    7b2a:	4c61      	ldr	r4, [pc, #388]	; (7cb0 <__aeabi_dsub+0x33c>)
    7b2c:	46a4      	mov	ip, r4
    7b2e:	44b4      	add	ip, r6
    7b30:	4664      	mov	r4, ip
    7b32:	2c00      	cmp	r4, #0
    7b34:	d05c      	beq.n	7bf0 <__aeabi_dsub+0x27c>
    7b36:	1b94      	subs	r4, r2, r6
    7b38:	46a4      	mov	ip, r4
    7b3a:	2e00      	cmp	r6, #0
    7b3c:	d000      	beq.n	7b40 <__aeabi_dsub+0x1cc>
    7b3e:	e115      	b.n	7d6c <__aeabi_dsub+0x3f8>
    7b40:	464d      	mov	r5, r9
    7b42:	431d      	orrs	r5, r3
    7b44:	d100      	bne.n	7b48 <__aeabi_dsub+0x1d4>
    7b46:	e1c3      	b.n	7ed0 <__aeabi_dsub+0x55c>
    7b48:	1e65      	subs	r5, r4, #1
    7b4a:	2c01      	cmp	r4, #1
    7b4c:	d100      	bne.n	7b50 <__aeabi_dsub+0x1dc>
    7b4e:	e20c      	b.n	7f6a <__aeabi_dsub+0x5f6>
    7b50:	4e55      	ldr	r6, [pc, #340]	; (7ca8 <__aeabi_dsub+0x334>)
    7b52:	42b4      	cmp	r4, r6
    7b54:	d100      	bne.n	7b58 <__aeabi_dsub+0x1e4>
    7b56:	e1f8      	b.n	7f4a <__aeabi_dsub+0x5d6>
    7b58:	46ac      	mov	ip, r5
    7b5a:	e10e      	b.n	7d7a <__aeabi_dsub+0x406>
    7b5c:	000a      	movs	r2, r1
    7b5e:	4302      	orrs	r2, r0
    7b60:	d100      	bne.n	7b64 <__aeabi_dsub+0x1f0>
    7b62:	e136      	b.n	7dd2 <__aeabi_dsub+0x45e>
    7b64:	0022      	movs	r2, r4
    7b66:	3a01      	subs	r2, #1
    7b68:	2c01      	cmp	r4, #1
    7b6a:	d100      	bne.n	7b6e <__aeabi_dsub+0x1fa>
    7b6c:	e1c6      	b.n	7efc <__aeabi_dsub+0x588>
    7b6e:	4c4e      	ldr	r4, [pc, #312]	; (7ca8 <__aeabi_dsub+0x334>)
    7b70:	45a4      	cmp	ip, r4
    7b72:	d100      	bne.n	7b76 <__aeabi_dsub+0x202>
    7b74:	e0f4      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7b76:	4694      	mov	ip, r2
    7b78:	e731      	b.n	79de <__aeabi_dsub+0x6a>
    7b7a:	2401      	movs	r4, #1
    7b7c:	4067      	eors	r7, r4
    7b7e:	46bb      	mov	fp, r7
    7b80:	42bd      	cmp	r5, r7
    7b82:	d000      	beq.n	7b86 <__aeabi_dsub+0x212>
    7b84:	e71c      	b.n	79c0 <__aeabi_dsub+0x4c>
    7b86:	4c4a      	ldr	r4, [pc, #296]	; (7cb0 <__aeabi_dsub+0x33c>)
    7b88:	46a4      	mov	ip, r4
    7b8a:	44b4      	add	ip, r6
    7b8c:	4664      	mov	r4, ip
    7b8e:	2c00      	cmp	r4, #0
    7b90:	d100      	bne.n	7b94 <__aeabi_dsub+0x220>
    7b92:	e0cf      	b.n	7d34 <__aeabi_dsub+0x3c0>
    7b94:	1b94      	subs	r4, r2, r6
    7b96:	46a4      	mov	ip, r4
    7b98:	2e00      	cmp	r6, #0
    7b9a:	d100      	bne.n	7b9e <__aeabi_dsub+0x22a>
    7b9c:	e15c      	b.n	7e58 <__aeabi_dsub+0x4e4>
    7b9e:	4e42      	ldr	r6, [pc, #264]	; (7ca8 <__aeabi_dsub+0x334>)
    7ba0:	42b2      	cmp	r2, r6
    7ba2:	d100      	bne.n	7ba6 <__aeabi_dsub+0x232>
    7ba4:	e1ec      	b.n	7f80 <__aeabi_dsub+0x60c>
    7ba6:	2680      	movs	r6, #128	; 0x80
    7ba8:	0436      	lsls	r6, r6, #16
    7baa:	4333      	orrs	r3, r6
    7bac:	4664      	mov	r4, ip
    7bae:	2c38      	cmp	r4, #56	; 0x38
    7bb0:	dd00      	ble.n	7bb4 <__aeabi_dsub+0x240>
    7bb2:	e1b3      	b.n	7f1c <__aeabi_dsub+0x5a8>
    7bb4:	2c1f      	cmp	r4, #31
    7bb6:	dd00      	ble.n	7bba <__aeabi_dsub+0x246>
    7bb8:	e238      	b.n	802c <__aeabi_dsub+0x6b8>
    7bba:	2620      	movs	r6, #32
    7bbc:	1b36      	subs	r6, r6, r4
    7bbe:	001c      	movs	r4, r3
    7bc0:	40b4      	lsls	r4, r6
    7bc2:	464f      	mov	r7, r9
    7bc4:	46a0      	mov	r8, r4
    7bc6:	4664      	mov	r4, ip
    7bc8:	40e7      	lsrs	r7, r4
    7bca:	4644      	mov	r4, r8
    7bcc:	433c      	orrs	r4, r7
    7bce:	464f      	mov	r7, r9
    7bd0:	40b7      	lsls	r7, r6
    7bd2:	003e      	movs	r6, r7
    7bd4:	1e77      	subs	r7, r6, #1
    7bd6:	41be      	sbcs	r6, r7
    7bd8:	4334      	orrs	r4, r6
    7bda:	4666      	mov	r6, ip
    7bdc:	40f3      	lsrs	r3, r6
    7bde:	18c9      	adds	r1, r1, r3
    7be0:	1824      	adds	r4, r4, r0
    7be2:	4284      	cmp	r4, r0
    7be4:	419b      	sbcs	r3, r3
    7be6:	425b      	negs	r3, r3
    7be8:	4698      	mov	r8, r3
    7bea:	0016      	movs	r6, r2
    7bec:	4488      	add	r8, r1
    7bee:	e04e      	b.n	7c8e <__aeabi_dsub+0x31a>
    7bf0:	4a30      	ldr	r2, [pc, #192]	; (7cb4 <__aeabi_dsub+0x340>)
    7bf2:	1c74      	adds	r4, r6, #1
    7bf4:	4214      	tst	r4, r2
    7bf6:	d000      	beq.n	7bfa <__aeabi_dsub+0x286>
    7bf8:	e0d6      	b.n	7da8 <__aeabi_dsub+0x434>
    7bfa:	464a      	mov	r2, r9
    7bfc:	431a      	orrs	r2, r3
    7bfe:	2e00      	cmp	r6, #0
    7c00:	d000      	beq.n	7c04 <__aeabi_dsub+0x290>
    7c02:	e15b      	b.n	7ebc <__aeabi_dsub+0x548>
    7c04:	2a00      	cmp	r2, #0
    7c06:	d100      	bne.n	7c0a <__aeabi_dsub+0x296>
    7c08:	e1a5      	b.n	7f56 <__aeabi_dsub+0x5e2>
    7c0a:	000a      	movs	r2, r1
    7c0c:	4302      	orrs	r2, r0
    7c0e:	d000      	beq.n	7c12 <__aeabi_dsub+0x29e>
    7c10:	e1bb      	b.n	7f8a <__aeabi_dsub+0x616>
    7c12:	464a      	mov	r2, r9
    7c14:	0759      	lsls	r1, r3, #29
    7c16:	08d2      	lsrs	r2, r2, #3
    7c18:	430a      	orrs	r2, r1
    7c1a:	08db      	lsrs	r3, r3, #3
    7c1c:	e027      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7c1e:	000a      	movs	r2, r1
    7c20:	4302      	orrs	r2, r0
    7c22:	d100      	bne.n	7c26 <__aeabi_dsub+0x2b2>
    7c24:	e174      	b.n	7f10 <__aeabi_dsub+0x59c>
    7c26:	0022      	movs	r2, r4
    7c28:	3a01      	subs	r2, #1
    7c2a:	2c01      	cmp	r4, #1
    7c2c:	d005      	beq.n	7c3a <__aeabi_dsub+0x2c6>
    7c2e:	4c1e      	ldr	r4, [pc, #120]	; (7ca8 <__aeabi_dsub+0x334>)
    7c30:	45a4      	cmp	ip, r4
    7c32:	d100      	bne.n	7c36 <__aeabi_dsub+0x2c2>
    7c34:	e094      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7c36:	4694      	mov	ip, r2
    7c38:	e759      	b.n	7aee <__aeabi_dsub+0x17a>
    7c3a:	4448      	add	r0, r9
    7c3c:	4548      	cmp	r0, r9
    7c3e:	4192      	sbcs	r2, r2
    7c40:	185b      	adds	r3, r3, r1
    7c42:	4698      	mov	r8, r3
    7c44:	0004      	movs	r4, r0
    7c46:	4252      	negs	r2, r2
    7c48:	4490      	add	r8, r2
    7c4a:	4643      	mov	r3, r8
    7c4c:	2602      	movs	r6, #2
    7c4e:	021b      	lsls	r3, r3, #8
    7c50:	d500      	bpl.n	7c54 <__aeabi_dsub+0x2e0>
    7c52:	e0c4      	b.n	7dde <__aeabi_dsub+0x46a>
    7c54:	3e01      	subs	r6, #1
    7c56:	0763      	lsls	r3, r4, #29
    7c58:	d000      	beq.n	7c5c <__aeabi_dsub+0x2e8>
    7c5a:	e711      	b.n	7a80 <__aeabi_dsub+0x10c>
    7c5c:	4643      	mov	r3, r8
    7c5e:	46b4      	mov	ip, r6
    7c60:	0759      	lsls	r1, r3, #29
    7c62:	08e2      	lsrs	r2, r4, #3
    7c64:	430a      	orrs	r2, r1
    7c66:	08db      	lsrs	r3, r3, #3
    7c68:	490f      	ldr	r1, [pc, #60]	; (7ca8 <__aeabi_dsub+0x334>)
    7c6a:	458c      	cmp	ip, r1
    7c6c:	d040      	beq.n	7cf0 <__aeabi_dsub+0x37c>
    7c6e:	4661      	mov	r1, ip
    7c70:	031b      	lsls	r3, r3, #12
    7c72:	0549      	lsls	r1, r1, #21
    7c74:	0b1b      	lsrs	r3, r3, #12
    7c76:	0d49      	lsrs	r1, r1, #21
    7c78:	e720      	b.n	7abc <__aeabi_dsub+0x148>
    7c7a:	4301      	orrs	r1, r0
    7c7c:	000c      	movs	r4, r1
    7c7e:	1e61      	subs	r1, r4, #1
    7c80:	418c      	sbcs	r4, r1
    7c82:	444c      	add	r4, r9
    7c84:	454c      	cmp	r4, r9
    7c86:	4192      	sbcs	r2, r2
    7c88:	4252      	negs	r2, r2
    7c8a:	4690      	mov	r8, r2
    7c8c:	4498      	add	r8, r3
    7c8e:	4643      	mov	r3, r8
    7c90:	021b      	lsls	r3, r3, #8
    7c92:	d5e0      	bpl.n	7c56 <__aeabi_dsub+0x2e2>
    7c94:	4b04      	ldr	r3, [pc, #16]	; (7ca8 <__aeabi_dsub+0x334>)
    7c96:	3601      	adds	r6, #1
    7c98:	429e      	cmp	r6, r3
    7c9a:	d000      	beq.n	7c9e <__aeabi_dsub+0x32a>
    7c9c:	e09f      	b.n	7dde <__aeabi_dsub+0x46a>
    7c9e:	0031      	movs	r1, r6
    7ca0:	2300      	movs	r3, #0
    7ca2:	2200      	movs	r2, #0
    7ca4:	e70a      	b.n	7abc <__aeabi_dsub+0x148>
    7ca6:	46c0      	nop			; (mov r8, r8)
    7ca8:	000007ff 	.word	0x000007ff
    7cac:	ff7fffff 	.word	0xff7fffff
    7cb0:	fffff801 	.word	0xfffff801
    7cb4:	000007fe 	.word	0x000007fe
    7cb8:	2a00      	cmp	r2, #0
    7cba:	d100      	bne.n	7cbe <__aeabi_dsub+0x34a>
    7cbc:	e160      	b.n	7f80 <__aeabi_dsub+0x60c>
    7cbe:	000a      	movs	r2, r1
    7cc0:	4302      	orrs	r2, r0
    7cc2:	d04d      	beq.n	7d60 <__aeabi_dsub+0x3ec>
    7cc4:	464a      	mov	r2, r9
    7cc6:	075c      	lsls	r4, r3, #29
    7cc8:	08d2      	lsrs	r2, r2, #3
    7cca:	4322      	orrs	r2, r4
    7ccc:	2480      	movs	r4, #128	; 0x80
    7cce:	08db      	lsrs	r3, r3, #3
    7cd0:	0324      	lsls	r4, r4, #12
    7cd2:	4223      	tst	r3, r4
    7cd4:	d007      	beq.n	7ce6 <__aeabi_dsub+0x372>
    7cd6:	08ce      	lsrs	r6, r1, #3
    7cd8:	4226      	tst	r6, r4
    7cda:	d104      	bne.n	7ce6 <__aeabi_dsub+0x372>
    7cdc:	465d      	mov	r5, fp
    7cde:	0033      	movs	r3, r6
    7ce0:	08c2      	lsrs	r2, r0, #3
    7ce2:	0749      	lsls	r1, r1, #29
    7ce4:	430a      	orrs	r2, r1
    7ce6:	0f51      	lsrs	r1, r2, #29
    7ce8:	00d2      	lsls	r2, r2, #3
    7cea:	08d2      	lsrs	r2, r2, #3
    7cec:	0749      	lsls	r1, r1, #29
    7cee:	430a      	orrs	r2, r1
    7cf0:	0011      	movs	r1, r2
    7cf2:	4319      	orrs	r1, r3
    7cf4:	d100      	bne.n	7cf8 <__aeabi_dsub+0x384>
    7cf6:	e1c8      	b.n	808a <__aeabi_dsub+0x716>
    7cf8:	2180      	movs	r1, #128	; 0x80
    7cfa:	0309      	lsls	r1, r1, #12
    7cfc:	430b      	orrs	r3, r1
    7cfe:	031b      	lsls	r3, r3, #12
    7d00:	49d5      	ldr	r1, [pc, #852]	; (8058 <__aeabi_dsub+0x6e4>)
    7d02:	0b1b      	lsrs	r3, r3, #12
    7d04:	e6da      	b.n	7abc <__aeabi_dsub+0x148>
    7d06:	49d5      	ldr	r1, [pc, #852]	; (805c <__aeabi_dsub+0x6e8>)
    7d08:	1ab6      	subs	r6, r6, r2
    7d0a:	400b      	ands	r3, r1
    7d0c:	4698      	mov	r8, r3
    7d0e:	e6b5      	b.n	7a7c <__aeabi_dsub+0x108>
    7d10:	0020      	movs	r0, r4
    7d12:	f000 fa1d 	bl	8150 <__clzsi2>
    7d16:	0002      	movs	r2, r0
    7d18:	3218      	adds	r2, #24
    7d1a:	2a1f      	cmp	r2, #31
    7d1c:	dc00      	bgt.n	7d20 <__aeabi_dsub+0x3ac>
    7d1e:	e68f      	b.n	7a40 <__aeabi_dsub+0xcc>
    7d20:	0023      	movs	r3, r4
    7d22:	3808      	subs	r0, #8
    7d24:	4083      	lsls	r3, r0
    7d26:	2400      	movs	r4, #0
    7d28:	e692      	b.n	7a50 <__aeabi_dsub+0xdc>
    7d2a:	4308      	orrs	r0, r1
    7d2c:	0002      	movs	r2, r0
    7d2e:	1e50      	subs	r0, r2, #1
    7d30:	4182      	sbcs	r2, r0
    7d32:	e66d      	b.n	7a10 <__aeabi_dsub+0x9c>
    7d34:	4cca      	ldr	r4, [pc, #808]	; (8060 <__aeabi_dsub+0x6ec>)
    7d36:	1c72      	adds	r2, r6, #1
    7d38:	4222      	tst	r2, r4
    7d3a:	d000      	beq.n	7d3e <__aeabi_dsub+0x3ca>
    7d3c:	e0ad      	b.n	7e9a <__aeabi_dsub+0x526>
    7d3e:	464a      	mov	r2, r9
    7d40:	431a      	orrs	r2, r3
    7d42:	2e00      	cmp	r6, #0
    7d44:	d1b8      	bne.n	7cb8 <__aeabi_dsub+0x344>
    7d46:	2a00      	cmp	r2, #0
    7d48:	d100      	bne.n	7d4c <__aeabi_dsub+0x3d8>
    7d4a:	e158      	b.n	7ffe <__aeabi_dsub+0x68a>
    7d4c:	000a      	movs	r2, r1
    7d4e:	4302      	orrs	r2, r0
    7d50:	d000      	beq.n	7d54 <__aeabi_dsub+0x3e0>
    7d52:	e159      	b.n	8008 <__aeabi_dsub+0x694>
    7d54:	464a      	mov	r2, r9
    7d56:	0759      	lsls	r1, r3, #29
    7d58:	08d2      	lsrs	r2, r2, #3
    7d5a:	430a      	orrs	r2, r1
    7d5c:	08db      	lsrs	r3, r3, #3
    7d5e:	e786      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7d60:	464a      	mov	r2, r9
    7d62:	0759      	lsls	r1, r3, #29
    7d64:	08d2      	lsrs	r2, r2, #3
    7d66:	430a      	orrs	r2, r1
    7d68:	08db      	lsrs	r3, r3, #3
    7d6a:	e7c1      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7d6c:	4dba      	ldr	r5, [pc, #744]	; (8058 <__aeabi_dsub+0x6e4>)
    7d6e:	42aa      	cmp	r2, r5
    7d70:	d100      	bne.n	7d74 <__aeabi_dsub+0x400>
    7d72:	e11e      	b.n	7fb2 <__aeabi_dsub+0x63e>
    7d74:	2580      	movs	r5, #128	; 0x80
    7d76:	042d      	lsls	r5, r5, #16
    7d78:	432b      	orrs	r3, r5
    7d7a:	4664      	mov	r4, ip
    7d7c:	2c38      	cmp	r4, #56	; 0x38
    7d7e:	dc5d      	bgt.n	7e3c <__aeabi_dsub+0x4c8>
    7d80:	2c1f      	cmp	r4, #31
    7d82:	dd00      	ble.n	7d86 <__aeabi_dsub+0x412>
    7d84:	e0d0      	b.n	7f28 <__aeabi_dsub+0x5b4>
    7d86:	2520      	movs	r5, #32
    7d88:	4667      	mov	r7, ip
    7d8a:	1b2d      	subs	r5, r5, r4
    7d8c:	464e      	mov	r6, r9
    7d8e:	001c      	movs	r4, r3
    7d90:	40fe      	lsrs	r6, r7
    7d92:	40ac      	lsls	r4, r5
    7d94:	4334      	orrs	r4, r6
    7d96:	464e      	mov	r6, r9
    7d98:	40ae      	lsls	r6, r5
    7d9a:	0035      	movs	r5, r6
    7d9c:	40fb      	lsrs	r3, r7
    7d9e:	1e6e      	subs	r6, r5, #1
    7da0:	41b5      	sbcs	r5, r6
    7da2:	1ac9      	subs	r1, r1, r3
    7da4:	432c      	orrs	r4, r5
    7da6:	e04e      	b.n	7e46 <__aeabi_dsub+0x4d2>
    7da8:	464a      	mov	r2, r9
    7daa:	1a14      	subs	r4, r2, r0
    7dac:	45a1      	cmp	r9, r4
    7dae:	4192      	sbcs	r2, r2
    7db0:	4252      	negs	r2, r2
    7db2:	4690      	mov	r8, r2
    7db4:	1a5f      	subs	r7, r3, r1
    7db6:	003a      	movs	r2, r7
    7db8:	4647      	mov	r7, r8
    7dba:	1bd2      	subs	r2, r2, r7
    7dbc:	4690      	mov	r8, r2
    7dbe:	0212      	lsls	r2, r2, #8
    7dc0:	d500      	bpl.n	7dc4 <__aeabi_dsub+0x450>
    7dc2:	e08b      	b.n	7edc <__aeabi_dsub+0x568>
    7dc4:	4642      	mov	r2, r8
    7dc6:	4322      	orrs	r2, r4
    7dc8:	d000      	beq.n	7dcc <__aeabi_dsub+0x458>
    7dca:	e630      	b.n	7a2e <__aeabi_dsub+0xba>
    7dcc:	2300      	movs	r3, #0
    7dce:	2500      	movs	r5, #0
    7dd0:	e74d      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7dd2:	464a      	mov	r2, r9
    7dd4:	0759      	lsls	r1, r3, #29
    7dd6:	08d2      	lsrs	r2, r2, #3
    7dd8:	430a      	orrs	r2, r1
    7dda:	08db      	lsrs	r3, r3, #3
    7ddc:	e744      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7dde:	4642      	mov	r2, r8
    7de0:	4b9e      	ldr	r3, [pc, #632]	; (805c <__aeabi_dsub+0x6e8>)
    7de2:	0861      	lsrs	r1, r4, #1
    7de4:	401a      	ands	r2, r3
    7de6:	0013      	movs	r3, r2
    7de8:	2201      	movs	r2, #1
    7dea:	4014      	ands	r4, r2
    7dec:	430c      	orrs	r4, r1
    7dee:	07da      	lsls	r2, r3, #31
    7df0:	085b      	lsrs	r3, r3, #1
    7df2:	4698      	mov	r8, r3
    7df4:	4314      	orrs	r4, r2
    7df6:	e641      	b.n	7a7c <__aeabi_dsub+0x108>
    7df8:	001a      	movs	r2, r3
    7dfa:	3e1f      	subs	r6, #31
    7dfc:	40f2      	lsrs	r2, r6
    7dfe:	0016      	movs	r6, r2
    7e00:	2920      	cmp	r1, #32
    7e02:	d003      	beq.n	7e0c <__aeabi_dsub+0x498>
    7e04:	2240      	movs	r2, #64	; 0x40
    7e06:	1a51      	subs	r1, r2, r1
    7e08:	408b      	lsls	r3, r1
    7e0a:	431c      	orrs	r4, r3
    7e0c:	1e62      	subs	r2, r4, #1
    7e0e:	4194      	sbcs	r4, r2
    7e10:	2300      	movs	r3, #0
    7e12:	4334      	orrs	r4, r6
    7e14:	4698      	mov	r8, r3
    7e16:	2600      	movs	r6, #0
    7e18:	e71d      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7e1a:	000c      	movs	r4, r1
    7e1c:	3a20      	subs	r2, #32
    7e1e:	40d4      	lsrs	r4, r2
    7e20:	0022      	movs	r2, r4
    7e22:	4664      	mov	r4, ip
    7e24:	2c20      	cmp	r4, #32
    7e26:	d004      	beq.n	7e32 <__aeabi_dsub+0x4be>
    7e28:	2740      	movs	r7, #64	; 0x40
    7e2a:	1b3f      	subs	r7, r7, r4
    7e2c:	40b9      	lsls	r1, r7
    7e2e:	4308      	orrs	r0, r1
    7e30:	4680      	mov	r8, r0
    7e32:	4644      	mov	r4, r8
    7e34:	1e61      	subs	r1, r4, #1
    7e36:	418c      	sbcs	r4, r1
    7e38:	4322      	orrs	r2, r4
    7e3a:	e5e9      	b.n	7a10 <__aeabi_dsub+0x9c>
    7e3c:	464c      	mov	r4, r9
    7e3e:	4323      	orrs	r3, r4
    7e40:	001c      	movs	r4, r3
    7e42:	1e63      	subs	r3, r4, #1
    7e44:	419c      	sbcs	r4, r3
    7e46:	1b04      	subs	r4, r0, r4
    7e48:	42a0      	cmp	r0, r4
    7e4a:	419b      	sbcs	r3, r3
    7e4c:	425b      	negs	r3, r3
    7e4e:	1acb      	subs	r3, r1, r3
    7e50:	4698      	mov	r8, r3
    7e52:	465d      	mov	r5, fp
    7e54:	0016      	movs	r6, r2
    7e56:	e5e2      	b.n	7a1e <__aeabi_dsub+0xaa>
    7e58:	464e      	mov	r6, r9
    7e5a:	431e      	orrs	r6, r3
    7e5c:	d100      	bne.n	7e60 <__aeabi_dsub+0x4ec>
    7e5e:	e0ae      	b.n	7fbe <__aeabi_dsub+0x64a>
    7e60:	1e66      	subs	r6, r4, #1
    7e62:	2c01      	cmp	r4, #1
    7e64:	d100      	bne.n	7e68 <__aeabi_dsub+0x4f4>
    7e66:	e0fd      	b.n	8064 <__aeabi_dsub+0x6f0>
    7e68:	4f7b      	ldr	r7, [pc, #492]	; (8058 <__aeabi_dsub+0x6e4>)
    7e6a:	42bc      	cmp	r4, r7
    7e6c:	d100      	bne.n	7e70 <__aeabi_dsub+0x4fc>
    7e6e:	e107      	b.n	8080 <__aeabi_dsub+0x70c>
    7e70:	46b4      	mov	ip, r6
    7e72:	e69b      	b.n	7bac <__aeabi_dsub+0x238>
    7e74:	4664      	mov	r4, ip
    7e76:	2220      	movs	r2, #32
    7e78:	1b12      	subs	r2, r2, r4
    7e7a:	000c      	movs	r4, r1
    7e7c:	4094      	lsls	r4, r2
    7e7e:	0007      	movs	r7, r0
    7e80:	4090      	lsls	r0, r2
    7e82:	46a0      	mov	r8, r4
    7e84:	4664      	mov	r4, ip
    7e86:	1e42      	subs	r2, r0, #1
    7e88:	4190      	sbcs	r0, r2
    7e8a:	4662      	mov	r2, ip
    7e8c:	40e7      	lsrs	r7, r4
    7e8e:	4644      	mov	r4, r8
    7e90:	40d1      	lsrs	r1, r2
    7e92:	433c      	orrs	r4, r7
    7e94:	4304      	orrs	r4, r0
    7e96:	185b      	adds	r3, r3, r1
    7e98:	e6f3      	b.n	7c82 <__aeabi_dsub+0x30e>
    7e9a:	4c6f      	ldr	r4, [pc, #444]	; (8058 <__aeabi_dsub+0x6e4>)
    7e9c:	42a2      	cmp	r2, r4
    7e9e:	d100      	bne.n	7ea2 <__aeabi_dsub+0x52e>
    7ea0:	e0d5      	b.n	804e <__aeabi_dsub+0x6da>
    7ea2:	4448      	add	r0, r9
    7ea4:	185b      	adds	r3, r3, r1
    7ea6:	4548      	cmp	r0, r9
    7ea8:	4189      	sbcs	r1, r1
    7eaa:	4249      	negs	r1, r1
    7eac:	185b      	adds	r3, r3, r1
    7eae:	07dc      	lsls	r4, r3, #31
    7eb0:	0840      	lsrs	r0, r0, #1
    7eb2:	085b      	lsrs	r3, r3, #1
    7eb4:	4698      	mov	r8, r3
    7eb6:	0016      	movs	r6, r2
    7eb8:	4304      	orrs	r4, r0
    7eba:	e6cc      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7ebc:	2a00      	cmp	r2, #0
    7ebe:	d000      	beq.n	7ec2 <__aeabi_dsub+0x54e>
    7ec0:	e082      	b.n	7fc8 <__aeabi_dsub+0x654>
    7ec2:	000a      	movs	r2, r1
    7ec4:	4302      	orrs	r2, r0
    7ec6:	d140      	bne.n	7f4a <__aeabi_dsub+0x5d6>
    7ec8:	2380      	movs	r3, #128	; 0x80
    7eca:	2500      	movs	r5, #0
    7ecc:	031b      	lsls	r3, r3, #12
    7ece:	e713      	b.n	7cf8 <__aeabi_dsub+0x384>
    7ed0:	074b      	lsls	r3, r1, #29
    7ed2:	08c2      	lsrs	r2, r0, #3
    7ed4:	431a      	orrs	r2, r3
    7ed6:	465d      	mov	r5, fp
    7ed8:	08cb      	lsrs	r3, r1, #3
    7eda:	e6c5      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7edc:	464a      	mov	r2, r9
    7ede:	1a84      	subs	r4, r0, r2
    7ee0:	42a0      	cmp	r0, r4
    7ee2:	4192      	sbcs	r2, r2
    7ee4:	1acb      	subs	r3, r1, r3
    7ee6:	4252      	negs	r2, r2
    7ee8:	1a9b      	subs	r3, r3, r2
    7eea:	4698      	mov	r8, r3
    7eec:	465d      	mov	r5, fp
    7eee:	e59e      	b.n	7a2e <__aeabi_dsub+0xba>
    7ef0:	464a      	mov	r2, r9
    7ef2:	0759      	lsls	r1, r3, #29
    7ef4:	08d2      	lsrs	r2, r2, #3
    7ef6:	430a      	orrs	r2, r1
    7ef8:	08db      	lsrs	r3, r3, #3
    7efa:	e6f9      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7efc:	464a      	mov	r2, r9
    7efe:	1a14      	subs	r4, r2, r0
    7f00:	45a1      	cmp	r9, r4
    7f02:	4192      	sbcs	r2, r2
    7f04:	1a5b      	subs	r3, r3, r1
    7f06:	4252      	negs	r2, r2
    7f08:	1a9b      	subs	r3, r3, r2
    7f0a:	4698      	mov	r8, r3
    7f0c:	2601      	movs	r6, #1
    7f0e:	e586      	b.n	7a1e <__aeabi_dsub+0xaa>
    7f10:	464a      	mov	r2, r9
    7f12:	0759      	lsls	r1, r3, #29
    7f14:	08d2      	lsrs	r2, r2, #3
    7f16:	430a      	orrs	r2, r1
    7f18:	08db      	lsrs	r3, r3, #3
    7f1a:	e6a5      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7f1c:	464c      	mov	r4, r9
    7f1e:	4323      	orrs	r3, r4
    7f20:	001c      	movs	r4, r3
    7f22:	1e63      	subs	r3, r4, #1
    7f24:	419c      	sbcs	r4, r3
    7f26:	e65b      	b.n	7be0 <__aeabi_dsub+0x26c>
    7f28:	4665      	mov	r5, ip
    7f2a:	001e      	movs	r6, r3
    7f2c:	3d20      	subs	r5, #32
    7f2e:	40ee      	lsrs	r6, r5
    7f30:	2c20      	cmp	r4, #32
    7f32:	d005      	beq.n	7f40 <__aeabi_dsub+0x5cc>
    7f34:	2540      	movs	r5, #64	; 0x40
    7f36:	1b2d      	subs	r5, r5, r4
    7f38:	40ab      	lsls	r3, r5
    7f3a:	464c      	mov	r4, r9
    7f3c:	431c      	orrs	r4, r3
    7f3e:	46a2      	mov	sl, r4
    7f40:	4654      	mov	r4, sl
    7f42:	1e63      	subs	r3, r4, #1
    7f44:	419c      	sbcs	r4, r3
    7f46:	4334      	orrs	r4, r6
    7f48:	e77d      	b.n	7e46 <__aeabi_dsub+0x4d2>
    7f4a:	074b      	lsls	r3, r1, #29
    7f4c:	08c2      	lsrs	r2, r0, #3
    7f4e:	431a      	orrs	r2, r3
    7f50:	465d      	mov	r5, fp
    7f52:	08cb      	lsrs	r3, r1, #3
    7f54:	e6cc      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7f56:	000a      	movs	r2, r1
    7f58:	4302      	orrs	r2, r0
    7f5a:	d100      	bne.n	7f5e <__aeabi_dsub+0x5ea>
    7f5c:	e736      	b.n	7dcc <__aeabi_dsub+0x458>
    7f5e:	074b      	lsls	r3, r1, #29
    7f60:	08c2      	lsrs	r2, r0, #3
    7f62:	431a      	orrs	r2, r3
    7f64:	465d      	mov	r5, fp
    7f66:	08cb      	lsrs	r3, r1, #3
    7f68:	e681      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7f6a:	464a      	mov	r2, r9
    7f6c:	1a84      	subs	r4, r0, r2
    7f6e:	42a0      	cmp	r0, r4
    7f70:	4192      	sbcs	r2, r2
    7f72:	1acb      	subs	r3, r1, r3
    7f74:	4252      	negs	r2, r2
    7f76:	1a9b      	subs	r3, r3, r2
    7f78:	4698      	mov	r8, r3
    7f7a:	465d      	mov	r5, fp
    7f7c:	2601      	movs	r6, #1
    7f7e:	e54e      	b.n	7a1e <__aeabi_dsub+0xaa>
    7f80:	074b      	lsls	r3, r1, #29
    7f82:	08c2      	lsrs	r2, r0, #3
    7f84:	431a      	orrs	r2, r3
    7f86:	08cb      	lsrs	r3, r1, #3
    7f88:	e6b2      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7f8a:	464a      	mov	r2, r9
    7f8c:	1a14      	subs	r4, r2, r0
    7f8e:	45a1      	cmp	r9, r4
    7f90:	4192      	sbcs	r2, r2
    7f92:	1a5f      	subs	r7, r3, r1
    7f94:	4252      	negs	r2, r2
    7f96:	1aba      	subs	r2, r7, r2
    7f98:	4690      	mov	r8, r2
    7f9a:	0212      	lsls	r2, r2, #8
    7f9c:	d56b      	bpl.n	8076 <__aeabi_dsub+0x702>
    7f9e:	464a      	mov	r2, r9
    7fa0:	1a84      	subs	r4, r0, r2
    7fa2:	42a0      	cmp	r0, r4
    7fa4:	4192      	sbcs	r2, r2
    7fa6:	1acb      	subs	r3, r1, r3
    7fa8:	4252      	negs	r2, r2
    7faa:	1a9b      	subs	r3, r3, r2
    7fac:	4698      	mov	r8, r3
    7fae:	465d      	mov	r5, fp
    7fb0:	e564      	b.n	7a7c <__aeabi_dsub+0x108>
    7fb2:	074b      	lsls	r3, r1, #29
    7fb4:	08c2      	lsrs	r2, r0, #3
    7fb6:	431a      	orrs	r2, r3
    7fb8:	465d      	mov	r5, fp
    7fba:	08cb      	lsrs	r3, r1, #3
    7fbc:	e698      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7fbe:	074b      	lsls	r3, r1, #29
    7fc0:	08c2      	lsrs	r2, r0, #3
    7fc2:	431a      	orrs	r2, r3
    7fc4:	08cb      	lsrs	r3, r1, #3
    7fc6:	e64f      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7fc8:	000a      	movs	r2, r1
    7fca:	4302      	orrs	r2, r0
    7fcc:	d090      	beq.n	7ef0 <__aeabi_dsub+0x57c>
    7fce:	464a      	mov	r2, r9
    7fd0:	075c      	lsls	r4, r3, #29
    7fd2:	08d2      	lsrs	r2, r2, #3
    7fd4:	4314      	orrs	r4, r2
    7fd6:	2280      	movs	r2, #128	; 0x80
    7fd8:	08db      	lsrs	r3, r3, #3
    7fda:	0312      	lsls	r2, r2, #12
    7fdc:	4213      	tst	r3, r2
    7fde:	d008      	beq.n	7ff2 <__aeabi_dsub+0x67e>
    7fe0:	08ce      	lsrs	r6, r1, #3
    7fe2:	4216      	tst	r6, r2
    7fe4:	d105      	bne.n	7ff2 <__aeabi_dsub+0x67e>
    7fe6:	08c0      	lsrs	r0, r0, #3
    7fe8:	0749      	lsls	r1, r1, #29
    7fea:	4308      	orrs	r0, r1
    7fec:	0004      	movs	r4, r0
    7fee:	465d      	mov	r5, fp
    7ff0:	0033      	movs	r3, r6
    7ff2:	0f61      	lsrs	r1, r4, #29
    7ff4:	00e2      	lsls	r2, r4, #3
    7ff6:	0749      	lsls	r1, r1, #29
    7ff8:	08d2      	lsrs	r2, r2, #3
    7ffa:	430a      	orrs	r2, r1
    7ffc:	e678      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7ffe:	074b      	lsls	r3, r1, #29
    8000:	08c2      	lsrs	r2, r0, #3
    8002:	431a      	orrs	r2, r3
    8004:	08cb      	lsrs	r3, r1, #3
    8006:	e632      	b.n	7c6e <__aeabi_dsub+0x2fa>
    8008:	4448      	add	r0, r9
    800a:	185b      	adds	r3, r3, r1
    800c:	4548      	cmp	r0, r9
    800e:	4192      	sbcs	r2, r2
    8010:	4698      	mov	r8, r3
    8012:	4252      	negs	r2, r2
    8014:	4490      	add	r8, r2
    8016:	4643      	mov	r3, r8
    8018:	0004      	movs	r4, r0
    801a:	021b      	lsls	r3, r3, #8
    801c:	d400      	bmi.n	8020 <__aeabi_dsub+0x6ac>
    801e:	e61a      	b.n	7c56 <__aeabi_dsub+0x2e2>
    8020:	4642      	mov	r2, r8
    8022:	4b0e      	ldr	r3, [pc, #56]	; (805c <__aeabi_dsub+0x6e8>)
    8024:	2601      	movs	r6, #1
    8026:	401a      	ands	r2, r3
    8028:	4690      	mov	r8, r2
    802a:	e614      	b.n	7c56 <__aeabi_dsub+0x2e2>
    802c:	4666      	mov	r6, ip
    802e:	001f      	movs	r7, r3
    8030:	3e20      	subs	r6, #32
    8032:	40f7      	lsrs	r7, r6
    8034:	2c20      	cmp	r4, #32
    8036:	d005      	beq.n	8044 <__aeabi_dsub+0x6d0>
    8038:	2640      	movs	r6, #64	; 0x40
    803a:	1b36      	subs	r6, r6, r4
    803c:	40b3      	lsls	r3, r6
    803e:	464c      	mov	r4, r9
    8040:	431c      	orrs	r4, r3
    8042:	46a2      	mov	sl, r4
    8044:	4654      	mov	r4, sl
    8046:	1e63      	subs	r3, r4, #1
    8048:	419c      	sbcs	r4, r3
    804a:	433c      	orrs	r4, r7
    804c:	e5c8      	b.n	7be0 <__aeabi_dsub+0x26c>
    804e:	0011      	movs	r1, r2
    8050:	2300      	movs	r3, #0
    8052:	2200      	movs	r2, #0
    8054:	e532      	b.n	7abc <__aeabi_dsub+0x148>
    8056:	46c0      	nop			; (mov r8, r8)
    8058:	000007ff 	.word	0x000007ff
    805c:	ff7fffff 	.word	0xff7fffff
    8060:	000007fe 	.word	0x000007fe
    8064:	464a      	mov	r2, r9
    8066:	1814      	adds	r4, r2, r0
    8068:	4284      	cmp	r4, r0
    806a:	4192      	sbcs	r2, r2
    806c:	185b      	adds	r3, r3, r1
    806e:	4698      	mov	r8, r3
    8070:	4252      	negs	r2, r2
    8072:	4490      	add	r8, r2
    8074:	e5e9      	b.n	7c4a <__aeabi_dsub+0x2d6>
    8076:	4642      	mov	r2, r8
    8078:	4322      	orrs	r2, r4
    807a:	d100      	bne.n	807e <__aeabi_dsub+0x70a>
    807c:	e6a6      	b.n	7dcc <__aeabi_dsub+0x458>
    807e:	e5ea      	b.n	7c56 <__aeabi_dsub+0x2e2>
    8080:	074b      	lsls	r3, r1, #29
    8082:	08c2      	lsrs	r2, r0, #3
    8084:	431a      	orrs	r2, r3
    8086:	08cb      	lsrs	r3, r1, #3
    8088:	e632      	b.n	7cf0 <__aeabi_dsub+0x37c>
    808a:	2200      	movs	r2, #0
    808c:	4901      	ldr	r1, [pc, #4]	; (8094 <__aeabi_dsub+0x720>)
    808e:	0013      	movs	r3, r2
    8090:	e514      	b.n	7abc <__aeabi_dsub+0x148>
    8092:	46c0      	nop			; (mov r8, r8)
    8094:	000007ff 	.word	0x000007ff

00008098 <__aeabi_d2iz>:
__aeabi_d2iz():
    8098:	000a      	movs	r2, r1
    809a:	b530      	push	{r4, r5, lr}
    809c:	4c13      	ldr	r4, [pc, #76]	; (80ec <__aeabi_d2iz+0x54>)
    809e:	0053      	lsls	r3, r2, #1
    80a0:	0309      	lsls	r1, r1, #12
    80a2:	0005      	movs	r5, r0
    80a4:	0b09      	lsrs	r1, r1, #12
    80a6:	2000      	movs	r0, #0
    80a8:	0d5b      	lsrs	r3, r3, #21
    80aa:	0fd2      	lsrs	r2, r2, #31
    80ac:	42a3      	cmp	r3, r4
    80ae:	dd04      	ble.n	80ba <__aeabi_d2iz+0x22>
    80b0:	480f      	ldr	r0, [pc, #60]	; (80f0 <__aeabi_d2iz+0x58>)
    80b2:	4283      	cmp	r3, r0
    80b4:	dd02      	ble.n	80bc <__aeabi_d2iz+0x24>
    80b6:	4b0f      	ldr	r3, [pc, #60]	; (80f4 <__aeabi_d2iz+0x5c>)
    80b8:	18d0      	adds	r0, r2, r3
    80ba:	bd30      	pop	{r4, r5, pc}
    80bc:	2080      	movs	r0, #128	; 0x80
    80be:	0340      	lsls	r0, r0, #13
    80c0:	4301      	orrs	r1, r0
    80c2:	480d      	ldr	r0, [pc, #52]	; (80f8 <__aeabi_d2iz+0x60>)
    80c4:	1ac0      	subs	r0, r0, r3
    80c6:	281f      	cmp	r0, #31
    80c8:	dd08      	ble.n	80dc <__aeabi_d2iz+0x44>
    80ca:	480c      	ldr	r0, [pc, #48]	; (80fc <__aeabi_d2iz+0x64>)
    80cc:	1ac3      	subs	r3, r0, r3
    80ce:	40d9      	lsrs	r1, r3
    80d0:	000b      	movs	r3, r1
    80d2:	4258      	negs	r0, r3
    80d4:	2a00      	cmp	r2, #0
    80d6:	d1f0      	bne.n	80ba <__aeabi_d2iz+0x22>
    80d8:	0018      	movs	r0, r3
    80da:	e7ee      	b.n	80ba <__aeabi_d2iz+0x22>
    80dc:	4c08      	ldr	r4, [pc, #32]	; (8100 <__aeabi_d2iz+0x68>)
    80de:	40c5      	lsrs	r5, r0
    80e0:	46a4      	mov	ip, r4
    80e2:	4463      	add	r3, ip
    80e4:	4099      	lsls	r1, r3
    80e6:	000b      	movs	r3, r1
    80e8:	432b      	orrs	r3, r5
    80ea:	e7f2      	b.n	80d2 <__aeabi_d2iz+0x3a>
    80ec:	000003fe 	.word	0x000003fe
    80f0:	0000041d 	.word	0x0000041d
    80f4:	7fffffff 	.word	0x7fffffff
    80f8:	00000433 	.word	0x00000433
    80fc:	00000413 	.word	0x00000413
    8100:	fffffbed 	.word	0xfffffbed

00008104 <__aeabi_ui2d>:
__aeabi_ui2d():
    8104:	b510      	push	{r4, lr}
    8106:	1e04      	subs	r4, r0, #0
    8108:	d010      	beq.n	812c <__aeabi_ui2d+0x28>
    810a:	f000 f821 	bl	8150 <__clzsi2>
    810e:	4b0f      	ldr	r3, [pc, #60]	; (814c <__aeabi_ui2d+0x48>)
    8110:	1a1b      	subs	r3, r3, r0
    8112:	280a      	cmp	r0, #10
    8114:	dc11      	bgt.n	813a <__aeabi_ui2d+0x36>
    8116:	220b      	movs	r2, #11
    8118:	0021      	movs	r1, r4
    811a:	1a12      	subs	r2, r2, r0
    811c:	40d1      	lsrs	r1, r2
    811e:	3015      	adds	r0, #21
    8120:	030a      	lsls	r2, r1, #12
    8122:	055b      	lsls	r3, r3, #21
    8124:	4084      	lsls	r4, r0
    8126:	0b12      	lsrs	r2, r2, #12
    8128:	0d5b      	lsrs	r3, r3, #21
    812a:	e001      	b.n	8130 <__aeabi_ui2d+0x2c>
    812c:	2300      	movs	r3, #0
    812e:	2200      	movs	r2, #0
    8130:	051b      	lsls	r3, r3, #20
    8132:	4313      	orrs	r3, r2
    8134:	0020      	movs	r0, r4
    8136:	0019      	movs	r1, r3
    8138:	bd10      	pop	{r4, pc}
    813a:	0022      	movs	r2, r4
    813c:	380b      	subs	r0, #11
    813e:	4082      	lsls	r2, r0
    8140:	055b      	lsls	r3, r3, #21
    8142:	0312      	lsls	r2, r2, #12
    8144:	2400      	movs	r4, #0
    8146:	0b12      	lsrs	r2, r2, #12
    8148:	0d5b      	lsrs	r3, r3, #21
    814a:	e7f1      	b.n	8130 <__aeabi_ui2d+0x2c>
    814c:	0000041e 	.word	0x0000041e

00008150 <__clzsi2>:
__clzsi2():
    8150:	211c      	movs	r1, #28
    8152:	2301      	movs	r3, #1
    8154:	041b      	lsls	r3, r3, #16
    8156:	4298      	cmp	r0, r3
    8158:	d301      	bcc.n	815e <__clzsi2+0xe>
    815a:	0c00      	lsrs	r0, r0, #16
    815c:	3910      	subs	r1, #16
    815e:	0a1b      	lsrs	r3, r3, #8
    8160:	4298      	cmp	r0, r3
    8162:	d301      	bcc.n	8168 <__clzsi2+0x18>
    8164:	0a00      	lsrs	r0, r0, #8
    8166:	3908      	subs	r1, #8
    8168:	091b      	lsrs	r3, r3, #4
    816a:	4298      	cmp	r0, r3
    816c:	d301      	bcc.n	8172 <__clzsi2+0x22>
    816e:	0900      	lsrs	r0, r0, #4
    8170:	3904      	subs	r1, #4
    8172:	a202      	add	r2, pc, #8	; (adr r2, 817c <__clzsi2+0x2c>)
    8174:	5c10      	ldrb	r0, [r2, r0]
    8176:	1840      	adds	r0, r0, r1
    8178:	4770      	bx	lr
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	02020304 	.word	0x02020304
    8180:	01010101 	.word	0x01010101
	...

0000818c <__clzdi2>:
__clzdi2():
    818c:	b510      	push	{r4, lr}
    818e:	2900      	cmp	r1, #0
    8190:	d103      	bne.n	819a <__clzdi2+0xe>
    8192:	f7ff ffdd 	bl	8150 <__clzsi2>
    8196:	3020      	adds	r0, #32
    8198:	e002      	b.n	81a0 <__clzdi2+0x14>
    819a:	1c08      	adds	r0, r1, #0
    819c:	f7ff ffd8 	bl	8150 <__clzsi2>
    81a0:	bd10      	pop	{r4, pc}
    81a2:	46c0      	nop			; (mov r8, r8)

000081a4 <strlen>:
strlen():
    81a4:	2300      	movs	r3, #0
    81a6:	5cc2      	ldrb	r2, [r0, r3]
    81a8:	3301      	adds	r3, #1
    81aa:	2a00      	cmp	r2, #0
    81ac:	d1fb      	bne.n	81a6 <strlen+0x2>
    81ae:	1e58      	subs	r0, r3, #1
    81b0:	4770      	bx	lr
	...

000081b4 <SystemInit>:
SystemInit():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:112
    //看门狗默认为开启，而且复位之后只能开启或关闭看门狗一次
    //SIM_COPC &= ~SIM_COPC_COPT_MASK;    //DISABLE_WDOG 

    /* System clock initialization */
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    81b4:	493b      	ldr	r1, [pc, #236]	; (82a4 <SystemInit+0xf0>)
    81b6:	4a3c      	ldr	r2, [pc, #240]	; (82a8 <SystemInit+0xf4>)
    81b8:	23c0      	movs	r3, #192	; 0xc0
    81ba:	029b      	lsls	r3, r3, #10
    81bc:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:114
    /* SIM_SCGC5: PORTA=1 */
    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
    81be:	4a39      	ldr	r2, [pc, #228]	; (82a4 <SystemInit+0xf0>)
    81c0:	4b3a      	ldr	r3, [pc, #232]	; (82ac <SystemInit+0xf8>)
    81c2:	58d3      	ldr	r3, [r2, r3]
    81c4:	4937      	ldr	r1, [pc, #220]	; (82a4 <SystemInit+0xf0>)
    81c6:	2280      	movs	r2, #128	; 0x80
    81c8:	0092      	lsls	r2, r2, #2
    81ca:	4313      	orrs	r3, r2
    81cc:	4a37      	ldr	r2, [pc, #220]	; (82ac <SystemInit+0xf8>)
    81ce:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:115
    if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    81d0:	4b37      	ldr	r3, [pc, #220]	; (82b0 <SystemInit+0xfc>)
    81d2:	789b      	ldrb	r3, [r3, #2]
    81d4:	b2db      	uxtb	r3, r3
    81d6:	001a      	movs	r2, r3
    81d8:	2308      	movs	r3, #8
    81da:	4013      	ands	r3, r2
    81dc:	d007      	beq.n	81ee <SystemInit+0x3a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:117
        /* PMC_REGSC: ACKISO=1 */
        PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    81de:	4b34      	ldr	r3, [pc, #208]	; (82b0 <SystemInit+0xfc>)
    81e0:	789b      	ldrb	r3, [r3, #2]
    81e2:	b2db      	uxtb	r3, r3
    81e4:	4a32      	ldr	r2, [pc, #200]	; (82b0 <SystemInit+0xfc>)
    81e6:	2108      	movs	r1, #8
    81e8:	430b      	orrs	r3, r1
    81ea:	b2db      	uxtb	r3, r3
    81ec:	7093      	strb	r3, [r2, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:120
    }
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
    81ee:	492d      	ldr	r1, [pc, #180]	; (82a4 <SystemInit+0xf0>)
    81f0:	4a2d      	ldr	r2, [pc, #180]	; (82a8 <SystemInit+0xf4>)
    81f2:	2380      	movs	r3, #128	; 0x80
    81f4:	025b      	lsls	r3, r3, #9
    81f6:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:122
    /* SIM_SOPT2: ??=0,PLLFLLSEL=0 */
    SIM_SOPT2 &= (uint32_t)~(uint32_t)((SIM_SOPT2_PLLFLLSEL_MASK | 0x00020000U)); /* Select FLL as a clock source for various peripherals */
    81f8:	4a2a      	ldr	r2, [pc, #168]	; (82a4 <SystemInit+0xf0>)
    81fa:	4b2e      	ldr	r3, [pc, #184]	; (82b4 <SystemInit+0x100>)
    81fc:	58d3      	ldr	r3, [r2, r3]
    81fe:	4929      	ldr	r1, [pc, #164]	; (82a4 <SystemInit+0xf0>)
    8200:	4a2d      	ldr	r2, [pc, #180]	; (82b8 <SystemInit+0x104>)
    8202:	4013      	ands	r3, r2
    8204:	4a2b      	ldr	r2, [pc, #172]	; (82b4 <SystemInit+0x100>)
    8206:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:124
    /* SIM_SOPT1: OSC32KSEL=0 */
    SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz clock for various peripherals */
    8208:	4b26      	ldr	r3, [pc, #152]	; (82a4 <SystemInit+0xf0>)
    820a:	681a      	ldr	r2, [r3, #0]
    820c:	4b25      	ldr	r3, [pc, #148]	; (82a4 <SystemInit+0xf0>)
    820e:	492b      	ldr	r1, [pc, #172]	; (82bc <SystemInit+0x108>)
    8210:	400a      	ands	r2, r1
    8212:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:126
    /* SIM_SOPT2: TPMSRC=1 */
    SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    8214:	4a23      	ldr	r2, [pc, #140]	; (82a4 <SystemInit+0xf0>)
    8216:	4b27      	ldr	r3, [pc, #156]	; (82b4 <SystemInit+0x100>)
    8218:	58d3      	ldr	r3, [r2, r3]
    821a:	4a29      	ldr	r2, [pc, #164]	; (82c0 <SystemInit+0x10c>)
    821c:	4013      	ands	r3, r2
    821e:	4921      	ldr	r1, [pc, #132]	; (82a4 <SystemInit+0xf0>)
    8220:	2280      	movs	r2, #128	; 0x80
    8222:	0452      	lsls	r2, r2, #17
    8224:	4313      	orrs	r3, r2
    8226:	4a23      	ldr	r2, [pc, #140]	; (82b4 <SystemInit+0x100>)
    8228:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:133
    )) | (uint32_t)(
            SIM_SOPT2_TPMSRC(0x01)
    ));                      /* Set the TPM clock */
    /* Switch to FEI Mode */
    /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
    MCG_C1 = MCG_C1_CLKS(0x00) |
    822a:	4b26      	ldr	r3, [pc, #152]	; (82c4 <SystemInit+0x110>)
    822c:	2206      	movs	r2, #6
    822e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:138
            MCG_C1_FRDIV(0x00) |
            MCG_C1_IREFS_MASK |
            MCG_C1_IRCLKEN_MASK;
    /* MCG_C2: LOCRE0=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
    MCG_C2 &= (uint8_t)~(uint8_t)(
    8230:	4b24      	ldr	r3, [pc, #144]	; (82c4 <SystemInit+0x110>)
    8232:	785b      	ldrb	r3, [r3, #1]
    8234:	b2db      	uxtb	r3, r3
    8236:	4a23      	ldr	r2, [pc, #140]	; (82c4 <SystemInit+0x110>)
    8238:	2140      	movs	r1, #64	; 0x40
    823a:	400b      	ands	r3, r1
    823c:	b2db      	uxtb	r3, r3
    823e:	7053      	strb	r3, [r2, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:147
            MCG_C2_EREFS0_MASK |
            MCG_C2_LP_MASK |
            MCG_C2_IRCS_MASK
    );
    /* MCG_C4: DMX32=1,DRST_DRS=1 */
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    8240:	4b20      	ldr	r3, [pc, #128]	; (82c4 <SystemInit+0x110>)
    8242:	78db      	ldrb	r3, [r3, #3]
    8244:	b2db      	uxtb	r3, r3
    8246:	b25b      	sxtb	r3, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:149
            MCG_C4_DRST_DRS(0x02)
    )) | (uint8_t)(
    8248:	221f      	movs	r2, #31
    824a:	4013      	ands	r3, r2
    824c:	b25b      	sxtb	r3, r3
    824e:	2260      	movs	r2, #96	; 0x60
    8250:	4252      	negs	r2, r2
    8252:	4313      	orrs	r3, r2
    8254:	b25a      	sxtb	r2, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:147
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    8256:	4b1b      	ldr	r3, [pc, #108]	; (82c4 <SystemInit+0x110>)
    8258:	b2d2      	uxtb	r2, r2
    825a:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:154
            MCG_C4_DMX32_MASK |
            MCG_C4_DRST_DRS(0x01)
    ));
    /* OSC0_CR: ERCLKEN=0,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
    OSC0_CR = 0x00U;
    825c:	4b1a      	ldr	r3, [pc, #104]	; (82c8 <SystemInit+0x114>)
    825e:	2200      	movs	r2, #0
    8260:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:156
    /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
    MCG_C5 = MCG_C5_PRDIV0(0x00);
    8262:	4b18      	ldr	r3, [pc, #96]	; (82c4 <SystemInit+0x110>)
    8264:	2200      	movs	r2, #0
    8266:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:158
    /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
    MCG_C6 = MCG_C6_VDIV0(0x00);
    8268:	4b16      	ldr	r3, [pc, #88]	; (82c4 <SystemInit+0x110>)
    826a:	2200      	movs	r2, #0
    826c:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:159
    while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    826e:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:159 (discriminator 1)
    8270:	4b14      	ldr	r3, [pc, #80]	; (82c4 <SystemInit+0x110>)
    8272:	799b      	ldrb	r3, [r3, #6]
    8274:	b2db      	uxtb	r3, r3
    8276:	001a      	movs	r2, r3
    8278:	2310      	movs	r3, #16
    827a:	4013      	ands	r3, r2
    827c:	d0f8      	beq.n	8270 <SystemInit+0xbc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:161
    }
    while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    827e:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:161 (discriminator 1)
    8280:	4b10      	ldr	r3, [pc, #64]	; (82c4 <SystemInit+0x110>)
    8282:	799b      	ldrb	r3, [r3, #6]
    8284:	b2db      	uxtb	r3, r3
    8286:	001a      	movs	r2, r3
    8288:	230c      	movs	r3, #12
    828a:	4013      	ands	r3, r2
    828c:	d1f8      	bne.n	8280 <SystemInit+0xcc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:234
    //        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break;
    //    }
    //    //4.现在处于PEE模式

    //开启PORT模块时钟
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK
    828e:	4a05      	ldr	r2, [pc, #20]	; (82a4 <SystemInit+0xf0>)
    8290:	4b06      	ldr	r3, [pc, #24]	; (82ac <SystemInit+0xf8>)
    8292:	58d3      	ldr	r3, [r2, r3]
    8294:	4903      	ldr	r1, [pc, #12]	; (82a4 <SystemInit+0xf0>)
    8296:	22f8      	movs	r2, #248	; 0xf8
    8298:	0192      	lsls	r2, r2, #6
    829a:	4313      	orrs	r3, r2
    829c:	4a03      	ldr	r2, [pc, #12]	; (82ac <SystemInit+0xf8>)
    829e:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/system_MKL36Z4.c:239
            | SIM_SCGC5_PORTB_MASK
            | SIM_SCGC5_PORTC_MASK
            | SIM_SCGC5_PORTD_MASK
            | SIM_SCGC5_PORTE_MASK;
}
    82a0:	46c0      	nop			; (mov r8, r8)
    82a2:	4770      	bx	lr
    82a4:	40047000 	.word	0x40047000
    82a8:	00001044 	.word	0x00001044
    82ac:	00001038 	.word	0x00001038
    82b0:	4007d000 	.word	0x4007d000
    82b4:	00001004 	.word	0x00001004
    82b8:	fffcffff 	.word	0xfffcffff
    82bc:	fff3ffff 	.word	0xfff3ffff
    82c0:	fcffffff 	.word	0xfcffffff
    82c4:	40064000 	.word	0x40064000
    82c8:	40065000 	.word	0x40065000

000082cc <main>:
main():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:18
//main.c使用的内部函数声明处
void delay_ms(uint32_t ms);
//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程见书稿）
int main(void)
{
    82cc:	b530      	push	{r4, r5, lr}
    82ce:	b089      	sub	sp, #36	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:20
    //（1.2）【不变】关总中断
    DISABLE_INTERRUPTS;
    82d0:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:21
    wdog_stop();
    82d2:	f000 fe19 	bl	8f08 <wdog_stop>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:23

    uint8_t data[20] = "QIUYEYIJIAN";
    82d6:	a903      	add	r1, sp, #12
    82d8:	4a25      	ldr	r2, [pc, #148]	; (8370 <main+0xa4>)
    82da:	000b      	movs	r3, r1
    82dc:	ca31      	ldmia	r2!, {r0, r4, r5}
    82de:	c331      	stmia	r3!, {r0, r4, r5}
    82e0:	000b      	movs	r3, r1
    82e2:	330c      	adds	r3, #12
    82e4:	2208      	movs	r2, #8
    82e6:	2100      	movs	r1, #0
    82e8:	0018      	movs	r0, r3
    82ea:	f001 ffd8 	bl	a29e <memset>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:25
    // 初始化SPI发送标标志
    gSendFlag = 0;
    82ee:	4b21      	ldr	r3, [pc, #132]	; (8374 <main+0xa8>)
    82f0:	2200      	movs	r2, #0
    82f2:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:28

    // 初始化发送串口和接收串口
    suart_init(SUART_TX, SUART_SEND);
    82f4:	2380      	movs	r3, #128	; 0x80
    82f6:	009b      	lsls	r3, r3, #2
    82f8:	2101      	movs	r1, #1
    82fa:	0018      	movs	r0, r3
    82fc:	f000 f972 	bl	85e4 <suart_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:29
    suart_init(SUART_RX, SUART_RECEVIE);
    8300:	4b1d      	ldr	r3, [pc, #116]	; (8378 <main+0xac>)
    8302:	2100      	movs	r1, #0
    8304:	0018      	movs	r0, r3
    8306:	f000 f96d 	bl	85e4 <suart_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:32

    // 将SPI0初始化为主机，波特率为6000， 时钟极性0，相位0
    spi_init(SPI_SEND, 1, 6000, 0, 0);
    830a:	4a1c      	ldr	r2, [pc, #112]	; (837c <main+0xb0>)
    830c:	2300      	movs	r3, #0
    830e:	9300      	str	r3, [sp, #0]
    8310:	2300      	movs	r3, #0
    8312:	2101      	movs	r1, #1
    8314:	2000      	movs	r0, #0
    8316:	f000 fe1d 	bl	8f54 <spi_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:34
    // 将SPI1初始化为主机，波特率为6000， 时钟极性0，相位0
    spi_init(SPI_RECEIVE, 0, 6000, 0, 0);
    831a:	4a18      	ldr	r2, [pc, #96]	; (837c <main+0xb0>)
    831c:	2300      	movs	r3, #0
    831e:	9300      	str	r3, [sp, #0]
    8320:	2300      	movs	r3, #0
    8322:	2100      	movs	r1, #0
    8324:	2001      	movs	r0, #1
    8326:	f000 fe15 	bl	8f54 <spi_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:39



    // 使能串口接收中断
    suart_enable_receive_interupt(SUART_RX);
    832a:	4b13      	ldr	r3, [pc, #76]	; (8378 <main+0xac>)
    832c:	0018      	movs	r0, r3
    832e:	f000 fd5f 	bl	8df0 <suart_enable_receive_interupt>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:41
    // 使能SPI1模块中断
    spi_enable_re_int(SPI_RECEIVE);
    8332:	2001      	movs	r0, #1
    8334:	f001 f89c 	bl	9470 <spi_enable_re_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:44

    //（1.7）【不变】开总中断
    ENABLE_INTERRUPTS;
    8338:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:50
    //（2）======主循环部分（结尾）========================================

    for (;;) {
        // delay_ms(1000);
        //SPI数据发送
        if (gSendFlag) {
    833a:	4b0e      	ldr	r3, [pc, #56]	; (8374 <main+0xa8>)
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	2b00      	cmp	r3, #0
    8340:	d0fb      	beq.n	833a <main+0x6e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:51
            printf("主机字符串开始发送!\n");
    8342:	4b0f      	ldr	r3, [pc, #60]	; (8380 <main+0xb4>)
    8344:	0018      	movs	r0, r3
    8346:	f001 ff83 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:52
            spi_sendN(SPI_SEND, strlen(gRecvBuff), gRecvBuff);      //发送数据
    834a:	4b0e      	ldr	r3, [pc, #56]	; (8384 <main+0xb8>)
    834c:	0018      	movs	r0, r3
    834e:	f7ff ff29 	bl	81a4 <strlen>
    8352:	0003      	movs	r3, r0
    8354:	b2db      	uxtb	r3, r3
    8356:	4a0b      	ldr	r2, [pc, #44]	; (8384 <main+0xb8>)
    8358:	0019      	movs	r1, r3
    835a:	2000      	movs	r0, #0
    835c:	f001 f812 	bl	9384 <spi_sendN>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:53
            printf("主机字符串发送完毕!\n");
    8360:	4b09      	ldr	r3, [pc, #36]	; (8388 <main+0xbc>)
    8362:	0018      	movs	r0, r3
    8364:	f001 ff74 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:54
            gSendFlag = 0;
    8368:	4b02      	ldr	r3, [pc, #8]	; (8374 <main+0xa8>)
    836a:	2200      	movs	r2, #0
    836c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/main.c:50
        if (gSendFlag) {
    836e:	e7e4      	b.n	833a <main+0x6e>
    8370:	0000a2e0 	.word	0x0000a2e0
    8374:	20000628 	.word	0x20000628
    8378:	00000201 	.word	0x00000201
    837c:	00001770 	.word	0x00001770
    8380:	0000a2b0 	.word	0x0000a2b0
    8384:	20000420 	.word	0x20000420
    8388:	0000a2c8 	.word	0x0000a2c8

0000838c <flash_erase>:
flash_erase():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:50
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片，见mcu.h）
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint8_t flash_erase(uint16_t sect)
{
    838c:	b500      	push	{lr}
    838e:	b085      	sub	sp, #20
    8390:	0002      	movs	r2, r0
    8392:	466b      	mov	r3, sp
    8394:	3306      	adds	r3, #6
    8396:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:57
    {
        uint32_t  word;
        uint8_t   byte[4];
    } dest;
    
    dest.word    = (uint32_t)(sect*(1<<10));
    8398:	466b      	mov	r3, sp
    839a:	3306      	adds	r3, #6
    839c:	881b      	ldrh	r3, [r3, #0]
    839e:	029b      	lsls	r3, r3, #10
    83a0:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:60

    // 设置擦除命令
    FTFA_FCCOB0 = ERSSCR; // 擦除扇区命令
    83a2:	4b1f      	ldr	r3, [pc, #124]	; (8420 <flash_erase+0x94>)
    83a4:	2209      	movs	r2, #9
    83a6:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:63
    
    // 设置目标地址
    FTFA_FCCOB1 = dest.byte[2];
    83a8:	4a1d      	ldr	r2, [pc, #116]	; (8420 <flash_erase+0x94>)
    83aa:	ab03      	add	r3, sp, #12
    83ac:	789b      	ldrb	r3, [r3, #2]
    83ae:	7193      	strb	r3, [r2, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:64
    FTFA_FCCOB2 = dest.byte[1];
    83b0:	4a1b      	ldr	r2, [pc, #108]	; (8420 <flash_erase+0x94>)
    83b2:	ab03      	add	r3, sp, #12
    83b4:	785b      	ldrb	r3, [r3, #1]
    83b6:	7153      	strb	r3, [r2, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:65
    FTFA_FCCOB3 = dest.byte[0];
    83b8:	4a19      	ldr	r2, [pc, #100]	; (8420 <flash_erase+0x94>)
    83ba:	ab03      	add	r3, sp, #12
    83bc:	781b      	ldrb	r3, [r3, #0]
    83be:	7113      	strb	r3, [r2, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:68
    
    // 执行命令序列
    if(1 == flash_cmd_launch())    //若执行命令出现错误
    83c0:	f000 f8c6 	bl	8550 <flash_cmd_launch>
    83c4:	0003      	movs	r3, r0
    83c6:	2b01      	cmp	r3, #1
    83c8:	d101      	bne.n	83ce <flash_erase+0x42>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:69
        return 1;     //擦除命令错误
    83ca:	2301      	movs	r3, #1
    83cc:	e024      	b.n	8418 <flash_erase+0x8c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:73
   
    // 若擦除sector0时，则解锁设备
//    if(dest.word <= 0x800)
    if(dest.word < 0x400)
    83ce:	9a03      	ldr	r2, [sp, #12]
    83d0:	2380      	movs	r3, #128	; 0x80
    83d2:	00db      	lsls	r3, r3, #3
    83d4:	429a      	cmp	r2, r3
    83d6:	d21e      	bcs.n	8416 <flash_erase+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:76
    {
        // 写入4字节
        FTFA_FCCOB0 = PGM4; 
    83d8:	4b11      	ldr	r3, [pc, #68]	; (8420 <flash_erase+0x94>)
    83da:	2206      	movs	r2, #6
    83dc:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:78
        // 设置目标地址
        FTFA_FCCOB1 = 0x00;
    83de:	4b10      	ldr	r3, [pc, #64]	; (8420 <flash_erase+0x94>)
    83e0:	2200      	movs	r2, #0
    83e2:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:79
        FTFA_FCCOB2 = 0x04;
    83e4:	4b0e      	ldr	r3, [pc, #56]	; (8420 <flash_erase+0x94>)
    83e6:	2204      	movs	r2, #4
    83e8:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:80
        FTFA_FCCOB3 = 0x0C;
    83ea:	4b0d      	ldr	r3, [pc, #52]	; (8420 <flash_erase+0x94>)
    83ec:	220c      	movs	r2, #12
    83ee:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:82
        // 数据
        FTFA_FCCOB4 = 0xFF;
    83f0:	4b0b      	ldr	r3, [pc, #44]	; (8420 <flash_erase+0x94>)
    83f2:	22ff      	movs	r2, #255	; 0xff
    83f4:	72da      	strb	r2, [r3, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:83
        FTFA_FCCOB5 = 0xFF;
    83f6:	4b0a      	ldr	r3, [pc, #40]	; (8420 <flash_erase+0x94>)
    83f8:	22ff      	movs	r2, #255	; 0xff
    83fa:	729a      	strb	r2, [r3, #10]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:84
        FTFA_FCCOB6 = 0xFF;
    83fc:	4b08      	ldr	r3, [pc, #32]	; (8420 <flash_erase+0x94>)
    83fe:	22ff      	movs	r2, #255	; 0xff
    8400:	725a      	strb	r2, [r3, #9]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:85
        FTFA_FCCOB7 = 0xFE;
    8402:	4b07      	ldr	r3, [pc, #28]	; (8420 <flash_erase+0x94>)
    8404:	22fe      	movs	r2, #254	; 0xfe
    8406:	721a      	strb	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:87
        // 执行命令序列
        if(1 == flash_cmd_launch())  //若执行命令出现错误
    8408:	f000 f8a2 	bl	8550 <flash_cmd_launch>
    840c:	0003      	movs	r3, r0
    840e:	2b01      	cmp	r3, #1
    8410:	d101      	bne.n	8416 <flash_erase+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:88
            return 2;   //解锁命令错误
    8412:	2302      	movs	r3, #2
    8414:	e000      	b.n	8418 <flash_erase+0x8c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:91
    }  
    
    return 0;  //成功返回
    8416:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:92 (discriminator 1)
}
    8418:	0018      	movs	r0, r3
    841a:	b005      	add	sp, #20
    841c:	bd00      	pop	{pc}
    841e:	46c0      	nop			; (mov r8, r8)
    8420:	40020000 	.word	0x40020000

00008424 <flash_write_physical>:
flash_write_physical():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:147
//        N：写字节数目（0~1020,要求为4，8,12,......）
//        buf：写入数据存放处
//功能概要：读取flash指定地址的内容
//========================================================================
uint8_t flash_write_physical(uint32_t destaddr,uint16_t N,uint8_t *buf)
{
    8424:	b500      	push	{lr}
    8426:	b087      	sub	sp, #28
    8428:	9003      	str	r0, [sp, #12]
    842a:	9201      	str	r2, [sp, #4]
    842c:	230a      	movs	r3, #10
    842e:	446b      	add	r3, sp
    8430:	1c0a      	adds	r2, r1, #0
    8432:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:156
        uint32_t   word;
        uint8_t  byte[4];
    } dest;

    // 设置写入命令
    FTFA_FCCOB0 = PGM4;
    8434:	4b1e      	ldr	r3, [pc, #120]	; (84b0 <flash_write_physical+0x8c>)
    8436:	2206      	movs	r2, #6
    8438:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:157
    dest.word = destaddr;
    843a:	9b03      	ldr	r3, [sp, #12]
    843c:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:158
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    843e:	2300      	movs	r3, #0
    8440:	9305      	str	r3, [sp, #20]
    8442:	e02b      	b.n	849c <flash_write_physical+0x78>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:161
    {
        // 设置目标地址
        FTFA_FCCOB1 = dest.byte[2];
    8444:	4a1a      	ldr	r2, [pc, #104]	; (84b0 <flash_write_physical+0x8c>)
    8446:	ab04      	add	r3, sp, #16
    8448:	789b      	ldrb	r3, [r3, #2]
    844a:	7193      	strb	r3, [r2, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:162
        FTFA_FCCOB2 = dest.byte[1];
    844c:	4a18      	ldr	r2, [pc, #96]	; (84b0 <flash_write_physical+0x8c>)
    844e:	ab04      	add	r3, sp, #16
    8450:	785b      	ldrb	r3, [r3, #1]
    8452:	7153      	strb	r3, [r2, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:163
        FTFA_FCCOB3 = dest.byte[0];
    8454:	4a16      	ldr	r2, [pc, #88]	; (84b0 <flash_write_physical+0x8c>)
    8456:	ab04      	add	r3, sp, #16
    8458:	781b      	ldrb	r3, [r3, #0]
    845a:	7113      	strb	r3, [r2, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:166

        // 拷贝数据
        FTFA_FCCOB4 = buf[3];//大端寻址
    845c:	4a14      	ldr	r2, [pc, #80]	; (84b0 <flash_write_physical+0x8c>)
    845e:	9b01      	ldr	r3, [sp, #4]
    8460:	78db      	ldrb	r3, [r3, #3]
    8462:	72d3      	strb	r3, [r2, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:167
        FTFA_FCCOB5 = buf[2];
    8464:	4a12      	ldr	r2, [pc, #72]	; (84b0 <flash_write_physical+0x8c>)
    8466:	9b01      	ldr	r3, [sp, #4]
    8468:	789b      	ldrb	r3, [r3, #2]
    846a:	7293      	strb	r3, [r2, #10]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:168
        FTFA_FCCOB6 = buf[1];
    846c:	4a10      	ldr	r2, [pc, #64]	; (84b0 <flash_write_physical+0x8c>)
    846e:	9b01      	ldr	r3, [sp, #4]
    8470:	785b      	ldrb	r3, [r3, #1]
    8472:	7253      	strb	r3, [r2, #9]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:169
        FTFA_FCCOB7 = buf[0];
    8474:	4a0e      	ldr	r2, [pc, #56]	; (84b0 <flash_write_physical+0x8c>)
    8476:	9b01      	ldr	r3, [sp, #4]
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	7213      	strb	r3, [r2, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:171

        if(1 == flash_cmd_launch())
    847c:	f000 f868 	bl	8550 <flash_cmd_launch>
    8480:	0003      	movs	r3, r0
    8482:	2b01      	cmp	r3, #1
    8484:	d101      	bne.n	848a <flash_write_physical+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:172
            return 2;  //写入命令错误
    8486:	2302      	movs	r3, #2
    8488:	e00f      	b.n	84aa <flash_write_physical+0x86>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:158 (discriminator 2)
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    848a:	9b05      	ldr	r3, [sp, #20]
    848c:	3304      	adds	r3, #4
    848e:	9305      	str	r3, [sp, #20]
    8490:	9b04      	ldr	r3, [sp, #16]
    8492:	3304      	adds	r3, #4
    8494:	9304      	str	r3, [sp, #16]
    8496:	9b01      	ldr	r3, [sp, #4]
    8498:	3304      	adds	r3, #4
    849a:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:158 (discriminator 1)
    849c:	230a      	movs	r3, #10
    849e:	446b      	add	r3, sp
    84a0:	881b      	ldrh	r3, [r3, #0]
    84a2:	9a05      	ldr	r2, [sp, #20]
    84a4:	429a      	cmp	r2, r3
    84a6:	d3cd      	bcc.n	8444 <flash_write_physical+0x20>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:175
    }

    return 0;  //成功执行
    84a8:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:176 (discriminator 1)
}
    84aa:	0018      	movs	r0, r3
    84ac:	b007      	add	sp, #28
    84ae:	bd00      	pop	{pc}
    84b0:	40020000 	.word	0x40020000

000084b4 <flash_read_physical>:
flash_read_physical():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:203
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
    84b4:	b500      	push	{lr}
    84b6:	b087      	sub	sp, #28
    84b8:	9003      	str	r0, [sp, #12]
    84ba:	9102      	str	r1, [sp, #8]
    84bc:	466b      	mov	r3, sp
    84be:	3306      	adds	r3, #6
    84c0:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:205
	uint8_t *src;
	src=(uint8_t *)addr;
    84c2:	9b02      	ldr	r3, [sp, #8]
    84c4:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:206
	memcpy(dest,src,N);
    84c6:	466b      	mov	r3, sp
    84c8:	3306      	adds	r3, #6
    84ca:	881a      	ldrh	r2, [r3, #0]
    84cc:	9905      	ldr	r1, [sp, #20]
    84ce:	9b03      	ldr	r3, [sp, #12]
    84d0:	0018      	movs	r0, r3
    84d2:	f001 fedb 	bl	a28c <memcpy>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:207
}
    84d6:	46c0      	nop			; (mov r8, r8)
    84d8:	b007      	add	sp, #28
    84da:	bd00      	pop	{pc}

000084dc <flash_isempty>:
flash_isempty():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:249
//函数返回：1=目标区域为空；0=目标区域非空。
//参数说明：所要探测的flash区域扇区号及字节数
//功能概要：flash判空操作
//========================================================================
uint8_t flash_isempty(uint16_t sect,uint16_t N)
{
    84dc:	b084      	sub	sp, #16
    84de:	0002      	movs	r2, r0
    84e0:	466b      	mov	r3, sp
    84e2:	3306      	adds	r3, #6
    84e4:	801a      	strh	r2, [r3, #0]
    84e6:	ab01      	add	r3, sp, #4
    84e8:	1c0a      	adds	r2, r1, #0
    84ea:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:252
   uint16_t i,flag;
   uint8_t* buff;
   i = 0;
    84ec:	230e      	movs	r3, #14
    84ee:	446b      	add	r3, sp
    84f0:	2200      	movs	r2, #0
    84f2:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:253
   flag = 1;
    84f4:	ab03      	add	r3, sp, #12
    84f6:	2201      	movs	r2, #1
    84f8:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:254
   for(i = 0; i<N; i++)   //遍历区域内字节
    84fa:	230e      	movs	r3, #14
    84fc:	446b      	add	r3, sp
    84fe:	2200      	movs	r2, #0
    8500:	801a      	strh	r2, [r3, #0]
    8502:	e017      	b.n	8534 <flash_isempty+0x58>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:256
   {
	  buff=(uint8_t*)(sect*0x400);
    8504:	466b      	mov	r3, sp
    8506:	3306      	adds	r3, #6
    8508:	881b      	ldrh	r3, [r3, #0]
    850a:	029b      	lsls	r3, r3, #10
    850c:	9302      	str	r3, [sp, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:257
      if(buff[i]!=0xff)   //非空
    850e:	230e      	movs	r3, #14
    8510:	446b      	add	r3, sp
    8512:	881b      	ldrh	r3, [r3, #0]
    8514:	9a02      	ldr	r2, [sp, #8]
    8516:	18d3      	adds	r3, r2, r3
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	2bff      	cmp	r3, #255	; 0xff
    851c:	d003      	beq.n	8526 <flash_isempty+0x4a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:259
      {
      	  flag=0;
    851e:	ab03      	add	r3, sp, #12
    8520:	2200      	movs	r2, #0
    8522:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:260
          break;
    8524:	e00d      	b.n	8542 <flash_isempty+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:254 (discriminator 2)
   for(i = 0; i<N; i++)   //遍历区域内字节
    8526:	230e      	movs	r3, #14
    8528:	446b      	add	r3, sp
    852a:	881a      	ldrh	r2, [r3, #0]
    852c:	230e      	movs	r3, #14
    852e:	446b      	add	r3, sp
    8530:	3201      	adds	r2, #1
    8532:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:254 (discriminator 1)
    8534:	220e      	movs	r2, #14
    8536:	446a      	add	r2, sp
    8538:	ab01      	add	r3, sp, #4
    853a:	8812      	ldrh	r2, [r2, #0]
    853c:	881b      	ldrh	r3, [r3, #0]
    853e:	429a      	cmp	r2, r3
    8540:	d3e0      	bcc.n	8504 <flash_isempty+0x28>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:263
       }
   }
   return flag;
    8542:	ab03      	add	r3, sp, #12
    8544:	881b      	ldrh	r3, [r3, #0]
    8546:	b2db      	uxtb	r3, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:264
}
    8548:	0018      	movs	r0, r3
    854a:	b004      	add	sp, #16
    854c:	4770      	bx	lr
	...

00008550 <flash_cmd_launch>:
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:339
//函数返回：0-成功 1-失败
//参数说明：无
//功能概要：启动Flash命令
//======================================================================
uint32_t flash_cmd_launch(void)
{
    8550:	b082      	sub	sp, #8
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:340
	uint8_t irq_flag=0;
    8552:	466b      	mov	r3, sp
    8554:	3307      	adds	r3, #7
    8556:	2200      	movs	r2, #0
    8558:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:342
    // 清除访问错误标志位和非法访问标志位
    FTFA_FSTAT = ACCERR | FPVIOL;
    855a:	4b16      	ldr	r3, [pc, #88]	; (85b4 <flash_cmd_launch+0x64>)
    855c:	2230      	movs	r2, #48	; 0x30
    855e:	701a      	strb	r2, [r3, #0]
__get_PRIMASK():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cmFunc.h:484
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8560:	f3ef 8310 	mrs	r3, PRIMASK
    8564:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cmFunc.h:485
  return(result);
    8566:	9b00      	ldr	r3, [sp, #0]
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:343
    if(__get_PRIMASK() == 0U)
    8568:	2b00      	cmp	r3, #0
    856a:	d105      	bne.n	8578 <flash_cmd_launch+0x28>
__disable_irq():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cmFunc.h:344
  __ASM volatile ("cpsid i" : : : "memory");
    856c:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cmFunc.h:345
}
    856e:	46c0      	nop			; (mov r8, r8)
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:346
    {
    	__disable_irq();  //关总中断
    	irq_flag = 1;
    8570:	466b      	mov	r3, sp
    8572:	3307      	adds	r3, #7
    8574:	2201      	movs	r2, #1
    8576:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:349
    }
    // 启动命令
    FTFA_FSTAT = CCIF;
    8578:	4b0e      	ldr	r3, [pc, #56]	; (85b4 <flash_cmd_launch+0x64>)
    857a:	2280      	movs	r2, #128	; 0x80
    857c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:351
    // 等待命令结束
    while(!(FTFA_FSTAT & CCIF));
    857e:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:351 (discriminator 1)
    8580:	4b0c      	ldr	r3, [pc, #48]	; (85b4 <flash_cmd_launch+0x64>)
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	b2db      	uxtb	r3, r3
    8586:	b25b      	sxtb	r3, r3
    8588:	2b00      	cmp	r3, #0
    858a:	daf9      	bge.n	8580 <flash_cmd_launch+0x30>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:352
    if(irq_flag == 1)
    858c:	466b      	mov	r3, sp
    858e:	3307      	adds	r3, #7
    8590:	781b      	ldrb	r3, [r3, #0]
    8592:	2b01      	cmp	r3, #1
    8594:	d101      	bne.n	859a <flash_cmd_launch+0x4a>
__enable_irq():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cmFunc.h:333
  __ASM volatile ("cpsie i" : : : "memory");
    8596:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cmFunc.h:334
}
    8598:	46c0      	nop			; (mov r8, r8)
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:357
    {
    	__enable_irq();  //开总中断
    }
    // 检查错误标志
    if(FTFA_FSTAT & (ACCERR | FPVIOL | MGSTAT0))
    859a:	4b06      	ldr	r3, [pc, #24]	; (85b4 <flash_cmd_launch+0x64>)
    859c:	781b      	ldrb	r3, [r3, #0]
    859e:	b2db      	uxtb	r3, r3
    85a0:	001a      	movs	r2, r3
    85a2:	2331      	movs	r3, #49	; 0x31
    85a4:	4013      	ands	r3, r2
    85a6:	d001      	beq.n	85ac <flash_cmd_launch+0x5c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:358
        return 1 ; //执行命令出错
    85a8:	2301      	movs	r3, #1
    85aa:	e000      	b.n	85ae <flash_cmd_launch+0x5e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:359
    return 0; //执行命令成功
    85ac:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/flash.c:360
}
    85ae:	0018      	movs	r0, r3
    85b0:	b002      	add	sp, #8
    85b2:	4770      	bx	lr
    85b4:	40020000 	.word	0x40020000

000085b8 <NVIC_EnableIRQ>:
NVIC_EnableIRQ():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cm0plus.h:684
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    85b8:	b082      	sub	sp, #8
    85ba:	0002      	movs	r2, r0
    85bc:	466b      	mov	r3, sp
    85be:	3307      	adds	r3, #7
    85c0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cm0plus.h:685
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    85c2:	466b      	mov	r3, sp
    85c4:	3307      	adds	r3, #7
    85c6:	781b      	ldrb	r3, [r3, #0]
    85c8:	001a      	movs	r2, r3
    85ca:	231f      	movs	r3, #31
    85cc:	401a      	ands	r2, r3
    85ce:	4b04      	ldr	r3, [pc, #16]	; (85e0 <NVIC_EnableIRQ+0x28>)
    85d0:	2101      	movs	r1, #1
    85d2:	4091      	lsls	r1, r2
    85d4:	000a      	movs	r2, r1
    85d6:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cm0plus.h:686
}
    85d8:	46c0      	nop			; (mov r8, r8)
    85da:	b002      	add	sp, #8
    85dc:	4770      	bx	lr
    85de:	46c0      	nop			; (mov r8, r8)
    85e0:	e000e100 	.word	0xe000e100

000085e4 <suart_init>:
suart_init():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:7

// 内部函数声明
void suart_get_port_pin(uint16_t port_pin, uint8_t* port, uint8_t* pin);

// 模拟串口初始化
void suart_init(uint16_t port_pin, uint8_t dir) {
    85e4:	b500      	push	{lr}
    85e6:	b085      	sub	sp, #20
    85e8:	0002      	movs	r2, r0
    85ea:	466b      	mov	r3, sp
    85ec:	3306      	adds	r3, #6
    85ee:	801a      	strh	r2, [r3, #0]
    85f0:	466b      	mov	r3, sp
    85f2:	3305      	adds	r3, #5
    85f4:	1c0a      	adds	r2, r1, #0
    85f6:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:9
    uint8_t port, pin;
    suart_get_port_pin(port_pin, &port, &pin);
    85f8:	220e      	movs	r2, #14
    85fa:	446a      	add	r2, sp
    85fc:	210f      	movs	r1, #15
    85fe:	4469      	add	r1, sp
    8600:	466b      	mov	r3, sp
    8602:	3306      	adds	r3, #6
    8604:	881b      	ldrh	r3, [r3, #0]
    8606:	0018      	movs	r0, r3
    8608:	f000 fc66 	bl	8ed8 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:12

    //设定相应端口的相应引脚功port能为GPIO（即令引脚控制寄存器的MUX=0b001）
    PORT_PCR(port, pin) &= ~PORT_PCR_MUX_MASK;//置D10-D8=000
    860c:	230f      	movs	r3, #15
    860e:	446b      	add	r3, sp
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	029b      	lsls	r3, r3, #10
    8614:	220e      	movs	r2, #14
    8616:	446a      	add	r2, sp
    8618:	7812      	ldrb	r2, [r2, #0]
    861a:	189b      	adds	r3, r3, r2
    861c:	009b      	lsls	r3, r3, #2
    861e:	4a43      	ldr	r2, [pc, #268]	; (872c <suart_init+0x148>)
    8620:	4694      	mov	ip, r2
    8622:	4463      	add	r3, ip
    8624:	681a      	ldr	r2, [r3, #0]
    8626:	230f      	movs	r3, #15
    8628:	446b      	add	r3, sp
    862a:	781b      	ldrb	r3, [r3, #0]
    862c:	029b      	lsls	r3, r3, #10
    862e:	210e      	movs	r1, #14
    8630:	4469      	add	r1, sp
    8632:	7809      	ldrb	r1, [r1, #0]
    8634:	185b      	adds	r3, r3, r1
    8636:	009b      	lsls	r3, r3, #2
    8638:	493c      	ldr	r1, [pc, #240]	; (872c <suart_init+0x148>)
    863a:	468c      	mov	ip, r1
    863c:	4463      	add	r3, ip
    863e:	493c      	ldr	r1, [pc, #240]	; (8730 <suart_init+0x14c>)
    8640:	400a      	ands	r2, r1
    8642:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:13
    PORT_PCR(port, pin) |= PORT_PCR_MUX(1);//置D10-D8=001
    8644:	230f      	movs	r3, #15
    8646:	446b      	add	r3, sp
    8648:	781b      	ldrb	r3, [r3, #0]
    864a:	029b      	lsls	r3, r3, #10
    864c:	220e      	movs	r2, #14
    864e:	446a      	add	r2, sp
    8650:	7812      	ldrb	r2, [r2, #0]
    8652:	189b      	adds	r3, r3, r2
    8654:	009b      	lsls	r3, r3, #2
    8656:	4a35      	ldr	r2, [pc, #212]	; (872c <suart_init+0x148>)
    8658:	4694      	mov	ip, r2
    865a:	4463      	add	r3, ip
    865c:	681a      	ldr	r2, [r3, #0]
    865e:	230f      	movs	r3, #15
    8660:	446b      	add	r3, sp
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	029b      	lsls	r3, r3, #10
    8666:	210e      	movs	r1, #14
    8668:	4469      	add	r1, sp
    866a:	7809      	ldrb	r1, [r1, #0]
    866c:	185b      	adds	r3, r3, r1
    866e:	009b      	lsls	r3, r3, #2
    8670:	492e      	ldr	r1, [pc, #184]	; (872c <suart_init+0x148>)
    8672:	468c      	mov	ip, r1
    8674:	4463      	add	r3, ip
    8676:	2180      	movs	r1, #128	; 0x80
    8678:	0049      	lsls	r1, r1, #1
    867a:	430a      	orrs	r2, r1
    867c:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:16

    // 根据带入参数dir, 决定引脚为输出还是输入
    if (dir == 1) {
    867e:	466b      	mov	r3, sp
    8680:	3305      	adds	r3, #5
    8682:	781b      	ldrb	r3, [r3, #0]
    8684:	2b01      	cmp	r3, #1
    8686:	d132      	bne.n	86ee <suart_init+0x10a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:18
        // 数据方向寄存器对应位设为1，表示输出
        BSET(pin, SUART_PDDR(port));
    8688:	230f      	movs	r3, #15
    868a:	446b      	add	r3, sp
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	019b      	lsls	r3, r3, #6
    8690:	3314      	adds	r3, #20
    8692:	4a28      	ldr	r2, [pc, #160]	; (8734 <suart_init+0x150>)
    8694:	4694      	mov	ip, r2
    8696:	4463      	add	r3, ip
    8698:	681a      	ldr	r2, [r3, #0]
    869a:	230e      	movs	r3, #14
    869c:	446b      	add	r3, sp
    869e:	781b      	ldrb	r3, [r3, #0]
    86a0:	0019      	movs	r1, r3
    86a2:	2301      	movs	r3, #1
    86a4:	408b      	lsls	r3, r1
    86a6:	0019      	movs	r1, r3
    86a8:	230f      	movs	r3, #15
    86aa:	446b      	add	r3, sp
    86ac:	781b      	ldrb	r3, [r3, #0]
    86ae:	019b      	lsls	r3, r3, #6
    86b0:	3314      	adds	r3, #20
    86b2:	4820      	ldr	r0, [pc, #128]	; (8734 <suart_init+0x150>)
    86b4:	4684      	mov	ip, r0
    86b6:	4463      	add	r3, ip
    86b8:	430a      	orrs	r2, r1
    86ba:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:21

        // 数据输出寄存器对应位设为1(没有数据时保持高电平)，表示高电平
        BSET(pin, SUART_PDOR(port));
    86bc:	230f      	movs	r3, #15
    86be:	446b      	add	r3, sp
    86c0:	781b      	ldrb	r3, [r3, #0]
    86c2:	019b      	lsls	r3, r3, #6
    86c4:	4a1b      	ldr	r2, [pc, #108]	; (8734 <suart_init+0x150>)
    86c6:	4694      	mov	ip, r2
    86c8:	4463      	add	r3, ip
    86ca:	681a      	ldr	r2, [r3, #0]
    86cc:	230e      	movs	r3, #14
    86ce:	446b      	add	r3, sp
    86d0:	781b      	ldrb	r3, [r3, #0]
    86d2:	0019      	movs	r1, r3
    86d4:	2301      	movs	r3, #1
    86d6:	408b      	lsls	r3, r1
    86d8:	0019      	movs	r1, r3
    86da:	230f      	movs	r3, #15
    86dc:	446b      	add	r3, sp
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	019b      	lsls	r3, r3, #6
    86e2:	4814      	ldr	r0, [pc, #80]	; (8734 <suart_init+0x150>)
    86e4:	4684      	mov	ip, r0
    86e6:	4463      	add	r3, ip
    86e8:	430a      	orrs	r2, r1
    86ea:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:27
    }
    else {
        // 数据方向寄存器对应位设为0，表示输入
        BCLR(pin, SUART_PDDR(port));
    }
}
    86ec:	e01a      	b.n	8724 <suart_init+0x140>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:25
        BCLR(pin, SUART_PDDR(port));
    86ee:	230f      	movs	r3, #15
    86f0:	446b      	add	r3, sp
    86f2:	781b      	ldrb	r3, [r3, #0]
    86f4:	019b      	lsls	r3, r3, #6
    86f6:	3314      	adds	r3, #20
    86f8:	4a0e      	ldr	r2, [pc, #56]	; (8734 <suart_init+0x150>)
    86fa:	4694      	mov	ip, r2
    86fc:	4463      	add	r3, ip
    86fe:	681a      	ldr	r2, [r3, #0]
    8700:	230e      	movs	r3, #14
    8702:	446b      	add	r3, sp
    8704:	781b      	ldrb	r3, [r3, #0]
    8706:	0019      	movs	r1, r3
    8708:	2301      	movs	r3, #1
    870a:	408b      	lsls	r3, r1
    870c:	43db      	mvns	r3, r3
    870e:	0019      	movs	r1, r3
    8710:	230f      	movs	r3, #15
    8712:	446b      	add	r3, sp
    8714:	781b      	ldrb	r3, [r3, #0]
    8716:	019b      	lsls	r3, r3, #6
    8718:	3314      	adds	r3, #20
    871a:	4806      	ldr	r0, [pc, #24]	; (8734 <suart_init+0x150>)
    871c:	4684      	mov	ip, r0
    871e:	4463      	add	r3, ip
    8720:	400a      	ands	r2, r1
    8722:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:27
}
    8724:	46c0      	nop			; (mov r8, r8)
    8726:	b005      	add	sp, #20
    8728:	bd00      	pop	{pc}
    872a:	46c0      	nop			; (mov r8, r8)
    872c:	40049000 	.word	0x40049000
    8730:	fffff8ff 	.word	0xfffff8ff
    8734:	400ff000 	.word	0x400ff000

00008738 <suart_set>:
suart_set():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:29

void suart_set(uint8_t port, uint8_t pin, uint8_t status) {
    8738:	b510      	push	{r4, lr}
    873a:	b082      	sub	sp, #8
    873c:	0004      	movs	r4, r0
    873e:	0008      	movs	r0, r1
    8740:	0011      	movs	r1, r2
    8742:	466b      	mov	r3, sp
    8744:	3307      	adds	r3, #7
    8746:	1c22      	adds	r2, r4, #0
    8748:	701a      	strb	r2, [r3, #0]
    874a:	466b      	mov	r3, sp
    874c:	3306      	adds	r3, #6
    874e:	1c02      	adds	r2, r0, #0
    8750:	701a      	strb	r2, [r3, #0]
    8752:	466b      	mov	r3, sp
    8754:	3305      	adds	r3, #5
    8756:	1c0a      	adds	r2, r1, #0
    8758:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:30
    if (status == 1) {
    875a:	466b      	mov	r3, sp
    875c:	3305      	adds	r3, #5
    875e:	781b      	ldrb	r3, [r3, #0]
    8760:	2b01      	cmp	r3, #1
    8762:	d118      	bne.n	8796 <suart_set+0x5e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:31
        BSET(pin, SUART_PDOR(port));
    8764:	466b      	mov	r3, sp
    8766:	3307      	adds	r3, #7
    8768:	781b      	ldrb	r3, [r3, #0]
    876a:	019b      	lsls	r3, r3, #6
    876c:	4a18      	ldr	r2, [pc, #96]	; (87d0 <suart_set+0x98>)
    876e:	4694      	mov	ip, r2
    8770:	4463      	add	r3, ip
    8772:	681a      	ldr	r2, [r3, #0]
    8774:	466b      	mov	r3, sp
    8776:	3306      	adds	r3, #6
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	2101      	movs	r1, #1
    877c:	4099      	lsls	r1, r3
    877e:	000b      	movs	r3, r1
    8780:	0019      	movs	r1, r3
    8782:	466b      	mov	r3, sp
    8784:	3307      	adds	r3, #7
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	019b      	lsls	r3, r3, #6
    878a:	4811      	ldr	r0, [pc, #68]	; (87d0 <suart_set+0x98>)
    878c:	4684      	mov	ip, r0
    878e:	4463      	add	r3, ip
    8790:	430a      	orrs	r2, r1
    8792:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:36
    }
    else {
        BCLR(pin, SUART_PDOR(port));
    }
}
    8794:	e018      	b.n	87c8 <suart_set+0x90>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:34
        BCLR(pin, SUART_PDOR(port));
    8796:	466b      	mov	r3, sp
    8798:	3307      	adds	r3, #7
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	019b      	lsls	r3, r3, #6
    879e:	4a0c      	ldr	r2, [pc, #48]	; (87d0 <suart_set+0x98>)
    87a0:	4694      	mov	ip, r2
    87a2:	4463      	add	r3, ip
    87a4:	681a      	ldr	r2, [r3, #0]
    87a6:	466b      	mov	r3, sp
    87a8:	3306      	adds	r3, #6
    87aa:	781b      	ldrb	r3, [r3, #0]
    87ac:	2101      	movs	r1, #1
    87ae:	4099      	lsls	r1, r3
    87b0:	000b      	movs	r3, r1
    87b2:	43db      	mvns	r3, r3
    87b4:	0019      	movs	r1, r3
    87b6:	466b      	mov	r3, sp
    87b8:	3307      	adds	r3, #7
    87ba:	781b      	ldrb	r3, [r3, #0]
    87bc:	019b      	lsls	r3, r3, #6
    87be:	4804      	ldr	r0, [pc, #16]	; (87d0 <suart_set+0x98>)
    87c0:	4684      	mov	ip, r0
    87c2:	4463      	add	r3, ip
    87c4:	400a      	ands	r2, r1
    87c6:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:36
}
    87c8:	46c0      	nop			; (mov r8, r8)
    87ca:	b002      	add	sp, #8
    87cc:	bd10      	pop	{r4, pc}
    87ce:	46c0      	nop			; (mov r8, r8)
    87d0:	400ff000 	.word	0x400ff000

000087d4 <suart_get>:
suart_get():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:39


uint8_t suart_get(uint8_t port, uint8_t pin) {
    87d4:	b082      	sub	sp, #8
    87d6:	0002      	movs	r2, r0
    87d8:	466b      	mov	r3, sp
    87da:	3307      	adds	r3, #7
    87dc:	701a      	strb	r2, [r3, #0]
    87de:	466b      	mov	r3, sp
    87e0:	3306      	adds	r3, #6
    87e2:	1c0a      	adds	r2, r1, #0
    87e4:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:41
    // 一般都是获取相应引脚的输入寄存器的值
    return BGET(pin, SUART_PDIR(port));
    87e6:	466b      	mov	r3, sp
    87e8:	3307      	adds	r3, #7
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	019b      	lsls	r3, r3, #6
    87ee:	3310      	adds	r3, #16
    87f0:	4a07      	ldr	r2, [pc, #28]	; (8810 <suart_get+0x3c>)
    87f2:	4694      	mov	ip, r2
    87f4:	4463      	add	r3, ip
    87f6:	681a      	ldr	r2, [r3, #0]
    87f8:	466b      	mov	r3, sp
    87fa:	3306      	adds	r3, #6
    87fc:	781b      	ldrb	r3, [r3, #0]
    87fe:	40da      	lsrs	r2, r3
    8800:	0013      	movs	r3, r2
    8802:	b2db      	uxtb	r3, r3
    8804:	2201      	movs	r2, #1
    8806:	4013      	ands	r3, r2
    8808:	b2db      	uxtb	r3, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:42
}
    880a:	0018      	movs	r0, r3
    880c:	b002      	add	sp, #8
    880e:	4770      	bx	lr
    8810:	400ff000 	.word	0x400ff000

00008814 <suart_send>:
suart_send():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:48

// 这个函数的实现本可以用循环来操作，可减少代码量
// 但是经过测试发现，循环每次判断操作也占用一定时间
// 可能会引起一定的误差（用while循环，大概1us），所以就直接对每一位操作
// 下面的suart_receive()函数同理
void suart_send(uint16_t port_pin, uint8_t* arr, uint32_t len) {
    8814:	b500      	push	{lr}
    8816:	b08f      	sub	sp, #60	; 0x3c
    8818:	9102      	str	r1, [sp, #8]
    881a:	9201      	str	r2, [sp, #4]
    881c:	230e      	movs	r3, #14
    881e:	446b      	add	r3, sp
    8820:	1c02      	adds	r2, r0, #0
    8822:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:50
    uint8_t port, pin;
    suart_get_port_pin(port_pin, &port, &pin);
    8824:	aa07      	add	r2, sp, #28
    8826:	211d      	movs	r1, #29
    8828:	4469      	add	r1, sp
    882a:	230e      	movs	r3, #14
    882c:	446b      	add	r3, sp
    882e:	881b      	ldrh	r3, [r3, #0]
    8830:	0018      	movs	r0, r3
    8832:	f000 fb51 	bl	8ed8 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:54

    uint8_t bit[8];

    for (uint32_t count = 0; count < len; count++) {
    8836:	2300      	movs	r3, #0
    8838:	930d      	str	r3, [sp, #52]	; 0x34
    883a:	e11e      	b.n	8a7a <suart_send+0x266>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:56
        // 将字符转成二进制数组
        for (uint8_t i = 0; i < 8; i++) {
    883c:	2333      	movs	r3, #51	; 0x33
    883e:	446b      	add	r3, sp
    8840:	2200      	movs	r2, #0
    8842:	701a      	strb	r2, [r3, #0]
    8844:	e019      	b.n	887a <suart_send+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:57 (discriminator 3)
            bit[i] = arr[count] >> i & 1;
    8846:	9a02      	ldr	r2, [sp, #8]
    8848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    884a:	18d3      	adds	r3, r2, r3
    884c:	781b      	ldrb	r3, [r3, #0]
    884e:	001a      	movs	r2, r3
    8850:	2333      	movs	r3, #51	; 0x33
    8852:	446b      	add	r3, sp
    8854:	781b      	ldrb	r3, [r3, #0]
    8856:	411a      	asrs	r2, r3
    8858:	0013      	movs	r3, r2
    885a:	b2da      	uxtb	r2, r3
    885c:	2333      	movs	r3, #51	; 0x33
    885e:	446b      	add	r3, sp
    8860:	781b      	ldrb	r3, [r3, #0]
    8862:	2101      	movs	r1, #1
    8864:	400a      	ands	r2, r1
    8866:	b2d1      	uxtb	r1, r2
    8868:	aa05      	add	r2, sp, #20
    886a:	54d1      	strb	r1, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:56 (discriminator 3)
        for (uint8_t i = 0; i < 8; i++) {
    886c:	2333      	movs	r3, #51	; 0x33
    886e:	446b      	add	r3, sp
    8870:	781a      	ldrb	r2, [r3, #0]
    8872:	2333      	movs	r3, #51	; 0x33
    8874:	446b      	add	r3, sp
    8876:	3201      	adds	r2, #1
    8878:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:56 (discriminator 1)
    887a:	2333      	movs	r3, #51	; 0x33
    887c:	446b      	add	r3, sp
    887e:	781b      	ldrb	r3, [r3, #0]
    8880:	2b07      	cmp	r3, #7
    8882:	d9e0      	bls.n	8846 <suart_send+0x32>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:61
        }

        // 起始位，将电平拉低一个周期表示开始发送数据
        suart_set(port, pin, 0);
    8884:	231d      	movs	r3, #29
    8886:	446b      	add	r3, sp
    8888:	7818      	ldrb	r0, [r3, #0]
    888a:	ab07      	add	r3, sp, #28
    888c:	781b      	ldrb	r3, [r3, #0]
    888e:	2200      	movs	r2, #0
    8890:	0019      	movs	r1, r3
    8892:	f7ff ff51 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:62
        for (uint16_t i = 0; i < delayCount; i++) {}
    8896:	ab0c      	add	r3, sp, #48	; 0x30
    8898:	2200      	movs	r2, #0
    889a:	801a      	strh	r2, [r3, #0]
    889c:	e004      	b.n	88a8 <suart_send+0x94>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:62 (discriminator 3)
    889e:	ab0c      	add	r3, sp, #48	; 0x30
    88a0:	881a      	ldrh	r2, [r3, #0]
    88a2:	ab0c      	add	r3, sp, #48	; 0x30
    88a4:	3201      	adds	r2, #1
    88a6:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:62 (discriminator 1)
    88a8:	ab0c      	add	r3, sp, #48	; 0x30
    88aa:	881b      	ldrh	r3, [r3, #0]
    88ac:	2b15      	cmp	r3, #21
    88ae:	d9f6      	bls.n	889e <suart_send+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:65

        // 第0位
        suart_set(port, pin, bit[0]);
    88b0:	231d      	movs	r3, #29
    88b2:	446b      	add	r3, sp
    88b4:	7818      	ldrb	r0, [r3, #0]
    88b6:	ab07      	add	r3, sp, #28
    88b8:	7819      	ldrb	r1, [r3, #0]
    88ba:	ab05      	add	r3, sp, #20
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	001a      	movs	r2, r3
    88c0:	f7ff ff3a 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:66
        for (uint16_t i = 0; i < delayCount; i++) {}
    88c4:	232e      	movs	r3, #46	; 0x2e
    88c6:	446b      	add	r3, sp
    88c8:	2200      	movs	r2, #0
    88ca:	801a      	strh	r2, [r3, #0]
    88cc:	e006      	b.n	88dc <suart_send+0xc8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:66 (discriminator 3)
    88ce:	232e      	movs	r3, #46	; 0x2e
    88d0:	446b      	add	r3, sp
    88d2:	881a      	ldrh	r2, [r3, #0]
    88d4:	232e      	movs	r3, #46	; 0x2e
    88d6:	446b      	add	r3, sp
    88d8:	3201      	adds	r2, #1
    88da:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:66 (discriminator 1)
    88dc:	232e      	movs	r3, #46	; 0x2e
    88de:	446b      	add	r3, sp
    88e0:	881b      	ldrh	r3, [r3, #0]
    88e2:	2b15      	cmp	r3, #21
    88e4:	d9f3      	bls.n	88ce <suart_send+0xba>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:69

        // 第1位
        suart_set(port, pin, bit[1]);
    88e6:	231d      	movs	r3, #29
    88e8:	446b      	add	r3, sp
    88ea:	7818      	ldrb	r0, [r3, #0]
    88ec:	ab07      	add	r3, sp, #28
    88ee:	7819      	ldrb	r1, [r3, #0]
    88f0:	ab05      	add	r3, sp, #20
    88f2:	785b      	ldrb	r3, [r3, #1]
    88f4:	001a      	movs	r2, r3
    88f6:	f7ff ff1f 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:70
        for (uint16_t i = 0; i < delayCount; i++) {}
    88fa:	ab0b      	add	r3, sp, #44	; 0x2c
    88fc:	2200      	movs	r2, #0
    88fe:	801a      	strh	r2, [r3, #0]
    8900:	e004      	b.n	890c <suart_send+0xf8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:70 (discriminator 3)
    8902:	ab0b      	add	r3, sp, #44	; 0x2c
    8904:	881a      	ldrh	r2, [r3, #0]
    8906:	ab0b      	add	r3, sp, #44	; 0x2c
    8908:	3201      	adds	r2, #1
    890a:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:70 (discriminator 1)
    890c:	ab0b      	add	r3, sp, #44	; 0x2c
    890e:	881b      	ldrh	r3, [r3, #0]
    8910:	2b15      	cmp	r3, #21
    8912:	d9f6      	bls.n	8902 <suart_send+0xee>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:73

        // 第2位
        suart_set(port, pin, bit[2]);
    8914:	231d      	movs	r3, #29
    8916:	446b      	add	r3, sp
    8918:	7818      	ldrb	r0, [r3, #0]
    891a:	ab07      	add	r3, sp, #28
    891c:	7819      	ldrb	r1, [r3, #0]
    891e:	ab05      	add	r3, sp, #20
    8920:	789b      	ldrb	r3, [r3, #2]
    8922:	001a      	movs	r2, r3
    8924:	f7ff ff08 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:74
        for (uint16_t i = 0; i < delayCount; i++) {}
    8928:	232a      	movs	r3, #42	; 0x2a
    892a:	446b      	add	r3, sp
    892c:	2200      	movs	r2, #0
    892e:	801a      	strh	r2, [r3, #0]
    8930:	e006      	b.n	8940 <suart_send+0x12c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:74 (discriminator 3)
    8932:	232a      	movs	r3, #42	; 0x2a
    8934:	446b      	add	r3, sp
    8936:	881a      	ldrh	r2, [r3, #0]
    8938:	232a      	movs	r3, #42	; 0x2a
    893a:	446b      	add	r3, sp
    893c:	3201      	adds	r2, #1
    893e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:74 (discriminator 1)
    8940:	232a      	movs	r3, #42	; 0x2a
    8942:	446b      	add	r3, sp
    8944:	881b      	ldrh	r3, [r3, #0]
    8946:	2b15      	cmp	r3, #21
    8948:	d9f3      	bls.n	8932 <suart_send+0x11e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:77

        // 第3位
        suart_set(port, pin, bit[3]);
    894a:	231d      	movs	r3, #29
    894c:	446b      	add	r3, sp
    894e:	7818      	ldrb	r0, [r3, #0]
    8950:	ab07      	add	r3, sp, #28
    8952:	7819      	ldrb	r1, [r3, #0]
    8954:	ab05      	add	r3, sp, #20
    8956:	78db      	ldrb	r3, [r3, #3]
    8958:	001a      	movs	r2, r3
    895a:	f7ff feed 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:78
        for (uint16_t i = 0; i < delayCount; i++) {}
    895e:	ab0a      	add	r3, sp, #40	; 0x28
    8960:	2200      	movs	r2, #0
    8962:	801a      	strh	r2, [r3, #0]
    8964:	e004      	b.n	8970 <suart_send+0x15c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:78 (discriminator 3)
    8966:	ab0a      	add	r3, sp, #40	; 0x28
    8968:	881a      	ldrh	r2, [r3, #0]
    896a:	ab0a      	add	r3, sp, #40	; 0x28
    896c:	3201      	adds	r2, #1
    896e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:78 (discriminator 1)
    8970:	ab0a      	add	r3, sp, #40	; 0x28
    8972:	881b      	ldrh	r3, [r3, #0]
    8974:	2b15      	cmp	r3, #21
    8976:	d9f6      	bls.n	8966 <suart_send+0x152>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:81

        // 第4位
        suart_set(port, pin, bit[4]);
    8978:	231d      	movs	r3, #29
    897a:	446b      	add	r3, sp
    897c:	7818      	ldrb	r0, [r3, #0]
    897e:	ab07      	add	r3, sp, #28
    8980:	7819      	ldrb	r1, [r3, #0]
    8982:	ab05      	add	r3, sp, #20
    8984:	791b      	ldrb	r3, [r3, #4]
    8986:	001a      	movs	r2, r3
    8988:	f7ff fed6 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:82
        for (uint16_t i = 0; i < delayCount; i++) {}
    898c:	2326      	movs	r3, #38	; 0x26
    898e:	446b      	add	r3, sp
    8990:	2200      	movs	r2, #0
    8992:	801a      	strh	r2, [r3, #0]
    8994:	e006      	b.n	89a4 <suart_send+0x190>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:82 (discriminator 3)
    8996:	2326      	movs	r3, #38	; 0x26
    8998:	446b      	add	r3, sp
    899a:	881a      	ldrh	r2, [r3, #0]
    899c:	2326      	movs	r3, #38	; 0x26
    899e:	446b      	add	r3, sp
    89a0:	3201      	adds	r2, #1
    89a2:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:82 (discriminator 1)
    89a4:	2326      	movs	r3, #38	; 0x26
    89a6:	446b      	add	r3, sp
    89a8:	881b      	ldrh	r3, [r3, #0]
    89aa:	2b15      	cmp	r3, #21
    89ac:	d9f3      	bls.n	8996 <suart_send+0x182>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:85

        // 第5位
        suart_set(port, pin, bit[5]);
    89ae:	231d      	movs	r3, #29
    89b0:	446b      	add	r3, sp
    89b2:	7818      	ldrb	r0, [r3, #0]
    89b4:	ab07      	add	r3, sp, #28
    89b6:	7819      	ldrb	r1, [r3, #0]
    89b8:	ab05      	add	r3, sp, #20
    89ba:	795b      	ldrb	r3, [r3, #5]
    89bc:	001a      	movs	r2, r3
    89be:	f7ff febb 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:86
        for (uint16_t i = 0; i < delayCount; i++) {}
    89c2:	ab09      	add	r3, sp, #36	; 0x24
    89c4:	2200      	movs	r2, #0
    89c6:	801a      	strh	r2, [r3, #0]
    89c8:	e004      	b.n	89d4 <suart_send+0x1c0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:86 (discriminator 3)
    89ca:	ab09      	add	r3, sp, #36	; 0x24
    89cc:	881a      	ldrh	r2, [r3, #0]
    89ce:	ab09      	add	r3, sp, #36	; 0x24
    89d0:	3201      	adds	r2, #1
    89d2:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:86 (discriminator 1)
    89d4:	ab09      	add	r3, sp, #36	; 0x24
    89d6:	881b      	ldrh	r3, [r3, #0]
    89d8:	2b15      	cmp	r3, #21
    89da:	d9f6      	bls.n	89ca <suart_send+0x1b6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:89

        // 第6位
        suart_set(port, pin, bit[6]);
    89dc:	231d      	movs	r3, #29
    89de:	446b      	add	r3, sp
    89e0:	7818      	ldrb	r0, [r3, #0]
    89e2:	ab07      	add	r3, sp, #28
    89e4:	7819      	ldrb	r1, [r3, #0]
    89e6:	ab05      	add	r3, sp, #20
    89e8:	799b      	ldrb	r3, [r3, #6]
    89ea:	001a      	movs	r2, r3
    89ec:	f7ff fea4 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:90
        for (uint16_t i = 0; i < delayCount; i++) {}
    89f0:	2322      	movs	r3, #34	; 0x22
    89f2:	446b      	add	r3, sp
    89f4:	2200      	movs	r2, #0
    89f6:	801a      	strh	r2, [r3, #0]
    89f8:	e006      	b.n	8a08 <suart_send+0x1f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:90 (discriminator 3)
    89fa:	2322      	movs	r3, #34	; 0x22
    89fc:	446b      	add	r3, sp
    89fe:	881a      	ldrh	r2, [r3, #0]
    8a00:	2322      	movs	r3, #34	; 0x22
    8a02:	446b      	add	r3, sp
    8a04:	3201      	adds	r2, #1
    8a06:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:90 (discriminator 1)
    8a08:	2322      	movs	r3, #34	; 0x22
    8a0a:	446b      	add	r3, sp
    8a0c:	881b      	ldrh	r3, [r3, #0]
    8a0e:	2b15      	cmp	r3, #21
    8a10:	d9f3      	bls.n	89fa <suart_send+0x1e6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:93

        // 第7位
        suart_set(port, pin, bit[7]);
    8a12:	231d      	movs	r3, #29
    8a14:	446b      	add	r3, sp
    8a16:	7818      	ldrb	r0, [r3, #0]
    8a18:	ab07      	add	r3, sp, #28
    8a1a:	7819      	ldrb	r1, [r3, #0]
    8a1c:	ab05      	add	r3, sp, #20
    8a1e:	79db      	ldrb	r3, [r3, #7]
    8a20:	001a      	movs	r2, r3
    8a22:	f7ff fe89 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:94
        for (uint16_t i = 0; i < delayCount; i++) {}
    8a26:	ab08      	add	r3, sp, #32
    8a28:	2200      	movs	r2, #0
    8a2a:	801a      	strh	r2, [r3, #0]
    8a2c:	e004      	b.n	8a38 <suart_send+0x224>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:94 (discriminator 3)
    8a2e:	ab08      	add	r3, sp, #32
    8a30:	881a      	ldrh	r2, [r3, #0]
    8a32:	ab08      	add	r3, sp, #32
    8a34:	3201      	adds	r2, #1
    8a36:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:94 (discriminator 1)
    8a38:	ab08      	add	r3, sp, #32
    8a3a:	881b      	ldrh	r3, [r3, #0]
    8a3c:	2b15      	cmp	r3, #21
    8a3e:	d9f6      	bls.n	8a2e <suart_send+0x21a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:97

        // 终止位, 将电平拉高
        suart_set(port, pin, 1);
    8a40:	231d      	movs	r3, #29
    8a42:	446b      	add	r3, sp
    8a44:	7818      	ldrb	r0, [r3, #0]
    8a46:	ab07      	add	r3, sp, #28
    8a48:	781b      	ldrb	r3, [r3, #0]
    8a4a:	2201      	movs	r2, #1
    8a4c:	0019      	movs	r1, r3
    8a4e:	f7ff fe73 	bl	8738 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:98
        for (uint16_t i = 0; i < delayCount; i++) {}
    8a52:	231e      	movs	r3, #30
    8a54:	446b      	add	r3, sp
    8a56:	2200      	movs	r2, #0
    8a58:	801a      	strh	r2, [r3, #0]
    8a5a:	e006      	b.n	8a6a <suart_send+0x256>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:98 (discriminator 3)
    8a5c:	231e      	movs	r3, #30
    8a5e:	446b      	add	r3, sp
    8a60:	881a      	ldrh	r2, [r3, #0]
    8a62:	231e      	movs	r3, #30
    8a64:	446b      	add	r3, sp
    8a66:	3201      	adds	r2, #1
    8a68:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:98 (discriminator 1)
    8a6a:	231e      	movs	r3, #30
    8a6c:	446b      	add	r3, sp
    8a6e:	881b      	ldrh	r3, [r3, #0]
    8a70:	2b15      	cmp	r3, #21
    8a72:	d9f3      	bls.n	8a5c <suart_send+0x248>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:54 (discriminator 2)
    for (uint32_t count = 0; count < len; count++) {
    8a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a76:	3301      	adds	r3, #1
    8a78:	930d      	str	r3, [sp, #52]	; 0x34
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:54 (discriminator 1)
    8a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8a7c:	9b01      	ldr	r3, [sp, #4]
    8a7e:	429a      	cmp	r2, r3
    8a80:	d200      	bcs.n	8a84 <suart_send+0x270>
    8a82:	e6db      	b.n	883c <suart_send+0x28>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:100
    }
}
    8a84:	46c0      	nop			; (mov r8, r8)
    8a86:	46c0      	nop			; (mov r8, r8)
    8a88:	b00f      	add	sp, #60	; 0x3c
    8a8a:	bd00      	pop	{pc}

00008a8c <suart_receive>:
suart_receive():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:103


uint32_t suart_receive(uint16_t port_pin, uint8_t* arr) {
    8a8c:	b500      	push	{lr}
    8a8e:	b08d      	sub	sp, #52	; 0x34
    8a90:	0002      	movs	r2, r0
    8a92:	9100      	str	r1, [sp, #0]
    8a94:	466b      	mov	r3, sp
    8a96:	3306      	adds	r3, #6
    8a98:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:106

    uint8_t port, pin;
    uint16_t count = 4096;
    8a9a:	232e      	movs	r3, #46	; 0x2e
    8a9c:	446b      	add	r3, sp
    8a9e:	2280      	movs	r2, #128	; 0x80
    8aa0:	0152      	lsls	r2, r2, #5
    8aa2:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:107
    uint32_t len = 0;
    8aa4:	2300      	movs	r3, #0
    8aa6:	930a      	str	r3, [sp, #40]	; 0x28
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:108
    arr[len] = 0;
    8aa8:	9a00      	ldr	r2, [sp, #0]
    8aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8aac:	18d3      	adds	r3, r2, r3
    8aae:	2200      	movs	r2, #0
    8ab0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:111
    uint8_t bit[8];

    suart_get_port_pin(port_pin, &port, &pin);
    8ab2:	2211      	movs	r2, #17
    8ab4:	446a      	add	r2, sp
    8ab6:	2112      	movs	r1, #18
    8ab8:	4469      	add	r1, sp
    8aba:	466b      	mov	r3, sp
    8abc:	3306      	adds	r3, #6
    8abe:	881b      	ldrh	r3, [r3, #0]
    8ac0:	0018      	movs	r0, r3
    8ac2:	f000 fa09 	bl	8ed8 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:113

    while (count--) {
    8ac6:	e184      	b.n	8dd2 <suart_receive+0x346>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:115
        // 起始位
        for (uint16_t i = 0; i < delayCount / 2; i++) {}
    8ac8:	2326      	movs	r3, #38	; 0x26
    8aca:	446b      	add	r3, sp
    8acc:	2200      	movs	r2, #0
    8ace:	801a      	strh	r2, [r3, #0]
    8ad0:	e006      	b.n	8ae0 <suart_receive+0x54>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:115 (discriminator 3)
    8ad2:	2326      	movs	r3, #38	; 0x26
    8ad4:	446b      	add	r3, sp
    8ad6:	881a      	ldrh	r2, [r3, #0]
    8ad8:	2326      	movs	r3, #38	; 0x26
    8ada:	446b      	add	r3, sp
    8adc:	3201      	adds	r2, #1
    8ade:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:115 (discriminator 1)
    8ae0:	2326      	movs	r3, #38	; 0x26
    8ae2:	446b      	add	r3, sp
    8ae4:	881b      	ldrh	r3, [r3, #0]
    8ae6:	2b0a      	cmp	r3, #10
    8ae8:	d9f3      	bls.n	8ad2 <suart_receive+0x46>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:116
        suart_get(port, pin);
    8aea:	2312      	movs	r3, #18
    8aec:	446b      	add	r3, sp
    8aee:	781a      	ldrb	r2, [r3, #0]
    8af0:	2311      	movs	r3, #17
    8af2:	446b      	add	r3, sp
    8af4:	781b      	ldrb	r3, [r3, #0]
    8af6:	0019      	movs	r1, r3
    8af8:	0010      	movs	r0, r2
    8afa:	f7ff fe6b 	bl	87d4 <suart_get>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:119

        // 第0位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8afe:	ab09      	add	r3, sp, #36	; 0x24
    8b00:	2200      	movs	r2, #0
    8b02:	801a      	strh	r2, [r3, #0]
    8b04:	e004      	b.n	8b10 <suart_receive+0x84>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:119 (discriminator 3)
    8b06:	ab09      	add	r3, sp, #36	; 0x24
    8b08:	881a      	ldrh	r2, [r3, #0]
    8b0a:	ab09      	add	r3, sp, #36	; 0x24
    8b0c:	3201      	adds	r2, #1
    8b0e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:119 (discriminator 1)
    8b10:	ab09      	add	r3, sp, #36	; 0x24
    8b12:	881b      	ldrh	r3, [r3, #0]
    8b14:	2b15      	cmp	r3, #21
    8b16:	d9f6      	bls.n	8b06 <suart_receive+0x7a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:120
        bit[0] = suart_get(port, pin);
    8b18:	2312      	movs	r3, #18
    8b1a:	446b      	add	r3, sp
    8b1c:	781a      	ldrb	r2, [r3, #0]
    8b1e:	2311      	movs	r3, #17
    8b20:	446b      	add	r3, sp
    8b22:	781b      	ldrb	r3, [r3, #0]
    8b24:	0019      	movs	r1, r3
    8b26:	0010      	movs	r0, r2
    8b28:	f7ff fe54 	bl	87d4 <suart_get>
    8b2c:	0003      	movs	r3, r0
    8b2e:	001a      	movs	r2, r3
    8b30:	ab02      	add	r3, sp, #8
    8b32:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:123

        // 第1位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8b34:	2322      	movs	r3, #34	; 0x22
    8b36:	446b      	add	r3, sp
    8b38:	2200      	movs	r2, #0
    8b3a:	801a      	strh	r2, [r3, #0]
    8b3c:	e006      	b.n	8b4c <suart_receive+0xc0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:123 (discriminator 3)
    8b3e:	2322      	movs	r3, #34	; 0x22
    8b40:	446b      	add	r3, sp
    8b42:	881a      	ldrh	r2, [r3, #0]
    8b44:	2322      	movs	r3, #34	; 0x22
    8b46:	446b      	add	r3, sp
    8b48:	3201      	adds	r2, #1
    8b4a:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:123 (discriminator 1)
    8b4c:	2322      	movs	r3, #34	; 0x22
    8b4e:	446b      	add	r3, sp
    8b50:	881b      	ldrh	r3, [r3, #0]
    8b52:	2b15      	cmp	r3, #21
    8b54:	d9f3      	bls.n	8b3e <suart_receive+0xb2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:124
        bit[1] = suart_get(port, pin);
    8b56:	2312      	movs	r3, #18
    8b58:	446b      	add	r3, sp
    8b5a:	781a      	ldrb	r2, [r3, #0]
    8b5c:	2311      	movs	r3, #17
    8b5e:	446b      	add	r3, sp
    8b60:	781b      	ldrb	r3, [r3, #0]
    8b62:	0019      	movs	r1, r3
    8b64:	0010      	movs	r0, r2
    8b66:	f7ff fe35 	bl	87d4 <suart_get>
    8b6a:	0003      	movs	r3, r0
    8b6c:	001a      	movs	r2, r3
    8b6e:	ab02      	add	r3, sp, #8
    8b70:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:127

        // 第2位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8b72:	ab08      	add	r3, sp, #32
    8b74:	2200      	movs	r2, #0
    8b76:	801a      	strh	r2, [r3, #0]
    8b78:	e004      	b.n	8b84 <suart_receive+0xf8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:127 (discriminator 3)
    8b7a:	ab08      	add	r3, sp, #32
    8b7c:	881a      	ldrh	r2, [r3, #0]
    8b7e:	ab08      	add	r3, sp, #32
    8b80:	3201      	adds	r2, #1
    8b82:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:127 (discriminator 1)
    8b84:	ab08      	add	r3, sp, #32
    8b86:	881b      	ldrh	r3, [r3, #0]
    8b88:	2b15      	cmp	r3, #21
    8b8a:	d9f6      	bls.n	8b7a <suart_receive+0xee>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:128
        bit[2] = suart_get(port, pin);
    8b8c:	2312      	movs	r3, #18
    8b8e:	446b      	add	r3, sp
    8b90:	781a      	ldrb	r2, [r3, #0]
    8b92:	2311      	movs	r3, #17
    8b94:	446b      	add	r3, sp
    8b96:	781b      	ldrb	r3, [r3, #0]
    8b98:	0019      	movs	r1, r3
    8b9a:	0010      	movs	r0, r2
    8b9c:	f7ff fe1a 	bl	87d4 <suart_get>
    8ba0:	0003      	movs	r3, r0
    8ba2:	001a      	movs	r2, r3
    8ba4:	ab02      	add	r3, sp, #8
    8ba6:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:131

        // 第3位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8ba8:	231e      	movs	r3, #30
    8baa:	446b      	add	r3, sp
    8bac:	2200      	movs	r2, #0
    8bae:	801a      	strh	r2, [r3, #0]
    8bb0:	e006      	b.n	8bc0 <suart_receive+0x134>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:131 (discriminator 3)
    8bb2:	231e      	movs	r3, #30
    8bb4:	446b      	add	r3, sp
    8bb6:	881a      	ldrh	r2, [r3, #0]
    8bb8:	231e      	movs	r3, #30
    8bba:	446b      	add	r3, sp
    8bbc:	3201      	adds	r2, #1
    8bbe:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:131 (discriminator 1)
    8bc0:	231e      	movs	r3, #30
    8bc2:	446b      	add	r3, sp
    8bc4:	881b      	ldrh	r3, [r3, #0]
    8bc6:	2b15      	cmp	r3, #21
    8bc8:	d9f3      	bls.n	8bb2 <suart_receive+0x126>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:132
        bit[3] = suart_get(port, pin);
    8bca:	2312      	movs	r3, #18
    8bcc:	446b      	add	r3, sp
    8bce:	781a      	ldrb	r2, [r3, #0]
    8bd0:	2311      	movs	r3, #17
    8bd2:	446b      	add	r3, sp
    8bd4:	781b      	ldrb	r3, [r3, #0]
    8bd6:	0019      	movs	r1, r3
    8bd8:	0010      	movs	r0, r2
    8bda:	f7ff fdfb 	bl	87d4 <suart_get>
    8bde:	0003      	movs	r3, r0
    8be0:	001a      	movs	r2, r3
    8be2:	ab02      	add	r3, sp, #8
    8be4:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:135

        // 第4位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8be6:	ab07      	add	r3, sp, #28
    8be8:	2200      	movs	r2, #0
    8bea:	801a      	strh	r2, [r3, #0]
    8bec:	e004      	b.n	8bf8 <suart_receive+0x16c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:135 (discriminator 3)
    8bee:	ab07      	add	r3, sp, #28
    8bf0:	881a      	ldrh	r2, [r3, #0]
    8bf2:	ab07      	add	r3, sp, #28
    8bf4:	3201      	adds	r2, #1
    8bf6:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:135 (discriminator 1)
    8bf8:	ab07      	add	r3, sp, #28
    8bfa:	881b      	ldrh	r3, [r3, #0]
    8bfc:	2b15      	cmp	r3, #21
    8bfe:	d9f6      	bls.n	8bee <suart_receive+0x162>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:136
        bit[4] = suart_get(port, pin);
    8c00:	2312      	movs	r3, #18
    8c02:	446b      	add	r3, sp
    8c04:	781a      	ldrb	r2, [r3, #0]
    8c06:	2311      	movs	r3, #17
    8c08:	446b      	add	r3, sp
    8c0a:	781b      	ldrb	r3, [r3, #0]
    8c0c:	0019      	movs	r1, r3
    8c0e:	0010      	movs	r0, r2
    8c10:	f7ff fde0 	bl	87d4 <suart_get>
    8c14:	0003      	movs	r3, r0
    8c16:	001a      	movs	r2, r3
    8c18:	ab02      	add	r3, sp, #8
    8c1a:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:139

        // 第5位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8c1c:	231a      	movs	r3, #26
    8c1e:	446b      	add	r3, sp
    8c20:	2200      	movs	r2, #0
    8c22:	801a      	strh	r2, [r3, #0]
    8c24:	e006      	b.n	8c34 <suart_receive+0x1a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:139 (discriminator 3)
    8c26:	231a      	movs	r3, #26
    8c28:	446b      	add	r3, sp
    8c2a:	881a      	ldrh	r2, [r3, #0]
    8c2c:	231a      	movs	r3, #26
    8c2e:	446b      	add	r3, sp
    8c30:	3201      	adds	r2, #1
    8c32:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:139 (discriminator 1)
    8c34:	231a      	movs	r3, #26
    8c36:	446b      	add	r3, sp
    8c38:	881b      	ldrh	r3, [r3, #0]
    8c3a:	2b15      	cmp	r3, #21
    8c3c:	d9f3      	bls.n	8c26 <suart_receive+0x19a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:140
        bit[5] = suart_get(port, pin);
    8c3e:	2312      	movs	r3, #18
    8c40:	446b      	add	r3, sp
    8c42:	781a      	ldrb	r2, [r3, #0]
    8c44:	2311      	movs	r3, #17
    8c46:	446b      	add	r3, sp
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	0019      	movs	r1, r3
    8c4c:	0010      	movs	r0, r2
    8c4e:	f7ff fdc1 	bl	87d4 <suart_get>
    8c52:	0003      	movs	r3, r0
    8c54:	001a      	movs	r2, r3
    8c56:	ab02      	add	r3, sp, #8
    8c58:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:143

        // 第6位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8c5a:	ab06      	add	r3, sp, #24
    8c5c:	2200      	movs	r2, #0
    8c5e:	801a      	strh	r2, [r3, #0]
    8c60:	e004      	b.n	8c6c <suart_receive+0x1e0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:143 (discriminator 3)
    8c62:	ab06      	add	r3, sp, #24
    8c64:	881a      	ldrh	r2, [r3, #0]
    8c66:	ab06      	add	r3, sp, #24
    8c68:	3201      	adds	r2, #1
    8c6a:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:143 (discriminator 1)
    8c6c:	ab06      	add	r3, sp, #24
    8c6e:	881b      	ldrh	r3, [r3, #0]
    8c70:	2b15      	cmp	r3, #21
    8c72:	d9f6      	bls.n	8c62 <suart_receive+0x1d6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:144
        bit[6] = suart_get(port, pin);
    8c74:	2312      	movs	r3, #18
    8c76:	446b      	add	r3, sp
    8c78:	781a      	ldrb	r2, [r3, #0]
    8c7a:	2311      	movs	r3, #17
    8c7c:	446b      	add	r3, sp
    8c7e:	781b      	ldrb	r3, [r3, #0]
    8c80:	0019      	movs	r1, r3
    8c82:	0010      	movs	r0, r2
    8c84:	f7ff fda6 	bl	87d4 <suart_get>
    8c88:	0003      	movs	r3, r0
    8c8a:	001a      	movs	r2, r3
    8c8c:	ab02      	add	r3, sp, #8
    8c8e:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:147

        // 第7位
        for (uint16_t i = 0; i < delayCount; i++) {}
    8c90:	2316      	movs	r3, #22
    8c92:	446b      	add	r3, sp
    8c94:	2200      	movs	r2, #0
    8c96:	801a      	strh	r2, [r3, #0]
    8c98:	e006      	b.n	8ca8 <suart_receive+0x21c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:147 (discriminator 3)
    8c9a:	2316      	movs	r3, #22
    8c9c:	446b      	add	r3, sp
    8c9e:	881a      	ldrh	r2, [r3, #0]
    8ca0:	2316      	movs	r3, #22
    8ca2:	446b      	add	r3, sp
    8ca4:	3201      	adds	r2, #1
    8ca6:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:147 (discriminator 1)
    8ca8:	2316      	movs	r3, #22
    8caa:	446b      	add	r3, sp
    8cac:	881b      	ldrh	r3, [r3, #0]
    8cae:	2b15      	cmp	r3, #21
    8cb0:	d9f3      	bls.n	8c9a <suart_receive+0x20e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:148
        bit[7] = suart_get(port, pin);
    8cb2:	2312      	movs	r3, #18
    8cb4:	446b      	add	r3, sp
    8cb6:	781a      	ldrb	r2, [r3, #0]
    8cb8:	2311      	movs	r3, #17
    8cba:	446b      	add	r3, sp
    8cbc:	781b      	ldrb	r3, [r3, #0]
    8cbe:	0019      	movs	r1, r3
    8cc0:	0010      	movs	r0, r2
    8cc2:	f7ff fd87 	bl	87d4 <suart_get>
    8cc6:	0003      	movs	r3, r0
    8cc8:	001a      	movs	r2, r3
    8cca:	ab02      	add	r3, sp, #8
    8ccc:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:152

        // 终止位, 这里减少10次，是因为下面的语句执行也要占用一定时间
        // 所以利用终止位的时间来进行这些运算
        for (uint16_t i = 0; i < delayCount - 10; i++) {}
    8cce:	ab05      	add	r3, sp, #20
    8cd0:	2200      	movs	r2, #0
    8cd2:	801a      	strh	r2, [r3, #0]
    8cd4:	e004      	b.n	8ce0 <suart_receive+0x254>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:152 (discriminator 3)
    8cd6:	ab05      	add	r3, sp, #20
    8cd8:	881a      	ldrh	r2, [r3, #0]
    8cda:	ab05      	add	r3, sp, #20
    8cdc:	3201      	adds	r2, #1
    8cde:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:152 (discriminator 1)
    8ce0:	ab05      	add	r3, sp, #20
    8ce2:	881b      	ldrh	r3, [r3, #0]
    8ce4:	2b0b      	cmp	r3, #11
    8ce6:	d9f6      	bls.n	8cd6 <suart_receive+0x24a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:154

        for (uint8_t i = 0; i < 8; i++) {
    8ce8:	2313      	movs	r3, #19
    8cea:	446b      	add	r3, sp
    8cec:	2200      	movs	r2, #0
    8cee:	701a      	strb	r2, [r3, #0]
    8cf0:	e01c      	b.n	8d2c <suart_receive+0x2a0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:155 (discriminator 3)
            arr[len] += (bit[i] << i);
    8cf2:	9a00      	ldr	r2, [sp, #0]
    8cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cf6:	18d3      	adds	r3, r2, r3
    8cf8:	7819      	ldrb	r1, [r3, #0]
    8cfa:	2313      	movs	r3, #19
    8cfc:	446b      	add	r3, sp
    8cfe:	781b      	ldrb	r3, [r3, #0]
    8d00:	aa02      	add	r2, sp, #8
    8d02:	5cd3      	ldrb	r3, [r2, r3]
    8d04:	001a      	movs	r2, r3
    8d06:	2313      	movs	r3, #19
    8d08:	446b      	add	r3, sp
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	409a      	lsls	r2, r3
    8d0e:	0013      	movs	r3, r2
    8d10:	b2da      	uxtb	r2, r3
    8d12:	9800      	ldr	r0, [sp, #0]
    8d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d16:	18c3      	adds	r3, r0, r3
    8d18:	188a      	adds	r2, r1, r2
    8d1a:	b2d2      	uxtb	r2, r2
    8d1c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:154 (discriminator 3)
        for (uint8_t i = 0; i < 8; i++) {
    8d1e:	2313      	movs	r3, #19
    8d20:	446b      	add	r3, sp
    8d22:	781a      	ldrb	r2, [r3, #0]
    8d24:	2313      	movs	r3, #19
    8d26:	446b      	add	r3, sp
    8d28:	3201      	adds	r2, #1
    8d2a:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:154 (discriminator 1)
    8d2c:	2313      	movs	r3, #19
    8d2e:	446b      	add	r3, sp
    8d30:	781b      	ldrb	r3, [r3, #0]
    8d32:	2b07      	cmp	r3, #7
    8d34:	d9dd      	bls.n	8cf2 <suart_receive+0x266>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:157
        }
        if (!(arr[len] ^ 255)) {
    8d36:	9a00      	ldr	r2, [sp, #0]
    8d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d3a:	18d3      	adds	r3, r2, r3
    8d3c:	781b      	ldrb	r3, [r3, #0]
    8d3e:	2bff      	cmp	r3, #255	; 0xff
    8d40:	d123      	bne.n	8d8a <suart_receive+0x2fe>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:158
            arr[len] = '\0';
    8d42:	9a00      	ldr	r2, [sp, #0]
    8d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d46:	18d3      	adds	r3, r2, r3
    8d48:	2200      	movs	r2, #0
    8d4a:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:159
            PORT_PCR(port, pin) |= PORT_PCR_ISF(1); // 清除中断状态
    8d4c:	2312      	movs	r3, #18
    8d4e:	446b      	add	r3, sp
    8d50:	781b      	ldrb	r3, [r3, #0]
    8d52:	029b      	lsls	r3, r3, #10
    8d54:	2211      	movs	r2, #17
    8d56:	446a      	add	r2, sp
    8d58:	7812      	ldrb	r2, [r2, #0]
    8d5a:	189b      	adds	r3, r3, r2
    8d5c:	009b      	lsls	r3, r3, #2
    8d5e:	4a23      	ldr	r2, [pc, #140]	; (8dec <suart_receive+0x360>)
    8d60:	4694      	mov	ip, r2
    8d62:	4463      	add	r3, ip
    8d64:	681a      	ldr	r2, [r3, #0]
    8d66:	2312      	movs	r3, #18
    8d68:	446b      	add	r3, sp
    8d6a:	781b      	ldrb	r3, [r3, #0]
    8d6c:	029b      	lsls	r3, r3, #10
    8d6e:	2111      	movs	r1, #17
    8d70:	4469      	add	r1, sp
    8d72:	7809      	ldrb	r1, [r1, #0]
    8d74:	185b      	adds	r3, r3, r1
    8d76:	009b      	lsls	r3, r3, #2
    8d78:	491c      	ldr	r1, [pc, #112]	; (8dec <suart_receive+0x360>)
    8d7a:	468c      	mov	ip, r1
    8d7c:	4463      	add	r3, ip
    8d7e:	2180      	movs	r1, #128	; 0x80
    8d80:	0449      	lsls	r1, r1, #17
    8d82:	430a      	orrs	r2, r1
    8d84:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:160
            return len;
    8d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d88:	e02d      	b.n	8de6 <suart_receive+0x35a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:162
        }
        count = 4096;
    8d8a:	232e      	movs	r3, #46	; 0x2e
    8d8c:	446b      	add	r3, sp
    8d8e:	2280      	movs	r2, #128	; 0x80
    8d90:	0152      	lsls	r2, r2, #5
    8d92:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:163
        arr[++len] = 0;
    8d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d96:	3301      	adds	r3, #1
    8d98:	930a      	str	r3, [sp, #40]	; 0x28
    8d9a:	9a00      	ldr	r2, [sp, #0]
    8d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d9e:	18d3      	adds	r3, r2, r3
    8da0:	2200      	movs	r2, #0
    8da2:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:166

        // 消耗掉终止位剩余的时间，方便进行下一个字符的接收
        while (count--) {
    8da4:	e00c      	b.n	8dc0 <suart_receive+0x334>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:167
            if (!suart_get(port, pin)) {
    8da6:	2312      	movs	r3, #18
    8da8:	446b      	add	r3, sp
    8daa:	781a      	ldrb	r2, [r3, #0]
    8dac:	2311      	movs	r3, #17
    8dae:	446b      	add	r3, sp
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	0019      	movs	r1, r3
    8db4:	0010      	movs	r0, r2
    8db6:	f7ff fd0d 	bl	87d4 <suart_get>
    8dba:	1e03      	subs	r3, r0, #0
    8dbc:	d100      	bne.n	8dc0 <suart_receive+0x334>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:168
                break;
    8dbe:	e008      	b.n	8dd2 <suart_receive+0x346>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:166
        while (count--) {
    8dc0:	232e      	movs	r3, #46	; 0x2e
    8dc2:	446b      	add	r3, sp
    8dc4:	881b      	ldrh	r3, [r3, #0]
    8dc6:	222e      	movs	r2, #46	; 0x2e
    8dc8:	446a      	add	r2, sp
    8dca:	1e59      	subs	r1, r3, #1
    8dcc:	8011      	strh	r1, [r2, #0]
    8dce:	2b00      	cmp	r3, #0
    8dd0:	d1e9      	bne.n	8da6 <suart_receive+0x31a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:113
    while (count--) {
    8dd2:	232e      	movs	r3, #46	; 0x2e
    8dd4:	446b      	add	r3, sp
    8dd6:	881b      	ldrh	r3, [r3, #0]
    8dd8:	222e      	movs	r2, #46	; 0x2e
    8dda:	446a      	add	r2, sp
    8ddc:	1e59      	subs	r1, r3, #1
    8dde:	8011      	strh	r1, [r2, #0]
    8de0:	2b00      	cmp	r3, #0
    8de2:	d000      	beq.n	8de6 <suart_receive+0x35a>
    8de4:	e670      	b.n	8ac8 <suart_receive+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:172
            }
        }
    }
}
    8de6:	0018      	movs	r0, r3
    8de8:	b00d      	add	sp, #52	; 0x34
    8dea:	bd00      	pop	{pc}
    8dec:	40049000 	.word	0x40049000

00008df0 <suart_enable_receive_interupt>:
suart_enable_receive_interupt():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:175

// 打开串口接收中断, 下降沿触发
void suart_enable_receive_interupt(uint16_t port_pin) {
    8df0:	b500      	push	{lr}
    8df2:	b085      	sub	sp, #20
    8df4:	0002      	movs	r2, r0
    8df6:	466b      	mov	r3, sp
    8df8:	3306      	adds	r3, #6
    8dfa:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:177
    uint8_t port, pin;
    suart_get_port_pin(port_pin, &port, &pin);
    8dfc:	220e      	movs	r2, #14
    8dfe:	446a      	add	r2, sp
    8e00:	210f      	movs	r1, #15
    8e02:	4469      	add	r1, sp
    8e04:	466b      	mov	r3, sp
    8e06:	3306      	adds	r3, #6
    8e08:	881b      	ldrh	r3, [r3, #0]
    8e0a:	0018      	movs	r0, r3
    8e0c:	f000 f864 	bl	8ed8 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:180

    // 清引脚控制寄存器中断配置字段，将D19-D16置零
    PORT_PCR(port, pin) &= ~PORT_PCR_IRQC_MASK;
    8e10:	230f      	movs	r3, #15
    8e12:	446b      	add	r3, sp
    8e14:	781b      	ldrb	r3, [r3, #0]
    8e16:	029b      	lsls	r3, r3, #10
    8e18:	220e      	movs	r2, #14
    8e1a:	446a      	add	r2, sp
    8e1c:	7812      	ldrb	r2, [r2, #0]
    8e1e:	189b      	adds	r3, r3, r2
    8e20:	009b      	lsls	r3, r3, #2
    8e22:	4a29      	ldr	r2, [pc, #164]	; (8ec8 <suart_enable_receive_interupt+0xd8>)
    8e24:	4694      	mov	ip, r2
    8e26:	4463      	add	r3, ip
    8e28:	681a      	ldr	r2, [r3, #0]
    8e2a:	230f      	movs	r3, #15
    8e2c:	446b      	add	r3, sp
    8e2e:	781b      	ldrb	r3, [r3, #0]
    8e30:	029b      	lsls	r3, r3, #10
    8e32:	210e      	movs	r1, #14
    8e34:	4469      	add	r1, sp
    8e36:	7809      	ldrb	r1, [r1, #0]
    8e38:	185b      	adds	r3, r3, r1
    8e3a:	009b      	lsls	r3, r3, #2
    8e3c:	4922      	ldr	r1, [pc, #136]	; (8ec8 <suart_enable_receive_interupt+0xd8>)
    8e3e:	468c      	mov	ip, r1
    8e40:	4463      	add	r3, ip
    8e42:	4922      	ldr	r1, [pc, #136]	; (8ecc <suart_enable_receive_interupt+0xdc>)
    8e44:	400a      	ands	r2, r1
    8e46:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:182
    // 将D19-D16置成1010， 表示下降沿触发
    PORT_PCR(port, pin) |= PORT_PCR_IRQC(10);
    8e48:	230f      	movs	r3, #15
    8e4a:	446b      	add	r3, sp
    8e4c:	781b      	ldrb	r3, [r3, #0]
    8e4e:	029b      	lsls	r3, r3, #10
    8e50:	220e      	movs	r2, #14
    8e52:	446a      	add	r2, sp
    8e54:	7812      	ldrb	r2, [r2, #0]
    8e56:	189b      	adds	r3, r3, r2
    8e58:	009b      	lsls	r3, r3, #2
    8e5a:	4a1b      	ldr	r2, [pc, #108]	; (8ec8 <suart_enable_receive_interupt+0xd8>)
    8e5c:	4694      	mov	ip, r2
    8e5e:	4463      	add	r3, ip
    8e60:	681a      	ldr	r2, [r3, #0]
    8e62:	230f      	movs	r3, #15
    8e64:	446b      	add	r3, sp
    8e66:	781b      	ldrb	r3, [r3, #0]
    8e68:	029b      	lsls	r3, r3, #10
    8e6a:	210e      	movs	r1, #14
    8e6c:	4469      	add	r1, sp
    8e6e:	7809      	ldrb	r1, [r1, #0]
    8e70:	185b      	adds	r3, r3, r1
    8e72:	009b      	lsls	r3, r3, #2
    8e74:	4914      	ldr	r1, [pc, #80]	; (8ec8 <suart_enable_receive_interupt+0xd8>)
    8e76:	468c      	mov	ip, r1
    8e78:	4463      	add	r3, ip
    8e7a:	21a0      	movs	r1, #160	; 0xa0
    8e7c:	0309      	lsls	r1, r1, #12
    8e7e:	430a      	orrs	r2, r1
    8e80:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:184

    if (port == 0) {
    8e82:	230f      	movs	r3, #15
    8e84:	446b      	add	r3, sp
    8e86:	781b      	ldrb	r3, [r3, #0]
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d103      	bne.n	8e94 <suart_enable_receive_interupt+0xa4>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:185
        NVIC_EnableIRQ(PORTA_IRQn);    //使能A端口中断
    8e8c:	201e      	movs	r0, #30
    8e8e:	f7ff fb93 	bl	85b8 <NVIC_EnableIRQ>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:195
    else {
        printf("Fail to init port interupt！！！\n");
        printf("Please select around Port A or C or D\n");
    }

}
    8e92:	e015      	b.n	8ec0 <suart_enable_receive_interupt+0xd0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:187
    else if (port == 2 || port == 3) {
    8e94:	230f      	movs	r3, #15
    8e96:	446b      	add	r3, sp
    8e98:	781b      	ldrb	r3, [r3, #0]
    8e9a:	2b02      	cmp	r3, #2
    8e9c:	d004      	beq.n	8ea8 <suart_enable_receive_interupt+0xb8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:187 (discriminator 1)
    8e9e:	230f      	movs	r3, #15
    8ea0:	446b      	add	r3, sp
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	2b03      	cmp	r3, #3
    8ea6:	d103      	bne.n	8eb0 <suart_enable_receive_interupt+0xc0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:188
        NVIC_EnableIRQ(PORTC_PORTD_IRQn);    //使能C、D端口中断
    8ea8:	201f      	movs	r0, #31
    8eaa:	f7ff fb85 	bl	85b8 <NVIC_EnableIRQ>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:195
}
    8eae:	e007      	b.n	8ec0 <suart_enable_receive_interupt+0xd0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:191
        printf("Fail to init port interupt！！！\n");
    8eb0:	4b07      	ldr	r3, [pc, #28]	; (8ed0 <suart_enable_receive_interupt+0xe0>)
    8eb2:	0018      	movs	r0, r3
    8eb4:	f001 f9cc 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:192
        printf("Please select around Port A or C or D\n");
    8eb8:	4b06      	ldr	r3, [pc, #24]	; (8ed4 <suart_enable_receive_interupt+0xe4>)
    8eba:	0018      	movs	r0, r3
    8ebc:	f001 f9c8 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:195
}
    8ec0:	46c0      	nop			; (mov r8, r8)
    8ec2:	b005      	add	sp, #20
    8ec4:	bd00      	pop	{pc}
    8ec6:	46c0      	nop			; (mov r8, r8)
    8ec8:	40049000 	.word	0x40049000
    8ecc:	fff0ffff 	.word	0xfff0ffff
    8ed0:	0000a2f4 	.word	0x0000a2f4
    8ed4:	0000a318 	.word	0x0000a318

00008ed8 <suart_get_port_pin>:
suart_get_port_pin():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:200


// 内部函数存放处
void suart_get_port_pin(uint16_t port_pin, uint8_t* port, uint8_t* pin)
{
    8ed8:	b084      	sub	sp, #16
    8eda:	9102      	str	r1, [sp, #8]
    8edc:	9201      	str	r2, [sp, #4]
    8ede:	230e      	movs	r3, #14
    8ee0:	446b      	add	r3, sp
    8ee2:	1c02      	adds	r2, r0, #0
    8ee4:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:201
    *port = (port_pin >> 8);
    8ee6:	230e      	movs	r3, #14
    8ee8:	446b      	add	r3, sp
    8eea:	881b      	ldrh	r3, [r3, #0]
    8eec:	0a1b      	lsrs	r3, r3, #8
    8eee:	b29b      	uxth	r3, r3
    8ef0:	b2da      	uxtb	r2, r3
    8ef2:	9b02      	ldr	r3, [sp, #8]
    8ef4:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:202
    *pin = port_pin;
    8ef6:	230e      	movs	r3, #14
    8ef8:	446b      	add	r3, sp
    8efa:	881b      	ldrh	r3, [r3, #0]
    8efc:	b2da      	uxtb	r2, r3
    8efe:	9b01      	ldr	r3, [sp, #4]
    8f00:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/suart.c:203
}
    8f02:	46c0      	nop			; (mov r8, r8)
    8f04:	b004      	add	sp, #16
    8f06:	4770      	bx	lr

00008f08 <wdog_stop>:
wdog_stop():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/wdog.c:40
//参数说明：无
//函数返回：无
//=========================================================================
void wdog_stop()
{
    SIM_COPC &= ~SIM_COPC_COPT_MASK;
    8f08:	4a06      	ldr	r2, [pc, #24]	; (8f24 <wdog_stop+0x1c>)
    8f0a:	2388      	movs	r3, #136	; 0x88
    8f0c:	015b      	lsls	r3, r3, #5
    8f0e:	58d3      	ldr	r3, [r2, r3]
    8f10:	4904      	ldr	r1, [pc, #16]	; (8f24 <wdog_stop+0x1c>)
    8f12:	220c      	movs	r2, #12
    8f14:	4393      	bics	r3, r2
    8f16:	001a      	movs	r2, r3
    8f18:	2388      	movs	r3, #136	; 0x88
    8f1a:	015b      	lsls	r3, r3, #5
    8f1c:	50ca      	str	r2, [r1, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/wdog.c:41
}
    8f1e:	46c0      	nop			; (mov r8, r8)
    8f20:	4770      	bx	lr
    8f22:	46c0      	nop			; (mov r8, r8)
    8f24:	40047000 	.word	0x40047000

00008f28 <NVIC_EnableIRQ>:
NVIC_EnableIRQ():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cm0plus.h:684
{
    8f28:	b082      	sub	sp, #8
    8f2a:	0002      	movs	r2, r0
    8f2c:	466b      	mov	r3, sp
    8f2e:	3307      	adds	r3, #7
    8f30:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cm0plus.h:685
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f32:	466b      	mov	r3, sp
    8f34:	3307      	adds	r3, #7
    8f36:	781b      	ldrb	r3, [r3, #0]
    8f38:	001a      	movs	r2, r3
    8f3a:	231f      	movs	r3, #31
    8f3c:	401a      	ands	r2, r3
    8f3e:	4b04      	ldr	r3, [pc, #16]	; (8f50 <NVIC_EnableIRQ+0x28>)
    8f40:	2101      	movs	r1, #1
    8f42:	4091      	lsls	r1, r2
    8f44:	000a      	movs	r2, r1
    8f46:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\02_CPU/core_cm0plus.h:686
}
    8f48:	46c0      	nop			; (mov r8, r8)
    8f4a:	b002      	add	sp, #8
    8f4c:	4770      	bx	lr
    8f4e:	46c0      	nop			; (mov r8, r8)
    8f50:	e000e100 	.word	0xe000e100

00008f54 <spi_init>:
spi_init():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:24
//       CPHA：CPHA=0相位为0； CPHA=1相位为1；
//函数返回：无
//=====================================================================
void spi_init(uint8_t No, uint8_t MSTR, uint16_t BaudRate, \
    uint8_t CPOL, uint8_t CPHA)
{
    8f54:	b530      	push	{r4, r5, lr}
    8f56:	b085      	sub	sp, #20
    8f58:	0005      	movs	r5, r0
    8f5a:	000c      	movs	r4, r1
    8f5c:	0010      	movs	r0, r2
    8f5e:	0019      	movs	r1, r3
    8f60:	466b      	mov	r3, sp
    8f62:	3307      	adds	r3, #7
    8f64:	1c2a      	adds	r2, r5, #0
    8f66:	701a      	strb	r2, [r3, #0]
    8f68:	466b      	mov	r3, sp
    8f6a:	3306      	adds	r3, #6
    8f6c:	1c22      	adds	r2, r4, #0
    8f6e:	701a      	strb	r2, [r3, #0]
    8f70:	ab01      	add	r3, sp, #4
    8f72:	1c02      	adds	r2, r0, #0
    8f74:	801a      	strh	r2, [r3, #0]
    8f76:	466b      	mov	r3, sp
    8f78:	3303      	adds	r3, #3
    8f7a:	1c0a      	adds	r2, r1, #0
    8f7c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:29
    uint8_t BaudRate_Mode;
    uint8_t BaudRate_High;
    uint8_t BaudRate_Low;
    //如果SPI号参数错误则强制选择 0号模块
    if (No<SPI_0 || No>SPI_1)   No = SPI_0;
    8f7e:	466b      	mov	r3, sp
    8f80:	3307      	adds	r3, #7
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	2b01      	cmp	r3, #1
    8f86:	d903      	bls.n	8f90 <spi_init+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:29 (discriminator 1)
    8f88:	466b      	mov	r3, sp
    8f8a:	3307      	adds	r3, #7
    8f8c:	2200      	movs	r2, #0
    8f8e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:30
    if (No == SPI_0)                         //初始化SPI0功能
    8f90:	466b      	mov	r3, sp
    8f92:	3307      	adds	r3, #7
    8f94:	781b      	ldrb	r3, [r3, #0]
    8f96:	2b00      	cmp	r3, #0
    8f98:	d000      	beq.n	8f9c <spi_init+0x48>
    8f9a:	e0d4      	b.n	9146 <spi_init+0x1f2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:32
    {
        BSET(SIM_SCGC4_SPI0_SHIFT, SIM_SCGC4);   //打开SPI0模块时钟。
    8f9c:	4ad5      	ldr	r2, [pc, #852]	; (92f4 <spi_init+0x3a0>)
    8f9e:	4bd6      	ldr	r3, [pc, #856]	; (92f8 <spi_init+0x3a4>)
    8fa0:	58d3      	ldr	r3, [r2, r3]
    8fa2:	49d4      	ldr	r1, [pc, #848]	; (92f4 <spi_init+0x3a0>)
    8fa4:	2280      	movs	r2, #128	; 0x80
    8fa6:	03d2      	lsls	r2, r2, #15
    8fa8:	4313      	orrs	r3, r2
    8faa:	4ad3      	ldr	r2, [pc, #844]	; (92f8 <spi_init+0x3a4>)
    8fac:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:34
        //引脚复用为SPI0功能
        PORTC_PCR4 = (0 | PORT_PCR_MUX(0x02));     //选择PTC4的SS功能
    8fae:	4bd3      	ldr	r3, [pc, #844]	; (92fc <spi_init+0x3a8>)
    8fb0:	2280      	movs	r2, #128	; 0x80
    8fb2:	0092      	lsls	r2, r2, #2
    8fb4:	611a      	str	r2, [r3, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:35
        PORTC_PCR5 = (0 | PORT_PCR_MUX(0x02));     //选择PTC5的SCK功能
    8fb6:	4bd1      	ldr	r3, [pc, #836]	; (92fc <spi_init+0x3a8>)
    8fb8:	2280      	movs	r2, #128	; 0x80
    8fba:	0092      	lsls	r2, r2, #2
    8fbc:	615a      	str	r2, [r3, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:36
        PORTC_PCR6 = (0 | PORT_PCR_MUX(0x02));     //选择PTC6的MOSI功能
    8fbe:	4bcf      	ldr	r3, [pc, #828]	; (92fc <spi_init+0x3a8>)
    8fc0:	2280      	movs	r2, #128	; 0x80
    8fc2:	0092      	lsls	r2, r2, #2
    8fc4:	619a      	str	r2, [r3, #24]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:37
        PORTC_PCR7 = (0 | PORT_PCR_MUX(0x02));     //选择PTC7的MIOS功能
    8fc6:	4bcd      	ldr	r3, [pc, #820]	; (92fc <spi_init+0x3a8>)
    8fc8:	2280      	movs	r2, #128	; 0x80
    8fca:	0092      	lsls	r2, r2, #2
    8fcc:	61da      	str	r2, [r3, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:39

        SPI0_C1 = 0x00;                           //SPI控制寄存器1清零
    8fce:	4bcc      	ldr	r3, [pc, #816]	; (9300 <spi_init+0x3ac>)
    8fd0:	2200      	movs	r2, #0
    8fd2:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:40
        BSET(SPI_C1_SPE_SHIFT, SPI0_C1);         //使能SPI模块
    8fd4:	4bca      	ldr	r3, [pc, #808]	; (9300 <spi_init+0x3ac>)
    8fd6:	78db      	ldrb	r3, [r3, #3]
    8fd8:	b2db      	uxtb	r3, r3
    8fda:	4ac9      	ldr	r2, [pc, #804]	; (9300 <spi_init+0x3ac>)
    8fdc:	2140      	movs	r1, #64	; 0x40
    8fde:	430b      	orrs	r3, r1
    8fe0:	b2db      	uxtb	r3, r3
    8fe2:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:44

        //MSTR=1为主机模式；
        //MSTR=0为从机模式（因MSTR初始值为0，无需更改）
        (MSTR == 1) ? BSET(SPI_C1_MSTR_SHIFT, SPI0_C1) : \
    8fe4:	466b      	mov	r3, sp
    8fe6:	3306      	adds	r3, #6
    8fe8:	781b      	ldrb	r3, [r3, #0]
    8fea:	2b01      	cmp	r3, #1
    8fec:	d108      	bne.n	9000 <spi_init+0xac>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:44 (discriminator 1)
    8fee:	4bc4      	ldr	r3, [pc, #784]	; (9300 <spi_init+0x3ac>)
    8ff0:	78db      	ldrb	r3, [r3, #3]
    8ff2:	b2db      	uxtb	r3, r3
    8ff4:	4ac2      	ldr	r2, [pc, #776]	; (9300 <spi_init+0x3ac>)
    8ff6:	2110      	movs	r1, #16
    8ff8:	430b      	orrs	r3, r1
    8ffa:	b2db      	uxtb	r3, r3
    8ffc:	70d3      	strb	r3, [r2, #3]
    8ffe:	e008      	b.n	9012 <spi_init+0xbe>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:45 (discriminator 2)
            BSET(SPI_C1_SPIE_SHIFT, SPI0_C1);
    9000:	4bbf      	ldr	r3, [pc, #764]	; (9300 <spi_init+0x3ac>)
    9002:	78db      	ldrb	r3, [r3, #3]
    9004:	b2db      	uxtb	r3, r3
    9006:	49be      	ldr	r1, [pc, #760]	; (9300 <spi_init+0x3ac>)
    9008:	2280      	movs	r2, #128	; 0x80
    900a:	4252      	negs	r2, r2
    900c:	4313      	orrs	r3, r2
    900e:	b2db      	uxtb	r3, r3
    9010:	70cb      	strb	r3, [r1, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:48

        //时钟极性配置，CPOL=0，平时时钟为高电平，反之CPOL=1，平时时钟为低电平
        (0 == CPOL) ? BCLR(SPI_C1_CPOL_SHIFT, SPI0_C1) : \
    9012:	466b      	mov	r3, sp
    9014:	3303      	adds	r3, #3
    9016:	781b      	ldrb	r3, [r3, #0]
    9018:	2b00      	cmp	r3, #0
    901a:	d108      	bne.n	902e <spi_init+0xda>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:48 (discriminator 1)
    901c:	4bb8      	ldr	r3, [pc, #736]	; (9300 <spi_init+0x3ac>)
    901e:	78db      	ldrb	r3, [r3, #3]
    9020:	b2db      	uxtb	r3, r3
    9022:	4ab7      	ldr	r2, [pc, #732]	; (9300 <spi_init+0x3ac>)
    9024:	2108      	movs	r1, #8
    9026:	438b      	bics	r3, r1
    9028:	b2db      	uxtb	r3, r3
    902a:	70d3      	strb	r3, [r2, #3]
    902c:	e007      	b.n	903e <spi_init+0xea>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:49 (discriminator 2)
            BSET(SPI_C1_CPOL_SHIFT, SPI0_C1);
    902e:	4bb4      	ldr	r3, [pc, #720]	; (9300 <spi_init+0x3ac>)
    9030:	78db      	ldrb	r3, [r3, #3]
    9032:	b2db      	uxtb	r3, r3
    9034:	4ab2      	ldr	r2, [pc, #712]	; (9300 <spi_init+0x3ac>)
    9036:	2108      	movs	r1, #8
    9038:	430b      	orrs	r3, r1
    903a:	b2db      	uxtb	r3, r3
    903c:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:52

        //时钟相位CPHA
        (0 == CPHA) ? BCLR(SPI_C1_CPHA_SHIFT, SPI0_C1) : \
    903e:	ab08      	add	r3, sp, #32
    9040:	781b      	ldrb	r3, [r3, #0]
    9042:	2b00      	cmp	r3, #0
    9044:	d108      	bne.n	9058 <spi_init+0x104>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:52 (discriminator 1)
    9046:	4bae      	ldr	r3, [pc, #696]	; (9300 <spi_init+0x3ac>)
    9048:	78db      	ldrb	r3, [r3, #3]
    904a:	b2db      	uxtb	r3, r3
    904c:	4aac      	ldr	r2, [pc, #688]	; (9300 <spi_init+0x3ac>)
    904e:	2104      	movs	r1, #4
    9050:	438b      	bics	r3, r1
    9052:	b2db      	uxtb	r3, r3
    9054:	70d3      	strb	r3, [r2, #3]
    9056:	e007      	b.n	9068 <spi_init+0x114>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:53 (discriminator 2)
            BSET(SPI_C1_CPHA_SHIFT, SPI0_C1);
    9058:	4ba9      	ldr	r3, [pc, #676]	; (9300 <spi_init+0x3ac>)
    905a:	78db      	ldrb	r3, [r3, #3]
    905c:	b2db      	uxtb	r3, r3
    905e:	4aa8      	ldr	r2, [pc, #672]	; (9300 <spi_init+0x3ac>)
    9060:	2104      	movs	r1, #4
    9062:	430b      	orrs	r3, r1
    9064:	b2db      	uxtb	r3, r3
    9066:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:56

        //SSOE为1,MODFEN为1，配置本模块为自动SS输出
        BSET(SPI_C1_SSOE_SHIFT, SPI0_C1);
    9068:	4ba5      	ldr	r3, [pc, #660]	; (9300 <spi_init+0x3ac>)
    906a:	78db      	ldrb	r3, [r3, #3]
    906c:	b2db      	uxtb	r3, r3
    906e:	4aa4      	ldr	r2, [pc, #656]	; (9300 <spi_init+0x3ac>)
    9070:	2102      	movs	r1, #2
    9072:	430b      	orrs	r3, r1
    9074:	b2db      	uxtb	r3, r3
    9076:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:58
        //对SPI0的C1寄存器配置为主机模式、从机选择自动模式并使能SPI0模块。
        SPI0_C2 = 0x00;
    9078:	4ba1      	ldr	r3, [pc, #644]	; (9300 <spi_init+0x3ac>)
    907a:	2200      	movs	r2, #0
    907c:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:59
        if (MSTR == 1)  //主机模式
    907e:	466b      	mov	r3, sp
    9080:	3306      	adds	r3, #6
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	2b01      	cmp	r3, #1
    9086:	d107      	bne.n	9098 <spi_init+0x144>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:60
            BSET(SPI_C2_MODFEN_SHIFT, SPI0_C2);
    9088:	4b9d      	ldr	r3, [pc, #628]	; (9300 <spi_init+0x3ac>)
    908a:	789b      	ldrb	r3, [r3, #2]
    908c:	b2db      	uxtb	r3, r3
    908e:	4a9c      	ldr	r2, [pc, #624]	; (9300 <spi_init+0x3ac>)
    9090:	2110      	movs	r1, #16
    9092:	430b      	orrs	r3, r1
    9094:	b2db      	uxtb	r3, r3
    9096:	7093      	strb	r3, [r2, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:61
        SPI0_BR = 0x00U;//波特率寄存器清零
    9098:	4b99      	ldr	r3, [pc, #612]	; (9300 <spi_init+0x3ac>)
    909a:	2200      	movs	r2, #0
    909c:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:63
        //重新设置波特率
        BaudRate_High = 0;
    909e:	230d      	movs	r3, #13
    90a0:	446b      	add	r3, sp
    90a2:	2200      	movs	r2, #0
    90a4:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:64
        BaudRate_Low = 0;
    90a6:	230e      	movs	r3, #14
    90a8:	446b      	add	r3, sp
    90aa:	2200      	movs	r2, #0
    90ac:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:65
        BaudRate_Mode = 24000 / BaudRate;
    90ae:	ab01      	add	r3, sp, #4
    90b0:	881b      	ldrh	r3, [r3, #0]
    90b2:	0019      	movs	r1, r3
    90b4:	4893      	ldr	r0, [pc, #588]	; (9304 <spi_init+0x3b0>)
    90b6:	f7fd fe81 	bl	6dbc <__divsi3>
    90ba:	0003      	movs	r3, r0
    90bc:	001a      	movs	r2, r3
    90be:	230f      	movs	r3, #15
    90c0:	446b      	add	r3, sp
    90c2:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:66
        if (BaudRate_Mode <= 8)
    90c4:	230f      	movs	r3, #15
    90c6:	446b      	add	r3, sp
    90c8:	781b      	ldrb	r3, [r3, #0]
    90ca:	2b08      	cmp	r3, #8
    90cc:	d817      	bhi.n	90fe <spi_init+0x1aa>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:68
        {
            SPI0_BR = (BaudRate_Mode - 1) << 4;
    90ce:	230f      	movs	r3, #15
    90d0:	446b      	add	r3, sp
    90d2:	781b      	ldrb	r3, [r3, #0]
    90d4:	3b01      	subs	r3, #1
    90d6:	b2db      	uxtb	r3, r3
    90d8:	4a89      	ldr	r2, [pc, #548]	; (9300 <spi_init+0x3ac>)
    90da:	011b      	lsls	r3, r3, #4
    90dc:	b2db      	uxtb	r3, r3
    90de:	7053      	strb	r3, [r2, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:135
            BaudRate_High = --BaudRate_Mode;
            SPI0_BR = BaudRate_High << 4;//数值赋给SPI0_BR的SPPR的D6D5D4位
            SPI0_BR |= BaudRate_Low;   //赋值给SPI0_BR的SPR的 D2D1D0位
        }
    }
}
    90e0:	e105      	b.n	92ee <spi_init+0x39a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:74
                BaudRate_Low++;
    90e2:	230e      	movs	r3, #14
    90e4:	446b      	add	r3, sp
    90e6:	781a      	ldrb	r2, [r3, #0]
    90e8:	230e      	movs	r3, #14
    90ea:	446b      	add	r3, sp
    90ec:	3201      	adds	r2, #1
    90ee:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:75
                BaudRate_Mode = BaudRate_Mode / 2;
    90f0:	230f      	movs	r3, #15
    90f2:	446b      	add	r3, sp
    90f4:	220f      	movs	r2, #15
    90f6:	446a      	add	r2, sp
    90f8:	7812      	ldrb	r2, [r2, #0]
    90fa:	0852      	lsrs	r2, r2, #1
    90fc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:72
            while (BaudRate_Mode / 2 > 8)
    90fe:	230f      	movs	r3, #15
    9100:	446b      	add	r3, sp
    9102:	781b      	ldrb	r3, [r3, #0]
    9104:	2b11      	cmp	r3, #17
    9106:	d8ec      	bhi.n	90e2 <spi_init+0x18e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:77
            BaudRate_High = --BaudRate_Mode;
    9108:	230f      	movs	r3, #15
    910a:	446b      	add	r3, sp
    910c:	220f      	movs	r2, #15
    910e:	446a      	add	r2, sp
    9110:	7812      	ldrb	r2, [r2, #0]
    9112:	3a01      	subs	r2, #1
    9114:	701a      	strb	r2, [r3, #0]
    9116:	230d      	movs	r3, #13
    9118:	446b      	add	r3, sp
    911a:	220f      	movs	r2, #15
    911c:	446a      	add	r2, sp
    911e:	7812      	ldrb	r2, [r2, #0]
    9120:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:78
            SPI0_BR = BaudRate_High << 4;//数值赋给SPI0_BR的SPPR的D6D5D4位
    9122:	4a77      	ldr	r2, [pc, #476]	; (9300 <spi_init+0x3ac>)
    9124:	230d      	movs	r3, #13
    9126:	446b      	add	r3, sp
    9128:	781b      	ldrb	r3, [r3, #0]
    912a:	011b      	lsls	r3, r3, #4
    912c:	b2db      	uxtb	r3, r3
    912e:	7053      	strb	r3, [r2, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:79
            SPI0_BR |= BaudRate_Low;//赋值给SPI0_BR的SPR的 D2D1D0位
    9130:	4b73      	ldr	r3, [pc, #460]	; (9300 <spi_init+0x3ac>)
    9132:	785b      	ldrb	r3, [r3, #1]
    9134:	b2da      	uxtb	r2, r3
    9136:	4972      	ldr	r1, [pc, #456]	; (9300 <spi_init+0x3ac>)
    9138:	230e      	movs	r3, #14
    913a:	446b      	add	r3, sp
    913c:	781b      	ldrb	r3, [r3, #0]
    913e:	4313      	orrs	r3, r2
    9140:	b2db      	uxtb	r3, r3
    9142:	704b      	strb	r3, [r1, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:135
}
    9144:	e0d3      	b.n	92ee <spi_init+0x39a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:84
        BSET(SIM_SCGC4_SPI1_SHIFT, SIM_SCGC4);   //打开SPI1模块时钟。
    9146:	4a6b      	ldr	r2, [pc, #428]	; (92f4 <spi_init+0x3a0>)
    9148:	4b6b      	ldr	r3, [pc, #428]	; (92f8 <spi_init+0x3a4>)
    914a:	58d3      	ldr	r3, [r2, r3]
    914c:	4969      	ldr	r1, [pc, #420]	; (92f4 <spi_init+0x3a0>)
    914e:	2280      	movs	r2, #128	; 0x80
    9150:	0412      	lsls	r2, r2, #16
    9152:	4313      	orrs	r3, r2
    9154:	4a68      	ldr	r2, [pc, #416]	; (92f8 <spi_init+0x3a4>)
    9156:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:86
        PORTD_PCR4 = (0 | PORT_PCR_MUX(0x02));     //选择PTD4的SS功能
    9158:	4b6b      	ldr	r3, [pc, #428]	; (9308 <spi_init+0x3b4>)
    915a:	2280      	movs	r2, #128	; 0x80
    915c:	0092      	lsls	r2, r2, #2
    915e:	611a      	str	r2, [r3, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:87
        PORTD_PCR5 = (0 | PORT_PCR_MUX(0x02));     //选择PTD5的SCK功能
    9160:	4b69      	ldr	r3, [pc, #420]	; (9308 <spi_init+0x3b4>)
    9162:	2280      	movs	r2, #128	; 0x80
    9164:	0092      	lsls	r2, r2, #2
    9166:	615a      	str	r2, [r3, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:88
        PORTD_PCR6 = (0 | PORT_PCR_MUX(0x02));     //选择PTD6的MOSI功能
    9168:	4b67      	ldr	r3, [pc, #412]	; (9308 <spi_init+0x3b4>)
    916a:	2280      	movs	r2, #128	; 0x80
    916c:	0092      	lsls	r2, r2, #2
    916e:	619a      	str	r2, [r3, #24]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:89
        PORTD_PCR7 = (0 | PORT_PCR_MUX(0x02));     //选择PTD7的MIOS功能
    9170:	4b65      	ldr	r3, [pc, #404]	; (9308 <spi_init+0x3b4>)
    9172:	2280      	movs	r2, #128	; 0x80
    9174:	0092      	lsls	r2, r2, #2
    9176:	61da      	str	r2, [r3, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:91
        SPI1_C1 = 0x00;                           //SPI控制寄存器1清零
    9178:	4b64      	ldr	r3, [pc, #400]	; (930c <spi_init+0x3b8>)
    917a:	2200      	movs	r2, #0
    917c:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:92
        BSET(SPI_C1_SPE_SHIFT, SPI1_C1);         //使能SPI模块
    917e:	4b63      	ldr	r3, [pc, #396]	; (930c <spi_init+0x3b8>)
    9180:	78db      	ldrb	r3, [r3, #3]
    9182:	b2db      	uxtb	r3, r3
    9184:	4a61      	ldr	r2, [pc, #388]	; (930c <spi_init+0x3b8>)
    9186:	2140      	movs	r1, #64	; 0x40
    9188:	430b      	orrs	r3, r1
    918a:	b2db      	uxtb	r3, r3
    918c:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:95
        (MSTR == 1) ? BSET(SPI_C1_MSTR_SHIFT, SPI1_C1) : \
    918e:	466b      	mov	r3, sp
    9190:	3306      	adds	r3, #6
    9192:	781b      	ldrb	r3, [r3, #0]
    9194:	2b01      	cmp	r3, #1
    9196:	d108      	bne.n	91aa <spi_init+0x256>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:95 (discriminator 1)
    9198:	4b5c      	ldr	r3, [pc, #368]	; (930c <spi_init+0x3b8>)
    919a:	78db      	ldrb	r3, [r3, #3]
    919c:	b2db      	uxtb	r3, r3
    919e:	4a5b      	ldr	r2, [pc, #364]	; (930c <spi_init+0x3b8>)
    91a0:	2110      	movs	r1, #16
    91a2:	430b      	orrs	r3, r1
    91a4:	b2db      	uxtb	r3, r3
    91a6:	70d3      	strb	r3, [r2, #3]
    91a8:	e008      	b.n	91bc <spi_init+0x268>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:96 (discriminator 2)
            BSET(SPI_C1_SPIE_SHIFT, SPI1_C1);
    91aa:	4b58      	ldr	r3, [pc, #352]	; (930c <spi_init+0x3b8>)
    91ac:	78db      	ldrb	r3, [r3, #3]
    91ae:	b2db      	uxtb	r3, r3
    91b0:	4956      	ldr	r1, [pc, #344]	; (930c <spi_init+0x3b8>)
    91b2:	2280      	movs	r2, #128	; 0x80
    91b4:	4252      	negs	r2, r2
    91b6:	4313      	orrs	r3, r2
    91b8:	b2db      	uxtb	r3, r3
    91ba:	70cb      	strb	r3, [r1, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:99
        (0 == CPOL) ? BCLR(SPI_C1_CPOL_SHIFT, SPI1_C1) : \
    91bc:	466b      	mov	r3, sp
    91be:	3303      	adds	r3, #3
    91c0:	781b      	ldrb	r3, [r3, #0]
    91c2:	2b00      	cmp	r3, #0
    91c4:	d108      	bne.n	91d8 <spi_init+0x284>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:99 (discriminator 1)
    91c6:	4b51      	ldr	r3, [pc, #324]	; (930c <spi_init+0x3b8>)
    91c8:	78db      	ldrb	r3, [r3, #3]
    91ca:	b2db      	uxtb	r3, r3
    91cc:	4a4f      	ldr	r2, [pc, #316]	; (930c <spi_init+0x3b8>)
    91ce:	2108      	movs	r1, #8
    91d0:	438b      	bics	r3, r1
    91d2:	b2db      	uxtb	r3, r3
    91d4:	70d3      	strb	r3, [r2, #3]
    91d6:	e007      	b.n	91e8 <spi_init+0x294>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:100 (discriminator 2)
            BSET(SPI_C1_CPOL_SHIFT, SPI1_C1);
    91d8:	4b4c      	ldr	r3, [pc, #304]	; (930c <spi_init+0x3b8>)
    91da:	78db      	ldrb	r3, [r3, #3]
    91dc:	b2db      	uxtb	r3, r3
    91de:	4a4b      	ldr	r2, [pc, #300]	; (930c <spi_init+0x3b8>)
    91e0:	2108      	movs	r1, #8
    91e2:	430b      	orrs	r3, r1
    91e4:	b2db      	uxtb	r3, r3
    91e6:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:104
        (0 == CPHA) ? BCLR(SPI_C1_CPHA_SHIFT, SPI1_C1) : \
    91e8:	ab08      	add	r3, sp, #32
    91ea:	781b      	ldrb	r3, [r3, #0]
    91ec:	2b00      	cmp	r3, #0
    91ee:	d108      	bne.n	9202 <spi_init+0x2ae>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:104 (discriminator 1)
    91f0:	4b46      	ldr	r3, [pc, #280]	; (930c <spi_init+0x3b8>)
    91f2:	78db      	ldrb	r3, [r3, #3]
    91f4:	b2db      	uxtb	r3, r3
    91f6:	4a45      	ldr	r2, [pc, #276]	; (930c <spi_init+0x3b8>)
    91f8:	2104      	movs	r1, #4
    91fa:	438b      	bics	r3, r1
    91fc:	b2db      	uxtb	r3, r3
    91fe:	70d3      	strb	r3, [r2, #3]
    9200:	e007      	b.n	9212 <spi_init+0x2be>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:105 (discriminator 2)
            BSET(SPI_C1_CPHA_SHIFT, SPI1_C1);
    9202:	4b42      	ldr	r3, [pc, #264]	; (930c <spi_init+0x3b8>)
    9204:	78db      	ldrb	r3, [r3, #3]
    9206:	b2db      	uxtb	r3, r3
    9208:	4a40      	ldr	r2, [pc, #256]	; (930c <spi_init+0x3b8>)
    920a:	2104      	movs	r1, #4
    920c:	430b      	orrs	r3, r1
    920e:	b2db      	uxtb	r3, r3
    9210:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:107
        BSET(SPI_C1_SSOE_SHIFT, SPI1_C1);
    9212:	4b3e      	ldr	r3, [pc, #248]	; (930c <spi_init+0x3b8>)
    9214:	78db      	ldrb	r3, [r3, #3]
    9216:	b2db      	uxtb	r3, r3
    9218:	4a3c      	ldr	r2, [pc, #240]	; (930c <spi_init+0x3b8>)
    921a:	2102      	movs	r1, #2
    921c:	430b      	orrs	r3, r1
    921e:	b2db      	uxtb	r3, r3
    9220:	70d3      	strb	r3, [r2, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:111
        SPI1_C2 = 0x00U;
    9222:	4b3a      	ldr	r3, [pc, #232]	; (930c <spi_init+0x3b8>)
    9224:	2200      	movs	r2, #0
    9226:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:112
        if (MSTR == 1)  //主机模式
    9228:	466b      	mov	r3, sp
    922a:	3306      	adds	r3, #6
    922c:	781b      	ldrb	r3, [r3, #0]
    922e:	2b01      	cmp	r3, #1
    9230:	d107      	bne.n	9242 <spi_init+0x2ee>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:113
            BSET(SPI_C2_MODFEN_SHIFT, SPI1_C2);
    9232:	4b36      	ldr	r3, [pc, #216]	; (930c <spi_init+0x3b8>)
    9234:	789b      	ldrb	r3, [r3, #2]
    9236:	b2db      	uxtb	r3, r3
    9238:	4a34      	ldr	r2, [pc, #208]	; (930c <spi_init+0x3b8>)
    923a:	2110      	movs	r1, #16
    923c:	430b      	orrs	r3, r1
    923e:	b2db      	uxtb	r3, r3
    9240:	7093      	strb	r3, [r2, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:114
        SPI1_BR = 0x00U;
    9242:	4b32      	ldr	r3, [pc, #200]	; (930c <spi_init+0x3b8>)
    9244:	2200      	movs	r2, #0
    9246:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:116
        BaudRate_High = 0;
    9248:	230d      	movs	r3, #13
    924a:	446b      	add	r3, sp
    924c:	2200      	movs	r2, #0
    924e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:117
        BaudRate_Low = 0;
    9250:	230e      	movs	r3, #14
    9252:	446b      	add	r3, sp
    9254:	2200      	movs	r2, #0
    9256:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:118
        BaudRate_Mode = 24000 / BaudRate;   //取除数用于寄存器中数据计算
    9258:	ab01      	add	r3, sp, #4
    925a:	881b      	ldrh	r3, [r3, #0]
    925c:	0019      	movs	r1, r3
    925e:	4829      	ldr	r0, [pc, #164]	; (9304 <spi_init+0x3b0>)
    9260:	f7fd fdac 	bl	6dbc <__divsi3>
    9264:	0003      	movs	r3, r0
    9266:	001a      	movs	r2, r3
    9268:	230f      	movs	r3, #15
    926a:	446b      	add	r3, sp
    926c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:119
        if (BaudRate_Mode <= 8)
    926e:	230f      	movs	r3, #15
    9270:	446b      	add	r3, sp
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	2b08      	cmp	r3, #8
    9276:	d817      	bhi.n	92a8 <spi_init+0x354>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:121
            SPI0_BR = (BaudRate_Mode - 1) << 4;
    9278:	230f      	movs	r3, #15
    927a:	446b      	add	r3, sp
    927c:	781b      	ldrb	r3, [r3, #0]
    927e:	3b01      	subs	r3, #1
    9280:	b2db      	uxtb	r3, r3
    9282:	4a1f      	ldr	r2, [pc, #124]	; (9300 <spi_init+0x3ac>)
    9284:	011b      	lsls	r3, r3, #4
    9286:	b2db      	uxtb	r3, r3
    9288:	7053      	strb	r3, [r2, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:135
}
    928a:	e030      	b.n	92ee <spi_init+0x39a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:127
                BaudRate_Low++;
    928c:	230e      	movs	r3, #14
    928e:	446b      	add	r3, sp
    9290:	781a      	ldrb	r2, [r3, #0]
    9292:	230e      	movs	r3, #14
    9294:	446b      	add	r3, sp
    9296:	3201      	adds	r2, #1
    9298:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:128
                BaudRate_Mode = BaudRate_Mode / 2;
    929a:	230f      	movs	r3, #15
    929c:	446b      	add	r3, sp
    929e:	220f      	movs	r2, #15
    92a0:	446a      	add	r2, sp
    92a2:	7812      	ldrb	r2, [r2, #0]
    92a4:	0852      	lsrs	r2, r2, #1
    92a6:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:125
            while (BaudRate_Mode / 2 > 8)
    92a8:	230f      	movs	r3, #15
    92aa:	446b      	add	r3, sp
    92ac:	781b      	ldrb	r3, [r3, #0]
    92ae:	2b11      	cmp	r3, #17
    92b0:	d8ec      	bhi.n	928c <spi_init+0x338>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:130
            BaudRate_High = --BaudRate_Mode;
    92b2:	230f      	movs	r3, #15
    92b4:	446b      	add	r3, sp
    92b6:	220f      	movs	r2, #15
    92b8:	446a      	add	r2, sp
    92ba:	7812      	ldrb	r2, [r2, #0]
    92bc:	3a01      	subs	r2, #1
    92be:	701a      	strb	r2, [r3, #0]
    92c0:	230d      	movs	r3, #13
    92c2:	446b      	add	r3, sp
    92c4:	220f      	movs	r2, #15
    92c6:	446a      	add	r2, sp
    92c8:	7812      	ldrb	r2, [r2, #0]
    92ca:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:131
            SPI0_BR = BaudRate_High << 4;//数值赋给SPI0_BR的SPPR的D6D5D4位
    92cc:	4a0c      	ldr	r2, [pc, #48]	; (9300 <spi_init+0x3ac>)
    92ce:	230d      	movs	r3, #13
    92d0:	446b      	add	r3, sp
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	011b      	lsls	r3, r3, #4
    92d6:	b2db      	uxtb	r3, r3
    92d8:	7053      	strb	r3, [r2, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:132
            SPI0_BR |= BaudRate_Low;   //赋值给SPI0_BR的SPR的 D2D1D0位
    92da:	4b09      	ldr	r3, [pc, #36]	; (9300 <spi_init+0x3ac>)
    92dc:	785b      	ldrb	r3, [r3, #1]
    92de:	b2da      	uxtb	r2, r3
    92e0:	4907      	ldr	r1, [pc, #28]	; (9300 <spi_init+0x3ac>)
    92e2:	230e      	movs	r3, #14
    92e4:	446b      	add	r3, sp
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	4313      	orrs	r3, r2
    92ea:	b2db      	uxtb	r3, r3
    92ec:	704b      	strb	r3, [r1, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:135
}
    92ee:	46c0      	nop			; (mov r8, r8)
    92f0:	b005      	add	sp, #20
    92f2:	bd30      	pop	{r4, r5, pc}
    92f4:	40047000 	.word	0x40047000
    92f8:	00001034 	.word	0x00001034
    92fc:	4004b000 	.word	0x4004b000
    9300:	40076000 	.word	0x40076000
    9304:	00005dc0 	.word	0x00005dc0
    9308:	4004c000 	.word	0x4004c000
    930c:	40077000 	.word	0x40077000

00009310 <spi_send1>:
spi_send1():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:144
//函数参数：No：模块号，可用参数可参见gec.h文件
//       data：     需要发送的一字节数据。
//函数返回：0：发送失败；1：发送成功。
//=====================================================================
uint8_t spi_send1(uint8_t No, uint8_t data)
{
    9310:	b084      	sub	sp, #16
    9312:	0002      	movs	r2, r0
    9314:	466b      	mov	r3, sp
    9316:	3307      	adds	r3, #7
    9318:	701a      	strb	r2, [r3, #0]
    931a:	466b      	mov	r3, sp
    931c:	3306      	adds	r3, #6
    931e:	1c0a      	adds	r2, r1, #0
    9320:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:147
    // 复位后，发送缓冲区标志位为1; 0表示满，1表示空
    // 当向数据寄存器写数据后，自动将发送缓冲区标志位置1
    SPI_MemMapPtr baseadd = SPI_baseadd(No);
    9322:	466b      	mov	r3, sp
    9324:	3307      	adds	r3, #7
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	4a14      	ldr	r2, [pc, #80]	; (937c <spi_send1+0x6c>)
    932a:	4694      	mov	ip, r2
    932c:	4463      	add	r3, ip
    932e:	031b      	lsls	r3, r3, #12
    9330:	9302      	str	r3, [sp, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:150

    //等待上一个字符发送完毕，发送缓冲区空闲
    while (!(SPI_S_REG(baseadd) & SPI_S_SPTEF_MASK));
    9332:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:150 (discriminator 1)
    9334:	9b02      	ldr	r3, [sp, #8]
    9336:	781b      	ldrb	r3, [r3, #0]
    9338:	b2db      	uxtb	r3, r3
    933a:	001a      	movs	r2, r3
    933c:	2320      	movs	r3, #32
    933e:	4013      	ands	r3, r2
    9340:	d0f8      	beq.n	9334 <spi_send1+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:155

    // 将要发送的数据写入到数据寄存器
    // 向数据寄存器写入数据将会写入到发送数据缓冲器，将数据发送出去
    // 读数据寄存器将会读取到接收数据寄存器的值。
    SPI_DL_REG(baseadd) = data;
    9342:	9b02      	ldr	r3, [sp, #8]
    9344:	466a      	mov	r2, sp
    9346:	3206      	adds	r2, #6
    9348:	7812      	ldrb	r2, [r2, #0]
    934a:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:157

    for (uint32_t i = 0;i < 65535;i++) {
    934c:	2300      	movs	r3, #0
    934e:	9303      	str	r3, [sp, #12]
    9350:	e00b      	b.n	936a <spi_send1+0x5a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:159
        // 在一定时间内如果发送缓冲器为空标志变成 1，说明发送缓冲区为空，发送完毕
        if (SPI_S_REG(baseadd) & SPI_S_SPTEF_MASK) {
    9352:	9b02      	ldr	r3, [sp, #8]
    9354:	781b      	ldrb	r3, [r3, #0]
    9356:	b2db      	uxtb	r3, r3
    9358:	001a      	movs	r2, r3
    935a:	2320      	movs	r3, #32
    935c:	4013      	ands	r3, r2
    935e:	d001      	beq.n	9364 <spi_send1+0x54>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:160
            return(1);
    9360:	2301      	movs	r3, #1
    9362:	e007      	b.n	9374 <spi_send1+0x64>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:157 (discriminator 2)
    for (uint32_t i = 0;i < 65535;i++) {
    9364:	9b03      	ldr	r3, [sp, #12]
    9366:	3301      	adds	r3, #1
    9368:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:157 (discriminator 1)
    936a:	9b03      	ldr	r3, [sp, #12]
    936c:	4a04      	ldr	r2, [pc, #16]	; (9380 <spi_send1+0x70>)
    936e:	4293      	cmp	r3, r2
    9370:	d9ef      	bls.n	9352 <spi_send1+0x42>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:165
        }
    }

    //在一定时间内仍然没有返回1,则认为发送失败，返回0。
    return(0);
    9372:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:166
}
    9374:	0018      	movs	r0, r3
    9376:	b004      	add	sp, #16
    9378:	4770      	bx	lr
    937a:	46c0      	nop			; (mov r8, r8)
    937c:	00040076 	.word	0x00040076
    9380:	0000fffe 	.word	0x0000fffe

00009384 <spi_sendN>:
spi_sendN():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:175
//函数参数：No：模块号，可用参数可参见gec.h文件
//       n:     要发送的字节个数。范围为(1~255)
//       data[]:所发数组的首地址。
//函数返回：无。
//=====================================================================
void spi_sendN(uint8_t No, uint8_t n, uint8_t* buff) {
    9384:	b500      	push	{lr}
    9386:	b085      	sub	sp, #20
    9388:	9200      	str	r2, [sp, #0]
    938a:	466b      	mov	r3, sp
    938c:	3307      	adds	r3, #7
    938e:	1c02      	adds	r2, r0, #0
    9390:	701a      	strb	r2, [r3, #0]
    9392:	466b      	mov	r3, sp
    9394:	3306      	adds	r3, #6
    9396:	1c0a      	adds	r2, r1, #0
    9398:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:190
    //     // 因为向数据寄存器写数据之后，会自动将SPTEF置1
    //     SPI_S_REG(baseadd) |= SPI_S_SPTEF_MASK;    //清除SPTEF位
    // }

    // 第二种实现方式，通过调用spi_send1()也可以实现上述功能
    for (uint32_t i = 0; i < n; i++) {
    939a:	2300      	movs	r3, #0
    939c:	9303      	str	r3, [sp, #12]
    939e:	e00d      	b.n	93bc <spi_sendN+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:191 (discriminator 3)
        spi_send1(No, buff[i]);
    93a0:	9a00      	ldr	r2, [sp, #0]
    93a2:	9b03      	ldr	r3, [sp, #12]
    93a4:	18d3      	adds	r3, r2, r3
    93a6:	781a      	ldrb	r2, [r3, #0]
    93a8:	466b      	mov	r3, sp
    93aa:	3307      	adds	r3, #7
    93ac:	781b      	ldrb	r3, [r3, #0]
    93ae:	0011      	movs	r1, r2
    93b0:	0018      	movs	r0, r3
    93b2:	f7ff ffad 	bl	9310 <spi_send1>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:190 (discriminator 3)
    for (uint32_t i = 0; i < n; i++) {
    93b6:	9b03      	ldr	r3, [sp, #12]
    93b8:	3301      	adds	r3, #1
    93ba:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:190 (discriminator 1)
    93bc:	466b      	mov	r3, sp
    93be:	3306      	adds	r3, #6
    93c0:	781b      	ldrb	r3, [r3, #0]
    93c2:	9a03      	ldr	r2, [sp, #12]
    93c4:	429a      	cmp	r2, r3
    93c6:	d3eb      	bcc.n	93a0 <spi_sendN+0x1c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:195
    }

    // 发送转义字符0, 告诉接收方一串字符串发送完毕
    spi_send1(No, '\0');
    93c8:	466b      	mov	r3, sp
    93ca:	3307      	adds	r3, #7
    93cc:	781b      	ldrb	r3, [r3, #0]
    93ce:	2100      	movs	r1, #0
    93d0:	0018      	movs	r0, r3
    93d2:	f7ff ff9d 	bl	9310 <spi_send1>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:196
}
    93d6:	46c0      	nop			; (mov r8, r8)
    93d8:	b005      	add	sp, #20
    93da:	bd00      	pop	{pc}

000093dc <spi_receive1>:
spi_receive1():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:204
//功能说明：SPI接收一个字节的数据
//函数参数：No：模块号，可用参数可参见gec.h文件
//函数返回：接收到的数据。
//=====================================================================
uint8_t spi_receive1(uint8_t No)
{
    93dc:	b084      	sub	sp, #16
    93de:	0002      	movs	r2, r0
    93e0:	466b      	mov	r3, sp
    93e2:	3307      	adds	r3, #7
    93e4:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:205
    SPI_MemMapPtr baseadd = SPI_baseadd(No);
    93e6:	466b      	mov	r3, sp
    93e8:	3307      	adds	r3, #7
    93ea:	781b      	ldrb	r3, [r3, #0]
    93ec:	4a08      	ldr	r2, [pc, #32]	; (9410 <spi_receive1+0x34>)
    93ee:	4694      	mov	ip, r2
    93f0:	4463      	add	r3, ip
    93f2:	031b      	lsls	r3, r3, #12
    93f4:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:210

    // 接收缓冲寄存器满标志（SPRF）
    // SPRF = 0, 接收缓冲寄存器无可用数据，SPRF = 1, 接收缓冲寄存器有可用数据
    // 读取接收缓冲寄存器之后，该标志会清0
    while (!(SPI_S_REG(baseadd) & SPI_S_SPRF_MASK)); // 当有可用数据时，跳出while循环
    93f6:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:210 (discriminator 1)
    93f8:	9b03      	ldr	r3, [sp, #12]
    93fa:	781b      	ldrb	r3, [r3, #0]
    93fc:	b2db      	uxtb	r3, r3
    93fe:	b25b      	sxtb	r3, r3
    9400:	2b00      	cmp	r3, #0
    9402:	daf9      	bge.n	93f8 <spi_receive1+0x1c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:212

    return SPI_DL_REG(baseadd);
    9404:	9b03      	ldr	r3, [sp, #12]
    9406:	799b      	ldrb	r3, [r3, #6]
    9408:	b2db      	uxtb	r3, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:213
}
    940a:	0018      	movs	r0, r3
    940c:	b004      	add	sp, #16
    940e:	4770      	bx	lr
    9410:	00040076 	.word	0x00040076

00009414 <spi_receiveN>:
spi_receiveN():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:223
//        n:    要发送的字节个数。范围为(1~255),
//       data[]:接收到的数据存放的首地址。
//函数返回：1：接收成功,其他情况：失败。
//=====================================================================

uint32_t spi_receiveN(uint8_t No, uint8_t* buff) {
    9414:	b510      	push	{r4, lr}
    9416:	b082      	sub	sp, #8
    9418:	0002      	movs	r2, r0
    941a:	9100      	str	r1, [sp, #0]
    941c:	466b      	mov	r3, sp
    941e:	3307      	adds	r3, #7
    9420:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:227
    // 设置一个静态变量，记录当前接收字符个数
    static uint32_t index = 0;

    buff[index++] = spi_receive1(No);
    9422:	4b12      	ldr	r3, [pc, #72]	; (946c <spi_receiveN+0x58>)
    9424:	681b      	ldr	r3, [r3, #0]
    9426:	1c59      	adds	r1, r3, #1
    9428:	4a10      	ldr	r2, [pc, #64]	; (946c <spi_receiveN+0x58>)
    942a:	6011      	str	r1, [r2, #0]
    942c:	9a00      	ldr	r2, [sp, #0]
    942e:	18d4      	adds	r4, r2, r3
    9430:	466b      	mov	r3, sp
    9432:	3307      	adds	r3, #7
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	0018      	movs	r0, r3
    9438:	f7ff ffd0 	bl	93dc <spi_receive1>
    943c:	0003      	movs	r3, r0
    943e:	7023      	strb	r3, [r4, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:231

    // 当接收到转义字符'\0'时， 说明发送方已经发送完毕
    // 此时返回接收的字符串的长度，同时index归0, 方便接收下一个字符串
    if (buff[index - 1] == '\0') {
    9440:	4b0a      	ldr	r3, [pc, #40]	; (946c <spi_receiveN+0x58>)
    9442:	681b      	ldr	r3, [r3, #0]
    9444:	3b01      	subs	r3, #1
    9446:	9a00      	ldr	r2, [sp, #0]
    9448:	18d3      	adds	r3, r2, r3
    944a:	781b      	ldrb	r3, [r3, #0]
    944c:	2b00      	cmp	r3, #0
    944e:	d108      	bne.n	9462 <spi_receiveN+0x4e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:232
        index = 0;
    9450:	4b06      	ldr	r3, [pc, #24]	; (946c <spi_receiveN+0x58>)
    9452:	2200      	movs	r2, #0
    9454:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:233
        return strlen(buff);
    9456:	9b00      	ldr	r3, [sp, #0]
    9458:	0018      	movs	r0, r3
    945a:	f7fe fea3 	bl	81a4 <strlen>
    945e:	0003      	movs	r3, r0
    9460:	e000      	b.n	9464 <spi_receiveN+0x50>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:237
    }

    // 如果不是字符'\0', 说明还有数据，返回 0
    return 0;
    9462:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:238
}
    9464:	0018      	movs	r0, r3
    9466:	b002      	add	sp, #8
    9468:	bd10      	pop	{r4, pc}
    946a:	46c0      	nop			; (mov r8, r8)
    946c:	2000041c 	.word	0x2000041c

00009470 <spi_enable_re_int>:
spi_enable_re_int():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:247
//功能说明：打开SPI接收中断。
//函数参数：No：模块号，可用参数可参见gec.h文件
//函数返回：无。
//=====================================================================
void spi_enable_re_int(uint8_t No)
{
    9470:	b500      	push	{lr}
    9472:	b083      	sub	sp, #12
    9474:	0002      	movs	r2, r0
    9476:	466b      	mov	r3, sp
    9478:	3307      	adds	r3, #7
    947a:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:249
    //enable_irq (No+10);
    NVIC_EnableIRQ(No + 10);
    947c:	466b      	mov	r3, sp
    947e:	3307      	adds	r3, #7
    9480:	781b      	ldrb	r3, [r3, #0]
    9482:	330a      	adds	r3, #10
    9484:	b2db      	uxtb	r3, r3
    9486:	b25b      	sxtb	r3, r3
    9488:	0018      	movs	r0, r3
    948a:	f7ff fd4d 	bl	8f28 <NVIC_EnableIRQ>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/spi.c:250
}
    948e:	46c0      	nop			; (mov r8, r8)
    9490:	b003      	add	sp, #12
    9492:	bd00      	pop	{pc}

00009494 <Vectors_Init>:
Vectors_Init():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:15
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
    9494:	b580      	push	{r7, lr}
    9496:	4f2e      	ldr	r7, [pc, #184]	; (9550 <Vectors_Init+0xbc>)
    9498:	44bd      	add	sp, r7
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:19
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)   
    //（1）若Flash倒数2扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
    949a:	2118      	movs	r1, #24
    949c:	203f      	movs	r0, #63	; 0x3f
    949e:	f7ff f81d 	bl	84dc <flash_isempty>
    94a2:	1e03      	subs	r3, r0, #0
    94a4:	d006      	beq.n	94b4 <Vectors_Init+0x20>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:21
    {
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
    94a6:	4a2b      	ldr	r2, [pc, #172]	; (9554 <Vectors_Init+0xc0>)
    94a8:	23fc      	movs	r3, #252	; 0xfc
    94aa:	021b      	lsls	r3, r3, #8
    94ac:	2118      	movs	r1, #24
    94ae:	0018      	movs	r0, r3
    94b0:	f7fe ffb8 	bl	8424 <flash_write_physical>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:25
        MCU_FLASH_ADDR_START,24,(uint8_t *)"0123456789ABCDEF20200716");
    }
    //（2）继承BIOS的串口中断              
    void ** bios=MCU_FLASH_ADDR_START;   //向量表起始地址  
    94b4:	2300      	movs	r3, #0
    94b6:	aaff      	add	r2, sp, #1020	; 0x3fc
    94b8:	3208      	adds	r2, #8
    94ba:	6013      	str	r3, [r2, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:28
    uint32_t user[MCU_SECTORSIZE/4];     //向量表变量数组
    //读取USER中断向量表各中断处理程序地址赋给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
    94bc:	2380      	movs	r3, #128	; 0x80
    94be:	00da      	lsls	r2, r3, #3
    94c0:	23d0      	movs	r3, #208	; 0xd0
    94c2:	01d9      	lsls	r1, r3, #7
    94c4:	ab01      	add	r3, sp, #4
    94c6:	0018      	movs	r0, r3
    94c8:	f7fe fff4 	bl	84b4 <flash_read_physical>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:32
    MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE);
    //判断USER中串口更新中断是否为BIOS对应中断地址。若是，则不作操作；否则修改
    //为BIOS对应中断地址
    if(user[BIOS_UART_UPDATE_IRQn] != (uint32_t)bios[BIOS_UART_UPDATE_IRQn])
    94cc:	4b22      	ldr	r3, [pc, #136]	; (9558 <Vectors_Init+0xc4>)
    94ce:	aaff      	add	r2, sp, #1020	; 0x3fc
    94d0:	320c      	adds	r2, #12
    94d2:	4694      	mov	ip, r2
    94d4:	4463      	add	r3, ip
    94d6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    94d8:	abff      	add	r3, sp, #1020	; 0x3fc
    94da:	3308      	adds	r3, #8
    94dc:	681b      	ldr	r3, [r3, #0]
    94de:	3378      	adds	r3, #120	; 0x78
    94e0:	681b      	ldr	r3, [r3, #0]
    94e2:	429a      	cmp	r2, r3
    94e4:	d022      	beq.n	952c <Vectors_Init+0x98>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:35
    {
        //改变User中断向量表中BIOS_UART中断向量
        flash_erase(GEC_USER_SECTOR_START);
    94e6:	201a      	movs	r0, #26
    94e8:	f7fe ff50 	bl	838c <flash_erase>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:37
        //改USER中断向量表的BIOS程序写入串口的中断处理程序地址
        user[2]=(uint32_t)bios[2];     //【20200903】
    94ec:	abff      	add	r3, sp, #1020	; 0x3fc
    94ee:	3308      	adds	r3, #8
    94f0:	681b      	ldr	r3, [r3, #0]
    94f2:	3308      	adds	r3, #8
    94f4:	681b      	ldr	r3, [r3, #0]
    94f6:	001a      	movs	r2, r3
    94f8:	4b17      	ldr	r3, [pc, #92]	; (9558 <Vectors_Init+0xc4>)
    94fa:	a9ff      	add	r1, sp, #1020	; 0x3fc
    94fc:	310c      	adds	r1, #12
    94fe:	468c      	mov	ip, r1
    9500:	4463      	add	r3, ip
    9502:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:38
        user[BIOS_UART_UPDATE_IRQn]=(uint32_t)bios[BIOS_UART_UPDATE_IRQn];
    9504:	abff      	add	r3, sp, #1020	; 0x3fc
    9506:	3308      	adds	r3, #8
    9508:	681b      	ldr	r3, [r3, #0]
    950a:	3378      	adds	r3, #120	; 0x78
    950c:	681b      	ldr	r3, [r3, #0]
    950e:	001a      	movs	r2, r3
    9510:	4b11      	ldr	r3, [pc, #68]	; (9558 <Vectors_Init+0xc4>)
    9512:	a9ff      	add	r1, sp, #1020	; 0x3fc
    9514:	310c      	adds	r1, #12
    9516:	468c      	mov	ip, r1
    9518:	4463      	add	r3, ip
    951a:	679a      	str	r2, [r3, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:39
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    951c:	aa01      	add	r2, sp, #4
    951e:	2380      	movs	r3, #128	; 0x80
    9520:	00d9      	lsls	r1, r3, #3
    9522:	23d0      	movs	r3, #208	; 0xd0
    9524:	01db      	lsls	r3, r3, #7
    9526:	0018      	movs	r0, r3
    9528:	f7fe ff7c 	bl	8424 <flash_write_physical>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:44
        MCU_FLASH_ADDR_START,MCU_SECTORSIZE,(uint8_t *)user);
    }
    
    //（3）中断向量表指针重定向到USER程序的中断向量表
    SCB->VTOR = (uint32_t)(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    952c:	4b0b      	ldr	r3, [pc, #44]	; (955c <Vectors_Init+0xc8>)
    952e:	22d0      	movs	r2, #208	; 0xd0
    9530:	01d2      	lsls	r2, r2, #7
    9532:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:47
    MCU_FLASH_ADDR_START);  
    //（4）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+
    9534:	4b0a      	ldr	r3, [pc, #40]	; (9560 <Vectors_Init+0xcc>)
    9536:	22e0      	movs	r2, #224	; 0xe0
    9538:	0192      	lsls	r2, r2, #6
    953a:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:50
    GEC_COMPONENT_LST_START*MCU_SECTORSIZE); 
    //（5）printf提示             
    printf("  【User提示】：将进入User的main()执行...\r\n");
    953c:	4b09      	ldr	r3, [pc, #36]	; (9564 <Vectors_Init+0xd0>)
    953e:	0018      	movs	r0, r3
    9540:	f000 fe86 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/gec.c:53
    
    #endif
}
    9544:	46c0      	nop			; (mov r8, r8)
    9546:	2381      	movs	r3, #129	; 0x81
    9548:	00db      	lsls	r3, r3, #3
    954a:	449d      	add	sp, r3
    954c:	bd80      	pop	{r7, pc}
    954e:	46c0      	nop			; (mov r8, r8)
    9550:	fffffbf8 	.word	0xfffffbf8
    9554:	0000a340 	.word	0x0000a340
    9558:	fffffbfc 	.word	0xfffffbfc
    955c:	e000ed00 	.word	0xe000ed00
    9560:	20000624 	.word	0x20000624
    9564:	0000a35c 	.word	0x0000a35c

00009568 <uart_send1>:
uart_send1():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:173
//          ch:要发送的字节
//函数返回：函数执行状态：1=发送成功；0=发送失败。
//功能概要：串行发送1个字节
//======================================================================
uint8_t uart_send1(uint8_t uartNo, uint8_t ch)
{
    9568:	b500      	push	{lr}
    956a:	b087      	sub	sp, #28
    956c:	0002      	movs	r2, r0
    956e:	466b      	mov	r3, sp
    9570:	3307      	adds	r3, #7
    9572:	701a      	strb	r2, [r3, #0]
    9574:	466b      	mov	r3, sp
    9576:	3306      	adds	r3, #6
    9578:	1c0a      	adds	r2, r1, #0
    957a:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:176
    uint32_t t;
    uint32_t i;
    UART0_MemMapPtr UART_2h_0=UART0_BASE_PTR; //获取UART0基地址
    957c:	4b22      	ldr	r3, [pc, #136]	; (9608 <uart_send1+0xa0>)
    957e:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:177
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    9580:	466b      	mov	r3, sp
    9582:	3307      	adds	r3, #7
    9584:	781b      	ldrb	r3, [r3, #0]
    9586:	1e5a      	subs	r2, r3, #1
    9588:	4b20      	ldr	r3, [pc, #128]	; (960c <uart_send1+0xa4>)
    958a:	0092      	lsls	r2, r2, #2
    958c:	58d3      	ldr	r3, [r2, r3]
    958e:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:185
    {
    	__asm (" nop ");
    }
    */
    //判断传入串口号参数是否有误，有误直接退出
    if(!uart_is_uartNo(uartNo))
    9590:	466b      	mov	r3, sp
    9592:	3307      	adds	r3, #7
    9594:	781b      	ldrb	r3, [r3, #0]
    9596:	0018      	movs	r0, r3
    9598:	f000 f83c 	bl	9614 <uart_is_uartNo>
    959c:	1e03      	subs	r3, r0, #0
    959e:	d101      	bne.n	95a4 <uart_send1+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:187
    {
        return 0;
    95a0:	2300      	movs	r3, #0
    95a2:	e02d      	b.n	9600 <uart_send1+0x98>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:190
    }

    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    95a4:	2300      	movs	r3, #0
    95a6:	9305      	str	r3, [sp, #20]
    95a8:	e01f      	b.n	95ea <uart_send1+0x82>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:192
    {
        if(0==uartNo)     //判断使用的哪个串口
    95aa:	466b      	mov	r3, sp
    95ac:	3307      	adds	r3, #7
    95ae:	781b      	ldrb	r3, [r3, #0]
    95b0:	2b00      	cmp	r3, #0
    95b2:	d10b      	bne.n	95cc <uart_send1+0x64>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:195
        {
        	//发送缓冲区为空则发送数据
            if ( UART0_S1_REG(UART_2h_0) & UART0_S1_TDRE_MASK )
    95b4:	9b04      	ldr	r3, [sp, #16]
    95b6:	791b      	ldrb	r3, [r3, #4]
    95b8:	b2db      	uxtb	r3, r3
    95ba:	b25b      	sxtb	r3, r3
    95bc:	2b00      	cmp	r3, #0
    95be:	da11      	bge.n	95e4 <uart_send1+0x7c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:197
            {
                UART0_D_REG(UART_2h_0) = ch;
    95c0:	9b04      	ldr	r3, [sp, #16]
    95c2:	466a      	mov	r2, sp
    95c4:	3206      	adds	r2, #6
    95c6:	7812      	ldrb	r2, [r2, #0]
    95c8:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:198
                break;
    95ca:	e012      	b.n	95f2 <uart_send1+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:204
            }
        }
        else
        {
        	//发送缓冲区为空则发送数据
            if (UART_S1_REG(UART_2h_1_2) & UART_S1_TDRE_MASK )
    95cc:	9b03      	ldr	r3, [sp, #12]
    95ce:	791b      	ldrb	r3, [r3, #4]
    95d0:	b2db      	uxtb	r3, r3
    95d2:	b25b      	sxtb	r3, r3
    95d4:	2b00      	cmp	r3, #0
    95d6:	da05      	bge.n	95e4 <uart_send1+0x7c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:206
            {
                UART_D_REG(UART_2h_1_2) = ch;
    95d8:	9b03      	ldr	r3, [sp, #12]
    95da:	466a      	mov	r2, sp
    95dc:	3206      	adds	r2, #6
    95de:	7812      	ldrb	r2, [r2, #0]
    95e0:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:207
                break;
    95e2:	e006      	b.n	95f2 <uart_send1+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:190 (discriminator 2)
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    95e4:	9b05      	ldr	r3, [sp, #20]
    95e6:	3301      	adds	r3, #1
    95e8:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:190 (discriminator 1)
    95ea:	9b05      	ldr	r3, [sp, #20]
    95ec:	4a08      	ldr	r2, [pc, #32]	; (9610 <uart_send1+0xa8>)
    95ee:	4293      	cmp	r3, r2
    95f0:	d9db      	bls.n	95aa <uart_send1+0x42>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:217
    for(i=0;i<5000;i++)
    {
    	__asm (" nop ");
    }
    */
    if (t >= 0xFBBB)
    95f2:	9b05      	ldr	r3, [sp, #20]
    95f4:	4a06      	ldr	r2, [pc, #24]	; (9610 <uart_send1+0xa8>)
    95f6:	4293      	cmp	r3, r2
    95f8:	d901      	bls.n	95fe <uart_send1+0x96>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:218
        return 0; //发送超时，发送失败
    95fa:	2300      	movs	r3, #0
    95fc:	e000      	b.n	9600 <uart_send1+0x98>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:220
    else
        return 1; //成功发送
    95fe:	2301      	movs	r3, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:221
}
    9600:	0018      	movs	r0, r3
    9602:	b007      	add	sp, #28
    9604:	bd00      	pop	{pc}
    9606:	46c0      	nop			; (mov r8, r8)
    9608:	4006a000 	.word	0x4006a000
    960c:	0000a3d8 	.word	0x0000a3d8
    9610:	0000fbba 	.word	0x0000fbba

00009614 <uart_is_uartNo>:
uart_is_uartNo():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:538
//函数返回：1:串口号在合理范围内，0：串口号不合理
//参数说明：串口号uartNo  :UART_0、UART_1、UART_2
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo)
{
    9614:	b082      	sub	sp, #8
    9616:	0002      	movs	r2, r0
    9618:	466b      	mov	r3, sp
    961a:	3307      	adds	r3, #7
    961c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:539
    if(uartNo < UART_0 || uartNo > UART_2)
    961e:	466b      	mov	r3, sp
    9620:	3307      	adds	r3, #7
    9622:	781b      	ldrb	r3, [r3, #0]
    9624:	2b02      	cmp	r3, #2
    9626:	d901      	bls.n	962c <uart_is_uartNo+0x18>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:540
        return 0;
    9628:	2300      	movs	r3, #0
    962a:	e000      	b.n	962e <uart_is_uartNo+0x1a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:542
    else
        return 1;
    962c:	2301      	movs	r3, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/uart.c:543
}
    962e:	0018      	movs	r0, r3
    9630:	b002      	add	sp, #8
    9632:	4770      	bx	lr

00009634 <PORTC_PORTD_IRQHandler>:
PORTC_PORTD_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:9
//版本更新：20170801-20191020
//功能描述：提供中断处理程序编程框架
//=====================================================================
#include "includes.h"

void SUART_PortC_PortD_Handler(void) {
    9634:	b500      	push	{lr}
    9636:	b083      	sub	sp, #12
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:10
  uint32_t len = suart_receive(SUART_RX, gRecvBuff);
    9638:	4b09      	ldr	r3, [pc, #36]	; (9660 <PORTC_PORTD_IRQHandler+0x2c>)
    963a:	4a0a      	ldr	r2, [pc, #40]	; (9664 <PORTC_PORTD_IRQHandler+0x30>)
    963c:	0019      	movs	r1, r3
    963e:	0010      	movs	r0, r2
    9640:	f7ff fa24 	bl	8a8c <suart_receive>
    9644:	0003      	movs	r3, r0
    9646:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:11
  printf("gLenth: %d\n", len);
    9648:	9a01      	ldr	r2, [sp, #4]
    964a:	4b07      	ldr	r3, [pc, #28]	; (9668 <PORTC_PORTD_IRQHandler+0x34>)
    964c:	0011      	movs	r1, r2
    964e:	0018      	movs	r0, r3
    9650:	f000 fdfe 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:12
  gSendFlag = 1;
    9654:	4b05      	ldr	r3, [pc, #20]	; (966c <PORTC_PORTD_IRQHandler+0x38>)
    9656:	2201      	movs	r2, #1
    9658:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:13
}
    965a:	46c0      	nop			; (mov r8, r8)
    965c:	b003      	add	sp, #12
    965e:	bd00      	pop	{pc}
    9660:	20000420 	.word	0x20000420
    9664:	00000201 	.word	0x00000201
    9668:	0000a388 	.word	0x0000a388
    966c:	20000628 	.word	0x20000628

00009670 <SPI0_IRQHandler>:
SPI0_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:15

void SPI_Send_Handler(void) {
    9670:	b500      	push	{lr}
    9672:	b083      	sub	sp, #12
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:16
  DISABLE_INTERRUPTS;  //关总中断
    9674:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:19
  //------------------------------------------------------------------
  //（在此处增加功能）
  uint32_t len = spi_receiveN(SPI_RECEIVE, gRecvBuff);
    9676:	4b0d      	ldr	r3, [pc, #52]	; (96ac <SPI0_IRQHandler+0x3c>)
    9678:	0019      	movs	r1, r3
    967a:	2001      	movs	r0, #1
    967c:	f7ff feca 	bl	9414 <spi_receiveN>
    9680:	0003      	movs	r3, r0
    9682:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:21
  // 如果len的长度不为0,说明字符接收成功，长度为len
  if (len) {
    9684:	9b01      	ldr	r3, [sp, #4]
    9686:	2b00      	cmp	r3, #0
    9688:	d00c      	beq.n	96a4 <SPI0_IRQHandler+0x34>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:22
    printf("%s\n", gRecvBuff);
    968a:	4a08      	ldr	r2, [pc, #32]	; (96ac <SPI0_IRQHandler+0x3c>)
    968c:	4b08      	ldr	r3, [pc, #32]	; (96b0 <SPI0_IRQHandler+0x40>)
    968e:	0011      	movs	r1, r2
    9690:	0018      	movs	r0, r3
    9692:	f000 fddd 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:23
    suart_send(SUART_TX, gRecvBuff, len);
    9696:	9a01      	ldr	r2, [sp, #4]
    9698:	4904      	ldr	r1, [pc, #16]	; (96ac <SPI0_IRQHandler+0x3c>)
    969a:	2380      	movs	r3, #128	; 0x80
    969c:	009b      	lsls	r3, r3, #2
    969e:	0018      	movs	r0, r3
    96a0:	f7ff f8b8 	bl	8814 <suart_send>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:27
  }

  //------------------------------------------------------------------
  ENABLE_INTERRUPTS;  //关总中断
    96a4:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:28
}
    96a6:	46c0      	nop			; (mov r8, r8)
    96a8:	b003      	add	sp, #12
    96aa:	bd00      	pop	{pc}
    96ac:	20000420 	.word	0x20000420
    96b0:	0000a394 	.word	0x0000a394

000096b4 <SPI1_IRQHandler>:
SPI1_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:30

void SPI_Receive_Handler(void) {
    96b4:	b500      	push	{lr}
    96b6:	b083      	sub	sp, #12
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:31
  DISABLE_INTERRUPTS;  //关总中断
    96b8:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:34
  //------------------------------------------------------------------
  //（在此处增加功能）
  uint32_t len = spi_receiveN(SPI_RECEIVE, gRecvBuff);
    96ba:	4b0d      	ldr	r3, [pc, #52]	; (96f0 <SPI1_IRQHandler+0x3c>)
    96bc:	0019      	movs	r1, r3
    96be:	2001      	movs	r0, #1
    96c0:	f7ff fea8 	bl	9414 <spi_receiveN>
    96c4:	0003      	movs	r3, r0
    96c6:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:36
  // 如果len的长度不为0,说明字符接收成功，长度为len
  if (len) {
    96c8:	9b01      	ldr	r3, [sp, #4]
    96ca:	2b00      	cmp	r3, #0
    96cc:	d00c      	beq.n	96e8 <SPI1_IRQHandler+0x34>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:37
    printf("%s\n", gRecvBuff);
    96ce:	4a08      	ldr	r2, [pc, #32]	; (96f0 <SPI1_IRQHandler+0x3c>)
    96d0:	4b08      	ldr	r3, [pc, #32]	; (96f4 <SPI1_IRQHandler+0x40>)
    96d2:	0011      	movs	r1, r2
    96d4:	0018      	movs	r0, r3
    96d6:	f000 fdbb 	bl	a250 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:38
    suart_send(SUART_TX, gRecvBuff, len);
    96da:	9a01      	ldr	r2, [sp, #4]
    96dc:	4904      	ldr	r1, [pc, #16]	; (96f0 <SPI1_IRQHandler+0x3c>)
    96de:	2380      	movs	r3, #128	; 0x80
    96e0:	009b      	lsls	r3, r3, #2
    96e2:	0018      	movs	r0, r3
    96e4:	f7ff f896 	bl	8814 <suart_send>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:42
  }

  //------------------------------------------------------------------
  ENABLE_INTERRUPTS;  //关总中断
    96e8:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/isr.c:43
}
    96ea:	46c0      	nop			; (mov r8, r8)
    96ec:	b003      	add	sp, #12
    96ee:	bd00      	pop	{pc}
    96f0:	20000420 	.word	0x20000420
    96f4:	0000a394 	.word	0x0000a394

000096f8 <out_char>:
out_char():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:17
//参数说明：uartNo:串口号：UARTA、UARTB、UARTC、UART_DEBUG
//       data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================

void out_char(char data) {
    96f8:	b500      	push	{lr}
    96fa:	b083      	sub	sp, #12
    96fc:	0002      	movs	r2, r0
    96fe:	466b      	mov	r3, sp
    9700:	3307      	adds	r3, #7
    9702:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:19
	// suart_send_char(SUART_TX_PORT, SUART_TX_PIN, data);
	uart_send1(UART_printf, data);
    9704:	466b      	mov	r3, sp
    9706:	3307      	adds	r3, #7
    9708:	781b      	ldrb	r3, [r3, #0]
    970a:	0019      	movs	r1, r3
    970c:	2002      	movs	r0, #2
    970e:	f7ff ff2b 	bl	9568 <uart_send1>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:20
}
    9712:	46c0      	nop			; (mov r8, r8)
    9714:	b003      	add	sp, #12
    9716:	bd00      	pop	{pc}

00009718 <printk_putc>:
printk_putc():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:27
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int* count, PRINTK_INFO* info)
{
    9718:	b500      	push	{lr}
    971a:	b085      	sub	sp, #20
    971c:	9003      	str	r0, [sp, #12]
    971e:	9102      	str	r1, [sp, #8]
    9720:	9201      	str	r2, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:28
	switch (info->dest) {
    9722:	9b01      	ldr	r3, [sp, #4]
    9724:	681b      	ldr	r3, [r3, #0]
    9726:	2b01      	cmp	r3, #1
    9728:	d002      	beq.n	9730 <printk_putc+0x18>
    972a:	2b02      	cmp	r3, #2
    972c:	d007      	beq.n	973e <printk_putc+0x26>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:37
	case DEST_STRING:
		*(info->loc) = (unsigned char)c;
		++(info->loc);
		break;
	default:
		break;
    972e:	e011      	b.n	9754 <printk_putc+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:30
		info->func((char)c);
    9730:	9b01      	ldr	r3, [sp, #4]
    9732:	685b      	ldr	r3, [r3, #4]
    9734:	9a03      	ldr	r2, [sp, #12]
    9736:	b252      	sxtb	r2, r2
    9738:	0010      	movs	r0, r2
    973a:	4798      	blx	r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:31
		break;
    973c:	e00a      	b.n	9754 <printk_putc+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:33
		*(info->loc) = (unsigned char)c;
    973e:	9b01      	ldr	r3, [sp, #4]
    9740:	689b      	ldr	r3, [r3, #8]
    9742:	9a03      	ldr	r2, [sp, #12]
    9744:	b252      	sxtb	r2, r2
    9746:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:34
		++(info->loc);
    9748:	9b01      	ldr	r3, [sp, #4]
    974a:	689b      	ldr	r3, [r3, #8]
    974c:	1c5a      	adds	r2, r3, #1
    974e:	9b01      	ldr	r3, [sp, #4]
    9750:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:35
		break;
    9752:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:39
	}
	*count += 1;
    9754:	9b02      	ldr	r3, [sp, #8]
    9756:	681b      	ldr	r3, [r3, #0]
    9758:	1c5a      	adds	r2, r3, #1
    975a:	9b02      	ldr	r3, [sp, #8]
    975c:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:40
}
    975e:	46c0      	nop			; (mov r8, r8)
    9760:	b005      	add	sp, #20
    9762:	bd00      	pop	{pc}

00009764 <printk_mkfloatstr>:
printk_mkfloatstr():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:48
//参数说明： *f:浮点型数据：float型数据
//       c[]:字符串数组：转化后的到的字符串数组
//函数返回：无
//======================================================================
int printk_mkfloatstr(double* f, char c[], int precision_width)
{
    9764:	b530      	push	{r4, r5, lr}
    9766:	b0a7      	sub	sp, #156	; 0x9c
    9768:	9003      	str	r0, [sp, #12]
    976a:	9102      	str	r1, [sp, #8]
    976c:	9201      	str	r2, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:49
	uint32_t p, i, j, k, a[5] = { 0 }, b[19] = { 0 };
    976e:	ab17      	add	r3, sp, #92	; 0x5c
    9770:	0018      	movs	r0, r3
    9772:	2314      	movs	r3, #20
    9774:	001a      	movs	r2, r3
    9776:	2100      	movs	r1, #0
    9778:	f000 fd91 	bl	a29e <memset>
    977c:	ab04      	add	r3, sp, #16
    977e:	0018      	movs	r0, r3
    9780:	234c      	movs	r3, #76	; 0x4c
    9782:	001a      	movs	r2, r3
    9784:	2100      	movs	r1, #0
    9786:	f000 fd8a 	bl	a29e <memset>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:52
	uint64_t q;
	double tempf;
	p = 0;
    978a:	2300      	movs	r3, #0
    978c:	9325      	str	r3, [sp, #148]	; 0x94
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:53
	q = 0;
    978e:	2200      	movs	r2, #0
    9790:	2300      	movs	r3, #0
    9792:	9220      	str	r2, [sp, #128]	; 0x80
    9794:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:56
	//float m;
	double m;
	p = (uint32_t)*f;//整数部分
    9796:	9b03      	ldr	r3, [sp, #12]
    9798:	681a      	ldr	r2, [r3, #0]
    979a:	685b      	ldr	r3, [r3, #4]
    979c:	0010      	movs	r0, r2
    979e:	0019      	movs	r1, r3
    97a0:	f7fd fc56 	bl	7050 <__aeabi_d2uiz>
    97a4:	0003      	movs	r3, r0
    97a6:	9325      	str	r3, [sp, #148]	; 0x94
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:57
	tempf = (*f - p);
    97a8:	9b03      	ldr	r3, [sp, #12]
    97aa:	681c      	ldr	r4, [r3, #0]
    97ac:	685d      	ldr	r5, [r3, #4]
    97ae:	9825      	ldr	r0, [sp, #148]	; 0x94
    97b0:	f7fe fca8 	bl	8104 <__aeabi_ui2d>
    97b4:	0002      	movs	r2, r0
    97b6:	000b      	movs	r3, r1
    97b8:	0020      	movs	r0, r4
    97ba:	0029      	movs	r1, r5
    97bc:	f7fe f8da 	bl	7974 <__aeabi_dsub>
    97c0:	0002      	movs	r2, r0
    97c2:	000b      	movs	r3, r1
    97c4:	921e      	str	r2, [sp, #120]	; 0x78
    97c6:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:58
	if (precision_width == 0)
    97c8:	9b01      	ldr	r3, [sp, #4]
    97ca:	2b00      	cmp	r3, #0
    97cc:	d128      	bne.n	9820 <printk_mkfloatstr+0xbc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:59
		q = (*f - p) * 100000000000000000;//小数部分
    97ce:	9b03      	ldr	r3, [sp, #12]
    97d0:	681c      	ldr	r4, [r3, #0]
    97d2:	685d      	ldr	r5, [r3, #4]
    97d4:	9825      	ldr	r0, [sp, #148]	; 0x94
    97d6:	f7fe fc95 	bl	8104 <__aeabi_ui2d>
    97da:	0002      	movs	r2, r0
    97dc:	000b      	movs	r3, r1
    97de:	0020      	movs	r0, r4
    97e0:	0029      	movs	r1, r5
    97e2:	f7fe f8c7 	bl	7974 <__aeabi_dsub>
    97e6:	0002      	movs	r2, r0
    97e8:	000b      	movs	r3, r1
    97ea:	0010      	movs	r0, r2
    97ec:	0019      	movs	r1, r3
    97ee:	4a77      	ldr	r2, [pc, #476]	; (99cc <printk_mkfloatstr+0x268>)
    97f0:	4b77      	ldr	r3, [pc, #476]	; (99d0 <printk_mkfloatstr+0x26c>)
    97f2:	f7fd fe53 	bl	749c <__aeabi_dmul>
    97f6:	0002      	movs	r2, r0
    97f8:	000b      	movs	r3, r1
    97fa:	0010      	movs	r0, r2
    97fc:	0019      	movs	r1, r3
    97fe:	f7fd fc45 	bl	708c <__aeabi_d2ulz>
    9802:	0002      	movs	r2, r0
    9804:	000b      	movs	r3, r1
    9806:	9220      	str	r2, [sp, #128]	; 0x80
    9808:	9321      	str	r3, [sp, #132]	; 0x84
    980a:	e016      	b.n	983a <printk_mkfloatstr+0xd6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:63
	else
	{
		while (precision_width--)
			tempf *= 10;
    980c:	2200      	movs	r2, #0
    980e:	4b71      	ldr	r3, [pc, #452]	; (99d4 <printk_mkfloatstr+0x270>)
    9810:	981e      	ldr	r0, [sp, #120]	; 0x78
    9812:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9814:	f7fd fe42 	bl	749c <__aeabi_dmul>
    9818:	0002      	movs	r2, r0
    981a:	000b      	movs	r3, r1
    981c:	921e      	str	r2, [sp, #120]	; 0x78
    981e:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:62
		while (precision_width--)
    9820:	9b01      	ldr	r3, [sp, #4]
    9822:	1e5a      	subs	r2, r3, #1
    9824:	9201      	str	r2, [sp, #4]
    9826:	2b00      	cmp	r3, #0
    9828:	d1f0      	bne.n	980c <printk_mkfloatstr+0xa8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:64
		q = tempf;
    982a:	981e      	ldr	r0, [sp, #120]	; 0x78
    982c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    982e:	f7fd fc2d 	bl	708c <__aeabi_d2ulz>
    9832:	0002      	movs	r2, r0
    9834:	000b      	movs	r3, r1
    9836:	9220      	str	r2, [sp, #128]	; 0x80
    9838:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:66
	}
	m = *f - p;
    983a:	9b03      	ldr	r3, [sp, #12]
    983c:	681c      	ldr	r4, [r3, #0]
    983e:	685d      	ldr	r5, [r3, #4]
    9840:	9825      	ldr	r0, [sp, #148]	; 0x94
    9842:	f7fe fc5f 	bl	8104 <__aeabi_ui2d>
    9846:	0002      	movs	r2, r0
    9848:	000b      	movs	r3, r1
    984a:	0020      	movs	r0, r4
    984c:	0029      	movs	r1, r5
    984e:	f7fe f891 	bl	7974 <__aeabi_dsub>
    9852:	0002      	movs	r2, r0
    9854:	000b      	movs	r3, r1
    9856:	921c      	str	r2, [sp, #112]	; 0x70
    9858:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:67
	k = 0;
    985a:	2300      	movs	r3, #0
    985c:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:68
	while (m < 1)
    985e:	e00c      	b.n	987a <printk_mkfloatstr+0x116>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:70
	{
		m = m * 10;
    9860:	2200      	movs	r2, #0
    9862:	4b5c      	ldr	r3, [pc, #368]	; (99d4 <printk_mkfloatstr+0x270>)
    9864:	981c      	ldr	r0, [sp, #112]	; 0x70
    9866:	991d      	ldr	r1, [sp, #116]	; 0x74
    9868:	f7fd fe18 	bl	749c <__aeabi_dmul>
    986c:	0002      	movs	r2, r0
    986e:	000b      	movs	r3, r1
    9870:	921c      	str	r2, [sp, #112]	; 0x70
    9872:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:71
		k++;
    9874:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9876:	3301      	adds	r3, #1
    9878:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:68
	while (m < 1)
    987a:	2200      	movs	r2, #0
    987c:	4b56      	ldr	r3, [pc, #344]	; (99d8 <printk_mkfloatstr+0x274>)
    987e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9880:	991d      	ldr	r1, [sp, #116]	; 0x74
    9882:	f7fd fb9d 	bl	6fc0 <__aeabi_dcmplt>
    9886:	1e03      	subs	r3, r0, #0
    9888:	d1ea      	bne.n	9860 <printk_mkfloatstr+0xfc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:73
	};
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
    988a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    988c:	3b01      	subs	r3, #1
    988e:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:75

	i = 0;
    9890:	2300      	movs	r3, #0
    9892:	9324      	str	r3, [sp, #144]	; 0x90
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:76
	if (0 == p)     //整数部分为0
    9894:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9896:	2b00      	cmp	r3, #0
    9898:	d107      	bne.n	98aa <printk_mkfloatstr+0x146>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:77
		c[i++] = '0';
    989a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    989c:	1c5a      	adds	r2, r3, #1
    989e:	9224      	str	r2, [sp, #144]	; 0x90
    98a0:	9a02      	ldr	r2, [sp, #8]
    98a2:	18d3      	adds	r3, r2, r3
    98a4:	2230      	movs	r2, #48	; 0x30
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	e02f      	b.n	990a <printk_mkfloatstr+0x1a6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:80
	else        //整数部分不为0
	{
		j = 0;
    98aa:	2300      	movs	r3, #0
    98ac:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:81
		while (p != 0)//倒序的数字
    98ae:	e013      	b.n	98d8 <printk_mkfloatstr+0x174>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:83
		{
			a[j++] = p % 10;
    98b0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    98b2:	1c63      	adds	r3, r4, #1
    98b4:	9323      	str	r3, [sp, #140]	; 0x8c
    98b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    98b8:	210a      	movs	r1, #10
    98ba:	0018      	movs	r0, r3
    98bc:	f7fd fa7a 	bl	6db4 <__aeabi_uidivmod>
    98c0:	000b      	movs	r3, r1
    98c2:	0019      	movs	r1, r3
    98c4:	ab17      	add	r3, sp, #92	; 0x5c
    98c6:	00a2      	lsls	r2, r4, #2
    98c8:	50d1      	str	r1, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:84
			p /= 10;
    98ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    98cc:	210a      	movs	r1, #10
    98ce:	0018      	movs	r0, r3
    98d0:	f7fd f9ea 	bl	6ca8 <__udivsi3>
    98d4:	0003      	movs	r3, r0
    98d6:	9325      	str	r3, [sp, #148]	; 0x94
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:81
		while (p != 0)//倒序的数字
    98d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    98da:	2b00      	cmp	r3, #0
    98dc:	d1e8      	bne.n	98b0 <printk_mkfloatstr+0x14c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:86
		}
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    98de:	e011      	b.n	9904 <printk_mkfloatstr+0x1a0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:88
		{
			c[i++] = a[j - 1] + '0';
    98e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    98e2:	1e5a      	subs	r2, r3, #1
    98e4:	ab17      	add	r3, sp, #92	; 0x5c
    98e6:	0092      	lsls	r2, r2, #2
    98e8:	58d3      	ldr	r3, [r2, r3]
    98ea:	b2db      	uxtb	r3, r3
    98ec:	3330      	adds	r3, #48	; 0x30
    98ee:	b2d9      	uxtb	r1, r3
    98f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    98f2:	1c5a      	adds	r2, r3, #1
    98f4:	9224      	str	r2, [sp, #144]	; 0x90
    98f6:	9a02      	ldr	r2, [sp, #8]
    98f8:	18d3      	adds	r3, r2, r3
    98fa:	b24a      	sxtb	r2, r1
    98fc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:89
			--j;
    98fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9900:	3b01      	subs	r3, #1
    9902:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:86
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    9904:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9906:	2b00      	cmp	r3, #0
    9908:	d1ea      	bne.n	98e0 <printk_mkfloatstr+0x17c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:92
		}
	}
	c[i++] = '.';     //小数点
    990a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    990c:	1c5a      	adds	r2, r3, #1
    990e:	9224      	str	r2, [sp, #144]	; 0x90
    9910:	9a02      	ldr	r2, [sp, #8]
    9912:	18d3      	adds	r3, r2, r3
    9914:	222e      	movs	r2, #46	; 0x2e
    9916:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:93
	if (0 == q)        //小数部分为0
    9918:	9b20      	ldr	r3, [sp, #128]	; 0x80
    991a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    991c:	4313      	orrs	r3, r2
    991e:	d107      	bne.n	9930 <printk_mkfloatstr+0x1cc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:94
		c[i++] = '0';
    9920:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9922:	1c5a      	adds	r2, r3, #1
    9924:	9224      	str	r2, [sp, #144]	; 0x90
    9926:	9a02      	ldr	r2, [sp, #8]
    9928:	18d3      	adds	r3, r2, r3
    992a:	2230      	movs	r2, #48	; 0x30
    992c:	701a      	strb	r2, [r3, #0]
    992e:	e043      	b.n	99b8 <printk_mkfloatstr+0x254>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:97
	else           //小数部分不为0
	{
		j = 0;
    9930:	2300      	movs	r3, #0
    9932:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:99

		while (q != 0)//倒序的数字
    9934:	e018      	b.n	9968 <printk_mkfloatstr+0x204>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:101
		{
			b[j++] = q % 10;
    9936:	9820      	ldr	r0, [sp, #128]	; 0x80
    9938:	9921      	ldr	r1, [sp, #132]	; 0x84
    993a:	220a      	movs	r2, #10
    993c:	2300      	movs	r3, #0
    993e:	f7fd fb67 	bl	7010 <__aeabi_uldivmod>
    9942:	0010      	movs	r0, r2
    9944:	0019      	movs	r1, r3
    9946:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9948:	1c5a      	adds	r2, r3, #1
    994a:	9223      	str	r2, [sp, #140]	; 0x8c
    994c:	0001      	movs	r1, r0
    994e:	aa04      	add	r2, sp, #16
    9950:	009b      	lsls	r3, r3, #2
    9952:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:102
			q /= 10;
    9954:	9820      	ldr	r0, [sp, #128]	; 0x80
    9956:	9921      	ldr	r1, [sp, #132]	; 0x84
    9958:	220a      	movs	r2, #10
    995a:	2300      	movs	r3, #0
    995c:	f7fd fb58 	bl	7010 <__aeabi_uldivmod>
    9960:	0002      	movs	r2, r0
    9962:	000b      	movs	r3, r1
    9964:	9220      	str	r2, [sp, #128]	; 0x80
    9966:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:99
		while (q != 0)//倒序的数字
    9968:	9b20      	ldr	r3, [sp, #128]	; 0x80
    996a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    996c:	4313      	orrs	r3, r2
    996e:	d1e2      	bne.n	9936 <printk_mkfloatstr+0x1d2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:104
		}
		while (k != 0)
    9970:	e009      	b.n	9986 <printk_mkfloatstr+0x222>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:106
		{
			b[j++] = 0;
    9972:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9974:	1c5a      	adds	r2, r3, #1
    9976:	9223      	str	r2, [sp, #140]	; 0x8c
    9978:	aa04      	add	r2, sp, #16
    997a:	009b      	lsls	r3, r3, #2
    997c:	2100      	movs	r1, #0
    997e:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:107
			k--;
    9980:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9982:	3b01      	subs	r3, #1
    9984:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:104
		while (k != 0)
    9986:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9988:	2b00      	cmp	r3, #0
    998a:	d1f2      	bne.n	9972 <printk_mkfloatstr+0x20e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:109
		}
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    998c:	e011      	b.n	99b2 <printk_mkfloatstr+0x24e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:111
		{
			c[i++] = b[j - 1] + '0';
    998e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9990:	1e5a      	subs	r2, r3, #1
    9992:	ab04      	add	r3, sp, #16
    9994:	0092      	lsls	r2, r2, #2
    9996:	58d3      	ldr	r3, [r2, r3]
    9998:	b2db      	uxtb	r3, r3
    999a:	3330      	adds	r3, #48	; 0x30
    999c:	b2d9      	uxtb	r1, r3
    999e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    99a0:	1c5a      	adds	r2, r3, #1
    99a2:	9224      	str	r2, [sp, #144]	; 0x90
    99a4:	9a02      	ldr	r2, [sp, #8]
    99a6:	18d3      	adds	r3, r2, r3
    99a8:	b24a      	sxtb	r2, r1
    99aa:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:112
			--j;
    99ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    99ae:	3b01      	subs	r3, #1
    99b0:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:109
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    99b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    99b4:	2b00      	cmp	r3, #0
    99b6:	d1ea      	bne.n	998e <printk_mkfloatstr+0x22a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:115
		}
	}
	c[i] = '\0';
    99b8:	9a02      	ldr	r2, [sp, #8]
    99ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
    99bc:	18d3      	adds	r3, r2, r3
    99be:	2200      	movs	r2, #0
    99c0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:116
	return i;
    99c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:117
}
    99c4:	0018      	movs	r0, r3
    99c6:	b027      	add	sp, #156	; 0x9c
    99c8:	bd30      	pop	{r4, r5, pc}
    99ca:	46c0      	nop			; (mov r8, r8)
    99cc:	85d8a000 	.word	0x85d8a000
    99d0:	43763457 	.word	0x43763457
    99d4:	40240000 	.word	0x40240000
    99d8:	3ff00000 	.word	0x3ff00000

000099dc <printk_mknumstr>:
printk_mknumstr():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:127
//       neg:有无符号:判断数据时有符号还是无符号整形
//       radix:格式选择:确定输出格式例如：十进制或十六进制...
//函数返回：无
//======================================================================
static int printk_mknumstr(char* numstr, void* nump, int neg, int radix)
{
    99dc:	b500      	push	{lr}
    99de:	b08d      	sub	sp, #52	; 0x34
    99e0:	9003      	str	r0, [sp, #12]
    99e2:	9102      	str	r1, [sp, #8]
    99e4:	9201      	str	r2, [sp, #4]
    99e6:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:133
	int a, b, c;
	unsigned int ua, ub, uc;
	int nlen;
	char* nstrp;

	nlen = 0;
    99e8:	2300      	movs	r3, #0
    99ea:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:134
	nstrp = numstr;
    99ec:	9b03      	ldr	r3, [sp, #12]
    99ee:	9306      	str	r3, [sp, #24]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:135
	*nstrp++ = '\0';
    99f0:	9b06      	ldr	r3, [sp, #24]
    99f2:	1c5a      	adds	r2, r3, #1
    99f4:	9206      	str	r2, [sp, #24]
    99f6:	2200      	movs	r2, #0
    99f8:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:137

	if (neg) {
    99fa:	9b01      	ldr	r3, [sp, #4]
    99fc:	2b00      	cmp	r3, #0
    99fe:	d032      	beq.n	9a66 <printk_mknumstr+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:138
		a = *(int*)nump;
    9a00:	9b02      	ldr	r3, [sp, #8]
    9a02:	681b      	ldr	r3, [r3, #0]
    9a04:	930b      	str	r3, [sp, #44]	; 0x2c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:139
		if (a == 0) {
    9a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d128      	bne.n	9a5e <printk_mknumstr+0x82>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:140
			*nstrp = '0';
    9a0c:	9b06      	ldr	r3, [sp, #24]
    9a0e:	2230      	movs	r2, #48	; 0x30
    9a10:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:141
			++nlen;
    9a12:	9b07      	ldr	r3, [sp, #28]
    9a14:	3301      	adds	r3, #1
    9a16:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:142
			goto done;
    9a18:	e058      	b.n	9acc <printk_mknumstr+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:145
		}
		while (a != 0) {
			b = (int)a / (int)radix;
    9a1a:	9900      	ldr	r1, [sp, #0]
    9a1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9a1e:	f7fd f9cd 	bl	6dbc <__divsi3>
    9a22:	0003      	movs	r3, r0
    9a24:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:146
			c = (int)a - ((int)b * (int)radix);
    9a26:	9b04      	ldr	r3, [sp, #16]
    9a28:	9a00      	ldr	r2, [sp, #0]
    9a2a:	4353      	muls	r3, r2
    9a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9a2e:	1ad3      	subs	r3, r2, r3
    9a30:	930a      	str	r3, [sp, #40]	; 0x28
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:147
			if (c < 0) {
    9a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9a34:	2b00      	cmp	r3, #0
    9a36:	da04      	bge.n	9a42 <printk_mknumstr+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:148
				c = ~c + 1 + '0';
    9a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9a3a:	2230      	movs	r2, #48	; 0x30
    9a3c:	1ad3      	subs	r3, r2, r3
    9a3e:	930a      	str	r3, [sp, #40]	; 0x28
    9a40:	e002      	b.n	9a48 <printk_mknumstr+0x6c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:151
			}
			else {
				c = c + '0';
    9a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9a44:	3330      	adds	r3, #48	; 0x30
    9a46:	930a      	str	r3, [sp, #40]	; 0x28
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:153
			}
			a = b;
    9a48:	9b04      	ldr	r3, [sp, #16]
    9a4a:	930b      	str	r3, [sp, #44]	; 0x2c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:154
			*nstrp++ = (char)c;
    9a4c:	9b06      	ldr	r3, [sp, #24]
    9a4e:	1c5a      	adds	r2, r3, #1
    9a50:	9206      	str	r2, [sp, #24]
    9a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a54:	b252      	sxtb	r2, r2
    9a56:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:155
			++nlen;
    9a58:	9b07      	ldr	r3, [sp, #28]
    9a5a:	3301      	adds	r3, #1
    9a5c:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:144
		while (a != 0) {
    9a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9a60:	2b00      	cmp	r3, #0
    9a62:	d1da      	bne.n	9a1a <printk_mknumstr+0x3e>
    9a64:	e032      	b.n	9acc <printk_mknumstr+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:159
		}
	}
	else {
		ua = *(unsigned int*)nump;
    9a66:	9b02      	ldr	r3, [sp, #8]
    9a68:	681b      	ldr	r3, [r3, #0]
    9a6a:	9309      	str	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:160
		if (ua == 0) {
    9a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a6e:	2b00      	cmp	r3, #0
    9a70:	d128      	bne.n	9ac4 <printk_mknumstr+0xe8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:161
			*nstrp = '0';
    9a72:	9b06      	ldr	r3, [sp, #24]
    9a74:	2230      	movs	r2, #48	; 0x30
    9a76:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:162
			++nlen;
    9a78:	9b07      	ldr	r3, [sp, #28]
    9a7a:	3301      	adds	r3, #1
    9a7c:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:163
			goto done;
    9a7e:	e025      	b.n	9acc <printk_mknumstr+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:166
		}
		while (ua != 0) {
			ub = (unsigned int)ua / (unsigned int)radix;
    9a80:	9b00      	ldr	r3, [sp, #0]
    9a82:	0019      	movs	r1, r3
    9a84:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a86:	f7fd f90f 	bl	6ca8 <__udivsi3>
    9a8a:	0003      	movs	r3, r0
    9a8c:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:167
			uc = (unsigned int)ua - ((unsigned int)ub * (unsigned int)radix);
    9a8e:	9b00      	ldr	r3, [sp, #0]
    9a90:	9a05      	ldr	r2, [sp, #20]
    9a92:	4353      	muls	r3, r2
    9a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9a96:	1ad3      	subs	r3, r2, r3
    9a98:	9308      	str	r3, [sp, #32]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:168
			if (uc < 10) {
    9a9a:	9b08      	ldr	r3, [sp, #32]
    9a9c:	2b09      	cmp	r3, #9
    9a9e:	d803      	bhi.n	9aa8 <printk_mknumstr+0xcc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:169
				uc = uc + '0';
    9aa0:	9b08      	ldr	r3, [sp, #32]
    9aa2:	3330      	adds	r3, #48	; 0x30
    9aa4:	9308      	str	r3, [sp, #32]
    9aa6:	e002      	b.n	9aae <printk_mknumstr+0xd2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:172
			}
			else {
				uc = uc - 10 + 'A';
    9aa8:	9b08      	ldr	r3, [sp, #32]
    9aaa:	3337      	adds	r3, #55	; 0x37
    9aac:	9308      	str	r3, [sp, #32]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:174
			}
			ua = ub;
    9aae:	9b05      	ldr	r3, [sp, #20]
    9ab0:	9309      	str	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:175
			*nstrp++ = (char)uc;
    9ab2:	9b06      	ldr	r3, [sp, #24]
    9ab4:	1c5a      	adds	r2, r3, #1
    9ab6:	9206      	str	r2, [sp, #24]
    9ab8:	9a08      	ldr	r2, [sp, #32]
    9aba:	b252      	sxtb	r2, r2
    9abc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:176
			++nlen;
    9abe:	9b07      	ldr	r3, [sp, #28]
    9ac0:	3301      	adds	r3, #1
    9ac2:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:165
		while (ua != 0) {
    9ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	d1da      	bne.n	9a80 <printk_mknumstr+0xa4>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:179
		}
	}
	done: return nlen;
    9aca:	46c0      	nop			; (mov r8, r8)
    9acc:	9b07      	ldr	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:180
}
    9ace:	0018      	movs	r0, r3
    9ad0:	b00d      	add	sp, #52	; 0x34
    9ad2:	bd00      	pop	{pc}

00009ad4 <printk_pad_zero>:
printk_pad_zero():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:183
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int* count,
	PRINTK_INFO* info) {
    9ad4:	b500      	push	{lr}
    9ad6:	b087      	sub	sp, #28
    9ad8:	9003      	str	r0, [sp, #12]
    9ada:	9102      	str	r1, [sp, #8]
    9adc:	9201      	str	r2, [sp, #4]
    9ade:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:186
	int i;

	for (i = curlen; i < field_width; i++) {
    9ae0:	9b03      	ldr	r3, [sp, #12]
    9ae2:	9305      	str	r3, [sp, #20]
    9ae4:	e008      	b.n	9af8 <printk_pad_zero+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:187 (discriminator 3)
		printk_putc('0', count, info);
    9ae6:	9a00      	ldr	r2, [sp, #0]
    9ae8:	9b01      	ldr	r3, [sp, #4]
    9aea:	0019      	movs	r1, r3
    9aec:	2030      	movs	r0, #48	; 0x30
    9aee:	f7ff fe13 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:186 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    9af2:	9b05      	ldr	r3, [sp, #20]
    9af4:	3301      	adds	r3, #1
    9af6:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:186 (discriminator 1)
    9af8:	9a05      	ldr	r2, [sp, #20]
    9afa:	9b02      	ldr	r3, [sp, #8]
    9afc:	429a      	cmp	r2, r3
    9afe:	dbf2      	blt.n	9ae6 <printk_pad_zero+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:189
	}
}
    9b00:	46c0      	nop			; (mov r8, r8)
    9b02:	46c0      	nop			; (mov r8, r8)
    9b04:	b007      	add	sp, #28
    9b06:	bd00      	pop	{pc}

00009b08 <printk_pad_space>:
printk_pad_space():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:193

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int* count,
	PRINTK_INFO* info) {
    9b08:	b500      	push	{lr}
    9b0a:	b087      	sub	sp, #28
    9b0c:	9003      	str	r0, [sp, #12]
    9b0e:	9102      	str	r1, [sp, #8]
    9b10:	9201      	str	r2, [sp, #4]
    9b12:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:196
	int i;

	for (i = curlen; i < field_width; i++) {
    9b14:	9b03      	ldr	r3, [sp, #12]
    9b16:	9305      	str	r3, [sp, #20]
    9b18:	e008      	b.n	9b2c <printk_pad_space+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:197 (discriminator 3)
		printk_putc(' ', count, info);
    9b1a:	9a00      	ldr	r2, [sp, #0]
    9b1c:	9b01      	ldr	r3, [sp, #4]
    9b1e:	0019      	movs	r1, r3
    9b20:	2020      	movs	r0, #32
    9b22:	f7ff fdf9 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:196 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    9b26:	9b05      	ldr	r3, [sp, #20]
    9b28:	3301      	adds	r3, #1
    9b2a:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:196 (discriminator 1)
    9b2c:	9a05      	ldr	r2, [sp, #20]
    9b2e:	9b02      	ldr	r3, [sp, #8]
    9b30:	429a      	cmp	r2, r3
    9b32:	dbf2      	blt.n	9b1a <printk_pad_space+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:199
	}
}
    9b34:	46c0      	nop			; (mov r8, r8)
    9b36:	46c0      	nop			; (mov r8, r8)
    9b38:	b007      	add	sp, #28
    9b3a:	bd00      	pop	{pc}

00009b3c <printk>:
printk():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:208
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO* info, const char* fmt, char* ap)
{
    9b3c:	b530      	push	{r4, r5, lr}
    9b3e:	b0a3      	sub	sp, #140	; 0x8c
    9b40:	9003      	str	r0, [sp, #12]
    9b42:	9102      	str	r1, [sp, #8]
    9b44:	9201      	str	r2, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:232

		}un1;*/
	char* p;
	int c;
	//char temp1;
	char vstr[33] = { '0' };
    9b46:	ab0a      	add	r3, sp, #40	; 0x28
    9b48:	2230      	movs	r2, #48	; 0x30
    9b4a:	601a      	str	r2, [r3, #0]
    9b4c:	3304      	adds	r3, #4
    9b4e:	221d      	movs	r2, #29
    9b50:	2100      	movs	r1, #0
    9b52:	0018      	movs	r0, r3
    9b54:	f000 fba3 	bl	a29e <memset>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:253
	int* ivalp;
	char* sval;
	int cval;
	unsigned int uval;

	count = 0;
    9b58:	2300      	movs	r3, #0
    9b5a:	9309      	str	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:254
	length_modifier = 0;
    9b5c:	2300      	movs	r3, #0
    9b5e:	931b      	str	r3, [sp, #108]	; 0x6c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:255
	precision_used = TRUE;
    9b60:	2301      	movs	r3, #1
    9b62:	931a      	str	r3, [sp, #104]	; 0x68
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:257
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char*)fmt; (c = *p) != 0; p++)
    9b64:	9b02      	ldr	r3, [sp, #8]
    9b66:	9321      	str	r3, [sp, #132]	; 0x84
    9b68:	f000 fb66 	bl	a238 <printk+0x6fc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:260
	{
		//读取%前面的字符，直接输出的字符和最后的\n类的转义字符
		if (c != '%')
    9b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9b6e:	2b25      	cmp	r3, #37	; 0x25
    9b70:	d017      	beq.n	9ba2 <printk+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:264
		{
#ifndef UNIX_DEBUG
			//%之前的字符
			if (c != '\n') {
    9b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9b74:	2b0a      	cmp	r3, #10
    9b76:	d007      	beq.n	9b88 <printk+0x4c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:265
				printk_putc(c, &count, info);
    9b78:	9a03      	ldr	r2, [sp, #12]
    9b7a:	a909      	add	r1, sp, #36	; 0x24
    9b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9b7e:	0018      	movs	r0, r3
    9b80:	f7ff fdca 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:276
			}
#else
			printk_putc(c, &count, info);
#endif

			continue;
    9b84:	f000 fb55 	bl	a232 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:269
				printk_putc(0x0D /* CR */, &count, info);
    9b88:	9a03      	ldr	r2, [sp, #12]
    9b8a:	ab09      	add	r3, sp, #36	; 0x24
    9b8c:	0019      	movs	r1, r3
    9b8e:	200d      	movs	r0, #13
    9b90:	f7ff fdc2 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:270
				printk_putc(0x0A /* LF */, &count, info);
    9b94:	9a03      	ldr	r2, [sp, #12]
    9b96:	ab09      	add	r3, sp, #36	; 0x24
    9b98:	0019      	movs	r1, r3
    9b9a:	200a      	movs	r0, #10
    9b9c:	f7ff fdbc 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:276
			continue;
    9ba0:	e347      	b.n	a232 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:282
		}


		//此时字符为%  查看百分号后的第一个格式字符，对输出格式字符并做出相应输出判断
		//检查相应的修改标志
		flags_used = 0;
    9ba2:	2300      	movs	r3, #0
    9ba4:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:283
		done = FALSE;
    9ba6:	2300      	movs	r3, #0
    9ba8:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:284
		while (!done) {
    9baa:	e02c      	b.n	9c06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:285
			switch (/* c = */*++p) {
    9bac:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bae:	3301      	adds	r3, #1
    9bb0:	9321      	str	r3, [sp, #132]	; 0x84
    9bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bb4:	781b      	ldrb	r3, [r3, #0]
    9bb6:	b25b      	sxtb	r3, r3
    9bb8:	3b20      	subs	r3, #32
    9bba:	2b10      	cmp	r3, #16
    9bbc:	d81d      	bhi.n	9bfa <printk+0xbe>
    9bbe:	009a      	lsls	r2, r3, #2
    9bc0:	4bca      	ldr	r3, [pc, #808]	; (9eec <printk+0x3b0>)
    9bc2:	18d3      	adds	r3, r2, r3
    9bc4:	681b      	ldr	r3, [r3, #0]
    9bc6:	469f      	mov	pc, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:287
			case '-':
				flags_used |= FLAGS_MINUS;
    9bc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bca:	2201      	movs	r2, #1
    9bcc:	4313      	orrs	r3, r2
    9bce:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:288
				break;
    9bd0:	e019      	b.n	9c06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:290
			case '+':
				flags_used |= FLAGS_PLUS;
    9bd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bd4:	2202      	movs	r2, #2
    9bd6:	4313      	orrs	r3, r2
    9bd8:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:291
				break;
    9bda:	e014      	b.n	9c06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:293
			case ' ':
				flags_used |= FLAGS_SPACE;
    9bdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bde:	2204      	movs	r2, #4
    9be0:	4313      	orrs	r3, r2
    9be2:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:294
				break;
    9be4:	e00f      	b.n	9c06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:296
			case '0':
				flags_used |= FLAGS_ZERO;
    9be6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9be8:	2208      	movs	r2, #8
    9bea:	4313      	orrs	r3, r2
    9bec:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:297
				break;
    9bee:	e00a      	b.n	9c06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:299
			case '#':
				flags_used |= FLAGS_POUND;
    9bf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bf2:	2210      	movs	r2, #16
    9bf4:	4313      	orrs	r3, r2
    9bf6:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:300
				break;
    9bf8:	e005      	b.n	9c06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:303
			default:
				/* we've gone one char too far */
				--p;
    9bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bfc:	3b01      	subs	r3, #1
    9bfe:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:304
				done = TRUE;
    9c00:	2301      	movs	r3, #1
    9c02:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:305
				break;
    9c04:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:284
		while (!done) {
    9c06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d0cf      	beq.n	9bac <printk+0x70>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:311
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
    9c0c:	2300      	movs	r3, #0
    9c0e:	931c      	str	r3, [sp, #112]	; 0x70
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:312
		done = FALSE;
    9c10:	2300      	movs	r3, #0
    9c12:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:313
		while (!done) {
    9c14:	e01b      	b.n	9c4e <printk+0x112>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:314
			switch (c = *++p) {
    9c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c18:	3301      	adds	r3, #1
    9c1a:	9321      	str	r3, [sp, #132]	; 0x84
    9c1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c1e:	781b      	ldrb	r3, [r3, #0]
    9c20:	b25b      	sxtb	r3, r3
    9c22:	9315      	str	r3, [sp, #84]	; 0x54
    9c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9c26:	3b30      	subs	r3, #48	; 0x30
    9c28:	2b09      	cmp	r3, #9
    9c2a:	d80a      	bhi.n	9c42 <printk+0x106>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:325
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				field_width = (field_width * 10) + (c - '0');
    9c2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9c2e:	0013      	movs	r3, r2
    9c30:	009b      	lsls	r3, r3, #2
    9c32:	189b      	adds	r3, r3, r2
    9c34:	005b      	lsls	r3, r3, #1
    9c36:	001a      	movs	r2, r3
    9c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9c3a:	3b30      	subs	r3, #48	; 0x30
    9c3c:	18d3      	adds	r3, r2, r3
    9c3e:	931c      	str	r3, [sp, #112]	; 0x70
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:326
				break;
    9c40:	e005      	b.n	9c4e <printk+0x112>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:329
			default:
				/* we've gone one char too far */
				--p;
    9c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c44:	3b01      	subs	r3, #1
    9c46:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:330
				done = TRUE;
    9c48:	2301      	movs	r3, #1
    9c4a:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:331
				break;
    9c4c:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:313
		while (!done) {
    9c4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9c50:	2b00      	cmp	r3, #0
    9c52:	d0e0      	beq.n	9c16 <printk+0xda>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:335
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
    9c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c56:	3301      	adds	r3, #1
    9c58:	9321      	str	r3, [sp, #132]	; 0x84
    9c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c5c:	781b      	ldrb	r3, [r3, #0]
    9c5e:	b25b      	sxtb	r3, r3
    9c60:	2b2e      	cmp	r3, #46	; 0x2e
    9c62:	d124      	bne.n	9cae <printk+0x172>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:341
			/* precision_used = TRUE; */

			/*
			 * Must get precision field width, if present.
			 */
			precision_width = 0;
    9c64:	2300      	movs	r3, #0
    9c66:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:342
			done = FALSE;
    9c68:	2300      	movs	r3, #0
    9c6a:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:343
			while (!done) {
    9c6c:	e01b      	b.n	9ca6 <printk+0x16a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:344
				switch (c = *++p) {
    9c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c70:	3301      	adds	r3, #1
    9c72:	9321      	str	r3, [sp, #132]	; 0x84
    9c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c76:	781b      	ldrb	r3, [r3, #0]
    9c78:	b25b      	sxtb	r3, r3
    9c7a:	9315      	str	r3, [sp, #84]	; 0x54
    9c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9c7e:	3b30      	subs	r3, #48	; 0x30
    9c80:	2b09      	cmp	r3, #9
    9c82:	d80a      	bhi.n	9c9a <printk+0x15e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:356
				case '6':
				case '7':
				case '8':
				case '9':
#if 1
					precision_width = (precision_width * 10) + (c - '0');
    9c84:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9c86:	0013      	movs	r3, r2
    9c88:	009b      	lsls	r3, r3, #2
    9c8a:	189b      	adds	r3, r3, r2
    9c8c:	005b      	lsls	r3, r3, #1
    9c8e:	001a      	movs	r2, r3
    9c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9c92:	3b30      	subs	r3, #48	; 0x30
    9c94:	18d3      	adds	r3, r2, r3
    9c96:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:359

#endif
					break;
    9c98:	e005      	b.n	9ca6 <printk+0x16a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:362
				default:
					/* we've gone one char too far */
					--p;
    9c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c9c:	3b01      	subs	r3, #1
    9c9e:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:363
					done = TRUE;
    9ca0:	2301      	movs	r3, #1
    9ca2:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:364
					break;
    9ca4:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:343
			while (!done) {
    9ca6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d0e0      	beq.n	9c6e <printk+0x132>
    9cac:	e006      	b.n	9cbc <printk+0x180>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:370
				}
			}
		}
		else {
			/* we've gone one char too far */
			--p;
    9cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9cb0:	3b01      	subs	r3, #1
    9cb2:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:372
#if 1
			precision_used = FALSE;
    9cb4:	2300      	movs	r3, #0
    9cb6:	931a      	str	r3, [sp, #104]	; 0x68
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:373
			precision_width = 0;
    9cb8:	2300      	movs	r3, #0
    9cba:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:377
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
    9cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9cbe:	3301      	adds	r3, #1
    9cc0:	9321      	str	r3, [sp, #132]	; 0x84
    9cc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	b25b      	sxtb	r3, r3
    9cc8:	2b6c      	cmp	r3, #108	; 0x6c
    9cca:	d005      	beq.n	9cd8 <printk+0x19c>
    9ccc:	dc0e      	bgt.n	9cec <printk+0x1b0>
    9cce:	2b4c      	cmp	r3, #76	; 0x4c
    9cd0:	d007      	beq.n	9ce2 <printk+0x1a6>
    9cd2:	2b68      	cmp	r3, #104	; 0x68
    9cd4:	d10a      	bne.n	9cec <printk+0x1b0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:380
		case 'h':
			// length_modifier |= LENMOD_h;
			break;
    9cd6:	e00d      	b.n	9cf4 <printk+0x1b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:382
		case 'l':
			length_modifier |= LENMOD_l;
    9cd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9cda:	2201      	movs	r2, #1
    9cdc:	4313      	orrs	r3, r2
    9cde:	931b      	str	r3, [sp, #108]	; 0x6c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:383
			break;
    9ce0:	e008      	b.n	9cf4 <printk+0x1b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:385
		case 'L':
			length_modifier |= LENMOD_L;
    9ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9ce4:	2202      	movs	r2, #2
    9ce6:	4313      	orrs	r3, r2
    9ce8:	931b      	str	r3, [sp, #108]	; 0x6c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:386
			break;
    9cea:	e003      	b.n	9cf4 <printk+0x1b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:389
		default:
			/* we've gone one char too far */
			--p;
    9cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9cee:	3b01      	subs	r3, #1
    9cf0:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:390
			break;
    9cf2:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:394
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
    9cf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9cf6:	3301      	adds	r3, #1
    9cf8:	9321      	str	r3, [sp, #132]	; 0x84
    9cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9cfc:	781b      	ldrb	r3, [r3, #0]
    9cfe:	b25b      	sxtb	r3, r3
    9d00:	9315      	str	r3, [sp, #84]	; 0x54
    9d02:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9d04:	3b58      	subs	r3, #88	; 0x58
    9d06:	2b20      	cmp	r3, #32
    9d08:	d900      	bls.n	9d0c <printk+0x1d0>
    9d0a:	e286      	b.n	a21a <printk+0x6de>
    9d0c:	009a      	lsls	r2, r3, #2
    9d0e:	4b78      	ldr	r3, [pc, #480]	; (9ef0 <printk+0x3b4>)
    9d10:	18d3      	adds	r3, r2, r3
    9d12:	681b      	ldr	r3, [r3, #0]
    9d14:	469f      	mov	pc, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:399
		case 'd':
		case 'i':
			//此时ap为指向可变参数列表的第一个参数
			//返回当前参数，并将ap指向下一个参数
			ival = (int)va_arg(ap, int);
    9d16:	9b01      	ldr	r3, [sp, #4]
    9d18:	3304      	adds	r3, #4
    9d1a:	9301      	str	r3, [sp, #4]
    9d1c:	9b01      	ldr	r3, [sp, #4]
    9d1e:	3b04      	subs	r3, #4
    9d20:	681b      	ldr	r3, [r3, #0]
    9d22:	9308      	str	r3, [sp, #32]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:401
			//将整型转换成字符型保存在vstr中，返回字符数vlen
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);
    9d24:	a908      	add	r1, sp, #32
    9d26:	a80a      	add	r0, sp, #40	; 0x28
    9d28:	230a      	movs	r3, #10
    9d2a:	2201      	movs	r2, #1
    9d2c:	f7ff fe56 	bl	99dc <printk_mknumstr>
    9d30:	0003      	movs	r3, r0
    9d32:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:403
			//指向转换后的最后一个字符
			vstrp = &vstr[vlen];
    9d34:	aa0a      	add	r2, sp, #40	; 0x28
    9d36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9d38:	18d3      	adds	r3, r2, r3
    9d3a:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:406

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
    9d3c:	9b08      	ldr	r3, [sp, #32]
    9d3e:	2b00      	cmp	r3, #0
    9d40:	da05      	bge.n	9d4e <printk+0x212>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:407
				schar = '-';
    9d42:	232d      	movs	r3, #45	; 0x2d
    9d44:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:408
				++vlen;
    9d46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9d48:	3301      	adds	r3, #1
    9d4a:	931f      	str	r3, [sp, #124]	; 0x7c
    9d4c:	e015      	b.n	9d7a <printk+0x23e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:412
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    9d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9d50:	2202      	movs	r2, #2
    9d52:	4013      	ands	r3, r2
    9d54:	d005      	beq.n	9d62 <printk+0x226>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:413
					schar = '+';
    9d56:	232b      	movs	r3, #43	; 0x2b
    9d58:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:414
					++vlen;
    9d5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9d5c:	3301      	adds	r3, #1
    9d5e:	931f      	str	r3, [sp, #124]	; 0x7c
    9d60:	e00b      	b.n	9d7a <printk+0x23e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:417
				}
				else {
					if (IS_FLAG_SPACE(flags_used)) {
    9d62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9d64:	2204      	movs	r2, #4
    9d66:	4013      	ands	r3, r2
    9d68:	d005      	beq.n	9d76 <printk+0x23a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:418
						schar = ' ';
    9d6a:	2320      	movs	r3, #32
    9d6c:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:419
						++vlen;
    9d6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9d70:	3301      	adds	r3, #1
    9d72:	931f      	str	r3, [sp, #124]	; 0x7c
    9d74:	e001      	b.n	9d7a <printk+0x23e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:422
					}
					else {
						schar = 0;
    9d76:	2300      	movs	r3, #0
    9d78:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:426
					}
				}
			}
			dschar = FALSE;
    9d7a:	2300      	movs	r3, #0
    9d7c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:431

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    9d7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9d80:	2208      	movs	r2, #8
    9d82:	4013      	ands	r3, r2
    9d84:	d013      	beq.n	9dae <printk+0x272>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:432
				if (schar)
    9d86:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d005      	beq.n	9d98 <printk+0x25c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:433
					printk_putc(schar, &count, info);  //输出符号
    9d8c:	9a03      	ldr	r2, [sp, #12]
    9d8e:	a909      	add	r1, sp, #36	; 0x24
    9d90:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9d92:	0018      	movs	r0, r3
    9d94:	f7ff fcc0 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:434
				dschar = TRUE;
    9d98:	2301      	movs	r3, #1
    9d9a:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:435
				printk_pad_zero(vlen, field_width, &count, info);
    9d9c:	9b03      	ldr	r3, [sp, #12]
    9d9e:	aa09      	add	r2, sp, #36	; 0x24
    9da0:	991c      	ldr	r1, [sp, #112]	; 0x70
    9da2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9da4:	f7ff fe96 	bl	9ad4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:436
				vlen = field_width;
    9da8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9daa:	931f      	str	r3, [sp, #124]	; 0x7c
    9dac:	e014      	b.n	9dd8 <printk+0x29c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:439
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    9dae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9db0:	2201      	movs	r2, #1
    9db2:	4013      	ands	r3, r2
    9db4:	d110      	bne.n	9dd8 <printk+0x29c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:440
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    9db6:	9b03      	ldr	r3, [sp, #12]
    9db8:	aa09      	add	r2, sp, #36	; 0x24
    9dba:	991c      	ldr	r1, [sp, #112]	; 0x70
    9dbc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9dbe:	f7ff fea3 	bl	9b08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:442

					if (schar)
    9dc2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d005      	beq.n	9dd4 <printk+0x298>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:443
						printk_putc(schar, &count, info);
    9dc8:	9a03      	ldr	r2, [sp, #12]
    9dca:	a909      	add	r1, sp, #36	; 0x24
    9dcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9dce:	0018      	movs	r0, r3
    9dd0:	f7ff fca2 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:444
					dschar = TRUE;
    9dd4:	2301      	movs	r3, #1
    9dd6:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:450
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    9dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9dda:	2b00      	cmp	r3, #0
    9ddc:	d000      	beq.n	9de0 <printk+0x2a4>
    9dde:	e190      	b.n	a102 <printk+0x5c6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:450 (discriminator 1)
    9de0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9de2:	2b00      	cmp	r3, #0
    9de4:	d100      	bne.n	9de8 <printk+0x2ac>
    9de6:	e18c      	b.n	a102 <printk+0x5c6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:451
				printk_putc(schar, &count, info);
    9de8:	9a03      	ldr	r2, [sp, #12]
    9dea:	a909      	add	r1, sp, #36	; 0x24
    9dec:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9dee:	0018      	movs	r0, r3
    9df0:	f7ff fc92 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:453
			}
			goto cont_xd;  //开始跳转
    9df4:	e185      	b.n	a102 <printk+0x5c6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:464
			//3.140001 对double数:0x40091EB85F577E6C
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。

			//【20200816】  XSX，解决浮点数不优化问题
			ap = ap + 4;
    9df6:	9b01      	ldr	r3, [sp, #4]
    9df8:	3304      	adds	r3, #4
    9dfa:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:465
			fval = (double)va_arg(ap, double);
    9dfc:	9b01      	ldr	r3, [sp, #4]
    9dfe:	3308      	adds	r3, #8
    9e00:	9301      	str	r3, [sp, #4]
    9e02:	9b01      	ldr	r3, [sp, #4]
    9e04:	3b08      	subs	r3, #8
    9e06:	681a      	ldr	r2, [r3, #0]
    9e08:	685b      	ldr	r3, [r3, #4]
    9e0a:	9206      	str	r2, [sp, #24]
    9e0c:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:469

			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
    9e0e:	9806      	ldr	r0, [sp, #24]
    9e10:	9907      	ldr	r1, [sp, #28]
    9e12:	2200      	movs	r2, #0
    9e14:	2300      	movs	r3, #0
    9e16:	f7fd f8d3 	bl	6fc0 <__aeabi_dcmplt>
    9e1a:	1e03      	subs	r3, r0, #0
    9e1c:	d00f      	beq.n	9e3e <printk+0x302>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:470
				schar = '-';
    9e1e:	232d      	movs	r3, #45	; 0x2d
    9e20:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:471
				fval = -fval;				//负数取它的正数
    9e22:	9a06      	ldr	r2, [sp, #24]
    9e24:	9b07      	ldr	r3, [sp, #28]
    9e26:	0011      	movs	r1, r2
    9e28:	000c      	movs	r4, r1
    9e2a:	2180      	movs	r1, #128	; 0x80
    9e2c:	0609      	lsls	r1, r1, #24
    9e2e:	4059      	eors	r1, r3
    9e30:	000d      	movs	r5, r1
    9e32:	9406      	str	r4, [sp, #24]
    9e34:	9507      	str	r5, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:472
				++vlen;
    9e36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9e38:	3301      	adds	r3, #1
    9e3a:	931f      	str	r3, [sp, #124]	; 0x7c
    9e3c:	e015      	b.n	9e6a <printk+0x32e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:476
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    9e3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9e40:	2202      	movs	r2, #2
    9e42:	4013      	ands	r3, r2
    9e44:	d005      	beq.n	9e52 <printk+0x316>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:477
					schar = '+';
    9e46:	232b      	movs	r3, #43	; 0x2b
    9e48:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:478
					++vlen;
    9e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9e4c:	3301      	adds	r3, #1
    9e4e:	931f      	str	r3, [sp, #124]	; 0x7c
    9e50:	e00b      	b.n	9e6a <printk+0x32e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:481
				}
				else {
					if (IS_FLAG_SPACE(flags_used)) {
    9e52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9e54:	2204      	movs	r2, #4
    9e56:	4013      	ands	r3, r2
    9e58:	d005      	beq.n	9e66 <printk+0x32a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:482
						schar = ' ';
    9e5a:	2320      	movs	r3, #32
    9e5c:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:483
						++vlen;
    9e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9e60:	3301      	adds	r3, #1
    9e62:	931f      	str	r3, [sp, #124]	; 0x7c
    9e64:	e001      	b.n	9e6a <printk+0x32e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:486
					}
					else {
						schar = 0;
    9e66:	2300      	movs	r3, #0
    9e68:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:490
					}
				}
			}
			dschar = FALSE;
    9e6a:	2300      	movs	r3, #0
    9e6c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:493

			//确定是否使用小数点精度数值
			if (precision_used)
    9e6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9e70:	2b00      	cmp	r3, #0
    9e72:	d00a      	beq.n	9e8a <printk+0x34e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:496
			{
				//将整型转换成字符型保存在vstr中，返回字符数vlen
				vlen = printk_mkfloatstr(&fval, vstr, precision_width);
    9e74:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9e76:	a90a      	add	r1, sp, #40	; 0x28
    9e78:	ab06      	add	r3, sp, #24
    9e7a:	0018      	movs	r0, r3
    9e7c:	f7ff fc72 	bl	9764 <printk_mkfloatstr>
    9e80:	0003      	movs	r3, r0
    9e82:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:497
				vstrp = &vstr[0];  //指向转换后的第一个字符
    9e84:	ab0a      	add	r3, sp, #40	; 0x28
    9e86:	9320      	str	r3, [sp, #128]	; 0x80
    9e88:	e017      	b.n	9eba <printk+0x37e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:501
			}
			else
			{	//浮点型精度到小数点后8位
				if (length_modifier == 0)
    9e8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	d10a      	bne.n	9ea6 <printk+0x36a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:503
				{	//将整型转换成字符型保存在vstr中，返回字符数vlen
					vlen = printk_mkfloatstr(&fval, vstr, 8);
    9e90:	a90a      	add	r1, sp, #40	; 0x28
    9e92:	ab06      	add	r3, sp, #24
    9e94:	2208      	movs	r2, #8
    9e96:	0018      	movs	r0, r3
    9e98:	f7ff fc64 	bl	9764 <printk_mkfloatstr>
    9e9c:	0003      	movs	r3, r0
    9e9e:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:505
					//指向转换后的第一个字符
					vstrp = &vstr[0];
    9ea0:	ab0a      	add	r3, sp, #40	; 0x28
    9ea2:	9320      	str	r3, [sp, #128]	; 0x80
    9ea4:	e009      	b.n	9eba <printk+0x37e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:509
				}
				else
				{	//将整型转换成字符型保存在vstr中，返回字符数vlen
					vlen = printk_mkfloatstr(&fval, vstr, precision_width);
    9ea6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9ea8:	a90a      	add	r1, sp, #40	; 0x28
    9eaa:	ab06      	add	r3, sp, #24
    9eac:	0018      	movs	r0, r3
    9eae:	f7ff fc59 	bl	9764 <printk_mkfloatstr>
    9eb2:	0003      	movs	r3, r0
    9eb4:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:511
					//指向转换后的第一个字符
					vstrp = &vstr[0];
    9eb6:	ab0a      	add	r3, sp, #40	; 0x28
    9eb8:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:521


			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    9eba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9ebc:	2208      	movs	r2, #8
    9ebe:	4013      	ands	r3, r2
    9ec0:	d018      	beq.n	9ef4 <printk+0x3b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:522
				if (schar)
    9ec2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d005      	beq.n	9ed4 <printk+0x398>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:523
					printk_putc(schar, &count, info);  //输出符号
    9ec8:	9a03      	ldr	r2, [sp, #12]
    9eca:	a909      	add	r1, sp, #36	; 0x24
    9ecc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9ece:	0018      	movs	r0, r3
    9ed0:	f7ff fc22 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:524
				dschar = TRUE;
    9ed4:	2301      	movs	r3, #1
    9ed6:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:525
				printk_pad_zero(vlen, field_width, &count, info);
    9ed8:	9b03      	ldr	r3, [sp, #12]
    9eda:	aa09      	add	r2, sp, #36	; 0x24
    9edc:	991c      	ldr	r1, [sp, #112]	; 0x70
    9ede:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9ee0:	f7ff fdf8 	bl	9ad4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:526
				vlen = field_width;
    9ee4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9ee6:	931f      	str	r3, [sp, #124]	; 0x7c
    9ee8:	e019      	b.n	9f1e <printk+0x3e2>
    9eea:	46c0      	nop			; (mov r8, r8)
    9eec:	0000a3e0 	.word	0x0000a3e0
    9ef0:	0000a424 	.word	0x0000a424
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:529
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    9ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9ef6:	2201      	movs	r2, #1
    9ef8:	4013      	ands	r3, r2
    9efa:	d110      	bne.n	9f1e <printk+0x3e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:530
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    9efc:	9b03      	ldr	r3, [sp, #12]
    9efe:	aa09      	add	r2, sp, #36	; 0x24
    9f00:	991c      	ldr	r1, [sp, #112]	; 0x70
    9f02:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9f04:	f7ff fe00 	bl	9b08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:532

					if (schar)
    9f08:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d005      	beq.n	9f1a <printk+0x3de>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:533
						printk_putc(schar, &count, info);
    9f0e:	9a03      	ldr	r2, [sp, #12]
    9f10:	a909      	add	r1, sp, #36	; 0x24
    9f12:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9f14:	0018      	movs	r0, r3
    9f16:	f7ff fbff 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:534
					dschar = TRUE;
    9f1a:	2301      	movs	r3, #1
    9f1c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:540
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    9f1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f20:	2b00      	cmp	r3, #0
    9f22:	d114      	bne.n	9f4e <printk+0x412>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:540 (discriminator 1)
    9f24:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9f26:	2b00      	cmp	r3, #0
    9f28:	d011      	beq.n	9f4e <printk+0x412>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:541
				printk_putc(schar, &count, info);
    9f2a:	9a03      	ldr	r2, [sp, #12]
    9f2c:	a909      	add	r1, sp, #36	; 0x24
    9f2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9f30:	0018      	movs	r0, r3
    9f32:	f7ff fbf1 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:543
			}
			while (*vstrp)
    9f36:	e00a      	b.n	9f4e <printk+0x412>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:544
				printk_putc(*vstrp++, &count, info);
    9f38:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9f3a:	1c5a      	adds	r2, r3, #1
    9f3c:	9220      	str	r2, [sp, #128]	; 0x80
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	b25b      	sxtb	r3, r3
    9f42:	0018      	movs	r0, r3
    9f44:	9a03      	ldr	r2, [sp, #12]
    9f46:	ab09      	add	r3, sp, #36	; 0x24
    9f48:	0019      	movs	r1, r3
    9f4a:	f7ff fbe5 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:543
			while (*vstrp)
    9f4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9f50:	781b      	ldrb	r3, [r3, #0]
    9f52:	b25b      	sxtb	r3, r3
    9f54:	2b00      	cmp	r3, #0
    9f56:	d1ef      	bne.n	9f38 <printk+0x3fc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:545
			if (IS_FLAG_MINUS(flags_used)) {
    9f58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9f5a:	2201      	movs	r2, #1
    9f5c:	4013      	ands	r3, r2
    9f5e:	d100      	bne.n	9f62 <printk+0x426>
    9f60:	e162      	b.n	a228 <printk+0x6ec>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:546
				printk_pad_space(vlen, field_width, &count, info);
    9f62:	9b03      	ldr	r3, [sp, #12]
    9f64:	aa09      	add	r2, sp, #36	; 0x24
    9f66:	991c      	ldr	r1, [sp, #112]	; 0x70
    9f68:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9f6a:	f7ff fdcd 	bl	9b08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:548
			}
			break;
    9f6e:	e15b      	b.n	a228 <printk+0x6ec>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:552
			//以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int)va_arg(ap, unsigned int);
    9f70:	9b01      	ldr	r3, [sp, #4]
    9f72:	3304      	adds	r3, #4
    9f74:	9301      	str	r3, [sp, #4]
    9f76:	9b01      	ldr	r3, [sp, #4]
    9f78:	3b04      	subs	r3, #4
    9f7a:	681b      	ldr	r3, [r3, #0]
    9f7c:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:553
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    9f7e:	a905      	add	r1, sp, #20
    9f80:	a80a      	add	r0, sp, #40	; 0x28
    9f82:	2310      	movs	r3, #16
    9f84:	2200      	movs	r2, #0
    9f86:	f7ff fd29 	bl	99dc <printk_mknumstr>
    9f8a:	0003      	movs	r3, r0
    9f8c:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:554
			vstrp = &vstr[vlen];
    9f8e:	aa0a      	add	r2, sp, #40	; 0x28
    9f90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9f92:	18d3      	adds	r3, r2, r3
    9f94:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:556

			dschar = FALSE;
    9f96:	2300      	movs	r3, #0
    9f98:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:557
			if (IS_FLAG_ZERO(flags_used)) {
    9f9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9f9c:	2208      	movs	r2, #8
    9f9e:	4013      	ands	r3, r2
    9fa0:	d01a      	beq.n	9fd8 <printk+0x49c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:558
				if (IS_FLAG_POUND(flags_used)) {
    9fa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9fa4:	2210      	movs	r2, #16
    9fa6:	4013      	ands	r3, r2
    9fa8:	d00d      	beq.n	9fc6 <printk+0x48a>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:559
					printk_putc('0', &count, info);
    9faa:	9a03      	ldr	r2, [sp, #12]
    9fac:	ab09      	add	r3, sp, #36	; 0x24
    9fae:	0019      	movs	r1, r3
    9fb0:	2030      	movs	r0, #48	; 0x30
    9fb2:	f7ff fbb1 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:560
					printk_putc('x', &count, info);
    9fb6:	9a03      	ldr	r2, [sp, #12]
    9fb8:	ab09      	add	r3, sp, #36	; 0x24
    9fba:	0019      	movs	r1, r3
    9fbc:	2078      	movs	r0, #120	; 0x78
    9fbe:	f7ff fbab 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:562
					/*vlen += 2;*/
					dschar = TRUE;
    9fc2:	2301      	movs	r3, #1
    9fc4:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:564
				}
				printk_pad_zero(vlen, field_width, &count, info);
    9fc6:	9b03      	ldr	r3, [sp, #12]
    9fc8:	aa09      	add	r2, sp, #36	; 0x24
    9fca:	991c      	ldr	r1, [sp, #112]	; 0x70
    9fcc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9fce:	f7ff fd81 	bl	9ad4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:565
				vlen = field_width;
    9fd2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9fd4:	931f      	str	r3, [sp, #124]	; 0x7c
    9fd6:	e022      	b.n	a01e <printk+0x4e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:568
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    9fd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9fda:	2201      	movs	r2, #1
    9fdc:	4013      	ands	r3, r2
    9fde:	d11e      	bne.n	a01e <printk+0x4e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:569
					if (IS_FLAG_POUND(flags_used)) {
    9fe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9fe2:	2210      	movs	r2, #16
    9fe4:	4013      	ands	r3, r2
    9fe6:	d002      	beq.n	9fee <printk+0x4b2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:570
						vlen += 2;
    9fe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9fea:	3302      	adds	r3, #2
    9fec:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:572
					}
					printk_pad_space(vlen, field_width, &count, info);
    9fee:	9b03      	ldr	r3, [sp, #12]
    9ff0:	aa09      	add	r2, sp, #36	; 0x24
    9ff2:	991c      	ldr	r1, [sp, #112]	; 0x70
    9ff4:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9ff6:	f7ff fd87 	bl	9b08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:573
					if (IS_FLAG_POUND(flags_used)) {
    9ffa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9ffc:	2210      	movs	r2, #16
    9ffe:	4013      	ands	r3, r2
    a000:	d00d      	beq.n	a01e <printk+0x4e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:574
						printk_putc('0', &count, info);
    a002:	9a03      	ldr	r2, [sp, #12]
    a004:	ab09      	add	r3, sp, #36	; 0x24
    a006:	0019      	movs	r1, r3
    a008:	2030      	movs	r0, #48	; 0x30
    a00a:	f7ff fb85 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:575
						printk_putc('x', &count, info);
    a00e:	9a03      	ldr	r2, [sp, #12]
    a010:	ab09      	add	r3, sp, #36	; 0x24
    a012:	0019      	movs	r1, r3
    a014:	2078      	movs	r0, #120	; 0x78
    a016:	f7ff fb7f 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:576
						dschar = TRUE;
    a01a:	2301      	movs	r3, #1
    a01c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:581
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
    a01e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a020:	2210      	movs	r2, #16
    a022:	4013      	ands	r3, r2
    a024:	d06f      	beq.n	a106 <printk+0x5ca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:581 (discriminator 1)
    a026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a028:	2b00      	cmp	r3, #0
    a02a:	d16c      	bne.n	a106 <printk+0x5ca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:582
				printk_putc('0', &count, info);
    a02c:	9a03      	ldr	r2, [sp, #12]
    a02e:	ab09      	add	r3, sp, #36	; 0x24
    a030:	0019      	movs	r1, r3
    a032:	2030      	movs	r0, #48	; 0x30
    a034:	f7ff fb70 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:583
				printk_putc('x', &count, info);
    a038:	9a03      	ldr	r2, [sp, #12]
    a03a:	ab09      	add	r3, sp, #36	; 0x24
    a03c:	0019      	movs	r1, r3
    a03e:	2078      	movs	r0, #120	; 0x78
    a040:	f7ff fb6a 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:584
				vlen += 2;
    a044:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a046:	3302      	adds	r3, #2
    a048:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:586
			}
			goto cont_xd;
    a04a:	e05c      	b.n	a106 <printk+0x5ca>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:589
			//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int)va_arg(ap, unsigned int);
    a04c:	9b01      	ldr	r3, [sp, #4]
    a04e:	3304      	adds	r3, #4
    a050:	9301      	str	r3, [sp, #4]
    a052:	9b01      	ldr	r3, [sp, #4]
    a054:	3b04      	subs	r3, #4
    a056:	681b      	ldr	r3, [r3, #0]
    a058:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:590
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
    a05a:	a905      	add	r1, sp, #20
    a05c:	a80a      	add	r0, sp, #40	; 0x28
    a05e:	2308      	movs	r3, #8
    a060:	2200      	movs	r2, #0
    a062:	f7ff fcbb 	bl	99dc <printk_mknumstr>
    a066:	0003      	movs	r3, r0
    a068:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:591
			goto cont_u;
    a06a:	e02e      	b.n	a0ca <printk+0x58e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:594
			//二进制输出
		case 'b':
			uval = (unsigned int)va_arg(ap, unsigned int);
    a06c:	9b01      	ldr	r3, [sp, #4]
    a06e:	3304      	adds	r3, #4
    a070:	9301      	str	r3, [sp, #4]
    a072:	9b01      	ldr	r3, [sp, #4]
    a074:	3b04      	subs	r3, #4
    a076:	681b      	ldr	r3, [r3, #0]
    a078:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:595
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
    a07a:	a905      	add	r1, sp, #20
    a07c:	a80a      	add	r0, sp, #40	; 0x28
    a07e:	2302      	movs	r3, #2
    a080:	2200      	movs	r2, #0
    a082:	f7ff fcab 	bl	99dc <printk_mknumstr>
    a086:	0003      	movs	r3, r0
    a088:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:596
			goto cont_u;
    a08a:	e01e      	b.n	a0ca <printk+0x58e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:599
			//输出指针的值
		case 'p':
			uval = (unsigned int)va_arg(ap, void*);
    a08c:	9b01      	ldr	r3, [sp, #4]
    a08e:	3304      	adds	r3, #4
    a090:	9301      	str	r3, [sp, #4]
    a092:	9b01      	ldr	r3, [sp, #4]
    a094:	3b04      	subs	r3, #4
    a096:	681b      	ldr	r3, [r3, #0]
    a098:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:600
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    a09a:	a905      	add	r1, sp, #20
    a09c:	a80a      	add	r0, sp, #40	; 0x28
    a09e:	2310      	movs	r3, #16
    a0a0:	2200      	movs	r2, #0
    a0a2:	f7ff fc9b 	bl	99dc <printk_mknumstr>
    a0a6:	0003      	movs	r3, r0
    a0a8:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:601
			goto cont_u;
    a0aa:	e00e      	b.n	a0ca <printk+0x58e>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:603
		case 'u':
			uval = (unsigned int)va_arg(ap, unsigned int);
    a0ac:	9b01      	ldr	r3, [sp, #4]
    a0ae:	3304      	adds	r3, #4
    a0b0:	9301      	str	r3, [sp, #4]
    a0b2:	9b01      	ldr	r3, [sp, #4]
    a0b4:	3b04      	subs	r3, #4
    a0b6:	681b      	ldr	r3, [r3, #0]
    a0b8:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:604
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
    a0ba:	a905      	add	r1, sp, #20
    a0bc:	a80a      	add	r0, sp, #40	; 0x28
    a0be:	230a      	movs	r3, #10
    a0c0:	2200      	movs	r2, #0
    a0c2:	f7ff fc8b 	bl	99dc <printk_mknumstr>
    a0c6:	0003      	movs	r3, r0
    a0c8:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:606

			cont_u: vstrp = &vstr[vlen];
    a0ca:	aa0a      	add	r2, sp, #40	; 0x28
    a0cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a0ce:	18d3      	adds	r3, r2, r3
    a0d0:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:608

			if (IS_FLAG_ZERO(flags_used)) {
    a0d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a0d4:	2208      	movs	r2, #8
    a0d6:	4013      	ands	r3, r2
    a0d8:	d008      	beq.n	a0ec <printk+0x5b0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:609
				printk_pad_zero(vlen, field_width, &count, info);
    a0da:	9b03      	ldr	r3, [sp, #12]
    a0dc:	aa09      	add	r2, sp, #36	; 0x24
    a0de:	991c      	ldr	r1, [sp, #112]	; 0x70
    a0e0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a0e2:	f7ff fcf7 	bl	9ad4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:610
				vlen = field_width;
    a0e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a0e8:	931f      	str	r3, [sp, #124]	; 0x7c
    a0ea:	e01b      	b.n	a124 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:613
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    a0ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a0ee:	2201      	movs	r2, #1
    a0f0:	4013      	ands	r3, r2
    a0f2:	d10a      	bne.n	a10a <printk+0x5ce>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:614
					printk_pad_space(vlen, field_width, &count, info);
    a0f4:	9b03      	ldr	r3, [sp, #12]
    a0f6:	aa09      	add	r2, sp, #36	; 0x24
    a0f8:	991c      	ldr	r1, [sp, #112]	; 0x70
    a0fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a0fc:	f7ff fd04 	bl	9b08 <printk_pad_space>
    a100:	e010      	b.n	a124 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:453
			goto cont_xd;  //开始跳转
    a102:	46c0      	nop			; (mov r8, r8)
    a104:	e00e      	b.n	a124 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:586
			goto cont_xd;
    a106:	46c0      	nop			; (mov r8, r8)
    a108:	e00c      	b.n	a124 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:618
				}
			}

			cont_xd: while (*vstrp)
    a10a:	46c0      	nop			; (mov r8, r8)
    a10c:	e00a      	b.n	a124 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:619
				printk_putc(*vstrp--, &count, info);
    a10e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a110:	1e5a      	subs	r2, r3, #1
    a112:	9220      	str	r2, [sp, #128]	; 0x80
    a114:	781b      	ldrb	r3, [r3, #0]
    a116:	b25b      	sxtb	r3, r3
    a118:	0018      	movs	r0, r3
    a11a:	9a03      	ldr	r2, [sp, #12]
    a11c:	ab09      	add	r3, sp, #36	; 0x24
    a11e:	0019      	movs	r1, r3
    a120:	f7ff fafa 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:618 (discriminator 1)
			cont_xd: while (*vstrp)
    a124:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	b25b      	sxtb	r3, r3
    a12a:	2b00      	cmp	r3, #0
    a12c:	d1ef      	bne.n	a10e <printk+0x5d2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:621

			if (IS_FLAG_MINUS(flags_used)) {
    a12e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a130:	2201      	movs	r2, #1
    a132:	4013      	ands	r3, r2
    a134:	d100      	bne.n	a138 <printk+0x5fc>
    a136:	e079      	b.n	a22c <printk+0x6f0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:622
				printk_pad_space(vlen, field_width, &count, info);
    a138:	9b03      	ldr	r3, [sp, #12]
    a13a:	aa09      	add	r2, sp, #36	; 0x24
    a13c:	991c      	ldr	r1, [sp, #112]	; 0x70
    a13e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a140:	f7ff fce2 	bl	9b08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:625
			}

			break;
    a144:	e072      	b.n	a22c <printk+0x6f0>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:628
			//字符型输出
		case 'c':
			cval = (char)va_arg(ap, unsigned int);
    a146:	9b01      	ldr	r3, [sp, #4]
    a148:	3304      	adds	r3, #4
    a14a:	9301      	str	r3, [sp, #4]
    a14c:	9b01      	ldr	r3, [sp, #4]
    a14e:	3b04      	subs	r3, #4
    a150:	681b      	ldr	r3, [r3, #0]
    a152:	b25b      	sxtb	r3, r3
    a154:	9313      	str	r3, [sp, #76]	; 0x4c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:629
			printk_putc(cval, &count, info);
    a156:	9a03      	ldr	r2, [sp, #12]
    a158:	a909      	add	r1, sp, #36	; 0x24
    a15a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a15c:	0018      	movs	r0, r3
    a15e:	f7ff fadb 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:630
			break;
    a162:	e066      	b.n	a232 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:632
		case 's':
			sval = (char*)va_arg(ap, char*);
    a164:	9b01      	ldr	r3, [sp, #4]
    a166:	3304      	adds	r3, #4
    a168:	9301      	str	r3, [sp, #4]
    a16a:	9b01      	ldr	r3, [sp, #4]
    a16c:	3b04      	subs	r3, #4
    a16e:	681b      	ldr	r3, [r3, #0]
    a170:	9316      	str	r3, [sp, #88]	; 0x58
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:633
			if (sval) {
    a172:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a174:	2b00      	cmp	r3, #0
    a176:	d05b      	beq.n	a230 <printk+0x6f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:634
				vlen = strlen(sval);
    a178:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a17a:	0018      	movs	r0, r3
    a17c:	f7fe f812 	bl	81a4 <strlen>
    a180:	0003      	movs	r3, r0
    a182:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:635
				if (!IS_FLAG_MINUS(flags_used)) {
    a184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a186:	2201      	movs	r2, #1
    a188:	4013      	ands	r3, r2
    a18a:	d105      	bne.n	a198 <printk+0x65c>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:636
					printk_pad_space(vlen, field_width, &count, info);
    a18c:	9b03      	ldr	r3, [sp, #12]
    a18e:	aa09      	add	r2, sp, #36	; 0x24
    a190:	991c      	ldr	r1, [sp, #112]	; 0x70
    a192:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a194:	f7ff fcb8 	bl	9b08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:638
				}
				if (precision_width != 0)
    a198:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a19a:	2b00      	cmp	r3, #0
    a19c:	d022      	beq.n	a1e4 <printk+0x6a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:640
				{
					while (*sval)
    a19e:	e010      	b.n	a1c2 <printk+0x686>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:642
					{
						if (precision_width >= 1)
    a1a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	dd0d      	ble.n	a1c2 <printk+0x686>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:644
						{
							precision_width--;
    a1a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a1a8:	3b01      	subs	r3, #1
    a1aa:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:645
							printk_putc(*sval++, &count, info);
    a1ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a1ae:	1c5a      	adds	r2, r3, #1
    a1b0:	9216      	str	r2, [sp, #88]	; 0x58
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	b25b      	sxtb	r3, r3
    a1b6:	0018      	movs	r0, r3
    a1b8:	9a03      	ldr	r2, [sp, #12]
    a1ba:	ab09      	add	r3, sp, #36	; 0x24
    a1bc:	0019      	movs	r1, r3
    a1be:	f7ff faab 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:640
					while (*sval)
    a1c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a1c4:	781b      	ldrb	r3, [r3, #0]
    a1c6:	b25b      	sxtb	r3, r3
    a1c8:	2b00      	cmp	r3, #0
    a1ca:	d1e9      	bne.n	a1a0 <printk+0x664>
    a1cc:	e00f      	b.n	a1ee <printk+0x6b2>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:652
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
						printk_putc(*sval++, &count, info);
    a1ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a1d0:	1c5a      	adds	r2, r3, #1
    a1d2:	9216      	str	r2, [sp, #88]	; 0x58
    a1d4:	781b      	ldrb	r3, [r3, #0]
    a1d6:	b25b      	sxtb	r3, r3
    a1d8:	0018      	movs	r0, r3
    a1da:	9a03      	ldr	r2, [sp, #12]
    a1dc:	ab09      	add	r3, sp, #36	; 0x24
    a1de:	0019      	movs	r1, r3
    a1e0:	f7ff fa9a 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:651
					while (*sval)
    a1e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a1e6:	781b      	ldrb	r3, [r3, #0]
    a1e8:	b25b      	sxtb	r3, r3
    a1ea:	2b00      	cmp	r3, #0
    a1ec:	d1ef      	bne.n	a1ce <printk+0x692>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:654
				}
				if (IS_FLAG_MINUS(flags_used)) {
    a1ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a1f0:	2201      	movs	r2, #1
    a1f2:	4013      	ands	r3, r2
    a1f4:	d01c      	beq.n	a230 <printk+0x6f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:655
					printk_pad_space(vlen, field_width, &count, info);
    a1f6:	9b03      	ldr	r3, [sp, #12]
    a1f8:	aa09      	add	r2, sp, #36	; 0x24
    a1fa:	991c      	ldr	r1, [sp, #112]	; 0x70
    a1fc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a1fe:	f7ff fc83 	bl	9b08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:658
				}
			}
			break;
    a202:	e015      	b.n	a230 <printk+0x6f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:660
		case 'n':
			ivalp = (int*)va_arg(ap, int*);
    a204:	9b01      	ldr	r3, [sp, #4]
    a206:	3304      	adds	r3, #4
    a208:	9301      	str	r3, [sp, #4]
    a20a:	9b01      	ldr	r3, [sp, #4]
    a20c:	3b04      	subs	r3, #4
    a20e:	681b      	ldr	r3, [r3, #0]
    a210:	9314      	str	r3, [sp, #80]	; 0x50
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:661
			*ivalp = count;
    a212:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a214:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a216:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:662
			break;
    a218:	e00b      	b.n	a232 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:665

		default:
			printk_putc(c, &count, info);
    a21a:	9a03      	ldr	r2, [sp, #12]
    a21c:	a909      	add	r1, sp, #36	; 0x24
    a21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a220:	0018      	movs	r0, r3
    a222:	f7ff fa79 	bl	9718 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:666
			break;
    a226:	e004      	b.n	a232 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:548
			break;
    a228:	46c0      	nop			; (mov r8, r8)
    a22a:	e002      	b.n	a232 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:625
			break;
    a22c:	46c0      	nop			; (mov r8, r8)
    a22e:	e000      	b.n	a232 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:658
			break;
    a230:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:257 (discriminator 2)
	for (p = (char*)fmt; (c = *p) != 0; p++)
    a232:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a234:	3301      	adds	r3, #1
    a236:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:257 (discriminator 1)
    a238:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a23a:	781b      	ldrb	r3, [r3, #0]
    a23c:	b25b      	sxtb	r3, r3
    a23e:	9315      	str	r3, [sp, #84]	; 0x54
    a240:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a242:	2b00      	cmp	r3, #0
    a244:	d000      	beq.n	a248 <printk+0x70c>
    a246:	e491      	b.n	9b6c <printk+0x30>
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:669
		}
	}
	return count;
    a248:	9b09      	ldr	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:670
}
    a24a:	0018      	movs	r0, r3
    a24c:	b023      	add	sp, #140	; 0x8c
    a24e:	bd30      	pop	{r4, r5, pc}

0000a250 <myprintf>:
myprintf():
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:678
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char* fmt, ...)
{
    a250:	b40f      	push	{r0, r1, r2, r3}
    a252:	b500      	push	{lr}
    a254:	b087      	sub	sp, #28
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:682
	char* ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
    a256:	ab01      	add	r3, sp, #4
    a258:	2201      	movs	r2, #1
    a25a:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:683
	info.func = &out_char;     //调用的串口输出函数
    a25c:	ab01      	add	r3, sp, #4
    a25e:	4a0a      	ldr	r2, [pc, #40]	; (a288 <myprintf+0x38>)
    a260:	605a      	str	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:685
	//对ap 进行初始化，让它指向可变参数表里面的第一个参数
	va_start(ap, fmt);
    a262:	ab09      	add	r3, sp, #36	; 0x24
    a264:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:686
	rvalue = printk(&info, fmt, ap);
    a266:	9908      	ldr	r1, [sp, #32]
    a268:	9a05      	ldr	r2, [sp, #20]
    a26a:	ab01      	add	r3, sp, #4
    a26c:	0018      	movs	r0, r3
    a26e:	f7ff fc65 	bl	9b3c <printk>
    a272:	0003      	movs	r3, r0
    a274:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:688

	va_end(ap);
    a276:	2300      	movs	r3, #0
    a278:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:690

	return rvalue;
    a27a:	9b04      	ldr	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\SPI_实现基本功能\Debug/srcc/printf.c:691
}
    a27c:	0018      	movs	r0, r3
    a27e:	b007      	add	sp, #28
    a280:	bc08      	pop	{r3}
    a282:	b004      	add	sp, #16
    a284:	4718      	bx	r3
    a286:	46c0      	nop			; (mov r8, r8)
    a288:	000096f9 	.word	0x000096f9

0000a28c <memcpy>:
memcpy():
    a28c:	2300      	movs	r3, #0
    a28e:	b510      	push	{r4, lr}
    a290:	429a      	cmp	r2, r3
    a292:	d100      	bne.n	a296 <memcpy+0xa>
    a294:	bd10      	pop	{r4, pc}
    a296:	5ccc      	ldrb	r4, [r1, r3]
    a298:	54c4      	strb	r4, [r0, r3]
    a29a:	3301      	adds	r3, #1
    a29c:	e7f8      	b.n	a290 <memcpy+0x4>

0000a29e <memset>:
memset():
    a29e:	0003      	movs	r3, r0
    a2a0:	1882      	adds	r2, r0, r2
    a2a2:	4293      	cmp	r3, r2
    a2a4:	d100      	bne.n	a2a8 <memset+0xa>
    a2a6:	4770      	bx	lr
    a2a8:	7019      	strb	r1, [r3, #0]
    a2aa:	3301      	adds	r3, #1
    a2ac:	e7f9      	b.n	a2a2 <memset+0x4>
    a2ae:	0000      	movs	r0, r0
    a2b0:	fabbf7d6 	.word	0xfabbf7d6
    a2b4:	fbb7d6d7 	.word	0xfbb7d6d7
    a2b8:	aabfaeb4 	.word	0xaabfaeb4
    a2bc:	a2b7bcca 	.word	0xa2b7bcca
    a2c0:	0a21cdcb 	.word	0x0a21cdcb
    a2c4:	00000000 	.word	0x00000000
    a2c8:	fabbf7d6 	.word	0xfabbf7d6
    a2cc:	fbb7d6d7 	.word	0xfbb7d6d7
    a2d0:	a2b7aeb4 	.word	0xa2b7aeb4
    a2d4:	eacdcdcb 	.word	0xeacdcdcb
    a2d8:	0a21cfb1 	.word	0x0a21cfb1
    a2dc:	00000000 	.word	0x00000000
    a2e0:	59554951 	.word	0x59554951
    a2e4:	4a495945 	.word	0x4a495945
    a2e8:	004e4149 	.word	0x004e4149
	...
    a2f4:	6c696146 	.word	0x6c696146
    a2f8:	206f7420 	.word	0x206f7420
    a2fc:	74696e69 	.word	0x74696e69
    a300:	726f7020 	.word	0x726f7020
    a304:	6e692074 	.word	0x6e692074
    a308:	75726574 	.word	0x75726574
    a30c:	a1a37470 	.word	0xa1a37470
    a310:	a1a3a1a3 	.word	0xa1a3a1a3
    a314:	0000000a 	.word	0x0000000a
    a318:	61656c50 	.word	0x61656c50
    a31c:	73206573 	.word	0x73206573
    a320:	63656c65 	.word	0x63656c65
    a324:	72612074 	.word	0x72612074
    a328:	646e756f 	.word	0x646e756f
    a32c:	726f5020 	.word	0x726f5020
    a330:	20412074 	.word	0x20412074
    a334:	4320726f 	.word	0x4320726f
    a338:	20726f20 	.word	0x20726f20
    a33c:	00000a44 	.word	0x00000a44
    a340:	33323130 	.word	0x33323130
    a344:	37363534 	.word	0x37363534
    a348:	42413938 	.word	0x42413938
    a34c:	46454443 	.word	0x46454443
    a350:	30323032 	.word	0x30323032
    a354:	36313730 	.word	0x36313730
    a358:	00000000 	.word	0x00000000
    a35c:	bea12020 	.word	0xbea12020
    a360:	72657355 	.word	0x72657355
    a364:	becae1cc 	.word	0xbecae1cc
    a368:	baa3bfa1 	.word	0xbaa3bfa1
    a36c:	f8bdabbd 	.word	0xf8bdabbd
    a370:	7355ebc8 	.word	0x7355ebc8
    a374:	c4b57265 	.word	0xc4b57265
    a378:	6e69616d 	.word	0x6e69616d
    a37c:	b4d62928 	.word	0xb4d62928
    a380:	2e2ed0d0 	.word	0x2e2ed0d0
    a384:	000a0d2e 	.word	0x000a0d2e
    a388:	6e654c67 	.word	0x6e654c67
    a38c:	203a6874 	.word	0x203a6874
    a390:	000a6425 	.word	0x000a6425
    a394:	000a7325 	.word	0x000a7325
    a398:	00007630 	.word	0x00007630
    a39c:	0000755e 	.word	0x0000755e
    a3a0:	0000755e 	.word	0x0000755e
    a3a4:	0000755a 	.word	0x0000755a
    a3a8:	00007564 	.word	0x00007564
    a3ac:	00007564 	.word	0x00007564
    a3b0:	00007850 	.word	0x00007850
    a3b4:	0000755a 	.word	0x0000755a
    a3b8:	00007564 	.word	0x00007564
    a3bc:	00007850 	.word	0x00007850
    a3c0:	00007564 	.word	0x00007564
    a3c4:	0000755a 	.word	0x0000755a
    a3c8:	000077ee 	.word	0x000077ee
    a3cc:	000077ee 	.word	0x000077ee
    a3d0:	000077ee 	.word	0x000077ee
    a3d4:	000078ba 	.word	0x000078ba

0000a3d8 <UART_ARR>:
    a3d8:	4006b000 4006c000 00009bdc 00009bfa     ...@...@........
    a3e8:	00009bfa 00009bf0 00009bfa 00009bfa     ................
    a3f8:	00009bfa 00009bfa 00009bfa 00009bfa     ................
    a408:	00009bfa 00009bd2 00009bfa 00009bc8     ................
    a418:	00009bfa 00009bfa 00009be6 00009f70     ............p...
    a428:	0000a21a 0000a21a 0000a21a 0000a21a     ................
    a438:	0000a21a 0000a21a 0000a21a 0000a21a     ................
    a448:	0000a21a 0000a06c 0000a146 00009d16     ....l...F.......
    a458:	0000a21a 00009df6 0000a21a 0000a21a     ................
    a468:	00009d16 0000a21a 0000a21a 0000a21a     ................
    a478:	0000a21a 0000a204 0000a04c 0000a08c     ........L.......
    a488:	0000a21a 0000a21a 0000a164 0000a21a     ........d.......
    a498:	0000a0ac 0000a21a 0000a21a 00009f70     ............p...

0000a4a8 <_init>:
_init():
    a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4aa:	46c0      	nop			; (mov r8, r8)
    a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a4ae:	bc08      	pop	{r3}
    a4b0:	469e      	mov	lr, r3
    a4b2:	4770      	bx	lr

0000a4b4 <_fini>:
_fini():
    a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4b6:	46c0      	nop			; (mov r8, r8)
    a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a4ba:	bc08      	pop	{r3}
    a4bc:	469e      	mov	lr, r3
    a4be:	4770      	bx	lr

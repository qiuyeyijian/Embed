
DMA_收发固定长度字符串.elf:     file format elf32-littlearm
DMA_收发固定长度字符串.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00006c59

Program Header:
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000068c0 memsz 0x000068c0 flags r--
    LOAD off    0x00006c00 vaddr 0x00006c00 paddr 0x00006c00 align 2**16
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00006c10 vaddr 0x00006c10 paddr 0x00006c10 align 2**16
         filesz 0x00002770 memsz 0x00002770 flags rwx
    LOAD off    0x00010400 vaddr 0x20000400 paddr 0x00009380 align 2**16
         filesz 0x00000008 memsz 0x00000730 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts     000000c0  00006800  00006800  00006800  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_config   00000010  00006c00  00006c00  00006c00  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text           00002760  00006c10  00006c10  00006c10  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM            00000008  00009370  00009370  00009370  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array     00000004  00009378  00009378  00009378  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array     00000004  0000937c  0000937c  0000937c  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .mtb            00000000  20000400  20000400  00010408  2**0  CONTENTS
  7 .data           00000008  20000400  00009380  00010400  2**2  CONTENTS, ALLOC, LOAD, DATA
  8 .bss            00000428  20000408  00009388  00010408  2**2  ALLOC
  9 .heap           00000200  20000830  000097b0  00010408  2**0  ALLOC
 10 .stack          00000100  20000a30  000099b0  00010408  2**0  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010408  2**0  CONTENTS, READONLY
 12 .debug_info     000077f6  00000000  00000000  00010430  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev   000017db  00000000  00000000  00017c26  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges  00000268  00000000  00000000  00019408  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges   000001b8  00000000  00000000  00019670  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro    0000f1ab  00000000  00000000  00019828  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line     00003eed  00000000  00000000  000289d3  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str      0004efe4  00000000  00000000  0002c8c0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment        0000004c  00000000  00000000  0007b8a4  2**0  CONTENTS, READONLY
 20 .debug_frame    000007a4  00000000  00000000  0007b8f0  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc      00002820  00000000  00000000  0007c094  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00006800 l    d  .interrupts	00000000 .interrupts
00006c00 l    d  .flash_config	00000000 .flash_config
00006c10 l    d  .text	00000000 .text
00009370 l    d  .ARM	00000000 .ARM
00009378 l    d  .init_array	00000000 .init_array
0000937c l    d  .fini_array	00000000 .fini_array
20000400 l    d  .mtb	00000000 .mtb
20000400 l    d  .data	00000000 .data
20000408 l    d  .bss	00000000 .bss
20000830 l    d  .heap	00000000 .heap
20000a30 l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 ./obj/startup_MKL36Z4.o
00000000 l    df *ABS*	00000000 crtstuff.c
00009358 l     O .text	00000000 __EH_FRAME_BEGIN__
00006c10 l     F .text	00000000 __do_global_dtors_aux
20000408 l       .bss	00000001 completed.8914
0000937c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00006c38 l     F .text	00000000 frame_dummy
2000040c l       .bss	00000018 object.8919
00009378 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _udivsi3.o
00006ca8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00006dbc l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 _clzdi2.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 system_MKL36Z4.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 isr.c
00000000 l    df *ABS*	00000000 printf.c
00008980 l     F .text	0000002a printk_putc
000089aa l     F .text	00000088 printk_mknumstr
00008a32 l     F .text	0000001e printk_pad_zero
00008a50 l     F .text	0000001e printk_pad_space
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 d:/tools/armnoneeabi/bin/../lib/gcc/arm-none-eabi/9.3.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/tools/armnoneeabi/bin/../lib/gcc/arm-none-eabi/9.3.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 
0000937c l       .init_array	00000000 __init_array_end
00009378 l       .init_array	00000000 __preinit_array_end
00009378 l       .init_array	00000000 __init_array_start
00009378 l       .init_array	00000000 __preinit_array_start
20000830 g       .heap	00000000 __HeapBase
00006fd4 g     F .text	00000012 .hidden __aeabi_dcmple
00008510 g     F .text	00000008 flash_read_physical
00007260 g     F .text	00000078 .hidden __eqdf2
20000400 g       .data	00000000 __data_start__
00000100 g       *ABS*	00000000 STACK_SIZE
00006ca0  w    F .text	00000006 I2C0_IRQHandler
0000003e g       *ABS*	00000000 GEC_USER_SECTOR_END
00006ca0  w    F .text	00000006 HardFault_Handler
00006ca0  w    F .text	00000006 SysTick_Handler
00006ca0  w    F .text	00000006 PendSV_Handler
00006ca0  w    F .text	00000006 NMI_Handler
00009378 g       .ARM	00000000 __exidx_end
00006ca0  w    F .text	00000006 PORTC_PORTD_IRQHandler
00006ca0  w    F .text	00000006 I2C1_IRQHandler
00006ca0  w    F .text	00000006 UART1_IRQHandler
000072d8 g     F .text	000000e4 .hidden __gtdf2
00009380 g       .fini_array	00000000 __etext
00006ca0  w    F .text	00000006 DMA2_IRQHandler
20000428 g     O .bss	00000200 gRecvBuff
00006ca0  w    F .text	00000006 TPM0_IRQHandler
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmple
00006ca0  w    F .text	00000006 I2S0_IRQHandler
00006ca0  w    F .text	00000006 LLWU_IRQHandler
0000001a g       *ABS*	00000000 GEC_USER_SECTOR_START
00006ca0  w    F .text	00000006 TSI0_IRQHandler
20000628 g     O .bss	00000004 gLen
00008950 g     F .text	00000030 UART0_IRQHandler
000091b0 g     F .text	00000012 memcpy
00006f94 g     F .text	00000020 .hidden __aeabi_cdrcmple
000073bc g     F .text	000000e0 .hidden __ltdf2
00009378 g       .init_array	00000000 __DTOR_END__
00007010 g     F .text	0000003e .hidden __aeabi_uldivmod
20000400 g     O .data	00000004 SystemCoreClock
00006ca0  w    F .text	00000006 ADC0_IRQHandler
00006ca8 g     F .text	0000010a .hidden __udivsi3
20000408 g       .bss	00000000 __START_BSS
00007050 g     F .text	0000003c .hidden __fixunsdfsi
20000a30 g       .heap	00000000 __HeapLimit
20000408 g       .bss	00000000 __bss_start__
0000857c g     F .text	00000064 flash_erase
00008104 g     F .text	0000004c .hidden __aeabi_ui2d
00006ca0  w    F .text	00000006 SPI1_IRQHandler
000070c8 g     F .text	00000196 .hidden __udivmoddi4
00006ca0  w    F .text	00000006 DefaultISR
00006fc0 g     F .text	00000012 .hidden __aeabi_dcmplt
00009370 g       .ARM	00000000 __exidx_start
0000749c g     F .text	000004d8 .hidden __aeabi_dmul
00008a7c g     F .text	000001a4 printk_mkfloatstr
00009358 g     F .text	00000000 _init
00006ca0  w    F .text	00000006 TPM2_IRQHandler
0000708c g     F .text	0000003c .hidden __aeabi_d2ulz
00006ca0  w    F .text	00000006 RTC_IRQHandler
00000400 g       *ABS*	00000000 MCU_SECTORSIZE
00006c58  w    F .text	00000048 Reset_Handler
00006ca0  w    F .text	00000006 LCD_IRQHandler
000073bc g     F .text	000000e0 .hidden __ledf2
200017ff g       *ABS*	00000000 GEC_USER_RAM_END
0000918c g     F .text	00000024 myprintf
00006ca0  w    F .text	00000006 RTC_Seconds_IRQHandler
00006dbc g     F .text	00000000 .hidden __aeabi_idiv
00006ca0  w    F .text	00000006 MCG_IRQHandler
00006ca0  w    F .text	00000006 UART2_IRQHandler
20000408 g       .data	00000000 __data_end__
0000892c g     F .text	00000024 uart_clear_idle_int
00009378 g       .init_array	00000000 __CTOR_LIST__
00000200 g       *ABS*	00000000 HEAP_SIZE
00006fe8 g     F .text	00000012 .hidden __aeabi_dcmpgt
00008150 g     F .text	0000003c .hidden __clzsi2
00008740 g     F .text	0000014c uart_init
20000830 g       .bss	00000000 __bss_end__
00006ca0  w    F .text	00000006 Reserved20_IRQHandler
00006ffc g     F .text	00000012 .hidden __aeabi_dcmpge
00008538 g     F .text	00000044 flash_cmd_launch
00008478 g     F .text	00000098 dma_uart_send
00007974 g     F .text	00000724 .hidden __aeabi_dsub
20000424 g     O .bss	00000004 component_fun
20000400 g       *ABS*	00000000 GEC_USER_RAM_START
00009270 g     O .text	00000008 UART_ARR
2000062c g     O .bss	00000200 gSendBuff
00008408 g     F .text	00000070 dma_uart_recv
00008a6e g     F .text	0000000c out_char
00008c20 g     F .text	0000056a printk
00006f90  w    F .text	00000002 .hidden __aeabi_ldiv0
20000404 g     O .data	00000003 table_irq_uart
000091c2 g     F .text	00000010 memset
00006800 g       .interrupts	000000c0 __isr_vector
000086d8 g     F .text	0000005c main
00006ca0  w    F .text	00000006 PIT_IRQHandler
00006ca8 g     F .text	00000000 .hidden __aeabi_uidiv
00006ca0  w    F .text	00000006 SVC_Handler
20000400 g       .data	00000000 __DATA_RAM
20000830 g       .heap	00000000 __end__
00006dbc g     F .text	000001cc .hidden __divsi3
00009378 g       .init_array	00000000 __CTOR_END__
00006ca0  w    F .text	00000006 DMA3_IRQHandler
00009378 g       .init_array	00000000 __DTOR_LIST__
20000830 g       .bss	00000000 __END_BSS
000081b4 g     F .text	000000c8 SystemInit
00006ca0  w    F .text	00000006 DMA0_IRQHandler
00007260 g     F .text	00000078 .hidden __nedf2
0000708c g     F .text	0000003c .hidden __fixunsdfdi
00009364 g     F .text	00000000 _fini
00006ca0  w    F .text	00000006 DAC0_IRQHandler
20001800 g       .stack	00000000 __StackTop
0000827c g     F .text	00000044 dma_clear
000085e0 g     F .text	00000054 flash_write_physical
20000400 g       .mtb	00000000 _mtb_end
00009388 g       *ABS*	00000000 __DATA_END
00008518 g     F .text	0000001e flash_isempty
00007050 g     F .text	0000003c .hidden __aeabi_d2uiz
00006ca0  w    F .text	00000006 TPM1_IRQHandler
00008648 g     F .text	00000090 Vectors_Init
20001800 g       *ABS*	00000000 __stack
00006db4 g     F .text	00000008 .hidden __aeabi_uidivmod
00006fb4 g     F .text	0000000c .hidden __aeabi_dcmpeq
00006ca0  w    F .text	00000006 LVD_LVW_IRQHandler
00006ca0  w    F .text	00000006 SPI0_IRQHandler
00006ca0  w    F .text	00000006 PORTA_IRQHandler
00006800 g       .interrupts	00000000 __VECTOR_TABLE
00009380 g       .fini_array	00000000 __DATA_ROM
20001700 g       *ABS*	00000000 __StackLimit
000088e8 g     F .text	00000044 uart_enable_idle_int
00006ca0  w    F .text	00000006 FTFA_IRQHandler
00008098 g     F .text	0000006c .hidden __aeabi_d2iz
20000400 g       .mtb	00000000 _mtb_start
00006ca0  w    F .text	00000006 Reserved40_IRQHandler
00006f90  w    F .text	00000002 .hidden __aeabi_idiv0
00006ca0  w    F .text	00000006 LPTMR0_IRQHandler
000081a4 g     F .text	0000000e strlen
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000082c0 g     F .text	00000148 dma_uart_init
000072d8 g     F .text	000000e4 .hidden __gedf2
0000888c g     F .text	0000005c uart_send1
00008634 g     F .text	00000014 wdog_stop
00008734 g     F .text	0000000c uart_is_uartNo
2000082c g     O .bss	00000001 gFlag
0000818c g     F .text	00000016 .hidden __clzdi2
00006ca0  w    F .text	00000006 CMP0_IRQHandler
00006f88 g     F .text	00000008 .hidden __aeabi_idivmod
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START
00006ca0  w    F .text	00000006 DMA1_IRQHandler



Disassembly of section .text:

00006c10 <__do_global_dtors_aux>:
__do_global_dtors_aux():
    6c10:	b510      	push	{r4, lr}
    6c12:	4c06      	ldr	r4, [pc, #24]	; (6c2c <__do_global_dtors_aux+0x1c>)
    6c14:	7823      	ldrb	r3, [r4, #0]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d107      	bne.n	6c2a <__do_global_dtors_aux+0x1a>
    6c1a:	4b05      	ldr	r3, [pc, #20]	; (6c30 <__do_global_dtors_aux+0x20>)
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d002      	beq.n	6c26 <__do_global_dtors_aux+0x16>
    6c20:	4804      	ldr	r0, [pc, #16]	; (6c34 <__do_global_dtors_aux+0x24>)
    6c22:	e000      	b.n	6c26 <__do_global_dtors_aux+0x16>
    6c24:	bf00      	nop
    6c26:	2301      	movs	r3, #1
    6c28:	7023      	strb	r3, [r4, #0]
    6c2a:	bd10      	pop	{r4, pc}
    6c2c:	20000408 	.word	0x20000408
    6c30:	00000000 	.word	0x00000000
    6c34:	00009358 	.word	0x00009358

00006c38 <frame_dummy>:
frame_dummy():
    6c38:	4b04      	ldr	r3, [pc, #16]	; (6c4c <frame_dummy+0x14>)
    6c3a:	b510      	push	{r4, lr}
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d003      	beq.n	6c48 <frame_dummy+0x10>
    6c40:	4903      	ldr	r1, [pc, #12]	; (6c50 <frame_dummy+0x18>)
    6c42:	4804      	ldr	r0, [pc, #16]	; (6c54 <frame_dummy+0x1c>)
    6c44:	e000      	b.n	6c48 <frame_dummy+0x10>
    6c46:	bf00      	nop
    6c48:	bd10      	pop	{r4, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	00000000 	.word	0x00000000
    6c50:	2000040c 	.word	0x2000040c
    6c54:	00009358 	.word	0x00009358

00006c58 <Reset_Handler>:
Reset_Handler():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:118
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
    6c58:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:120
#ifndef __NO_SYSTEM_INIT
    bl SystemInit
    6c5a:	f001 faab 	bl	81b4 <SystemInit>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:122
#endif
    cpsie   i               /* Unmask interrupts */
    6c5e:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:130
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    6c60:	490a      	ldr	r1, [pc, #40]	; (6c8c <Reset_Handler+0x34>)
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c62:	4a0b      	ldr	r2, [pc, #44]	; (6c90 <Reset_Handler+0x38>)
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c64:	4b0b      	ldr	r3, [pc, #44]	; (6c94 <Reset_Handler+0x3c>)
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:134

    subs    r3, r2
    6c66:	1a9b      	subs	r3, r3, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:135
    ble     .LC0
    6c68:	dd03      	ble.n	6c72 <Reset_Handler+0x1a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:138

.LC1:
    subs    r3, 4
    6c6a:	3b04      	subs	r3, #4
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:139
    ldr    r0, [r1,r3]
    6c6c:	58c8      	ldr	r0, [r1, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:140
    str    r0, [r2,r3]
    6c6e:	50d0      	str	r0, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:141
    bgt    .LC1
    6c70:	dcfb      	bgt.n	6c6a <Reset_Handler+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:154
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
    6c72:	4909      	ldr	r1, [pc, #36]	; (6c98 <Reset_Handler+0x40>)
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c74:	4a09      	ldr	r2, [pc, #36]	; (6c9c <Reset_Handler+0x44>)
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:157

    subs    r2, r1
    6c76:	1a52      	subs	r2, r2, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:158
    ble .LC3
    6c78:	dd03      	ble.n	6c82 <Reset_Handler+0x2a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:160

    movs    r0, 0
    6c7a:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:162
.LC2:
    str r0, [r1, r2]
    6c7c:	5088      	str	r0, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:163
    subs    r2, 4
    6c7e:	3a04      	subs	r2, #4
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:164
    bge .LC2
    6c80:	dafc      	bge.n	6c7c <Reset_Handler+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:173
#define __START _start
#endif


/*【User程序修改处1】*/
	bl	 Vectors_Init  
    6c82:	f001 fce1 	bl	8648 <Vectors_Init>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:175
  //  bl    __START
   bl main
    6c86:	f001 fd27 	bl	86d8 <main>
    6c8a:	0000      	.short	0x0000
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:130
    ldr    r1, =__etext
    6c8c:	00009380 	.word	0x00009380
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c90:	20000400 	.word	0x20000400
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c94:	20000408 	.word	0x20000408
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:154
    ldr r1, =__bss_start__
    6c98:	20000408 	.word	0x20000408
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c9c:	20000830 	.word	0x20000830

00006ca0 <ADC0_IRQHandler>:
I2C0_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:186
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:    
    //ldr	r0, =DefaultISR   //误中断，进入无限循环
    //bx r0
       push  {lr}        //【20200326】WYH改，误中断，回原处
    6ca0:	b500      	push	{lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:187
       nop
    6ca2:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcs/startup_MKL36Z4.S:188
       pop   {pc}
    6ca4:	bd00      	pop	{pc}
    6ca6:	46c0      	nop			; (mov r8, r8)

00006ca8 <__udivsi3>:
__udivsi3():
    6ca8:	2200      	movs	r2, #0
    6caa:	0843      	lsrs	r3, r0, #1
    6cac:	428b      	cmp	r3, r1
    6cae:	d374      	bcc.n	6d9a <__udivsi3+0xf2>
    6cb0:	0903      	lsrs	r3, r0, #4
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d35f      	bcc.n	6d76 <__udivsi3+0xce>
    6cb6:	0a03      	lsrs	r3, r0, #8
    6cb8:	428b      	cmp	r3, r1
    6cba:	d344      	bcc.n	6d46 <__udivsi3+0x9e>
    6cbc:	0b03      	lsrs	r3, r0, #12
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d328      	bcc.n	6d14 <__udivsi3+0x6c>
    6cc2:	0c03      	lsrs	r3, r0, #16
    6cc4:	428b      	cmp	r3, r1
    6cc6:	d30d      	bcc.n	6ce4 <__udivsi3+0x3c>
    6cc8:	22ff      	movs	r2, #255	; 0xff
    6cca:	0209      	lsls	r1, r1, #8
    6ccc:	ba12      	rev	r2, r2
    6cce:	0c03      	lsrs	r3, r0, #16
    6cd0:	428b      	cmp	r3, r1
    6cd2:	d302      	bcc.n	6cda <__udivsi3+0x32>
    6cd4:	1212      	asrs	r2, r2, #8
    6cd6:	0209      	lsls	r1, r1, #8
    6cd8:	d065      	beq.n	6da6 <__udivsi3+0xfe>
    6cda:	0b03      	lsrs	r3, r0, #12
    6cdc:	428b      	cmp	r3, r1
    6cde:	d319      	bcc.n	6d14 <__udivsi3+0x6c>
    6ce0:	e000      	b.n	6ce4 <__udivsi3+0x3c>
    6ce2:	0a09      	lsrs	r1, r1, #8
    6ce4:	0bc3      	lsrs	r3, r0, #15
    6ce6:	428b      	cmp	r3, r1
    6ce8:	d301      	bcc.n	6cee <__udivsi3+0x46>
    6cea:	03cb      	lsls	r3, r1, #15
    6cec:	1ac0      	subs	r0, r0, r3
    6cee:	4152      	adcs	r2, r2
    6cf0:	0b83      	lsrs	r3, r0, #14
    6cf2:	428b      	cmp	r3, r1
    6cf4:	d301      	bcc.n	6cfa <__udivsi3+0x52>
    6cf6:	038b      	lsls	r3, r1, #14
    6cf8:	1ac0      	subs	r0, r0, r3
    6cfa:	4152      	adcs	r2, r2
    6cfc:	0b43      	lsrs	r3, r0, #13
    6cfe:	428b      	cmp	r3, r1
    6d00:	d301      	bcc.n	6d06 <__udivsi3+0x5e>
    6d02:	034b      	lsls	r3, r1, #13
    6d04:	1ac0      	subs	r0, r0, r3
    6d06:	4152      	adcs	r2, r2
    6d08:	0b03      	lsrs	r3, r0, #12
    6d0a:	428b      	cmp	r3, r1
    6d0c:	d301      	bcc.n	6d12 <__udivsi3+0x6a>
    6d0e:	030b      	lsls	r3, r1, #12
    6d10:	1ac0      	subs	r0, r0, r3
    6d12:	4152      	adcs	r2, r2
    6d14:	0ac3      	lsrs	r3, r0, #11
    6d16:	428b      	cmp	r3, r1
    6d18:	d301      	bcc.n	6d1e <__udivsi3+0x76>
    6d1a:	02cb      	lsls	r3, r1, #11
    6d1c:	1ac0      	subs	r0, r0, r3
    6d1e:	4152      	adcs	r2, r2
    6d20:	0a83      	lsrs	r3, r0, #10
    6d22:	428b      	cmp	r3, r1
    6d24:	d301      	bcc.n	6d2a <__udivsi3+0x82>
    6d26:	028b      	lsls	r3, r1, #10
    6d28:	1ac0      	subs	r0, r0, r3
    6d2a:	4152      	adcs	r2, r2
    6d2c:	0a43      	lsrs	r3, r0, #9
    6d2e:	428b      	cmp	r3, r1
    6d30:	d301      	bcc.n	6d36 <__udivsi3+0x8e>
    6d32:	024b      	lsls	r3, r1, #9
    6d34:	1ac0      	subs	r0, r0, r3
    6d36:	4152      	adcs	r2, r2
    6d38:	0a03      	lsrs	r3, r0, #8
    6d3a:	428b      	cmp	r3, r1
    6d3c:	d301      	bcc.n	6d42 <__udivsi3+0x9a>
    6d3e:	020b      	lsls	r3, r1, #8
    6d40:	1ac0      	subs	r0, r0, r3
    6d42:	4152      	adcs	r2, r2
    6d44:	d2cd      	bcs.n	6ce2 <__udivsi3+0x3a>
    6d46:	09c3      	lsrs	r3, r0, #7
    6d48:	428b      	cmp	r3, r1
    6d4a:	d301      	bcc.n	6d50 <__udivsi3+0xa8>
    6d4c:	01cb      	lsls	r3, r1, #7
    6d4e:	1ac0      	subs	r0, r0, r3
    6d50:	4152      	adcs	r2, r2
    6d52:	0983      	lsrs	r3, r0, #6
    6d54:	428b      	cmp	r3, r1
    6d56:	d301      	bcc.n	6d5c <__udivsi3+0xb4>
    6d58:	018b      	lsls	r3, r1, #6
    6d5a:	1ac0      	subs	r0, r0, r3
    6d5c:	4152      	adcs	r2, r2
    6d5e:	0943      	lsrs	r3, r0, #5
    6d60:	428b      	cmp	r3, r1
    6d62:	d301      	bcc.n	6d68 <__udivsi3+0xc0>
    6d64:	014b      	lsls	r3, r1, #5
    6d66:	1ac0      	subs	r0, r0, r3
    6d68:	4152      	adcs	r2, r2
    6d6a:	0903      	lsrs	r3, r0, #4
    6d6c:	428b      	cmp	r3, r1
    6d6e:	d301      	bcc.n	6d74 <__udivsi3+0xcc>
    6d70:	010b      	lsls	r3, r1, #4
    6d72:	1ac0      	subs	r0, r0, r3
    6d74:	4152      	adcs	r2, r2
    6d76:	08c3      	lsrs	r3, r0, #3
    6d78:	428b      	cmp	r3, r1
    6d7a:	d301      	bcc.n	6d80 <__udivsi3+0xd8>
    6d7c:	00cb      	lsls	r3, r1, #3
    6d7e:	1ac0      	subs	r0, r0, r3
    6d80:	4152      	adcs	r2, r2
    6d82:	0883      	lsrs	r3, r0, #2
    6d84:	428b      	cmp	r3, r1
    6d86:	d301      	bcc.n	6d8c <__udivsi3+0xe4>
    6d88:	008b      	lsls	r3, r1, #2
    6d8a:	1ac0      	subs	r0, r0, r3
    6d8c:	4152      	adcs	r2, r2
    6d8e:	0843      	lsrs	r3, r0, #1
    6d90:	428b      	cmp	r3, r1
    6d92:	d301      	bcc.n	6d98 <__udivsi3+0xf0>
    6d94:	004b      	lsls	r3, r1, #1
    6d96:	1ac0      	subs	r0, r0, r3
    6d98:	4152      	adcs	r2, r2
    6d9a:	1a41      	subs	r1, r0, r1
    6d9c:	d200      	bcs.n	6da0 <__udivsi3+0xf8>
    6d9e:	4601      	mov	r1, r0
    6da0:	4152      	adcs	r2, r2
    6da2:	4610      	mov	r0, r2
    6da4:	4770      	bx	lr
    6da6:	e7ff      	b.n	6da8 <__udivsi3+0x100>
    6da8:	b501      	push	{r0, lr}
    6daa:	2000      	movs	r0, #0
    6dac:	f000 f8f0 	bl	6f90 <__aeabi_idiv0>
    6db0:	bd02      	pop	{r1, pc}
    6db2:	46c0      	nop			; (mov r8, r8)

00006db4 <__aeabi_uidivmod>:
__aeabi_uidivmod():
    6db4:	2900      	cmp	r1, #0
    6db6:	d0f7      	beq.n	6da8 <__udivsi3+0x100>
    6db8:	e776      	b.n	6ca8 <__udivsi3>
    6dba:	4770      	bx	lr

00006dbc <__divsi3>:
__divsi3():
    6dbc:	4603      	mov	r3, r0
    6dbe:	430b      	orrs	r3, r1
    6dc0:	d47f      	bmi.n	6ec2 <__divsi3+0x106>
    6dc2:	2200      	movs	r2, #0
    6dc4:	0843      	lsrs	r3, r0, #1
    6dc6:	428b      	cmp	r3, r1
    6dc8:	d374      	bcc.n	6eb4 <__divsi3+0xf8>
    6dca:	0903      	lsrs	r3, r0, #4
    6dcc:	428b      	cmp	r3, r1
    6dce:	d35f      	bcc.n	6e90 <__divsi3+0xd4>
    6dd0:	0a03      	lsrs	r3, r0, #8
    6dd2:	428b      	cmp	r3, r1
    6dd4:	d344      	bcc.n	6e60 <__divsi3+0xa4>
    6dd6:	0b03      	lsrs	r3, r0, #12
    6dd8:	428b      	cmp	r3, r1
    6dda:	d328      	bcc.n	6e2e <__divsi3+0x72>
    6ddc:	0c03      	lsrs	r3, r0, #16
    6dde:	428b      	cmp	r3, r1
    6de0:	d30d      	bcc.n	6dfe <__divsi3+0x42>
    6de2:	22ff      	movs	r2, #255	; 0xff
    6de4:	0209      	lsls	r1, r1, #8
    6de6:	ba12      	rev	r2, r2
    6de8:	0c03      	lsrs	r3, r0, #16
    6dea:	428b      	cmp	r3, r1
    6dec:	d302      	bcc.n	6df4 <__divsi3+0x38>
    6dee:	1212      	asrs	r2, r2, #8
    6df0:	0209      	lsls	r1, r1, #8
    6df2:	d065      	beq.n	6ec0 <__divsi3+0x104>
    6df4:	0b03      	lsrs	r3, r0, #12
    6df6:	428b      	cmp	r3, r1
    6df8:	d319      	bcc.n	6e2e <__divsi3+0x72>
    6dfa:	e000      	b.n	6dfe <__divsi3+0x42>
    6dfc:	0a09      	lsrs	r1, r1, #8
    6dfe:	0bc3      	lsrs	r3, r0, #15
    6e00:	428b      	cmp	r3, r1
    6e02:	d301      	bcc.n	6e08 <__divsi3+0x4c>
    6e04:	03cb      	lsls	r3, r1, #15
    6e06:	1ac0      	subs	r0, r0, r3
    6e08:	4152      	adcs	r2, r2
    6e0a:	0b83      	lsrs	r3, r0, #14
    6e0c:	428b      	cmp	r3, r1
    6e0e:	d301      	bcc.n	6e14 <__divsi3+0x58>
    6e10:	038b      	lsls	r3, r1, #14
    6e12:	1ac0      	subs	r0, r0, r3
    6e14:	4152      	adcs	r2, r2
    6e16:	0b43      	lsrs	r3, r0, #13
    6e18:	428b      	cmp	r3, r1
    6e1a:	d301      	bcc.n	6e20 <__divsi3+0x64>
    6e1c:	034b      	lsls	r3, r1, #13
    6e1e:	1ac0      	subs	r0, r0, r3
    6e20:	4152      	adcs	r2, r2
    6e22:	0b03      	lsrs	r3, r0, #12
    6e24:	428b      	cmp	r3, r1
    6e26:	d301      	bcc.n	6e2c <__divsi3+0x70>
    6e28:	030b      	lsls	r3, r1, #12
    6e2a:	1ac0      	subs	r0, r0, r3
    6e2c:	4152      	adcs	r2, r2
    6e2e:	0ac3      	lsrs	r3, r0, #11
    6e30:	428b      	cmp	r3, r1
    6e32:	d301      	bcc.n	6e38 <__divsi3+0x7c>
    6e34:	02cb      	lsls	r3, r1, #11
    6e36:	1ac0      	subs	r0, r0, r3
    6e38:	4152      	adcs	r2, r2
    6e3a:	0a83      	lsrs	r3, r0, #10
    6e3c:	428b      	cmp	r3, r1
    6e3e:	d301      	bcc.n	6e44 <__divsi3+0x88>
    6e40:	028b      	lsls	r3, r1, #10
    6e42:	1ac0      	subs	r0, r0, r3
    6e44:	4152      	adcs	r2, r2
    6e46:	0a43      	lsrs	r3, r0, #9
    6e48:	428b      	cmp	r3, r1
    6e4a:	d301      	bcc.n	6e50 <__divsi3+0x94>
    6e4c:	024b      	lsls	r3, r1, #9
    6e4e:	1ac0      	subs	r0, r0, r3
    6e50:	4152      	adcs	r2, r2
    6e52:	0a03      	lsrs	r3, r0, #8
    6e54:	428b      	cmp	r3, r1
    6e56:	d301      	bcc.n	6e5c <__divsi3+0xa0>
    6e58:	020b      	lsls	r3, r1, #8
    6e5a:	1ac0      	subs	r0, r0, r3
    6e5c:	4152      	adcs	r2, r2
    6e5e:	d2cd      	bcs.n	6dfc <__divsi3+0x40>
    6e60:	09c3      	lsrs	r3, r0, #7
    6e62:	428b      	cmp	r3, r1
    6e64:	d301      	bcc.n	6e6a <__divsi3+0xae>
    6e66:	01cb      	lsls	r3, r1, #7
    6e68:	1ac0      	subs	r0, r0, r3
    6e6a:	4152      	adcs	r2, r2
    6e6c:	0983      	lsrs	r3, r0, #6
    6e6e:	428b      	cmp	r3, r1
    6e70:	d301      	bcc.n	6e76 <__divsi3+0xba>
    6e72:	018b      	lsls	r3, r1, #6
    6e74:	1ac0      	subs	r0, r0, r3
    6e76:	4152      	adcs	r2, r2
    6e78:	0943      	lsrs	r3, r0, #5
    6e7a:	428b      	cmp	r3, r1
    6e7c:	d301      	bcc.n	6e82 <__divsi3+0xc6>
    6e7e:	014b      	lsls	r3, r1, #5
    6e80:	1ac0      	subs	r0, r0, r3
    6e82:	4152      	adcs	r2, r2
    6e84:	0903      	lsrs	r3, r0, #4
    6e86:	428b      	cmp	r3, r1
    6e88:	d301      	bcc.n	6e8e <__divsi3+0xd2>
    6e8a:	010b      	lsls	r3, r1, #4
    6e8c:	1ac0      	subs	r0, r0, r3
    6e8e:	4152      	adcs	r2, r2
    6e90:	08c3      	lsrs	r3, r0, #3
    6e92:	428b      	cmp	r3, r1
    6e94:	d301      	bcc.n	6e9a <__divsi3+0xde>
    6e96:	00cb      	lsls	r3, r1, #3
    6e98:	1ac0      	subs	r0, r0, r3
    6e9a:	4152      	adcs	r2, r2
    6e9c:	0883      	lsrs	r3, r0, #2
    6e9e:	428b      	cmp	r3, r1
    6ea0:	d301      	bcc.n	6ea6 <__divsi3+0xea>
    6ea2:	008b      	lsls	r3, r1, #2
    6ea4:	1ac0      	subs	r0, r0, r3
    6ea6:	4152      	adcs	r2, r2
    6ea8:	0843      	lsrs	r3, r0, #1
    6eaa:	428b      	cmp	r3, r1
    6eac:	d301      	bcc.n	6eb2 <__divsi3+0xf6>
    6eae:	004b      	lsls	r3, r1, #1
    6eb0:	1ac0      	subs	r0, r0, r3
    6eb2:	4152      	adcs	r2, r2
    6eb4:	1a41      	subs	r1, r0, r1
    6eb6:	d200      	bcs.n	6eba <__divsi3+0xfe>
    6eb8:	4601      	mov	r1, r0
    6eba:	4152      	adcs	r2, r2
    6ebc:	4610      	mov	r0, r2
    6ebe:	4770      	bx	lr
    6ec0:	e05d      	b.n	6f7e <__divsi3+0x1c2>
    6ec2:	0fca      	lsrs	r2, r1, #31
    6ec4:	d000      	beq.n	6ec8 <__divsi3+0x10c>
    6ec6:	4249      	negs	r1, r1
    6ec8:	1003      	asrs	r3, r0, #32
    6eca:	d300      	bcc.n	6ece <__divsi3+0x112>
    6ecc:	4240      	negs	r0, r0
    6ece:	4053      	eors	r3, r2
    6ed0:	2200      	movs	r2, #0
    6ed2:	469c      	mov	ip, r3
    6ed4:	0903      	lsrs	r3, r0, #4
    6ed6:	428b      	cmp	r3, r1
    6ed8:	d32d      	bcc.n	6f36 <__divsi3+0x17a>
    6eda:	0a03      	lsrs	r3, r0, #8
    6edc:	428b      	cmp	r3, r1
    6ede:	d312      	bcc.n	6f06 <__divsi3+0x14a>
    6ee0:	22fc      	movs	r2, #252	; 0xfc
    6ee2:	0189      	lsls	r1, r1, #6
    6ee4:	ba12      	rev	r2, r2
    6ee6:	0a03      	lsrs	r3, r0, #8
    6ee8:	428b      	cmp	r3, r1
    6eea:	d30c      	bcc.n	6f06 <__divsi3+0x14a>
    6eec:	0189      	lsls	r1, r1, #6
    6eee:	1192      	asrs	r2, r2, #6
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d308      	bcc.n	6f06 <__divsi3+0x14a>
    6ef4:	0189      	lsls	r1, r1, #6
    6ef6:	1192      	asrs	r2, r2, #6
    6ef8:	428b      	cmp	r3, r1
    6efa:	d304      	bcc.n	6f06 <__divsi3+0x14a>
    6efc:	0189      	lsls	r1, r1, #6
    6efe:	d03a      	beq.n	6f76 <__divsi3+0x1ba>
    6f00:	1192      	asrs	r2, r2, #6
    6f02:	e000      	b.n	6f06 <__divsi3+0x14a>
    6f04:	0989      	lsrs	r1, r1, #6
    6f06:	09c3      	lsrs	r3, r0, #7
    6f08:	428b      	cmp	r3, r1
    6f0a:	d301      	bcc.n	6f10 <__divsi3+0x154>
    6f0c:	01cb      	lsls	r3, r1, #7
    6f0e:	1ac0      	subs	r0, r0, r3
    6f10:	4152      	adcs	r2, r2
    6f12:	0983      	lsrs	r3, r0, #6
    6f14:	428b      	cmp	r3, r1
    6f16:	d301      	bcc.n	6f1c <__divsi3+0x160>
    6f18:	018b      	lsls	r3, r1, #6
    6f1a:	1ac0      	subs	r0, r0, r3
    6f1c:	4152      	adcs	r2, r2
    6f1e:	0943      	lsrs	r3, r0, #5
    6f20:	428b      	cmp	r3, r1
    6f22:	d301      	bcc.n	6f28 <__divsi3+0x16c>
    6f24:	014b      	lsls	r3, r1, #5
    6f26:	1ac0      	subs	r0, r0, r3
    6f28:	4152      	adcs	r2, r2
    6f2a:	0903      	lsrs	r3, r0, #4
    6f2c:	428b      	cmp	r3, r1
    6f2e:	d301      	bcc.n	6f34 <__divsi3+0x178>
    6f30:	010b      	lsls	r3, r1, #4
    6f32:	1ac0      	subs	r0, r0, r3
    6f34:	4152      	adcs	r2, r2
    6f36:	08c3      	lsrs	r3, r0, #3
    6f38:	428b      	cmp	r3, r1
    6f3a:	d301      	bcc.n	6f40 <__divsi3+0x184>
    6f3c:	00cb      	lsls	r3, r1, #3
    6f3e:	1ac0      	subs	r0, r0, r3
    6f40:	4152      	adcs	r2, r2
    6f42:	0883      	lsrs	r3, r0, #2
    6f44:	428b      	cmp	r3, r1
    6f46:	d301      	bcc.n	6f4c <__divsi3+0x190>
    6f48:	008b      	lsls	r3, r1, #2
    6f4a:	1ac0      	subs	r0, r0, r3
    6f4c:	4152      	adcs	r2, r2
    6f4e:	d2d9      	bcs.n	6f04 <__divsi3+0x148>
    6f50:	0843      	lsrs	r3, r0, #1
    6f52:	428b      	cmp	r3, r1
    6f54:	d301      	bcc.n	6f5a <__divsi3+0x19e>
    6f56:	004b      	lsls	r3, r1, #1
    6f58:	1ac0      	subs	r0, r0, r3
    6f5a:	4152      	adcs	r2, r2
    6f5c:	1a41      	subs	r1, r0, r1
    6f5e:	d200      	bcs.n	6f62 <__divsi3+0x1a6>
    6f60:	4601      	mov	r1, r0
    6f62:	4663      	mov	r3, ip
    6f64:	4152      	adcs	r2, r2
    6f66:	105b      	asrs	r3, r3, #1
    6f68:	4610      	mov	r0, r2
    6f6a:	d301      	bcc.n	6f70 <__divsi3+0x1b4>
    6f6c:	4240      	negs	r0, r0
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d500      	bpl.n	6f74 <__divsi3+0x1b8>
    6f72:	4249      	negs	r1, r1
    6f74:	4770      	bx	lr
    6f76:	4663      	mov	r3, ip
    6f78:	105b      	asrs	r3, r3, #1
    6f7a:	d300      	bcc.n	6f7e <__divsi3+0x1c2>
    6f7c:	4240      	negs	r0, r0
    6f7e:	b501      	push	{r0, lr}
    6f80:	2000      	movs	r0, #0
    6f82:	f000 f805 	bl	6f90 <__aeabi_idiv0>
    6f86:	bd02      	pop	{r1, pc}

00006f88 <__aeabi_idivmod>:
__aeabi_idivmod():
    6f88:	2900      	cmp	r1, #0
    6f8a:	d0f8      	beq.n	6f7e <__divsi3+0x1c2>
    6f8c:	e716      	b.n	6dbc <__divsi3>
    6f8e:	4770      	bx	lr

00006f90 <__aeabi_idiv0>:
__aeabi_ldiv0():
    6f90:	4770      	bx	lr
    6f92:	46c0      	nop			; (mov r8, r8)

00006f94 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
    6f94:	4684      	mov	ip, r0
    6f96:	1c10      	adds	r0, r2, #0
    6f98:	4662      	mov	r2, ip
    6f9a:	468c      	mov	ip, r1
    6f9c:	1c19      	adds	r1, r3, #0
    6f9e:	4663      	mov	r3, ip
    6fa0:	e000      	b.n	6fa4 <__aeabi_cdcmpeq>
    6fa2:	46c0      	nop			; (mov r8, r8)

00006fa4 <__aeabi_cdcmpeq>:
    6fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6fa6:	f000 fa09 	bl	73bc <__ledf2>
    6faa:	2800      	cmp	r0, #0
    6fac:	d401      	bmi.n	6fb2 <__aeabi_cdcmpeq+0xe>
    6fae:	2100      	movs	r1, #0
    6fb0:	42c8      	cmn	r0, r1
    6fb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006fb4 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
    6fb4:	b510      	push	{r4, lr}
    6fb6:	f000 f953 	bl	7260 <__eqdf2>
    6fba:	4240      	negs	r0, r0
    6fbc:	3001      	adds	r0, #1
    6fbe:	bd10      	pop	{r4, pc}

00006fc0 <__aeabi_dcmplt>:
__aeabi_dcmplt():
    6fc0:	b510      	push	{r4, lr}
    6fc2:	f000 f9fb 	bl	73bc <__ledf2>
    6fc6:	2800      	cmp	r0, #0
    6fc8:	db01      	blt.n	6fce <__aeabi_dcmplt+0xe>
    6fca:	2000      	movs	r0, #0
    6fcc:	bd10      	pop	{r4, pc}
    6fce:	2001      	movs	r0, #1
    6fd0:	bd10      	pop	{r4, pc}
    6fd2:	46c0      	nop			; (mov r8, r8)

00006fd4 <__aeabi_dcmple>:
__aeabi_dcmple():
    6fd4:	b510      	push	{r4, lr}
    6fd6:	f000 f9f1 	bl	73bc <__ledf2>
    6fda:	2800      	cmp	r0, #0
    6fdc:	dd01      	ble.n	6fe2 <__aeabi_dcmple+0xe>
    6fde:	2000      	movs	r0, #0
    6fe0:	bd10      	pop	{r4, pc}
    6fe2:	2001      	movs	r0, #1
    6fe4:	bd10      	pop	{r4, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)

00006fe8 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
    6fe8:	b510      	push	{r4, lr}
    6fea:	f000 f975 	bl	72d8 <__gedf2>
    6fee:	2800      	cmp	r0, #0
    6ff0:	dc01      	bgt.n	6ff6 <__aeabi_dcmpgt+0xe>
    6ff2:	2000      	movs	r0, #0
    6ff4:	bd10      	pop	{r4, pc}
    6ff6:	2001      	movs	r0, #1
    6ff8:	bd10      	pop	{r4, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)

00006ffc <__aeabi_dcmpge>:
__aeabi_dcmpge():
    6ffc:	b510      	push	{r4, lr}
    6ffe:	f000 f96b 	bl	72d8 <__gedf2>
    7002:	2800      	cmp	r0, #0
    7004:	da01      	bge.n	700a <__aeabi_dcmpge+0xe>
    7006:	2000      	movs	r0, #0
    7008:	bd10      	pop	{r4, pc}
    700a:	2001      	movs	r0, #1
    700c:	bd10      	pop	{r4, pc}
    700e:	46c0      	nop			; (mov r8, r8)

00007010 <__aeabi_uldivmod>:
__aeabi_uldivmod():
    7010:	2b00      	cmp	r3, #0
    7012:	d111      	bne.n	7038 <__aeabi_uldivmod+0x28>
    7014:	2a00      	cmp	r2, #0
    7016:	d10f      	bne.n	7038 <__aeabi_uldivmod+0x28>
    7018:	2900      	cmp	r1, #0
    701a:	d100      	bne.n	701e <__aeabi_uldivmod+0xe>
    701c:	2800      	cmp	r0, #0
    701e:	d002      	beq.n	7026 <__aeabi_uldivmod+0x16>
    7020:	2100      	movs	r1, #0
    7022:	43c9      	mvns	r1, r1
    7024:	1c08      	adds	r0, r1, #0
    7026:	b407      	push	{r0, r1, r2}
    7028:	4802      	ldr	r0, [pc, #8]	; (7034 <__aeabi_uldivmod+0x24>)
    702a:	a102      	add	r1, pc, #8	; (adr r1, 7034 <__aeabi_uldivmod+0x24>)
    702c:	1840      	adds	r0, r0, r1
    702e:	9002      	str	r0, [sp, #8]
    7030:	bd03      	pop	{r0, r1, pc}
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	ffffff5d 	.word	0xffffff5d
    7038:	b403      	push	{r0, r1}
    703a:	4668      	mov	r0, sp
    703c:	b501      	push	{r0, lr}
    703e:	9802      	ldr	r0, [sp, #8]
    7040:	f000 f842 	bl	70c8 <__udivmoddi4>
    7044:	9b01      	ldr	r3, [sp, #4]
    7046:	469e      	mov	lr, r3
    7048:	b002      	add	sp, #8
    704a:	bc0c      	pop	{r2, r3}
    704c:	4770      	bx	lr
    704e:	46c0      	nop			; (mov r8, r8)

00007050 <__aeabi_d2uiz>:
__fixunsdfsi():
    7050:	b570      	push	{r4, r5, r6, lr}
    7052:	2200      	movs	r2, #0
    7054:	4b0c      	ldr	r3, [pc, #48]	; (7088 <__aeabi_d2uiz+0x38>)
    7056:	0004      	movs	r4, r0
    7058:	000d      	movs	r5, r1
    705a:	f7ff ffcf 	bl	6ffc <__aeabi_dcmpge>
    705e:	2800      	cmp	r0, #0
    7060:	d104      	bne.n	706c <__aeabi_d2uiz+0x1c>
    7062:	0020      	movs	r0, r4
    7064:	0029      	movs	r1, r5
    7066:	f001 f817 	bl	8098 <__aeabi_d2iz>
    706a:	bd70      	pop	{r4, r5, r6, pc}
    706c:	4b06      	ldr	r3, [pc, #24]	; (7088 <__aeabi_d2uiz+0x38>)
    706e:	2200      	movs	r2, #0
    7070:	0020      	movs	r0, r4
    7072:	0029      	movs	r1, r5
    7074:	f000 fc7e 	bl	7974 <__aeabi_dsub>
    7078:	f001 f80e 	bl	8098 <__aeabi_d2iz>
    707c:	2380      	movs	r3, #128	; 0x80
    707e:	061b      	lsls	r3, r3, #24
    7080:	469c      	mov	ip, r3
    7082:	4460      	add	r0, ip
    7084:	e7f1      	b.n	706a <__aeabi_d2uiz+0x1a>
    7086:	46c0      	nop			; (mov r8, r8)
    7088:	41e00000 	.word	0x41e00000

0000708c <__aeabi_d2ulz>:
__aeabi_d2ulz():
    708c:	b570      	push	{r4, r5, r6, lr}
    708e:	2200      	movs	r2, #0
    7090:	4b0b      	ldr	r3, [pc, #44]	; (70c0 <__aeabi_d2ulz+0x34>)
    7092:	000d      	movs	r5, r1
    7094:	0004      	movs	r4, r0
    7096:	f000 fa01 	bl	749c <__aeabi_dmul>
    709a:	f7ff ffd9 	bl	7050 <__aeabi_d2uiz>
    709e:	0006      	movs	r6, r0
    70a0:	f001 f830 	bl	8104 <__aeabi_ui2d>
    70a4:	2200      	movs	r2, #0
    70a6:	4b07      	ldr	r3, [pc, #28]	; (70c4 <__aeabi_d2ulz+0x38>)
    70a8:	f000 f9f8 	bl	749c <__aeabi_dmul>
    70ac:	0002      	movs	r2, r0
    70ae:	000b      	movs	r3, r1
    70b0:	0020      	movs	r0, r4
    70b2:	0029      	movs	r1, r5
    70b4:	f000 fc5e 	bl	7974 <__aeabi_dsub>
    70b8:	f7ff ffca 	bl	7050 <__aeabi_d2uiz>
    70bc:	0031      	movs	r1, r6
    70be:	bd70      	pop	{r4, r5, r6, pc}
    70c0:	3df00000 	.word	0x3df00000
    70c4:	41f00000 	.word	0x41f00000

000070c8 <__udivmoddi4>:
__udivmoddi4():
    70c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ca:	4657      	mov	r7, sl
    70cc:	464e      	mov	r6, r9
    70ce:	4645      	mov	r5, r8
    70d0:	46de      	mov	lr, fp
    70d2:	b5e0      	push	{r5, r6, r7, lr}
    70d4:	0004      	movs	r4, r0
    70d6:	000d      	movs	r5, r1
    70d8:	4692      	mov	sl, r2
    70da:	4699      	mov	r9, r3
    70dc:	b083      	sub	sp, #12
    70de:	428b      	cmp	r3, r1
    70e0:	d830      	bhi.n	7144 <__udivmoddi4+0x7c>
    70e2:	d02d      	beq.n	7140 <__udivmoddi4+0x78>
    70e4:	4649      	mov	r1, r9
    70e6:	4650      	mov	r0, sl
    70e8:	f001 f850 	bl	818c <__clzdi2>
    70ec:	0029      	movs	r1, r5
    70ee:	0006      	movs	r6, r0
    70f0:	0020      	movs	r0, r4
    70f2:	f001 f84b 	bl	818c <__clzdi2>
    70f6:	1a33      	subs	r3, r6, r0
    70f8:	4698      	mov	r8, r3
    70fa:	3b20      	subs	r3, #32
    70fc:	469b      	mov	fp, r3
    70fe:	d433      	bmi.n	7168 <__udivmoddi4+0xa0>
    7100:	465a      	mov	r2, fp
    7102:	4653      	mov	r3, sl
    7104:	4093      	lsls	r3, r2
    7106:	4642      	mov	r2, r8
    7108:	001f      	movs	r7, r3
    710a:	4653      	mov	r3, sl
    710c:	4093      	lsls	r3, r2
    710e:	001e      	movs	r6, r3
    7110:	42af      	cmp	r7, r5
    7112:	d83a      	bhi.n	718a <__udivmoddi4+0xc2>
    7114:	42af      	cmp	r7, r5
    7116:	d100      	bne.n	711a <__udivmoddi4+0x52>
    7118:	e078      	b.n	720c <__udivmoddi4+0x144>
    711a:	465b      	mov	r3, fp
    711c:	1ba4      	subs	r4, r4, r6
    711e:	41bd      	sbcs	r5, r7
    7120:	2b00      	cmp	r3, #0
    7122:	da00      	bge.n	7126 <__udivmoddi4+0x5e>
    7124:	e075      	b.n	7212 <__udivmoddi4+0x14a>
    7126:	2200      	movs	r2, #0
    7128:	2300      	movs	r3, #0
    712a:	9200      	str	r2, [sp, #0]
    712c:	9301      	str	r3, [sp, #4]
    712e:	2301      	movs	r3, #1
    7130:	465a      	mov	r2, fp
    7132:	4093      	lsls	r3, r2
    7134:	9301      	str	r3, [sp, #4]
    7136:	2301      	movs	r3, #1
    7138:	4642      	mov	r2, r8
    713a:	4093      	lsls	r3, r2
    713c:	9300      	str	r3, [sp, #0]
    713e:	e028      	b.n	7192 <__udivmoddi4+0xca>
    7140:	4282      	cmp	r2, r0
    7142:	d9cf      	bls.n	70e4 <__udivmoddi4+0x1c>
    7144:	2200      	movs	r2, #0
    7146:	2300      	movs	r3, #0
    7148:	9200      	str	r2, [sp, #0]
    714a:	9301      	str	r3, [sp, #4]
    714c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    714e:	2b00      	cmp	r3, #0
    7150:	d001      	beq.n	7156 <__udivmoddi4+0x8e>
    7152:	601c      	str	r4, [r3, #0]
    7154:	605d      	str	r5, [r3, #4]
    7156:	9800      	ldr	r0, [sp, #0]
    7158:	9901      	ldr	r1, [sp, #4]
    715a:	b003      	add	sp, #12
    715c:	bcf0      	pop	{r4, r5, r6, r7}
    715e:	46bb      	mov	fp, r7
    7160:	46b2      	mov	sl, r6
    7162:	46a9      	mov	r9, r5
    7164:	46a0      	mov	r8, r4
    7166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7168:	4642      	mov	r2, r8
    716a:	2320      	movs	r3, #32
    716c:	1a9b      	subs	r3, r3, r2
    716e:	4652      	mov	r2, sl
    7170:	40da      	lsrs	r2, r3
    7172:	4641      	mov	r1, r8
    7174:	0013      	movs	r3, r2
    7176:	464a      	mov	r2, r9
    7178:	408a      	lsls	r2, r1
    717a:	0017      	movs	r7, r2
    717c:	4642      	mov	r2, r8
    717e:	431f      	orrs	r7, r3
    7180:	4653      	mov	r3, sl
    7182:	4093      	lsls	r3, r2
    7184:	001e      	movs	r6, r3
    7186:	42af      	cmp	r7, r5
    7188:	d9c4      	bls.n	7114 <__udivmoddi4+0x4c>
    718a:	2200      	movs	r2, #0
    718c:	2300      	movs	r3, #0
    718e:	9200      	str	r2, [sp, #0]
    7190:	9301      	str	r3, [sp, #4]
    7192:	4643      	mov	r3, r8
    7194:	2b00      	cmp	r3, #0
    7196:	d0d9      	beq.n	714c <__udivmoddi4+0x84>
    7198:	07fb      	lsls	r3, r7, #31
    719a:	0872      	lsrs	r2, r6, #1
    719c:	431a      	orrs	r2, r3
    719e:	4646      	mov	r6, r8
    71a0:	087b      	lsrs	r3, r7, #1
    71a2:	e00e      	b.n	71c2 <__udivmoddi4+0xfa>
    71a4:	42ab      	cmp	r3, r5
    71a6:	d101      	bne.n	71ac <__udivmoddi4+0xe4>
    71a8:	42a2      	cmp	r2, r4
    71aa:	d80c      	bhi.n	71c6 <__udivmoddi4+0xfe>
    71ac:	1aa4      	subs	r4, r4, r2
    71ae:	419d      	sbcs	r5, r3
    71b0:	2001      	movs	r0, #1
    71b2:	1924      	adds	r4, r4, r4
    71b4:	416d      	adcs	r5, r5
    71b6:	2100      	movs	r1, #0
    71b8:	3e01      	subs	r6, #1
    71ba:	1824      	adds	r4, r4, r0
    71bc:	414d      	adcs	r5, r1
    71be:	2e00      	cmp	r6, #0
    71c0:	d006      	beq.n	71d0 <__udivmoddi4+0x108>
    71c2:	42ab      	cmp	r3, r5
    71c4:	d9ee      	bls.n	71a4 <__udivmoddi4+0xdc>
    71c6:	3e01      	subs	r6, #1
    71c8:	1924      	adds	r4, r4, r4
    71ca:	416d      	adcs	r5, r5
    71cc:	2e00      	cmp	r6, #0
    71ce:	d1f8      	bne.n	71c2 <__udivmoddi4+0xfa>
    71d0:	9800      	ldr	r0, [sp, #0]
    71d2:	9901      	ldr	r1, [sp, #4]
    71d4:	465b      	mov	r3, fp
    71d6:	1900      	adds	r0, r0, r4
    71d8:	4169      	adcs	r1, r5
    71da:	2b00      	cmp	r3, #0
    71dc:	db24      	blt.n	7228 <__udivmoddi4+0x160>
    71de:	002b      	movs	r3, r5
    71e0:	465a      	mov	r2, fp
    71e2:	4644      	mov	r4, r8
    71e4:	40d3      	lsrs	r3, r2
    71e6:	002a      	movs	r2, r5
    71e8:	40e2      	lsrs	r2, r4
    71ea:	001c      	movs	r4, r3
    71ec:	465b      	mov	r3, fp
    71ee:	0015      	movs	r5, r2
    71f0:	2b00      	cmp	r3, #0
    71f2:	db2a      	blt.n	724a <__udivmoddi4+0x182>
    71f4:	0026      	movs	r6, r4
    71f6:	409e      	lsls	r6, r3
    71f8:	0033      	movs	r3, r6
    71fa:	0026      	movs	r6, r4
    71fc:	4647      	mov	r7, r8
    71fe:	40be      	lsls	r6, r7
    7200:	0032      	movs	r2, r6
    7202:	1a80      	subs	r0, r0, r2
    7204:	4199      	sbcs	r1, r3
    7206:	9000      	str	r0, [sp, #0]
    7208:	9101      	str	r1, [sp, #4]
    720a:	e79f      	b.n	714c <__udivmoddi4+0x84>
    720c:	42a3      	cmp	r3, r4
    720e:	d8bc      	bhi.n	718a <__udivmoddi4+0xc2>
    7210:	e783      	b.n	711a <__udivmoddi4+0x52>
    7212:	4642      	mov	r2, r8
    7214:	2320      	movs	r3, #32
    7216:	2100      	movs	r1, #0
    7218:	1a9b      	subs	r3, r3, r2
    721a:	2200      	movs	r2, #0
    721c:	9100      	str	r1, [sp, #0]
    721e:	9201      	str	r2, [sp, #4]
    7220:	2201      	movs	r2, #1
    7222:	40da      	lsrs	r2, r3
    7224:	9201      	str	r2, [sp, #4]
    7226:	e786      	b.n	7136 <__udivmoddi4+0x6e>
    7228:	4642      	mov	r2, r8
    722a:	2320      	movs	r3, #32
    722c:	1a9b      	subs	r3, r3, r2
    722e:	002a      	movs	r2, r5
    7230:	4646      	mov	r6, r8
    7232:	409a      	lsls	r2, r3
    7234:	0023      	movs	r3, r4
    7236:	40f3      	lsrs	r3, r6
    7238:	4644      	mov	r4, r8
    723a:	4313      	orrs	r3, r2
    723c:	002a      	movs	r2, r5
    723e:	40e2      	lsrs	r2, r4
    7240:	001c      	movs	r4, r3
    7242:	465b      	mov	r3, fp
    7244:	0015      	movs	r5, r2
    7246:	2b00      	cmp	r3, #0
    7248:	dad4      	bge.n	71f4 <__udivmoddi4+0x12c>
    724a:	4642      	mov	r2, r8
    724c:	002f      	movs	r7, r5
    724e:	2320      	movs	r3, #32
    7250:	0026      	movs	r6, r4
    7252:	4097      	lsls	r7, r2
    7254:	1a9b      	subs	r3, r3, r2
    7256:	40de      	lsrs	r6, r3
    7258:	003b      	movs	r3, r7
    725a:	4333      	orrs	r3, r6
    725c:	e7cd      	b.n	71fa <__udivmoddi4+0x132>
    725e:	46c0      	nop			; (mov r8, r8)

00007260 <__eqdf2>:
__eqdf2():
    7260:	b5f0      	push	{r4, r5, r6, r7, lr}
    7262:	464f      	mov	r7, r9
    7264:	4646      	mov	r6, r8
    7266:	46d6      	mov	lr, sl
    7268:	4694      	mov	ip, r2
    726a:	4691      	mov	r9, r2
    726c:	031a      	lsls	r2, r3, #12
    726e:	0b12      	lsrs	r2, r2, #12
    7270:	4d18      	ldr	r5, [pc, #96]	; (72d4 <__eqdf2+0x74>)
    7272:	b5c0      	push	{r6, r7, lr}
    7274:	004c      	lsls	r4, r1, #1
    7276:	030f      	lsls	r7, r1, #12
    7278:	4692      	mov	sl, r2
    727a:	005a      	lsls	r2, r3, #1
    727c:	0006      	movs	r6, r0
    727e:	4680      	mov	r8, r0
    7280:	0b3f      	lsrs	r7, r7, #12
    7282:	2001      	movs	r0, #1
    7284:	0d64      	lsrs	r4, r4, #21
    7286:	0fc9      	lsrs	r1, r1, #31
    7288:	0d52      	lsrs	r2, r2, #21
    728a:	0fdb      	lsrs	r3, r3, #31
    728c:	42ac      	cmp	r4, r5
    728e:	d00a      	beq.n	72a6 <__eqdf2+0x46>
    7290:	42aa      	cmp	r2, r5
    7292:	d003      	beq.n	729c <__eqdf2+0x3c>
    7294:	4294      	cmp	r4, r2
    7296:	d101      	bne.n	729c <__eqdf2+0x3c>
    7298:	4557      	cmp	r7, sl
    729a:	d00d      	beq.n	72b8 <__eqdf2+0x58>
    729c:	bce0      	pop	{r5, r6, r7}
    729e:	46ba      	mov	sl, r7
    72a0:	46b1      	mov	r9, r6
    72a2:	46a8      	mov	r8, r5
    72a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72a6:	003d      	movs	r5, r7
    72a8:	4335      	orrs	r5, r6
    72aa:	d1f7      	bne.n	729c <__eqdf2+0x3c>
    72ac:	42a2      	cmp	r2, r4
    72ae:	d1f5      	bne.n	729c <__eqdf2+0x3c>
    72b0:	4652      	mov	r2, sl
    72b2:	4665      	mov	r5, ip
    72b4:	432a      	orrs	r2, r5
    72b6:	d1f1      	bne.n	729c <__eqdf2+0x3c>
    72b8:	2001      	movs	r0, #1
    72ba:	45c8      	cmp	r8, r9
    72bc:	d1ee      	bne.n	729c <__eqdf2+0x3c>
    72be:	4299      	cmp	r1, r3
    72c0:	d006      	beq.n	72d0 <__eqdf2+0x70>
    72c2:	2c00      	cmp	r4, #0
    72c4:	d1ea      	bne.n	729c <__eqdf2+0x3c>
    72c6:	433e      	orrs	r6, r7
    72c8:	0030      	movs	r0, r6
    72ca:	1e46      	subs	r6, r0, #1
    72cc:	41b0      	sbcs	r0, r6
    72ce:	e7e5      	b.n	729c <__eqdf2+0x3c>
    72d0:	2000      	movs	r0, #0
    72d2:	e7e3      	b.n	729c <__eqdf2+0x3c>
    72d4:	000007ff 	.word	0x000007ff

000072d8 <__gedf2>:
__gtdf2():
    72d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72da:	464e      	mov	r6, r9
    72dc:	4645      	mov	r5, r8
    72de:	4657      	mov	r7, sl
    72e0:	46de      	mov	lr, fp
    72e2:	0004      	movs	r4, r0
    72e4:	0018      	movs	r0, r3
    72e6:	b5e0      	push	{r5, r6, r7, lr}
    72e8:	0016      	movs	r6, r2
    72ea:	031b      	lsls	r3, r3, #12
    72ec:	0b1b      	lsrs	r3, r3, #12
    72ee:	4d32      	ldr	r5, [pc, #200]	; (73b8 <__gedf2+0xe0>)
    72f0:	030f      	lsls	r7, r1, #12
    72f2:	004a      	lsls	r2, r1, #1
    72f4:	4699      	mov	r9, r3
    72f6:	0043      	lsls	r3, r0, #1
    72f8:	46a4      	mov	ip, r4
    72fa:	46b0      	mov	r8, r6
    72fc:	0b3f      	lsrs	r7, r7, #12
    72fe:	0d52      	lsrs	r2, r2, #21
    7300:	0fc9      	lsrs	r1, r1, #31
    7302:	0d5b      	lsrs	r3, r3, #21
    7304:	0fc0      	lsrs	r0, r0, #31
    7306:	42aa      	cmp	r2, r5
    7308:	d029      	beq.n	735e <__gedf2+0x86>
    730a:	42ab      	cmp	r3, r5
    730c:	d018      	beq.n	7340 <__gedf2+0x68>
    730e:	2a00      	cmp	r2, #0
    7310:	d12a      	bne.n	7368 <__gedf2+0x90>
    7312:	433c      	orrs	r4, r7
    7314:	46a3      	mov	fp, r4
    7316:	4265      	negs	r5, r4
    7318:	4165      	adcs	r5, r4
    731a:	2b00      	cmp	r3, #0
    731c:	d102      	bne.n	7324 <__gedf2+0x4c>
    731e:	464c      	mov	r4, r9
    7320:	4326      	orrs	r6, r4
    7322:	d027      	beq.n	7374 <__gedf2+0x9c>
    7324:	2d00      	cmp	r5, #0
    7326:	d115      	bne.n	7354 <__gedf2+0x7c>
    7328:	4281      	cmp	r1, r0
    732a:	d028      	beq.n	737e <__gedf2+0xa6>
    732c:	2002      	movs	r0, #2
    732e:	3901      	subs	r1, #1
    7330:	4008      	ands	r0, r1
    7332:	3801      	subs	r0, #1
    7334:	bcf0      	pop	{r4, r5, r6, r7}
    7336:	46bb      	mov	fp, r7
    7338:	46b2      	mov	sl, r6
    733a:	46a9      	mov	r9, r5
    733c:	46a0      	mov	r8, r4
    733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7340:	464d      	mov	r5, r9
    7342:	432e      	orrs	r6, r5
    7344:	d12f      	bne.n	73a6 <__gedf2+0xce>
    7346:	2a00      	cmp	r2, #0
    7348:	d1ee      	bne.n	7328 <__gedf2+0x50>
    734a:	433c      	orrs	r4, r7
    734c:	4265      	negs	r5, r4
    734e:	4165      	adcs	r5, r4
    7350:	2d00      	cmp	r5, #0
    7352:	d0e9      	beq.n	7328 <__gedf2+0x50>
    7354:	2800      	cmp	r0, #0
    7356:	d1ed      	bne.n	7334 <__gedf2+0x5c>
    7358:	2001      	movs	r0, #1
    735a:	4240      	negs	r0, r0
    735c:	e7ea      	b.n	7334 <__gedf2+0x5c>
    735e:	003d      	movs	r5, r7
    7360:	4325      	orrs	r5, r4
    7362:	d120      	bne.n	73a6 <__gedf2+0xce>
    7364:	4293      	cmp	r3, r2
    7366:	d0eb      	beq.n	7340 <__gedf2+0x68>
    7368:	2b00      	cmp	r3, #0
    736a:	d1dd      	bne.n	7328 <__gedf2+0x50>
    736c:	464c      	mov	r4, r9
    736e:	4326      	orrs	r6, r4
    7370:	d1da      	bne.n	7328 <__gedf2+0x50>
    7372:	e7db      	b.n	732c <__gedf2+0x54>
    7374:	465b      	mov	r3, fp
    7376:	2000      	movs	r0, #0
    7378:	2b00      	cmp	r3, #0
    737a:	d0db      	beq.n	7334 <__gedf2+0x5c>
    737c:	e7d6      	b.n	732c <__gedf2+0x54>
    737e:	429a      	cmp	r2, r3
    7380:	dc0a      	bgt.n	7398 <__gedf2+0xc0>
    7382:	dbe7      	blt.n	7354 <__gedf2+0x7c>
    7384:	454f      	cmp	r7, r9
    7386:	d8d1      	bhi.n	732c <__gedf2+0x54>
    7388:	d010      	beq.n	73ac <__gedf2+0xd4>
    738a:	2000      	movs	r0, #0
    738c:	454f      	cmp	r7, r9
    738e:	d2d1      	bcs.n	7334 <__gedf2+0x5c>
    7390:	2900      	cmp	r1, #0
    7392:	d0e1      	beq.n	7358 <__gedf2+0x80>
    7394:	0008      	movs	r0, r1
    7396:	e7cd      	b.n	7334 <__gedf2+0x5c>
    7398:	4243      	negs	r3, r0
    739a:	4158      	adcs	r0, r3
    739c:	2302      	movs	r3, #2
    739e:	4240      	negs	r0, r0
    73a0:	4018      	ands	r0, r3
    73a2:	3801      	subs	r0, #1
    73a4:	e7c6      	b.n	7334 <__gedf2+0x5c>
    73a6:	2002      	movs	r0, #2
    73a8:	4240      	negs	r0, r0
    73aa:	e7c3      	b.n	7334 <__gedf2+0x5c>
    73ac:	45c4      	cmp	ip, r8
    73ae:	d8bd      	bhi.n	732c <__gedf2+0x54>
    73b0:	2000      	movs	r0, #0
    73b2:	45c4      	cmp	ip, r8
    73b4:	d2be      	bcs.n	7334 <__gedf2+0x5c>
    73b6:	e7eb      	b.n	7390 <__gedf2+0xb8>
    73b8:	000007ff 	.word	0x000007ff

000073bc <__ledf2>:
__ltdf2():
    73bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    73be:	464e      	mov	r6, r9
    73c0:	4645      	mov	r5, r8
    73c2:	4657      	mov	r7, sl
    73c4:	46de      	mov	lr, fp
    73c6:	0004      	movs	r4, r0
    73c8:	0018      	movs	r0, r3
    73ca:	b5e0      	push	{r5, r6, r7, lr}
    73cc:	0016      	movs	r6, r2
    73ce:	031b      	lsls	r3, r3, #12
    73d0:	0b1b      	lsrs	r3, r3, #12
    73d2:	4d31      	ldr	r5, [pc, #196]	; (7498 <__ledf2+0xdc>)
    73d4:	030f      	lsls	r7, r1, #12
    73d6:	004a      	lsls	r2, r1, #1
    73d8:	4699      	mov	r9, r3
    73da:	0043      	lsls	r3, r0, #1
    73dc:	46a4      	mov	ip, r4
    73de:	46b0      	mov	r8, r6
    73e0:	0b3f      	lsrs	r7, r7, #12
    73e2:	0d52      	lsrs	r2, r2, #21
    73e4:	0fc9      	lsrs	r1, r1, #31
    73e6:	0d5b      	lsrs	r3, r3, #21
    73e8:	0fc0      	lsrs	r0, r0, #31
    73ea:	42aa      	cmp	r2, r5
    73ec:	d011      	beq.n	7412 <__ledf2+0x56>
    73ee:	42ab      	cmp	r3, r5
    73f0:	d014      	beq.n	741c <__ledf2+0x60>
    73f2:	2a00      	cmp	r2, #0
    73f4:	d12f      	bne.n	7456 <__ledf2+0x9a>
    73f6:	433c      	orrs	r4, r7
    73f8:	46a3      	mov	fp, r4
    73fa:	4265      	negs	r5, r4
    73fc:	4165      	adcs	r5, r4
    73fe:	2b00      	cmp	r3, #0
    7400:	d114      	bne.n	742c <__ledf2+0x70>
    7402:	464c      	mov	r4, r9
    7404:	4326      	orrs	r6, r4
    7406:	d111      	bne.n	742c <__ledf2+0x70>
    7408:	465b      	mov	r3, fp
    740a:	2000      	movs	r0, #0
    740c:	2b00      	cmp	r3, #0
    740e:	d017      	beq.n	7440 <__ledf2+0x84>
    7410:	e010      	b.n	7434 <__ledf2+0x78>
    7412:	003d      	movs	r5, r7
    7414:	4325      	orrs	r5, r4
    7416:	d112      	bne.n	743e <__ledf2+0x82>
    7418:	4293      	cmp	r3, r2
    741a:	d11c      	bne.n	7456 <__ledf2+0x9a>
    741c:	464d      	mov	r5, r9
    741e:	432e      	orrs	r6, r5
    7420:	d10d      	bne.n	743e <__ledf2+0x82>
    7422:	2a00      	cmp	r2, #0
    7424:	d104      	bne.n	7430 <__ledf2+0x74>
    7426:	433c      	orrs	r4, r7
    7428:	4265      	negs	r5, r4
    742a:	4165      	adcs	r5, r4
    742c:	2d00      	cmp	r5, #0
    742e:	d10d      	bne.n	744c <__ledf2+0x90>
    7430:	4281      	cmp	r1, r0
    7432:	d016      	beq.n	7462 <__ledf2+0xa6>
    7434:	2002      	movs	r0, #2
    7436:	3901      	subs	r1, #1
    7438:	4008      	ands	r0, r1
    743a:	3801      	subs	r0, #1
    743c:	e000      	b.n	7440 <__ledf2+0x84>
    743e:	2002      	movs	r0, #2
    7440:	bcf0      	pop	{r4, r5, r6, r7}
    7442:	46bb      	mov	fp, r7
    7444:	46b2      	mov	sl, r6
    7446:	46a9      	mov	r9, r5
    7448:	46a0      	mov	r8, r4
    744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    744c:	2800      	cmp	r0, #0
    744e:	d1f7      	bne.n	7440 <__ledf2+0x84>
    7450:	2001      	movs	r0, #1
    7452:	4240      	negs	r0, r0
    7454:	e7f4      	b.n	7440 <__ledf2+0x84>
    7456:	2b00      	cmp	r3, #0
    7458:	d1ea      	bne.n	7430 <__ledf2+0x74>
    745a:	464c      	mov	r4, r9
    745c:	4326      	orrs	r6, r4
    745e:	d1e7      	bne.n	7430 <__ledf2+0x74>
    7460:	e7e8      	b.n	7434 <__ledf2+0x78>
    7462:	429a      	cmp	r2, r3
    7464:	dd06      	ble.n	7474 <__ledf2+0xb8>
    7466:	4243      	negs	r3, r0
    7468:	4158      	adcs	r0, r3
    746a:	2302      	movs	r3, #2
    746c:	4240      	negs	r0, r0
    746e:	4018      	ands	r0, r3
    7470:	3801      	subs	r0, #1
    7472:	e7e5      	b.n	7440 <__ledf2+0x84>
    7474:	429a      	cmp	r2, r3
    7476:	dbe9      	blt.n	744c <__ledf2+0x90>
    7478:	454f      	cmp	r7, r9
    747a:	d8db      	bhi.n	7434 <__ledf2+0x78>
    747c:	d006      	beq.n	748c <__ledf2+0xd0>
    747e:	2000      	movs	r0, #0
    7480:	454f      	cmp	r7, r9
    7482:	d2dd      	bcs.n	7440 <__ledf2+0x84>
    7484:	2900      	cmp	r1, #0
    7486:	d0e3      	beq.n	7450 <__ledf2+0x94>
    7488:	0008      	movs	r0, r1
    748a:	e7d9      	b.n	7440 <__ledf2+0x84>
    748c:	45c4      	cmp	ip, r8
    748e:	d8d1      	bhi.n	7434 <__ledf2+0x78>
    7490:	2000      	movs	r0, #0
    7492:	45c4      	cmp	ip, r8
    7494:	d2d4      	bcs.n	7440 <__ledf2+0x84>
    7496:	e7f5      	b.n	7484 <__ledf2+0xc8>
    7498:	000007ff 	.word	0x000007ff

0000749c <__aeabi_dmul>:
__aeabi_dmul():
    749c:	b5f0      	push	{r4, r5, r6, r7, lr}
    749e:	4657      	mov	r7, sl
    74a0:	464e      	mov	r6, r9
    74a2:	4645      	mov	r5, r8
    74a4:	46de      	mov	lr, fp
    74a6:	b5e0      	push	{r5, r6, r7, lr}
    74a8:	4698      	mov	r8, r3
    74aa:	030c      	lsls	r4, r1, #12
    74ac:	004b      	lsls	r3, r1, #1
    74ae:	0006      	movs	r6, r0
    74b0:	4692      	mov	sl, r2
    74b2:	b087      	sub	sp, #28
    74b4:	0b24      	lsrs	r4, r4, #12
    74b6:	0d5b      	lsrs	r3, r3, #21
    74b8:	0fcf      	lsrs	r7, r1, #31
    74ba:	2b00      	cmp	r3, #0
    74bc:	d06c      	beq.n	7598 <__aeabi_dmul+0xfc>
    74be:	4add      	ldr	r2, [pc, #884]	; (7834 <__aeabi_dmul+0x398>)
    74c0:	4293      	cmp	r3, r2
    74c2:	d100      	bne.n	74c6 <__aeabi_dmul+0x2a>
    74c4:	e086      	b.n	75d4 <__aeabi_dmul+0x138>
    74c6:	0f42      	lsrs	r2, r0, #29
    74c8:	00e4      	lsls	r4, r4, #3
    74ca:	4314      	orrs	r4, r2
    74cc:	2280      	movs	r2, #128	; 0x80
    74ce:	0412      	lsls	r2, r2, #16
    74d0:	4314      	orrs	r4, r2
    74d2:	4ad9      	ldr	r2, [pc, #868]	; (7838 <__aeabi_dmul+0x39c>)
    74d4:	00c5      	lsls	r5, r0, #3
    74d6:	4694      	mov	ip, r2
    74d8:	4463      	add	r3, ip
    74da:	9300      	str	r3, [sp, #0]
    74dc:	2300      	movs	r3, #0
    74de:	4699      	mov	r9, r3
    74e0:	469b      	mov	fp, r3
    74e2:	4643      	mov	r3, r8
    74e4:	4642      	mov	r2, r8
    74e6:	031e      	lsls	r6, r3, #12
    74e8:	0fd2      	lsrs	r2, r2, #31
    74ea:	005b      	lsls	r3, r3, #1
    74ec:	4650      	mov	r0, sl
    74ee:	4690      	mov	r8, r2
    74f0:	0b36      	lsrs	r6, r6, #12
    74f2:	0d5b      	lsrs	r3, r3, #21
    74f4:	d100      	bne.n	74f8 <__aeabi_dmul+0x5c>
    74f6:	e078      	b.n	75ea <__aeabi_dmul+0x14e>
    74f8:	4ace      	ldr	r2, [pc, #824]	; (7834 <__aeabi_dmul+0x398>)
    74fa:	4293      	cmp	r3, r2
    74fc:	d01d      	beq.n	753a <__aeabi_dmul+0x9e>
    74fe:	49ce      	ldr	r1, [pc, #824]	; (7838 <__aeabi_dmul+0x39c>)
    7500:	0f42      	lsrs	r2, r0, #29
    7502:	468c      	mov	ip, r1
    7504:	9900      	ldr	r1, [sp, #0]
    7506:	4463      	add	r3, ip
    7508:	00f6      	lsls	r6, r6, #3
    750a:	468c      	mov	ip, r1
    750c:	4316      	orrs	r6, r2
    750e:	2280      	movs	r2, #128	; 0x80
    7510:	449c      	add	ip, r3
    7512:	0412      	lsls	r2, r2, #16
    7514:	4663      	mov	r3, ip
    7516:	4316      	orrs	r6, r2
    7518:	00c2      	lsls	r2, r0, #3
    751a:	2000      	movs	r0, #0
    751c:	9300      	str	r3, [sp, #0]
    751e:	9900      	ldr	r1, [sp, #0]
    7520:	4643      	mov	r3, r8
    7522:	3101      	adds	r1, #1
    7524:	468c      	mov	ip, r1
    7526:	4649      	mov	r1, r9
    7528:	407b      	eors	r3, r7
    752a:	9301      	str	r3, [sp, #4]
    752c:	290f      	cmp	r1, #15
    752e:	d900      	bls.n	7532 <__aeabi_dmul+0x96>
    7530:	e07e      	b.n	7630 <__aeabi_dmul+0x194>
    7532:	4bc2      	ldr	r3, [pc, #776]	; (783c <__aeabi_dmul+0x3a0>)
    7534:	0089      	lsls	r1, r1, #2
    7536:	5859      	ldr	r1, [r3, r1]
    7538:	468f      	mov	pc, r1
    753a:	4652      	mov	r2, sl
    753c:	9b00      	ldr	r3, [sp, #0]
    753e:	4332      	orrs	r2, r6
    7540:	d000      	beq.n	7544 <__aeabi_dmul+0xa8>
    7542:	e156      	b.n	77f2 <__aeabi_dmul+0x356>
    7544:	49bb      	ldr	r1, [pc, #748]	; (7834 <__aeabi_dmul+0x398>)
    7546:	2600      	movs	r6, #0
    7548:	468c      	mov	ip, r1
    754a:	4463      	add	r3, ip
    754c:	4649      	mov	r1, r9
    754e:	9300      	str	r3, [sp, #0]
    7550:	2302      	movs	r3, #2
    7552:	4319      	orrs	r1, r3
    7554:	4689      	mov	r9, r1
    7556:	2002      	movs	r0, #2
    7558:	e7e1      	b.n	751e <__aeabi_dmul+0x82>
    755a:	4643      	mov	r3, r8
    755c:	9301      	str	r3, [sp, #4]
    755e:	0034      	movs	r4, r6
    7560:	0015      	movs	r5, r2
    7562:	4683      	mov	fp, r0
    7564:	465b      	mov	r3, fp
    7566:	2b02      	cmp	r3, #2
    7568:	d05e      	beq.n	7628 <__aeabi_dmul+0x18c>
    756a:	2b03      	cmp	r3, #3
    756c:	d100      	bne.n	7570 <__aeabi_dmul+0xd4>
    756e:	e1f3      	b.n	7958 <__aeabi_dmul+0x4bc>
    7570:	2b01      	cmp	r3, #1
    7572:	d000      	beq.n	7576 <__aeabi_dmul+0xda>
    7574:	e118      	b.n	77a8 <__aeabi_dmul+0x30c>
    7576:	2200      	movs	r2, #0
    7578:	2400      	movs	r4, #0
    757a:	2500      	movs	r5, #0
    757c:	9b01      	ldr	r3, [sp, #4]
    757e:	0512      	lsls	r2, r2, #20
    7580:	4322      	orrs	r2, r4
    7582:	07db      	lsls	r3, r3, #31
    7584:	431a      	orrs	r2, r3
    7586:	0028      	movs	r0, r5
    7588:	0011      	movs	r1, r2
    758a:	b007      	add	sp, #28
    758c:	bcf0      	pop	{r4, r5, r6, r7}
    758e:	46bb      	mov	fp, r7
    7590:	46b2      	mov	sl, r6
    7592:	46a9      	mov	r9, r5
    7594:	46a0      	mov	r8, r4
    7596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7598:	0025      	movs	r5, r4
    759a:	4305      	orrs	r5, r0
    759c:	d100      	bne.n	75a0 <__aeabi_dmul+0x104>
    759e:	e141      	b.n	7824 <__aeabi_dmul+0x388>
    75a0:	2c00      	cmp	r4, #0
    75a2:	d100      	bne.n	75a6 <__aeabi_dmul+0x10a>
    75a4:	e1ad      	b.n	7902 <__aeabi_dmul+0x466>
    75a6:	0020      	movs	r0, r4
    75a8:	f000 fdd2 	bl	8150 <__clzsi2>
    75ac:	0001      	movs	r1, r0
    75ae:	0002      	movs	r2, r0
    75b0:	390b      	subs	r1, #11
    75b2:	231d      	movs	r3, #29
    75b4:	0010      	movs	r0, r2
    75b6:	1a5b      	subs	r3, r3, r1
    75b8:	0031      	movs	r1, r6
    75ba:	0035      	movs	r5, r6
    75bc:	3808      	subs	r0, #8
    75be:	4084      	lsls	r4, r0
    75c0:	40d9      	lsrs	r1, r3
    75c2:	4085      	lsls	r5, r0
    75c4:	430c      	orrs	r4, r1
    75c6:	489e      	ldr	r0, [pc, #632]	; (7840 <__aeabi_dmul+0x3a4>)
    75c8:	1a83      	subs	r3, r0, r2
    75ca:	9300      	str	r3, [sp, #0]
    75cc:	2300      	movs	r3, #0
    75ce:	4699      	mov	r9, r3
    75d0:	469b      	mov	fp, r3
    75d2:	e786      	b.n	74e2 <__aeabi_dmul+0x46>
    75d4:	0005      	movs	r5, r0
    75d6:	4325      	orrs	r5, r4
    75d8:	d000      	beq.n	75dc <__aeabi_dmul+0x140>
    75da:	e11c      	b.n	7816 <__aeabi_dmul+0x37a>
    75dc:	2208      	movs	r2, #8
    75de:	9300      	str	r3, [sp, #0]
    75e0:	2302      	movs	r3, #2
    75e2:	2400      	movs	r4, #0
    75e4:	4691      	mov	r9, r2
    75e6:	469b      	mov	fp, r3
    75e8:	e77b      	b.n	74e2 <__aeabi_dmul+0x46>
    75ea:	4652      	mov	r2, sl
    75ec:	4332      	orrs	r2, r6
    75ee:	d100      	bne.n	75f2 <__aeabi_dmul+0x156>
    75f0:	e10a      	b.n	7808 <__aeabi_dmul+0x36c>
    75f2:	2e00      	cmp	r6, #0
    75f4:	d100      	bne.n	75f8 <__aeabi_dmul+0x15c>
    75f6:	e176      	b.n	78e6 <__aeabi_dmul+0x44a>
    75f8:	0030      	movs	r0, r6
    75fa:	f000 fda9 	bl	8150 <__clzsi2>
    75fe:	0002      	movs	r2, r0
    7600:	3a0b      	subs	r2, #11
    7602:	231d      	movs	r3, #29
    7604:	0001      	movs	r1, r0
    7606:	1a9b      	subs	r3, r3, r2
    7608:	4652      	mov	r2, sl
    760a:	3908      	subs	r1, #8
    760c:	40da      	lsrs	r2, r3
    760e:	408e      	lsls	r6, r1
    7610:	4316      	orrs	r6, r2
    7612:	4652      	mov	r2, sl
    7614:	408a      	lsls	r2, r1
    7616:	9b00      	ldr	r3, [sp, #0]
    7618:	4989      	ldr	r1, [pc, #548]	; (7840 <__aeabi_dmul+0x3a4>)
    761a:	1a18      	subs	r0, r3, r0
    761c:	0003      	movs	r3, r0
    761e:	468c      	mov	ip, r1
    7620:	4463      	add	r3, ip
    7622:	2000      	movs	r0, #0
    7624:	9300      	str	r3, [sp, #0]
    7626:	e77a      	b.n	751e <__aeabi_dmul+0x82>
    7628:	2400      	movs	r4, #0
    762a:	2500      	movs	r5, #0
    762c:	4a81      	ldr	r2, [pc, #516]	; (7834 <__aeabi_dmul+0x398>)
    762e:	e7a5      	b.n	757c <__aeabi_dmul+0xe0>
    7630:	0c2f      	lsrs	r7, r5, #16
    7632:	042d      	lsls	r5, r5, #16
    7634:	0c2d      	lsrs	r5, r5, #16
    7636:	002b      	movs	r3, r5
    7638:	0c11      	lsrs	r1, r2, #16
    763a:	0412      	lsls	r2, r2, #16
    763c:	0c12      	lsrs	r2, r2, #16
    763e:	4353      	muls	r3, r2
    7640:	4698      	mov	r8, r3
    7642:	0013      	movs	r3, r2
    7644:	0028      	movs	r0, r5
    7646:	437b      	muls	r3, r7
    7648:	4699      	mov	r9, r3
    764a:	4348      	muls	r0, r1
    764c:	4448      	add	r0, r9
    764e:	4683      	mov	fp, r0
    7650:	4640      	mov	r0, r8
    7652:	000b      	movs	r3, r1
    7654:	0c00      	lsrs	r0, r0, #16
    7656:	4682      	mov	sl, r0
    7658:	4658      	mov	r0, fp
    765a:	437b      	muls	r3, r7
    765c:	4450      	add	r0, sl
    765e:	9302      	str	r3, [sp, #8]
    7660:	4581      	cmp	r9, r0
    7662:	d906      	bls.n	7672 <__aeabi_dmul+0x1d6>
    7664:	469a      	mov	sl, r3
    7666:	2380      	movs	r3, #128	; 0x80
    7668:	025b      	lsls	r3, r3, #9
    766a:	4699      	mov	r9, r3
    766c:	44ca      	add	sl, r9
    766e:	4653      	mov	r3, sl
    7670:	9302      	str	r3, [sp, #8]
    7672:	0c03      	lsrs	r3, r0, #16
    7674:	469b      	mov	fp, r3
    7676:	4643      	mov	r3, r8
    7678:	041b      	lsls	r3, r3, #16
    767a:	0400      	lsls	r0, r0, #16
    767c:	0c1b      	lsrs	r3, r3, #16
    767e:	4698      	mov	r8, r3
    7680:	0003      	movs	r3, r0
    7682:	4443      	add	r3, r8
    7684:	9304      	str	r3, [sp, #16]
    7686:	0c33      	lsrs	r3, r6, #16
    7688:	4699      	mov	r9, r3
    768a:	002b      	movs	r3, r5
    768c:	0436      	lsls	r6, r6, #16
    768e:	0c36      	lsrs	r6, r6, #16
    7690:	4373      	muls	r3, r6
    7692:	4698      	mov	r8, r3
    7694:	0033      	movs	r3, r6
    7696:	437b      	muls	r3, r7
    7698:	469a      	mov	sl, r3
    769a:	464b      	mov	r3, r9
    769c:	435d      	muls	r5, r3
    769e:	435f      	muls	r7, r3
    76a0:	4643      	mov	r3, r8
    76a2:	4455      	add	r5, sl
    76a4:	0c18      	lsrs	r0, r3, #16
    76a6:	1940      	adds	r0, r0, r5
    76a8:	4582      	cmp	sl, r0
    76aa:	d903      	bls.n	76b4 <__aeabi_dmul+0x218>
    76ac:	2380      	movs	r3, #128	; 0x80
    76ae:	025b      	lsls	r3, r3, #9
    76b0:	469a      	mov	sl, r3
    76b2:	4457      	add	r7, sl
    76b4:	0c05      	lsrs	r5, r0, #16
    76b6:	19eb      	adds	r3, r5, r7
    76b8:	9305      	str	r3, [sp, #20]
    76ba:	4643      	mov	r3, r8
    76bc:	041d      	lsls	r5, r3, #16
    76be:	0c2d      	lsrs	r5, r5, #16
    76c0:	0400      	lsls	r0, r0, #16
    76c2:	1940      	adds	r0, r0, r5
    76c4:	0c25      	lsrs	r5, r4, #16
    76c6:	0424      	lsls	r4, r4, #16
    76c8:	0c24      	lsrs	r4, r4, #16
    76ca:	0027      	movs	r7, r4
    76cc:	4357      	muls	r7, r2
    76ce:	436a      	muls	r2, r5
    76d0:	4690      	mov	r8, r2
    76d2:	002a      	movs	r2, r5
    76d4:	0c3b      	lsrs	r3, r7, #16
    76d6:	469a      	mov	sl, r3
    76d8:	434a      	muls	r2, r1
    76da:	4361      	muls	r1, r4
    76dc:	4441      	add	r1, r8
    76de:	4451      	add	r1, sl
    76e0:	4483      	add	fp, r0
    76e2:	4588      	cmp	r8, r1
    76e4:	d903      	bls.n	76ee <__aeabi_dmul+0x252>
    76e6:	2380      	movs	r3, #128	; 0x80
    76e8:	025b      	lsls	r3, r3, #9
    76ea:	4698      	mov	r8, r3
    76ec:	4442      	add	r2, r8
    76ee:	043f      	lsls	r7, r7, #16
    76f0:	0c0b      	lsrs	r3, r1, #16
    76f2:	0c3f      	lsrs	r7, r7, #16
    76f4:	0409      	lsls	r1, r1, #16
    76f6:	19c9      	adds	r1, r1, r7
    76f8:	0027      	movs	r7, r4
    76fa:	4698      	mov	r8, r3
    76fc:	464b      	mov	r3, r9
    76fe:	4377      	muls	r7, r6
    7700:	435c      	muls	r4, r3
    7702:	436e      	muls	r6, r5
    7704:	435d      	muls	r5, r3
    7706:	0c3b      	lsrs	r3, r7, #16
    7708:	4699      	mov	r9, r3
    770a:	19a4      	adds	r4, r4, r6
    770c:	444c      	add	r4, r9
    770e:	4442      	add	r2, r8
    7710:	9503      	str	r5, [sp, #12]
    7712:	42a6      	cmp	r6, r4
    7714:	d904      	bls.n	7720 <__aeabi_dmul+0x284>
    7716:	2380      	movs	r3, #128	; 0x80
    7718:	025b      	lsls	r3, r3, #9
    771a:	4698      	mov	r8, r3
    771c:	4445      	add	r5, r8
    771e:	9503      	str	r5, [sp, #12]
    7720:	9b02      	ldr	r3, [sp, #8]
    7722:	043f      	lsls	r7, r7, #16
    7724:	445b      	add	r3, fp
    7726:	001e      	movs	r6, r3
    7728:	4283      	cmp	r3, r0
    772a:	4180      	sbcs	r0, r0
    772c:	0423      	lsls	r3, r4, #16
    772e:	4698      	mov	r8, r3
    7730:	9b05      	ldr	r3, [sp, #20]
    7732:	0c3f      	lsrs	r7, r7, #16
    7734:	4447      	add	r7, r8
    7736:	4698      	mov	r8, r3
    7738:	1876      	adds	r6, r6, r1
    773a:	428e      	cmp	r6, r1
    773c:	4189      	sbcs	r1, r1
    773e:	4447      	add	r7, r8
    7740:	4240      	negs	r0, r0
    7742:	183d      	adds	r5, r7, r0
    7744:	46a8      	mov	r8, r5
    7746:	4693      	mov	fp, r2
    7748:	4249      	negs	r1, r1
    774a:	468a      	mov	sl, r1
    774c:	44c3      	add	fp, r8
    774e:	429f      	cmp	r7, r3
    7750:	41bf      	sbcs	r7, r7
    7752:	4580      	cmp	r8, r0
    7754:	4180      	sbcs	r0, r0
    7756:	9b03      	ldr	r3, [sp, #12]
    7758:	44da      	add	sl, fp
    775a:	4698      	mov	r8, r3
    775c:	4653      	mov	r3, sl
    775e:	4240      	negs	r0, r0
    7760:	427f      	negs	r7, r7
    7762:	4307      	orrs	r7, r0
    7764:	0c24      	lsrs	r4, r4, #16
    7766:	4593      	cmp	fp, r2
    7768:	4192      	sbcs	r2, r2
    776a:	458a      	cmp	sl, r1
    776c:	4189      	sbcs	r1, r1
    776e:	193f      	adds	r7, r7, r4
    7770:	0ddc      	lsrs	r4, r3, #23
    7772:	9b04      	ldr	r3, [sp, #16]
    7774:	0275      	lsls	r5, r6, #9
    7776:	431d      	orrs	r5, r3
    7778:	1e68      	subs	r0, r5, #1
    777a:	4185      	sbcs	r5, r0
    777c:	4653      	mov	r3, sl
    777e:	4252      	negs	r2, r2
    7780:	4249      	negs	r1, r1
    7782:	430a      	orrs	r2, r1
    7784:	18bf      	adds	r7, r7, r2
    7786:	4447      	add	r7, r8
    7788:	0df6      	lsrs	r6, r6, #23
    778a:	027f      	lsls	r7, r7, #9
    778c:	4335      	orrs	r5, r6
    778e:	025a      	lsls	r2, r3, #9
    7790:	433c      	orrs	r4, r7
    7792:	4315      	orrs	r5, r2
    7794:	01fb      	lsls	r3, r7, #7
    7796:	d400      	bmi.n	779a <__aeabi_dmul+0x2fe>
    7798:	e0c1      	b.n	791e <__aeabi_dmul+0x482>
    779a:	2101      	movs	r1, #1
    779c:	086a      	lsrs	r2, r5, #1
    779e:	400d      	ands	r5, r1
    77a0:	4315      	orrs	r5, r2
    77a2:	07e2      	lsls	r2, r4, #31
    77a4:	4315      	orrs	r5, r2
    77a6:	0864      	lsrs	r4, r4, #1
    77a8:	4926      	ldr	r1, [pc, #152]	; (7844 <__aeabi_dmul+0x3a8>)
    77aa:	4461      	add	r1, ip
    77ac:	2900      	cmp	r1, #0
    77ae:	dd56      	ble.n	785e <__aeabi_dmul+0x3c2>
    77b0:	076b      	lsls	r3, r5, #29
    77b2:	d009      	beq.n	77c8 <__aeabi_dmul+0x32c>
    77b4:	220f      	movs	r2, #15
    77b6:	402a      	ands	r2, r5
    77b8:	2a04      	cmp	r2, #4
    77ba:	d005      	beq.n	77c8 <__aeabi_dmul+0x32c>
    77bc:	1d2a      	adds	r2, r5, #4
    77be:	42aa      	cmp	r2, r5
    77c0:	41ad      	sbcs	r5, r5
    77c2:	426d      	negs	r5, r5
    77c4:	1964      	adds	r4, r4, r5
    77c6:	0015      	movs	r5, r2
    77c8:	01e3      	lsls	r3, r4, #7
    77ca:	d504      	bpl.n	77d6 <__aeabi_dmul+0x33a>
    77cc:	2180      	movs	r1, #128	; 0x80
    77ce:	4a1e      	ldr	r2, [pc, #120]	; (7848 <__aeabi_dmul+0x3ac>)
    77d0:	00c9      	lsls	r1, r1, #3
    77d2:	4014      	ands	r4, r2
    77d4:	4461      	add	r1, ip
    77d6:	4a1d      	ldr	r2, [pc, #116]	; (784c <__aeabi_dmul+0x3b0>)
    77d8:	4291      	cmp	r1, r2
    77da:	dd00      	ble.n	77de <__aeabi_dmul+0x342>
    77dc:	e724      	b.n	7628 <__aeabi_dmul+0x18c>
    77de:	0762      	lsls	r2, r4, #29
    77e0:	08ed      	lsrs	r5, r5, #3
    77e2:	0264      	lsls	r4, r4, #9
    77e4:	0549      	lsls	r1, r1, #21
    77e6:	4315      	orrs	r5, r2
    77e8:	0b24      	lsrs	r4, r4, #12
    77ea:	0d4a      	lsrs	r2, r1, #21
    77ec:	e6c6      	b.n	757c <__aeabi_dmul+0xe0>
    77ee:	9701      	str	r7, [sp, #4]
    77f0:	e6b8      	b.n	7564 <__aeabi_dmul+0xc8>
    77f2:	4a10      	ldr	r2, [pc, #64]	; (7834 <__aeabi_dmul+0x398>)
    77f4:	2003      	movs	r0, #3
    77f6:	4694      	mov	ip, r2
    77f8:	4463      	add	r3, ip
    77fa:	464a      	mov	r2, r9
    77fc:	9300      	str	r3, [sp, #0]
    77fe:	2303      	movs	r3, #3
    7800:	431a      	orrs	r2, r3
    7802:	4691      	mov	r9, r2
    7804:	4652      	mov	r2, sl
    7806:	e68a      	b.n	751e <__aeabi_dmul+0x82>
    7808:	4649      	mov	r1, r9
    780a:	2301      	movs	r3, #1
    780c:	4319      	orrs	r1, r3
    780e:	4689      	mov	r9, r1
    7810:	2600      	movs	r6, #0
    7812:	2001      	movs	r0, #1
    7814:	e683      	b.n	751e <__aeabi_dmul+0x82>
    7816:	220c      	movs	r2, #12
    7818:	9300      	str	r3, [sp, #0]
    781a:	2303      	movs	r3, #3
    781c:	0005      	movs	r5, r0
    781e:	4691      	mov	r9, r2
    7820:	469b      	mov	fp, r3
    7822:	e65e      	b.n	74e2 <__aeabi_dmul+0x46>
    7824:	2304      	movs	r3, #4
    7826:	4699      	mov	r9, r3
    7828:	2300      	movs	r3, #0
    782a:	9300      	str	r3, [sp, #0]
    782c:	3301      	adds	r3, #1
    782e:	2400      	movs	r4, #0
    7830:	469b      	mov	fp, r3
    7832:	e656      	b.n	74e2 <__aeabi_dmul+0x46>
    7834:	000007ff 	.word	0x000007ff
    7838:	fffffc01 	.word	0xfffffc01
    783c:	000091d4 	.word	0x000091d4
    7840:	fffffc0d 	.word	0xfffffc0d
    7844:	000003ff 	.word	0x000003ff
    7848:	feffffff 	.word	0xfeffffff
    784c:	000007fe 	.word	0x000007fe
    7850:	2300      	movs	r3, #0
    7852:	2480      	movs	r4, #128	; 0x80
    7854:	2500      	movs	r5, #0
    7856:	4a44      	ldr	r2, [pc, #272]	; (7968 <__aeabi_dmul+0x4cc>)
    7858:	9301      	str	r3, [sp, #4]
    785a:	0324      	lsls	r4, r4, #12
    785c:	e68e      	b.n	757c <__aeabi_dmul+0xe0>
    785e:	2001      	movs	r0, #1
    7860:	1a40      	subs	r0, r0, r1
    7862:	2838      	cmp	r0, #56	; 0x38
    7864:	dd00      	ble.n	7868 <__aeabi_dmul+0x3cc>
    7866:	e686      	b.n	7576 <__aeabi_dmul+0xda>
    7868:	281f      	cmp	r0, #31
    786a:	dd5b      	ble.n	7924 <__aeabi_dmul+0x488>
    786c:	221f      	movs	r2, #31
    786e:	0023      	movs	r3, r4
    7870:	4252      	negs	r2, r2
    7872:	1a51      	subs	r1, r2, r1
    7874:	40cb      	lsrs	r3, r1
    7876:	0019      	movs	r1, r3
    7878:	2820      	cmp	r0, #32
    787a:	d003      	beq.n	7884 <__aeabi_dmul+0x3e8>
    787c:	4a3b      	ldr	r2, [pc, #236]	; (796c <__aeabi_dmul+0x4d0>)
    787e:	4462      	add	r2, ip
    7880:	4094      	lsls	r4, r2
    7882:	4325      	orrs	r5, r4
    7884:	1e6a      	subs	r2, r5, #1
    7886:	4195      	sbcs	r5, r2
    7888:	002a      	movs	r2, r5
    788a:	430a      	orrs	r2, r1
    788c:	2107      	movs	r1, #7
    788e:	000d      	movs	r5, r1
    7890:	2400      	movs	r4, #0
    7892:	4015      	ands	r5, r2
    7894:	4211      	tst	r1, r2
    7896:	d05b      	beq.n	7950 <__aeabi_dmul+0x4b4>
    7898:	210f      	movs	r1, #15
    789a:	2400      	movs	r4, #0
    789c:	4011      	ands	r1, r2
    789e:	2904      	cmp	r1, #4
    78a0:	d053      	beq.n	794a <__aeabi_dmul+0x4ae>
    78a2:	1d11      	adds	r1, r2, #4
    78a4:	4291      	cmp	r1, r2
    78a6:	4192      	sbcs	r2, r2
    78a8:	4252      	negs	r2, r2
    78aa:	18a4      	adds	r4, r4, r2
    78ac:	000a      	movs	r2, r1
    78ae:	0223      	lsls	r3, r4, #8
    78b0:	d54b      	bpl.n	794a <__aeabi_dmul+0x4ae>
    78b2:	2201      	movs	r2, #1
    78b4:	2400      	movs	r4, #0
    78b6:	2500      	movs	r5, #0
    78b8:	e660      	b.n	757c <__aeabi_dmul+0xe0>
    78ba:	2380      	movs	r3, #128	; 0x80
    78bc:	031b      	lsls	r3, r3, #12
    78be:	421c      	tst	r4, r3
    78c0:	d009      	beq.n	78d6 <__aeabi_dmul+0x43a>
    78c2:	421e      	tst	r6, r3
    78c4:	d107      	bne.n	78d6 <__aeabi_dmul+0x43a>
    78c6:	4333      	orrs	r3, r6
    78c8:	031c      	lsls	r4, r3, #12
    78ca:	4643      	mov	r3, r8
    78cc:	0015      	movs	r5, r2
    78ce:	0b24      	lsrs	r4, r4, #12
    78d0:	4a25      	ldr	r2, [pc, #148]	; (7968 <__aeabi_dmul+0x4cc>)
    78d2:	9301      	str	r3, [sp, #4]
    78d4:	e652      	b.n	757c <__aeabi_dmul+0xe0>
    78d6:	2280      	movs	r2, #128	; 0x80
    78d8:	0312      	lsls	r2, r2, #12
    78da:	4314      	orrs	r4, r2
    78dc:	0324      	lsls	r4, r4, #12
    78de:	4a22      	ldr	r2, [pc, #136]	; (7968 <__aeabi_dmul+0x4cc>)
    78e0:	0b24      	lsrs	r4, r4, #12
    78e2:	9701      	str	r7, [sp, #4]
    78e4:	e64a      	b.n	757c <__aeabi_dmul+0xe0>
    78e6:	f000 fc33 	bl	8150 <__clzsi2>
    78ea:	0003      	movs	r3, r0
    78ec:	001a      	movs	r2, r3
    78ee:	3215      	adds	r2, #21
    78f0:	3020      	adds	r0, #32
    78f2:	2a1c      	cmp	r2, #28
    78f4:	dc00      	bgt.n	78f8 <__aeabi_dmul+0x45c>
    78f6:	e684      	b.n	7602 <__aeabi_dmul+0x166>
    78f8:	4656      	mov	r6, sl
    78fa:	3b08      	subs	r3, #8
    78fc:	2200      	movs	r2, #0
    78fe:	409e      	lsls	r6, r3
    7900:	e689      	b.n	7616 <__aeabi_dmul+0x17a>
    7902:	f000 fc25 	bl	8150 <__clzsi2>
    7906:	0001      	movs	r1, r0
    7908:	0002      	movs	r2, r0
    790a:	3115      	adds	r1, #21
    790c:	3220      	adds	r2, #32
    790e:	291c      	cmp	r1, #28
    7910:	dc00      	bgt.n	7914 <__aeabi_dmul+0x478>
    7912:	e64e      	b.n	75b2 <__aeabi_dmul+0x116>
    7914:	0034      	movs	r4, r6
    7916:	3808      	subs	r0, #8
    7918:	2500      	movs	r5, #0
    791a:	4084      	lsls	r4, r0
    791c:	e653      	b.n	75c6 <__aeabi_dmul+0x12a>
    791e:	9b00      	ldr	r3, [sp, #0]
    7920:	469c      	mov	ip, r3
    7922:	e741      	b.n	77a8 <__aeabi_dmul+0x30c>
    7924:	4912      	ldr	r1, [pc, #72]	; (7970 <__aeabi_dmul+0x4d4>)
    7926:	0022      	movs	r2, r4
    7928:	4461      	add	r1, ip
    792a:	002e      	movs	r6, r5
    792c:	408d      	lsls	r5, r1
    792e:	408a      	lsls	r2, r1
    7930:	40c6      	lsrs	r6, r0
    7932:	1e69      	subs	r1, r5, #1
    7934:	418d      	sbcs	r5, r1
    7936:	4332      	orrs	r2, r6
    7938:	432a      	orrs	r2, r5
    793a:	40c4      	lsrs	r4, r0
    793c:	0753      	lsls	r3, r2, #29
    793e:	d0b6      	beq.n	78ae <__aeabi_dmul+0x412>
    7940:	210f      	movs	r1, #15
    7942:	4011      	ands	r1, r2
    7944:	2904      	cmp	r1, #4
    7946:	d1ac      	bne.n	78a2 <__aeabi_dmul+0x406>
    7948:	e7b1      	b.n	78ae <__aeabi_dmul+0x412>
    794a:	0765      	lsls	r5, r4, #29
    794c:	0264      	lsls	r4, r4, #9
    794e:	0b24      	lsrs	r4, r4, #12
    7950:	08d2      	lsrs	r2, r2, #3
    7952:	4315      	orrs	r5, r2
    7954:	2200      	movs	r2, #0
    7956:	e611      	b.n	757c <__aeabi_dmul+0xe0>
    7958:	2280      	movs	r2, #128	; 0x80
    795a:	0312      	lsls	r2, r2, #12
    795c:	4314      	orrs	r4, r2
    795e:	0324      	lsls	r4, r4, #12
    7960:	4a01      	ldr	r2, [pc, #4]	; (7968 <__aeabi_dmul+0x4cc>)
    7962:	0b24      	lsrs	r4, r4, #12
    7964:	e60a      	b.n	757c <__aeabi_dmul+0xe0>
    7966:	46c0      	nop			; (mov r8, r8)
    7968:	000007ff 	.word	0x000007ff
    796c:	0000043e 	.word	0x0000043e
    7970:	0000041e 	.word	0x0000041e

00007974 <__aeabi_dsub>:
__aeabi_dsub():
    7974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7976:	4657      	mov	r7, sl
    7978:	464e      	mov	r6, r9
    797a:	4645      	mov	r5, r8
    797c:	46de      	mov	lr, fp
    797e:	0004      	movs	r4, r0
    7980:	b5e0      	push	{r5, r6, r7, lr}
    7982:	001f      	movs	r7, r3
    7984:	0010      	movs	r0, r2
    7986:	030b      	lsls	r3, r1, #12
    7988:	0f62      	lsrs	r2, r4, #29
    798a:	004e      	lsls	r6, r1, #1
    798c:	0fcd      	lsrs	r5, r1, #31
    798e:	0a5b      	lsrs	r3, r3, #9
    7990:	0339      	lsls	r1, r7, #12
    7992:	4313      	orrs	r3, r2
    7994:	0a49      	lsrs	r1, r1, #9
    7996:	00e2      	lsls	r2, r4, #3
    7998:	0f44      	lsrs	r4, r0, #29
    799a:	4321      	orrs	r1, r4
    799c:	4cc2      	ldr	r4, [pc, #776]	; (7ca8 <__aeabi_dsub+0x334>)
    799e:	4691      	mov	r9, r2
    79a0:	4692      	mov	sl, r2
    79a2:	00c0      	lsls	r0, r0, #3
    79a4:	007a      	lsls	r2, r7, #1
    79a6:	4680      	mov	r8, r0
    79a8:	0d76      	lsrs	r6, r6, #21
    79aa:	0d52      	lsrs	r2, r2, #21
    79ac:	0fff      	lsrs	r7, r7, #31
    79ae:	42a2      	cmp	r2, r4
    79b0:	d100      	bne.n	79b4 <__aeabi_dsub+0x40>
    79b2:	e0b4      	b.n	7b1e <__aeabi_dsub+0x1aa>
    79b4:	2401      	movs	r4, #1
    79b6:	4067      	eors	r7, r4
    79b8:	46bb      	mov	fp, r7
    79ba:	42bd      	cmp	r5, r7
    79bc:	d100      	bne.n	79c0 <__aeabi_dsub+0x4c>
    79be:	e088      	b.n	7ad2 <__aeabi_dsub+0x15e>
    79c0:	1ab4      	subs	r4, r6, r2
    79c2:	46a4      	mov	ip, r4
    79c4:	2c00      	cmp	r4, #0
    79c6:	dc00      	bgt.n	79ca <__aeabi_dsub+0x56>
    79c8:	e0b2      	b.n	7b30 <__aeabi_dsub+0x1bc>
    79ca:	2a00      	cmp	r2, #0
    79cc:	d100      	bne.n	79d0 <__aeabi_dsub+0x5c>
    79ce:	e0c5      	b.n	7b5c <__aeabi_dsub+0x1e8>
    79d0:	4ab5      	ldr	r2, [pc, #724]	; (7ca8 <__aeabi_dsub+0x334>)
    79d2:	4296      	cmp	r6, r2
    79d4:	d100      	bne.n	79d8 <__aeabi_dsub+0x64>
    79d6:	e28b      	b.n	7ef0 <__aeabi_dsub+0x57c>
    79d8:	2280      	movs	r2, #128	; 0x80
    79da:	0412      	lsls	r2, r2, #16
    79dc:	4311      	orrs	r1, r2
    79de:	4662      	mov	r2, ip
    79e0:	2a38      	cmp	r2, #56	; 0x38
    79e2:	dd00      	ble.n	79e6 <__aeabi_dsub+0x72>
    79e4:	e1a1      	b.n	7d2a <__aeabi_dsub+0x3b6>
    79e6:	2a1f      	cmp	r2, #31
    79e8:	dd00      	ble.n	79ec <__aeabi_dsub+0x78>
    79ea:	e216      	b.n	7e1a <__aeabi_dsub+0x4a6>
    79ec:	2720      	movs	r7, #32
    79ee:	000c      	movs	r4, r1
    79f0:	1abf      	subs	r7, r7, r2
    79f2:	40bc      	lsls	r4, r7
    79f4:	0002      	movs	r2, r0
    79f6:	46a0      	mov	r8, r4
    79f8:	4664      	mov	r4, ip
    79fa:	40b8      	lsls	r0, r7
    79fc:	40e2      	lsrs	r2, r4
    79fe:	4644      	mov	r4, r8
    7a00:	4314      	orrs	r4, r2
    7a02:	0002      	movs	r2, r0
    7a04:	1e50      	subs	r0, r2, #1
    7a06:	4182      	sbcs	r2, r0
    7a08:	4660      	mov	r0, ip
    7a0a:	40c1      	lsrs	r1, r0
    7a0c:	4322      	orrs	r2, r4
    7a0e:	1a5b      	subs	r3, r3, r1
    7a10:	4649      	mov	r1, r9
    7a12:	1a8c      	subs	r4, r1, r2
    7a14:	45a1      	cmp	r9, r4
    7a16:	4192      	sbcs	r2, r2
    7a18:	4252      	negs	r2, r2
    7a1a:	1a9b      	subs	r3, r3, r2
    7a1c:	4698      	mov	r8, r3
    7a1e:	4643      	mov	r3, r8
    7a20:	021b      	lsls	r3, r3, #8
    7a22:	d400      	bmi.n	7a26 <__aeabi_dsub+0xb2>
    7a24:	e117      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7a26:	4643      	mov	r3, r8
    7a28:	025b      	lsls	r3, r3, #9
    7a2a:	0a5b      	lsrs	r3, r3, #9
    7a2c:	4698      	mov	r8, r3
    7a2e:	4643      	mov	r3, r8
    7a30:	2b00      	cmp	r3, #0
    7a32:	d100      	bne.n	7a36 <__aeabi_dsub+0xc2>
    7a34:	e16c      	b.n	7d10 <__aeabi_dsub+0x39c>
    7a36:	4640      	mov	r0, r8
    7a38:	f000 fb8a 	bl	8150 <__clzsi2>
    7a3c:	0002      	movs	r2, r0
    7a3e:	3a08      	subs	r2, #8
    7a40:	2120      	movs	r1, #32
    7a42:	0020      	movs	r0, r4
    7a44:	4643      	mov	r3, r8
    7a46:	1a89      	subs	r1, r1, r2
    7a48:	4093      	lsls	r3, r2
    7a4a:	40c8      	lsrs	r0, r1
    7a4c:	4094      	lsls	r4, r2
    7a4e:	4303      	orrs	r3, r0
    7a50:	4296      	cmp	r6, r2
    7a52:	dd00      	ble.n	7a56 <__aeabi_dsub+0xe2>
    7a54:	e157      	b.n	7d06 <__aeabi_dsub+0x392>
    7a56:	1b96      	subs	r6, r2, r6
    7a58:	1c71      	adds	r1, r6, #1
    7a5a:	291f      	cmp	r1, #31
    7a5c:	dd00      	ble.n	7a60 <__aeabi_dsub+0xec>
    7a5e:	e1cb      	b.n	7df8 <__aeabi_dsub+0x484>
    7a60:	2220      	movs	r2, #32
    7a62:	0018      	movs	r0, r3
    7a64:	0026      	movs	r6, r4
    7a66:	1a52      	subs	r2, r2, r1
    7a68:	4094      	lsls	r4, r2
    7a6a:	4090      	lsls	r0, r2
    7a6c:	40ce      	lsrs	r6, r1
    7a6e:	40cb      	lsrs	r3, r1
    7a70:	1e62      	subs	r2, r4, #1
    7a72:	4194      	sbcs	r4, r2
    7a74:	4330      	orrs	r0, r6
    7a76:	4698      	mov	r8, r3
    7a78:	2600      	movs	r6, #0
    7a7a:	4304      	orrs	r4, r0
    7a7c:	0763      	lsls	r3, r4, #29
    7a7e:	d009      	beq.n	7a94 <__aeabi_dsub+0x120>
    7a80:	230f      	movs	r3, #15
    7a82:	4023      	ands	r3, r4
    7a84:	2b04      	cmp	r3, #4
    7a86:	d005      	beq.n	7a94 <__aeabi_dsub+0x120>
    7a88:	1d23      	adds	r3, r4, #4
    7a8a:	42a3      	cmp	r3, r4
    7a8c:	41a4      	sbcs	r4, r4
    7a8e:	4264      	negs	r4, r4
    7a90:	44a0      	add	r8, r4
    7a92:	001c      	movs	r4, r3
    7a94:	4643      	mov	r3, r8
    7a96:	021b      	lsls	r3, r3, #8
    7a98:	d400      	bmi.n	7a9c <__aeabi_dsub+0x128>
    7a9a:	e0df      	b.n	7c5c <__aeabi_dsub+0x2e8>
    7a9c:	4b82      	ldr	r3, [pc, #520]	; (7ca8 <__aeabi_dsub+0x334>)
    7a9e:	3601      	adds	r6, #1
    7aa0:	429e      	cmp	r6, r3
    7aa2:	d100      	bne.n	7aa6 <__aeabi_dsub+0x132>
    7aa4:	e0fb      	b.n	7c9e <__aeabi_dsub+0x32a>
    7aa6:	4642      	mov	r2, r8
    7aa8:	4b80      	ldr	r3, [pc, #512]	; (7cac <__aeabi_dsub+0x338>)
    7aaa:	08e4      	lsrs	r4, r4, #3
    7aac:	401a      	ands	r2, r3
    7aae:	0013      	movs	r3, r2
    7ab0:	0571      	lsls	r1, r6, #21
    7ab2:	0752      	lsls	r2, r2, #29
    7ab4:	025b      	lsls	r3, r3, #9
    7ab6:	4322      	orrs	r2, r4
    7ab8:	0b1b      	lsrs	r3, r3, #12
    7aba:	0d49      	lsrs	r1, r1, #21
    7abc:	0509      	lsls	r1, r1, #20
    7abe:	07ed      	lsls	r5, r5, #31
    7ac0:	4319      	orrs	r1, r3
    7ac2:	4329      	orrs	r1, r5
    7ac4:	0010      	movs	r0, r2
    7ac6:	bcf0      	pop	{r4, r5, r6, r7}
    7ac8:	46bb      	mov	fp, r7
    7aca:	46b2      	mov	sl, r6
    7acc:	46a9      	mov	r9, r5
    7ace:	46a0      	mov	r8, r4
    7ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ad2:	1ab4      	subs	r4, r6, r2
    7ad4:	46a4      	mov	ip, r4
    7ad6:	2c00      	cmp	r4, #0
    7ad8:	dd58      	ble.n	7b8c <__aeabi_dsub+0x218>
    7ada:	2a00      	cmp	r2, #0
    7adc:	d100      	bne.n	7ae0 <__aeabi_dsub+0x16c>
    7ade:	e09e      	b.n	7c1e <__aeabi_dsub+0x2aa>
    7ae0:	4a71      	ldr	r2, [pc, #452]	; (7ca8 <__aeabi_dsub+0x334>)
    7ae2:	4296      	cmp	r6, r2
    7ae4:	d100      	bne.n	7ae8 <__aeabi_dsub+0x174>
    7ae6:	e13b      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7ae8:	2280      	movs	r2, #128	; 0x80
    7aea:	0412      	lsls	r2, r2, #16
    7aec:	4311      	orrs	r1, r2
    7aee:	4662      	mov	r2, ip
    7af0:	2a38      	cmp	r2, #56	; 0x38
    7af2:	dd00      	ble.n	7af6 <__aeabi_dsub+0x182>
    7af4:	e0c1      	b.n	7c7a <__aeabi_dsub+0x306>
    7af6:	2a1f      	cmp	r2, #31
    7af8:	dc00      	bgt.n	7afc <__aeabi_dsub+0x188>
    7afa:	e1bb      	b.n	7e74 <__aeabi_dsub+0x500>
    7afc:	000c      	movs	r4, r1
    7afe:	3a20      	subs	r2, #32
    7b00:	40d4      	lsrs	r4, r2
    7b02:	0022      	movs	r2, r4
    7b04:	4664      	mov	r4, ip
    7b06:	2c20      	cmp	r4, #32
    7b08:	d004      	beq.n	7b14 <__aeabi_dsub+0x1a0>
    7b0a:	2740      	movs	r7, #64	; 0x40
    7b0c:	1b3f      	subs	r7, r7, r4
    7b0e:	40b9      	lsls	r1, r7
    7b10:	4308      	orrs	r0, r1
    7b12:	4680      	mov	r8, r0
    7b14:	4644      	mov	r4, r8
    7b16:	1e61      	subs	r1, r4, #1
    7b18:	418c      	sbcs	r4, r1
    7b1a:	4314      	orrs	r4, r2
    7b1c:	e0b1      	b.n	7c82 <__aeabi_dsub+0x30e>
    7b1e:	000c      	movs	r4, r1
    7b20:	4304      	orrs	r4, r0
    7b22:	d02a      	beq.n	7b7a <__aeabi_dsub+0x206>
    7b24:	46bb      	mov	fp, r7
    7b26:	42bd      	cmp	r5, r7
    7b28:	d02d      	beq.n	7b86 <__aeabi_dsub+0x212>
    7b2a:	4c61      	ldr	r4, [pc, #388]	; (7cb0 <__aeabi_dsub+0x33c>)
    7b2c:	46a4      	mov	ip, r4
    7b2e:	44b4      	add	ip, r6
    7b30:	4664      	mov	r4, ip
    7b32:	2c00      	cmp	r4, #0
    7b34:	d05c      	beq.n	7bf0 <__aeabi_dsub+0x27c>
    7b36:	1b94      	subs	r4, r2, r6
    7b38:	46a4      	mov	ip, r4
    7b3a:	2e00      	cmp	r6, #0
    7b3c:	d000      	beq.n	7b40 <__aeabi_dsub+0x1cc>
    7b3e:	e115      	b.n	7d6c <__aeabi_dsub+0x3f8>
    7b40:	464d      	mov	r5, r9
    7b42:	431d      	orrs	r5, r3
    7b44:	d100      	bne.n	7b48 <__aeabi_dsub+0x1d4>
    7b46:	e1c3      	b.n	7ed0 <__aeabi_dsub+0x55c>
    7b48:	1e65      	subs	r5, r4, #1
    7b4a:	2c01      	cmp	r4, #1
    7b4c:	d100      	bne.n	7b50 <__aeabi_dsub+0x1dc>
    7b4e:	e20c      	b.n	7f6a <__aeabi_dsub+0x5f6>
    7b50:	4e55      	ldr	r6, [pc, #340]	; (7ca8 <__aeabi_dsub+0x334>)
    7b52:	42b4      	cmp	r4, r6
    7b54:	d100      	bne.n	7b58 <__aeabi_dsub+0x1e4>
    7b56:	e1f8      	b.n	7f4a <__aeabi_dsub+0x5d6>
    7b58:	46ac      	mov	ip, r5
    7b5a:	e10e      	b.n	7d7a <__aeabi_dsub+0x406>
    7b5c:	000a      	movs	r2, r1
    7b5e:	4302      	orrs	r2, r0
    7b60:	d100      	bne.n	7b64 <__aeabi_dsub+0x1f0>
    7b62:	e136      	b.n	7dd2 <__aeabi_dsub+0x45e>
    7b64:	0022      	movs	r2, r4
    7b66:	3a01      	subs	r2, #1
    7b68:	2c01      	cmp	r4, #1
    7b6a:	d100      	bne.n	7b6e <__aeabi_dsub+0x1fa>
    7b6c:	e1c6      	b.n	7efc <__aeabi_dsub+0x588>
    7b6e:	4c4e      	ldr	r4, [pc, #312]	; (7ca8 <__aeabi_dsub+0x334>)
    7b70:	45a4      	cmp	ip, r4
    7b72:	d100      	bne.n	7b76 <__aeabi_dsub+0x202>
    7b74:	e0f4      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7b76:	4694      	mov	ip, r2
    7b78:	e731      	b.n	79de <__aeabi_dsub+0x6a>
    7b7a:	2401      	movs	r4, #1
    7b7c:	4067      	eors	r7, r4
    7b7e:	46bb      	mov	fp, r7
    7b80:	42bd      	cmp	r5, r7
    7b82:	d000      	beq.n	7b86 <__aeabi_dsub+0x212>
    7b84:	e71c      	b.n	79c0 <__aeabi_dsub+0x4c>
    7b86:	4c4a      	ldr	r4, [pc, #296]	; (7cb0 <__aeabi_dsub+0x33c>)
    7b88:	46a4      	mov	ip, r4
    7b8a:	44b4      	add	ip, r6
    7b8c:	4664      	mov	r4, ip
    7b8e:	2c00      	cmp	r4, #0
    7b90:	d100      	bne.n	7b94 <__aeabi_dsub+0x220>
    7b92:	e0cf      	b.n	7d34 <__aeabi_dsub+0x3c0>
    7b94:	1b94      	subs	r4, r2, r6
    7b96:	46a4      	mov	ip, r4
    7b98:	2e00      	cmp	r6, #0
    7b9a:	d100      	bne.n	7b9e <__aeabi_dsub+0x22a>
    7b9c:	e15c      	b.n	7e58 <__aeabi_dsub+0x4e4>
    7b9e:	4e42      	ldr	r6, [pc, #264]	; (7ca8 <__aeabi_dsub+0x334>)
    7ba0:	42b2      	cmp	r2, r6
    7ba2:	d100      	bne.n	7ba6 <__aeabi_dsub+0x232>
    7ba4:	e1ec      	b.n	7f80 <__aeabi_dsub+0x60c>
    7ba6:	2680      	movs	r6, #128	; 0x80
    7ba8:	0436      	lsls	r6, r6, #16
    7baa:	4333      	orrs	r3, r6
    7bac:	4664      	mov	r4, ip
    7bae:	2c38      	cmp	r4, #56	; 0x38
    7bb0:	dd00      	ble.n	7bb4 <__aeabi_dsub+0x240>
    7bb2:	e1b3      	b.n	7f1c <__aeabi_dsub+0x5a8>
    7bb4:	2c1f      	cmp	r4, #31
    7bb6:	dd00      	ble.n	7bba <__aeabi_dsub+0x246>
    7bb8:	e238      	b.n	802c <__aeabi_dsub+0x6b8>
    7bba:	2620      	movs	r6, #32
    7bbc:	1b36      	subs	r6, r6, r4
    7bbe:	001c      	movs	r4, r3
    7bc0:	40b4      	lsls	r4, r6
    7bc2:	464f      	mov	r7, r9
    7bc4:	46a0      	mov	r8, r4
    7bc6:	4664      	mov	r4, ip
    7bc8:	40e7      	lsrs	r7, r4
    7bca:	4644      	mov	r4, r8
    7bcc:	433c      	orrs	r4, r7
    7bce:	464f      	mov	r7, r9
    7bd0:	40b7      	lsls	r7, r6
    7bd2:	003e      	movs	r6, r7
    7bd4:	1e77      	subs	r7, r6, #1
    7bd6:	41be      	sbcs	r6, r7
    7bd8:	4334      	orrs	r4, r6
    7bda:	4666      	mov	r6, ip
    7bdc:	40f3      	lsrs	r3, r6
    7bde:	18c9      	adds	r1, r1, r3
    7be0:	1824      	adds	r4, r4, r0
    7be2:	4284      	cmp	r4, r0
    7be4:	419b      	sbcs	r3, r3
    7be6:	425b      	negs	r3, r3
    7be8:	4698      	mov	r8, r3
    7bea:	0016      	movs	r6, r2
    7bec:	4488      	add	r8, r1
    7bee:	e04e      	b.n	7c8e <__aeabi_dsub+0x31a>
    7bf0:	4a30      	ldr	r2, [pc, #192]	; (7cb4 <__aeabi_dsub+0x340>)
    7bf2:	1c74      	adds	r4, r6, #1
    7bf4:	4214      	tst	r4, r2
    7bf6:	d000      	beq.n	7bfa <__aeabi_dsub+0x286>
    7bf8:	e0d6      	b.n	7da8 <__aeabi_dsub+0x434>
    7bfa:	464a      	mov	r2, r9
    7bfc:	431a      	orrs	r2, r3
    7bfe:	2e00      	cmp	r6, #0
    7c00:	d000      	beq.n	7c04 <__aeabi_dsub+0x290>
    7c02:	e15b      	b.n	7ebc <__aeabi_dsub+0x548>
    7c04:	2a00      	cmp	r2, #0
    7c06:	d100      	bne.n	7c0a <__aeabi_dsub+0x296>
    7c08:	e1a5      	b.n	7f56 <__aeabi_dsub+0x5e2>
    7c0a:	000a      	movs	r2, r1
    7c0c:	4302      	orrs	r2, r0
    7c0e:	d000      	beq.n	7c12 <__aeabi_dsub+0x29e>
    7c10:	e1bb      	b.n	7f8a <__aeabi_dsub+0x616>
    7c12:	464a      	mov	r2, r9
    7c14:	0759      	lsls	r1, r3, #29
    7c16:	08d2      	lsrs	r2, r2, #3
    7c18:	430a      	orrs	r2, r1
    7c1a:	08db      	lsrs	r3, r3, #3
    7c1c:	e027      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7c1e:	000a      	movs	r2, r1
    7c20:	4302      	orrs	r2, r0
    7c22:	d100      	bne.n	7c26 <__aeabi_dsub+0x2b2>
    7c24:	e174      	b.n	7f10 <__aeabi_dsub+0x59c>
    7c26:	0022      	movs	r2, r4
    7c28:	3a01      	subs	r2, #1
    7c2a:	2c01      	cmp	r4, #1
    7c2c:	d005      	beq.n	7c3a <__aeabi_dsub+0x2c6>
    7c2e:	4c1e      	ldr	r4, [pc, #120]	; (7ca8 <__aeabi_dsub+0x334>)
    7c30:	45a4      	cmp	ip, r4
    7c32:	d100      	bne.n	7c36 <__aeabi_dsub+0x2c2>
    7c34:	e094      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7c36:	4694      	mov	ip, r2
    7c38:	e759      	b.n	7aee <__aeabi_dsub+0x17a>
    7c3a:	4448      	add	r0, r9
    7c3c:	4548      	cmp	r0, r9
    7c3e:	4192      	sbcs	r2, r2
    7c40:	185b      	adds	r3, r3, r1
    7c42:	4698      	mov	r8, r3
    7c44:	0004      	movs	r4, r0
    7c46:	4252      	negs	r2, r2
    7c48:	4490      	add	r8, r2
    7c4a:	4643      	mov	r3, r8
    7c4c:	2602      	movs	r6, #2
    7c4e:	021b      	lsls	r3, r3, #8
    7c50:	d500      	bpl.n	7c54 <__aeabi_dsub+0x2e0>
    7c52:	e0c4      	b.n	7dde <__aeabi_dsub+0x46a>
    7c54:	3e01      	subs	r6, #1
    7c56:	0763      	lsls	r3, r4, #29
    7c58:	d000      	beq.n	7c5c <__aeabi_dsub+0x2e8>
    7c5a:	e711      	b.n	7a80 <__aeabi_dsub+0x10c>
    7c5c:	4643      	mov	r3, r8
    7c5e:	46b4      	mov	ip, r6
    7c60:	0759      	lsls	r1, r3, #29
    7c62:	08e2      	lsrs	r2, r4, #3
    7c64:	430a      	orrs	r2, r1
    7c66:	08db      	lsrs	r3, r3, #3
    7c68:	490f      	ldr	r1, [pc, #60]	; (7ca8 <__aeabi_dsub+0x334>)
    7c6a:	458c      	cmp	ip, r1
    7c6c:	d040      	beq.n	7cf0 <__aeabi_dsub+0x37c>
    7c6e:	4661      	mov	r1, ip
    7c70:	031b      	lsls	r3, r3, #12
    7c72:	0549      	lsls	r1, r1, #21
    7c74:	0b1b      	lsrs	r3, r3, #12
    7c76:	0d49      	lsrs	r1, r1, #21
    7c78:	e720      	b.n	7abc <__aeabi_dsub+0x148>
    7c7a:	4301      	orrs	r1, r0
    7c7c:	000c      	movs	r4, r1
    7c7e:	1e61      	subs	r1, r4, #1
    7c80:	418c      	sbcs	r4, r1
    7c82:	444c      	add	r4, r9
    7c84:	454c      	cmp	r4, r9
    7c86:	4192      	sbcs	r2, r2
    7c88:	4252      	negs	r2, r2
    7c8a:	4690      	mov	r8, r2
    7c8c:	4498      	add	r8, r3
    7c8e:	4643      	mov	r3, r8
    7c90:	021b      	lsls	r3, r3, #8
    7c92:	d5e0      	bpl.n	7c56 <__aeabi_dsub+0x2e2>
    7c94:	4b04      	ldr	r3, [pc, #16]	; (7ca8 <__aeabi_dsub+0x334>)
    7c96:	3601      	adds	r6, #1
    7c98:	429e      	cmp	r6, r3
    7c9a:	d000      	beq.n	7c9e <__aeabi_dsub+0x32a>
    7c9c:	e09f      	b.n	7dde <__aeabi_dsub+0x46a>
    7c9e:	0031      	movs	r1, r6
    7ca0:	2300      	movs	r3, #0
    7ca2:	2200      	movs	r2, #0
    7ca4:	e70a      	b.n	7abc <__aeabi_dsub+0x148>
    7ca6:	46c0      	nop			; (mov r8, r8)
    7ca8:	000007ff 	.word	0x000007ff
    7cac:	ff7fffff 	.word	0xff7fffff
    7cb0:	fffff801 	.word	0xfffff801
    7cb4:	000007fe 	.word	0x000007fe
    7cb8:	2a00      	cmp	r2, #0
    7cba:	d100      	bne.n	7cbe <__aeabi_dsub+0x34a>
    7cbc:	e160      	b.n	7f80 <__aeabi_dsub+0x60c>
    7cbe:	000a      	movs	r2, r1
    7cc0:	4302      	orrs	r2, r0
    7cc2:	d04d      	beq.n	7d60 <__aeabi_dsub+0x3ec>
    7cc4:	464a      	mov	r2, r9
    7cc6:	075c      	lsls	r4, r3, #29
    7cc8:	08d2      	lsrs	r2, r2, #3
    7cca:	4322      	orrs	r2, r4
    7ccc:	2480      	movs	r4, #128	; 0x80
    7cce:	08db      	lsrs	r3, r3, #3
    7cd0:	0324      	lsls	r4, r4, #12
    7cd2:	4223      	tst	r3, r4
    7cd4:	d007      	beq.n	7ce6 <__aeabi_dsub+0x372>
    7cd6:	08ce      	lsrs	r6, r1, #3
    7cd8:	4226      	tst	r6, r4
    7cda:	d104      	bne.n	7ce6 <__aeabi_dsub+0x372>
    7cdc:	465d      	mov	r5, fp
    7cde:	0033      	movs	r3, r6
    7ce0:	08c2      	lsrs	r2, r0, #3
    7ce2:	0749      	lsls	r1, r1, #29
    7ce4:	430a      	orrs	r2, r1
    7ce6:	0f51      	lsrs	r1, r2, #29
    7ce8:	00d2      	lsls	r2, r2, #3
    7cea:	08d2      	lsrs	r2, r2, #3
    7cec:	0749      	lsls	r1, r1, #29
    7cee:	430a      	orrs	r2, r1
    7cf0:	0011      	movs	r1, r2
    7cf2:	4319      	orrs	r1, r3
    7cf4:	d100      	bne.n	7cf8 <__aeabi_dsub+0x384>
    7cf6:	e1c8      	b.n	808a <__aeabi_dsub+0x716>
    7cf8:	2180      	movs	r1, #128	; 0x80
    7cfa:	0309      	lsls	r1, r1, #12
    7cfc:	430b      	orrs	r3, r1
    7cfe:	031b      	lsls	r3, r3, #12
    7d00:	49d5      	ldr	r1, [pc, #852]	; (8058 <__aeabi_dsub+0x6e4>)
    7d02:	0b1b      	lsrs	r3, r3, #12
    7d04:	e6da      	b.n	7abc <__aeabi_dsub+0x148>
    7d06:	49d5      	ldr	r1, [pc, #852]	; (805c <__aeabi_dsub+0x6e8>)
    7d08:	1ab6      	subs	r6, r6, r2
    7d0a:	400b      	ands	r3, r1
    7d0c:	4698      	mov	r8, r3
    7d0e:	e6b5      	b.n	7a7c <__aeabi_dsub+0x108>
    7d10:	0020      	movs	r0, r4
    7d12:	f000 fa1d 	bl	8150 <__clzsi2>
    7d16:	0002      	movs	r2, r0
    7d18:	3218      	adds	r2, #24
    7d1a:	2a1f      	cmp	r2, #31
    7d1c:	dc00      	bgt.n	7d20 <__aeabi_dsub+0x3ac>
    7d1e:	e68f      	b.n	7a40 <__aeabi_dsub+0xcc>
    7d20:	0023      	movs	r3, r4
    7d22:	3808      	subs	r0, #8
    7d24:	4083      	lsls	r3, r0
    7d26:	2400      	movs	r4, #0
    7d28:	e692      	b.n	7a50 <__aeabi_dsub+0xdc>
    7d2a:	4308      	orrs	r0, r1
    7d2c:	0002      	movs	r2, r0
    7d2e:	1e50      	subs	r0, r2, #1
    7d30:	4182      	sbcs	r2, r0
    7d32:	e66d      	b.n	7a10 <__aeabi_dsub+0x9c>
    7d34:	4cca      	ldr	r4, [pc, #808]	; (8060 <__aeabi_dsub+0x6ec>)
    7d36:	1c72      	adds	r2, r6, #1
    7d38:	4222      	tst	r2, r4
    7d3a:	d000      	beq.n	7d3e <__aeabi_dsub+0x3ca>
    7d3c:	e0ad      	b.n	7e9a <__aeabi_dsub+0x526>
    7d3e:	464a      	mov	r2, r9
    7d40:	431a      	orrs	r2, r3
    7d42:	2e00      	cmp	r6, #0
    7d44:	d1b8      	bne.n	7cb8 <__aeabi_dsub+0x344>
    7d46:	2a00      	cmp	r2, #0
    7d48:	d100      	bne.n	7d4c <__aeabi_dsub+0x3d8>
    7d4a:	e158      	b.n	7ffe <__aeabi_dsub+0x68a>
    7d4c:	000a      	movs	r2, r1
    7d4e:	4302      	orrs	r2, r0
    7d50:	d000      	beq.n	7d54 <__aeabi_dsub+0x3e0>
    7d52:	e159      	b.n	8008 <__aeabi_dsub+0x694>
    7d54:	464a      	mov	r2, r9
    7d56:	0759      	lsls	r1, r3, #29
    7d58:	08d2      	lsrs	r2, r2, #3
    7d5a:	430a      	orrs	r2, r1
    7d5c:	08db      	lsrs	r3, r3, #3
    7d5e:	e786      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7d60:	464a      	mov	r2, r9
    7d62:	0759      	lsls	r1, r3, #29
    7d64:	08d2      	lsrs	r2, r2, #3
    7d66:	430a      	orrs	r2, r1
    7d68:	08db      	lsrs	r3, r3, #3
    7d6a:	e7c1      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7d6c:	4dba      	ldr	r5, [pc, #744]	; (8058 <__aeabi_dsub+0x6e4>)
    7d6e:	42aa      	cmp	r2, r5
    7d70:	d100      	bne.n	7d74 <__aeabi_dsub+0x400>
    7d72:	e11e      	b.n	7fb2 <__aeabi_dsub+0x63e>
    7d74:	2580      	movs	r5, #128	; 0x80
    7d76:	042d      	lsls	r5, r5, #16
    7d78:	432b      	orrs	r3, r5
    7d7a:	4664      	mov	r4, ip
    7d7c:	2c38      	cmp	r4, #56	; 0x38
    7d7e:	dc5d      	bgt.n	7e3c <__aeabi_dsub+0x4c8>
    7d80:	2c1f      	cmp	r4, #31
    7d82:	dd00      	ble.n	7d86 <__aeabi_dsub+0x412>
    7d84:	e0d0      	b.n	7f28 <__aeabi_dsub+0x5b4>
    7d86:	2520      	movs	r5, #32
    7d88:	4667      	mov	r7, ip
    7d8a:	1b2d      	subs	r5, r5, r4
    7d8c:	464e      	mov	r6, r9
    7d8e:	001c      	movs	r4, r3
    7d90:	40fe      	lsrs	r6, r7
    7d92:	40ac      	lsls	r4, r5
    7d94:	4334      	orrs	r4, r6
    7d96:	464e      	mov	r6, r9
    7d98:	40ae      	lsls	r6, r5
    7d9a:	0035      	movs	r5, r6
    7d9c:	40fb      	lsrs	r3, r7
    7d9e:	1e6e      	subs	r6, r5, #1
    7da0:	41b5      	sbcs	r5, r6
    7da2:	1ac9      	subs	r1, r1, r3
    7da4:	432c      	orrs	r4, r5
    7da6:	e04e      	b.n	7e46 <__aeabi_dsub+0x4d2>
    7da8:	464a      	mov	r2, r9
    7daa:	1a14      	subs	r4, r2, r0
    7dac:	45a1      	cmp	r9, r4
    7dae:	4192      	sbcs	r2, r2
    7db0:	4252      	negs	r2, r2
    7db2:	4690      	mov	r8, r2
    7db4:	1a5f      	subs	r7, r3, r1
    7db6:	003a      	movs	r2, r7
    7db8:	4647      	mov	r7, r8
    7dba:	1bd2      	subs	r2, r2, r7
    7dbc:	4690      	mov	r8, r2
    7dbe:	0212      	lsls	r2, r2, #8
    7dc0:	d500      	bpl.n	7dc4 <__aeabi_dsub+0x450>
    7dc2:	e08b      	b.n	7edc <__aeabi_dsub+0x568>
    7dc4:	4642      	mov	r2, r8
    7dc6:	4322      	orrs	r2, r4
    7dc8:	d000      	beq.n	7dcc <__aeabi_dsub+0x458>
    7dca:	e630      	b.n	7a2e <__aeabi_dsub+0xba>
    7dcc:	2300      	movs	r3, #0
    7dce:	2500      	movs	r5, #0
    7dd0:	e74d      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7dd2:	464a      	mov	r2, r9
    7dd4:	0759      	lsls	r1, r3, #29
    7dd6:	08d2      	lsrs	r2, r2, #3
    7dd8:	430a      	orrs	r2, r1
    7dda:	08db      	lsrs	r3, r3, #3
    7ddc:	e744      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7dde:	4642      	mov	r2, r8
    7de0:	4b9e      	ldr	r3, [pc, #632]	; (805c <__aeabi_dsub+0x6e8>)
    7de2:	0861      	lsrs	r1, r4, #1
    7de4:	401a      	ands	r2, r3
    7de6:	0013      	movs	r3, r2
    7de8:	2201      	movs	r2, #1
    7dea:	4014      	ands	r4, r2
    7dec:	430c      	orrs	r4, r1
    7dee:	07da      	lsls	r2, r3, #31
    7df0:	085b      	lsrs	r3, r3, #1
    7df2:	4698      	mov	r8, r3
    7df4:	4314      	orrs	r4, r2
    7df6:	e641      	b.n	7a7c <__aeabi_dsub+0x108>
    7df8:	001a      	movs	r2, r3
    7dfa:	3e1f      	subs	r6, #31
    7dfc:	40f2      	lsrs	r2, r6
    7dfe:	0016      	movs	r6, r2
    7e00:	2920      	cmp	r1, #32
    7e02:	d003      	beq.n	7e0c <__aeabi_dsub+0x498>
    7e04:	2240      	movs	r2, #64	; 0x40
    7e06:	1a51      	subs	r1, r2, r1
    7e08:	408b      	lsls	r3, r1
    7e0a:	431c      	orrs	r4, r3
    7e0c:	1e62      	subs	r2, r4, #1
    7e0e:	4194      	sbcs	r4, r2
    7e10:	2300      	movs	r3, #0
    7e12:	4334      	orrs	r4, r6
    7e14:	4698      	mov	r8, r3
    7e16:	2600      	movs	r6, #0
    7e18:	e71d      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7e1a:	000c      	movs	r4, r1
    7e1c:	3a20      	subs	r2, #32
    7e1e:	40d4      	lsrs	r4, r2
    7e20:	0022      	movs	r2, r4
    7e22:	4664      	mov	r4, ip
    7e24:	2c20      	cmp	r4, #32
    7e26:	d004      	beq.n	7e32 <__aeabi_dsub+0x4be>
    7e28:	2740      	movs	r7, #64	; 0x40
    7e2a:	1b3f      	subs	r7, r7, r4
    7e2c:	40b9      	lsls	r1, r7
    7e2e:	4308      	orrs	r0, r1
    7e30:	4680      	mov	r8, r0
    7e32:	4644      	mov	r4, r8
    7e34:	1e61      	subs	r1, r4, #1
    7e36:	418c      	sbcs	r4, r1
    7e38:	4322      	orrs	r2, r4
    7e3a:	e5e9      	b.n	7a10 <__aeabi_dsub+0x9c>
    7e3c:	464c      	mov	r4, r9
    7e3e:	4323      	orrs	r3, r4
    7e40:	001c      	movs	r4, r3
    7e42:	1e63      	subs	r3, r4, #1
    7e44:	419c      	sbcs	r4, r3
    7e46:	1b04      	subs	r4, r0, r4
    7e48:	42a0      	cmp	r0, r4
    7e4a:	419b      	sbcs	r3, r3
    7e4c:	425b      	negs	r3, r3
    7e4e:	1acb      	subs	r3, r1, r3
    7e50:	4698      	mov	r8, r3
    7e52:	465d      	mov	r5, fp
    7e54:	0016      	movs	r6, r2
    7e56:	e5e2      	b.n	7a1e <__aeabi_dsub+0xaa>
    7e58:	464e      	mov	r6, r9
    7e5a:	431e      	orrs	r6, r3
    7e5c:	d100      	bne.n	7e60 <__aeabi_dsub+0x4ec>
    7e5e:	e0ae      	b.n	7fbe <__aeabi_dsub+0x64a>
    7e60:	1e66      	subs	r6, r4, #1
    7e62:	2c01      	cmp	r4, #1
    7e64:	d100      	bne.n	7e68 <__aeabi_dsub+0x4f4>
    7e66:	e0fd      	b.n	8064 <__aeabi_dsub+0x6f0>
    7e68:	4f7b      	ldr	r7, [pc, #492]	; (8058 <__aeabi_dsub+0x6e4>)
    7e6a:	42bc      	cmp	r4, r7
    7e6c:	d100      	bne.n	7e70 <__aeabi_dsub+0x4fc>
    7e6e:	e107      	b.n	8080 <__aeabi_dsub+0x70c>
    7e70:	46b4      	mov	ip, r6
    7e72:	e69b      	b.n	7bac <__aeabi_dsub+0x238>
    7e74:	4664      	mov	r4, ip
    7e76:	2220      	movs	r2, #32
    7e78:	1b12      	subs	r2, r2, r4
    7e7a:	000c      	movs	r4, r1
    7e7c:	4094      	lsls	r4, r2
    7e7e:	0007      	movs	r7, r0
    7e80:	4090      	lsls	r0, r2
    7e82:	46a0      	mov	r8, r4
    7e84:	4664      	mov	r4, ip
    7e86:	1e42      	subs	r2, r0, #1
    7e88:	4190      	sbcs	r0, r2
    7e8a:	4662      	mov	r2, ip
    7e8c:	40e7      	lsrs	r7, r4
    7e8e:	4644      	mov	r4, r8
    7e90:	40d1      	lsrs	r1, r2
    7e92:	433c      	orrs	r4, r7
    7e94:	4304      	orrs	r4, r0
    7e96:	185b      	adds	r3, r3, r1
    7e98:	e6f3      	b.n	7c82 <__aeabi_dsub+0x30e>
    7e9a:	4c6f      	ldr	r4, [pc, #444]	; (8058 <__aeabi_dsub+0x6e4>)
    7e9c:	42a2      	cmp	r2, r4
    7e9e:	d100      	bne.n	7ea2 <__aeabi_dsub+0x52e>
    7ea0:	e0d5      	b.n	804e <__aeabi_dsub+0x6da>
    7ea2:	4448      	add	r0, r9
    7ea4:	185b      	adds	r3, r3, r1
    7ea6:	4548      	cmp	r0, r9
    7ea8:	4189      	sbcs	r1, r1
    7eaa:	4249      	negs	r1, r1
    7eac:	185b      	adds	r3, r3, r1
    7eae:	07dc      	lsls	r4, r3, #31
    7eb0:	0840      	lsrs	r0, r0, #1
    7eb2:	085b      	lsrs	r3, r3, #1
    7eb4:	4698      	mov	r8, r3
    7eb6:	0016      	movs	r6, r2
    7eb8:	4304      	orrs	r4, r0
    7eba:	e6cc      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7ebc:	2a00      	cmp	r2, #0
    7ebe:	d000      	beq.n	7ec2 <__aeabi_dsub+0x54e>
    7ec0:	e082      	b.n	7fc8 <__aeabi_dsub+0x654>
    7ec2:	000a      	movs	r2, r1
    7ec4:	4302      	orrs	r2, r0
    7ec6:	d140      	bne.n	7f4a <__aeabi_dsub+0x5d6>
    7ec8:	2380      	movs	r3, #128	; 0x80
    7eca:	2500      	movs	r5, #0
    7ecc:	031b      	lsls	r3, r3, #12
    7ece:	e713      	b.n	7cf8 <__aeabi_dsub+0x384>
    7ed0:	074b      	lsls	r3, r1, #29
    7ed2:	08c2      	lsrs	r2, r0, #3
    7ed4:	431a      	orrs	r2, r3
    7ed6:	465d      	mov	r5, fp
    7ed8:	08cb      	lsrs	r3, r1, #3
    7eda:	e6c5      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7edc:	464a      	mov	r2, r9
    7ede:	1a84      	subs	r4, r0, r2
    7ee0:	42a0      	cmp	r0, r4
    7ee2:	4192      	sbcs	r2, r2
    7ee4:	1acb      	subs	r3, r1, r3
    7ee6:	4252      	negs	r2, r2
    7ee8:	1a9b      	subs	r3, r3, r2
    7eea:	4698      	mov	r8, r3
    7eec:	465d      	mov	r5, fp
    7eee:	e59e      	b.n	7a2e <__aeabi_dsub+0xba>
    7ef0:	464a      	mov	r2, r9
    7ef2:	0759      	lsls	r1, r3, #29
    7ef4:	08d2      	lsrs	r2, r2, #3
    7ef6:	430a      	orrs	r2, r1
    7ef8:	08db      	lsrs	r3, r3, #3
    7efa:	e6f9      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7efc:	464a      	mov	r2, r9
    7efe:	1a14      	subs	r4, r2, r0
    7f00:	45a1      	cmp	r9, r4
    7f02:	4192      	sbcs	r2, r2
    7f04:	1a5b      	subs	r3, r3, r1
    7f06:	4252      	negs	r2, r2
    7f08:	1a9b      	subs	r3, r3, r2
    7f0a:	4698      	mov	r8, r3
    7f0c:	2601      	movs	r6, #1
    7f0e:	e586      	b.n	7a1e <__aeabi_dsub+0xaa>
    7f10:	464a      	mov	r2, r9
    7f12:	0759      	lsls	r1, r3, #29
    7f14:	08d2      	lsrs	r2, r2, #3
    7f16:	430a      	orrs	r2, r1
    7f18:	08db      	lsrs	r3, r3, #3
    7f1a:	e6a5      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7f1c:	464c      	mov	r4, r9
    7f1e:	4323      	orrs	r3, r4
    7f20:	001c      	movs	r4, r3
    7f22:	1e63      	subs	r3, r4, #1
    7f24:	419c      	sbcs	r4, r3
    7f26:	e65b      	b.n	7be0 <__aeabi_dsub+0x26c>
    7f28:	4665      	mov	r5, ip
    7f2a:	001e      	movs	r6, r3
    7f2c:	3d20      	subs	r5, #32
    7f2e:	40ee      	lsrs	r6, r5
    7f30:	2c20      	cmp	r4, #32
    7f32:	d005      	beq.n	7f40 <__aeabi_dsub+0x5cc>
    7f34:	2540      	movs	r5, #64	; 0x40
    7f36:	1b2d      	subs	r5, r5, r4
    7f38:	40ab      	lsls	r3, r5
    7f3a:	464c      	mov	r4, r9
    7f3c:	431c      	orrs	r4, r3
    7f3e:	46a2      	mov	sl, r4
    7f40:	4654      	mov	r4, sl
    7f42:	1e63      	subs	r3, r4, #1
    7f44:	419c      	sbcs	r4, r3
    7f46:	4334      	orrs	r4, r6
    7f48:	e77d      	b.n	7e46 <__aeabi_dsub+0x4d2>
    7f4a:	074b      	lsls	r3, r1, #29
    7f4c:	08c2      	lsrs	r2, r0, #3
    7f4e:	431a      	orrs	r2, r3
    7f50:	465d      	mov	r5, fp
    7f52:	08cb      	lsrs	r3, r1, #3
    7f54:	e6cc      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7f56:	000a      	movs	r2, r1
    7f58:	4302      	orrs	r2, r0
    7f5a:	d100      	bne.n	7f5e <__aeabi_dsub+0x5ea>
    7f5c:	e736      	b.n	7dcc <__aeabi_dsub+0x458>
    7f5e:	074b      	lsls	r3, r1, #29
    7f60:	08c2      	lsrs	r2, r0, #3
    7f62:	431a      	orrs	r2, r3
    7f64:	465d      	mov	r5, fp
    7f66:	08cb      	lsrs	r3, r1, #3
    7f68:	e681      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7f6a:	464a      	mov	r2, r9
    7f6c:	1a84      	subs	r4, r0, r2
    7f6e:	42a0      	cmp	r0, r4
    7f70:	4192      	sbcs	r2, r2
    7f72:	1acb      	subs	r3, r1, r3
    7f74:	4252      	negs	r2, r2
    7f76:	1a9b      	subs	r3, r3, r2
    7f78:	4698      	mov	r8, r3
    7f7a:	465d      	mov	r5, fp
    7f7c:	2601      	movs	r6, #1
    7f7e:	e54e      	b.n	7a1e <__aeabi_dsub+0xaa>
    7f80:	074b      	lsls	r3, r1, #29
    7f82:	08c2      	lsrs	r2, r0, #3
    7f84:	431a      	orrs	r2, r3
    7f86:	08cb      	lsrs	r3, r1, #3
    7f88:	e6b2      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7f8a:	464a      	mov	r2, r9
    7f8c:	1a14      	subs	r4, r2, r0
    7f8e:	45a1      	cmp	r9, r4
    7f90:	4192      	sbcs	r2, r2
    7f92:	1a5f      	subs	r7, r3, r1
    7f94:	4252      	negs	r2, r2
    7f96:	1aba      	subs	r2, r7, r2
    7f98:	4690      	mov	r8, r2
    7f9a:	0212      	lsls	r2, r2, #8
    7f9c:	d56b      	bpl.n	8076 <__aeabi_dsub+0x702>
    7f9e:	464a      	mov	r2, r9
    7fa0:	1a84      	subs	r4, r0, r2
    7fa2:	42a0      	cmp	r0, r4
    7fa4:	4192      	sbcs	r2, r2
    7fa6:	1acb      	subs	r3, r1, r3
    7fa8:	4252      	negs	r2, r2
    7faa:	1a9b      	subs	r3, r3, r2
    7fac:	4698      	mov	r8, r3
    7fae:	465d      	mov	r5, fp
    7fb0:	e564      	b.n	7a7c <__aeabi_dsub+0x108>
    7fb2:	074b      	lsls	r3, r1, #29
    7fb4:	08c2      	lsrs	r2, r0, #3
    7fb6:	431a      	orrs	r2, r3
    7fb8:	465d      	mov	r5, fp
    7fba:	08cb      	lsrs	r3, r1, #3
    7fbc:	e698      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7fbe:	074b      	lsls	r3, r1, #29
    7fc0:	08c2      	lsrs	r2, r0, #3
    7fc2:	431a      	orrs	r2, r3
    7fc4:	08cb      	lsrs	r3, r1, #3
    7fc6:	e64f      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7fc8:	000a      	movs	r2, r1
    7fca:	4302      	orrs	r2, r0
    7fcc:	d090      	beq.n	7ef0 <__aeabi_dsub+0x57c>
    7fce:	464a      	mov	r2, r9
    7fd0:	075c      	lsls	r4, r3, #29
    7fd2:	08d2      	lsrs	r2, r2, #3
    7fd4:	4314      	orrs	r4, r2
    7fd6:	2280      	movs	r2, #128	; 0x80
    7fd8:	08db      	lsrs	r3, r3, #3
    7fda:	0312      	lsls	r2, r2, #12
    7fdc:	4213      	tst	r3, r2
    7fde:	d008      	beq.n	7ff2 <__aeabi_dsub+0x67e>
    7fe0:	08ce      	lsrs	r6, r1, #3
    7fe2:	4216      	tst	r6, r2
    7fe4:	d105      	bne.n	7ff2 <__aeabi_dsub+0x67e>
    7fe6:	08c0      	lsrs	r0, r0, #3
    7fe8:	0749      	lsls	r1, r1, #29
    7fea:	4308      	orrs	r0, r1
    7fec:	0004      	movs	r4, r0
    7fee:	465d      	mov	r5, fp
    7ff0:	0033      	movs	r3, r6
    7ff2:	0f61      	lsrs	r1, r4, #29
    7ff4:	00e2      	lsls	r2, r4, #3
    7ff6:	0749      	lsls	r1, r1, #29
    7ff8:	08d2      	lsrs	r2, r2, #3
    7ffa:	430a      	orrs	r2, r1
    7ffc:	e678      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7ffe:	074b      	lsls	r3, r1, #29
    8000:	08c2      	lsrs	r2, r0, #3
    8002:	431a      	orrs	r2, r3
    8004:	08cb      	lsrs	r3, r1, #3
    8006:	e632      	b.n	7c6e <__aeabi_dsub+0x2fa>
    8008:	4448      	add	r0, r9
    800a:	185b      	adds	r3, r3, r1
    800c:	4548      	cmp	r0, r9
    800e:	4192      	sbcs	r2, r2
    8010:	4698      	mov	r8, r3
    8012:	4252      	negs	r2, r2
    8014:	4490      	add	r8, r2
    8016:	4643      	mov	r3, r8
    8018:	0004      	movs	r4, r0
    801a:	021b      	lsls	r3, r3, #8
    801c:	d400      	bmi.n	8020 <__aeabi_dsub+0x6ac>
    801e:	e61a      	b.n	7c56 <__aeabi_dsub+0x2e2>
    8020:	4642      	mov	r2, r8
    8022:	4b0e      	ldr	r3, [pc, #56]	; (805c <__aeabi_dsub+0x6e8>)
    8024:	2601      	movs	r6, #1
    8026:	401a      	ands	r2, r3
    8028:	4690      	mov	r8, r2
    802a:	e614      	b.n	7c56 <__aeabi_dsub+0x2e2>
    802c:	4666      	mov	r6, ip
    802e:	001f      	movs	r7, r3
    8030:	3e20      	subs	r6, #32
    8032:	40f7      	lsrs	r7, r6
    8034:	2c20      	cmp	r4, #32
    8036:	d005      	beq.n	8044 <__aeabi_dsub+0x6d0>
    8038:	2640      	movs	r6, #64	; 0x40
    803a:	1b36      	subs	r6, r6, r4
    803c:	40b3      	lsls	r3, r6
    803e:	464c      	mov	r4, r9
    8040:	431c      	orrs	r4, r3
    8042:	46a2      	mov	sl, r4
    8044:	4654      	mov	r4, sl
    8046:	1e63      	subs	r3, r4, #1
    8048:	419c      	sbcs	r4, r3
    804a:	433c      	orrs	r4, r7
    804c:	e5c8      	b.n	7be0 <__aeabi_dsub+0x26c>
    804e:	0011      	movs	r1, r2
    8050:	2300      	movs	r3, #0
    8052:	2200      	movs	r2, #0
    8054:	e532      	b.n	7abc <__aeabi_dsub+0x148>
    8056:	46c0      	nop			; (mov r8, r8)
    8058:	000007ff 	.word	0x000007ff
    805c:	ff7fffff 	.word	0xff7fffff
    8060:	000007fe 	.word	0x000007fe
    8064:	464a      	mov	r2, r9
    8066:	1814      	adds	r4, r2, r0
    8068:	4284      	cmp	r4, r0
    806a:	4192      	sbcs	r2, r2
    806c:	185b      	adds	r3, r3, r1
    806e:	4698      	mov	r8, r3
    8070:	4252      	negs	r2, r2
    8072:	4490      	add	r8, r2
    8074:	e5e9      	b.n	7c4a <__aeabi_dsub+0x2d6>
    8076:	4642      	mov	r2, r8
    8078:	4322      	orrs	r2, r4
    807a:	d100      	bne.n	807e <__aeabi_dsub+0x70a>
    807c:	e6a6      	b.n	7dcc <__aeabi_dsub+0x458>
    807e:	e5ea      	b.n	7c56 <__aeabi_dsub+0x2e2>
    8080:	074b      	lsls	r3, r1, #29
    8082:	08c2      	lsrs	r2, r0, #3
    8084:	431a      	orrs	r2, r3
    8086:	08cb      	lsrs	r3, r1, #3
    8088:	e632      	b.n	7cf0 <__aeabi_dsub+0x37c>
    808a:	2200      	movs	r2, #0
    808c:	4901      	ldr	r1, [pc, #4]	; (8094 <__aeabi_dsub+0x720>)
    808e:	0013      	movs	r3, r2
    8090:	e514      	b.n	7abc <__aeabi_dsub+0x148>
    8092:	46c0      	nop			; (mov r8, r8)
    8094:	000007ff 	.word	0x000007ff

00008098 <__aeabi_d2iz>:
__aeabi_d2iz():
    8098:	000a      	movs	r2, r1
    809a:	b530      	push	{r4, r5, lr}
    809c:	4c13      	ldr	r4, [pc, #76]	; (80ec <__aeabi_d2iz+0x54>)
    809e:	0053      	lsls	r3, r2, #1
    80a0:	0309      	lsls	r1, r1, #12
    80a2:	0005      	movs	r5, r0
    80a4:	0b09      	lsrs	r1, r1, #12
    80a6:	2000      	movs	r0, #0
    80a8:	0d5b      	lsrs	r3, r3, #21
    80aa:	0fd2      	lsrs	r2, r2, #31
    80ac:	42a3      	cmp	r3, r4
    80ae:	dd04      	ble.n	80ba <__aeabi_d2iz+0x22>
    80b0:	480f      	ldr	r0, [pc, #60]	; (80f0 <__aeabi_d2iz+0x58>)
    80b2:	4283      	cmp	r3, r0
    80b4:	dd02      	ble.n	80bc <__aeabi_d2iz+0x24>
    80b6:	4b0f      	ldr	r3, [pc, #60]	; (80f4 <__aeabi_d2iz+0x5c>)
    80b8:	18d0      	adds	r0, r2, r3
    80ba:	bd30      	pop	{r4, r5, pc}
    80bc:	2080      	movs	r0, #128	; 0x80
    80be:	0340      	lsls	r0, r0, #13
    80c0:	4301      	orrs	r1, r0
    80c2:	480d      	ldr	r0, [pc, #52]	; (80f8 <__aeabi_d2iz+0x60>)
    80c4:	1ac0      	subs	r0, r0, r3
    80c6:	281f      	cmp	r0, #31
    80c8:	dd08      	ble.n	80dc <__aeabi_d2iz+0x44>
    80ca:	480c      	ldr	r0, [pc, #48]	; (80fc <__aeabi_d2iz+0x64>)
    80cc:	1ac3      	subs	r3, r0, r3
    80ce:	40d9      	lsrs	r1, r3
    80d0:	000b      	movs	r3, r1
    80d2:	4258      	negs	r0, r3
    80d4:	2a00      	cmp	r2, #0
    80d6:	d1f0      	bne.n	80ba <__aeabi_d2iz+0x22>
    80d8:	0018      	movs	r0, r3
    80da:	e7ee      	b.n	80ba <__aeabi_d2iz+0x22>
    80dc:	4c08      	ldr	r4, [pc, #32]	; (8100 <__aeabi_d2iz+0x68>)
    80de:	40c5      	lsrs	r5, r0
    80e0:	46a4      	mov	ip, r4
    80e2:	4463      	add	r3, ip
    80e4:	4099      	lsls	r1, r3
    80e6:	000b      	movs	r3, r1
    80e8:	432b      	orrs	r3, r5
    80ea:	e7f2      	b.n	80d2 <__aeabi_d2iz+0x3a>
    80ec:	000003fe 	.word	0x000003fe
    80f0:	0000041d 	.word	0x0000041d
    80f4:	7fffffff 	.word	0x7fffffff
    80f8:	00000433 	.word	0x00000433
    80fc:	00000413 	.word	0x00000413
    8100:	fffffbed 	.word	0xfffffbed

00008104 <__aeabi_ui2d>:
__aeabi_ui2d():
    8104:	b510      	push	{r4, lr}
    8106:	1e04      	subs	r4, r0, #0
    8108:	d010      	beq.n	812c <__aeabi_ui2d+0x28>
    810a:	f000 f821 	bl	8150 <__clzsi2>
    810e:	4b0f      	ldr	r3, [pc, #60]	; (814c <__aeabi_ui2d+0x48>)
    8110:	1a1b      	subs	r3, r3, r0
    8112:	280a      	cmp	r0, #10
    8114:	dc11      	bgt.n	813a <__aeabi_ui2d+0x36>
    8116:	220b      	movs	r2, #11
    8118:	0021      	movs	r1, r4
    811a:	1a12      	subs	r2, r2, r0
    811c:	40d1      	lsrs	r1, r2
    811e:	3015      	adds	r0, #21
    8120:	030a      	lsls	r2, r1, #12
    8122:	055b      	lsls	r3, r3, #21
    8124:	4084      	lsls	r4, r0
    8126:	0b12      	lsrs	r2, r2, #12
    8128:	0d5b      	lsrs	r3, r3, #21
    812a:	e001      	b.n	8130 <__aeabi_ui2d+0x2c>
    812c:	2300      	movs	r3, #0
    812e:	2200      	movs	r2, #0
    8130:	051b      	lsls	r3, r3, #20
    8132:	4313      	orrs	r3, r2
    8134:	0020      	movs	r0, r4
    8136:	0019      	movs	r1, r3
    8138:	bd10      	pop	{r4, pc}
    813a:	0022      	movs	r2, r4
    813c:	380b      	subs	r0, #11
    813e:	4082      	lsls	r2, r0
    8140:	055b      	lsls	r3, r3, #21
    8142:	0312      	lsls	r2, r2, #12
    8144:	2400      	movs	r4, #0
    8146:	0b12      	lsrs	r2, r2, #12
    8148:	0d5b      	lsrs	r3, r3, #21
    814a:	e7f1      	b.n	8130 <__aeabi_ui2d+0x2c>
    814c:	0000041e 	.word	0x0000041e

00008150 <__clzsi2>:
__clzsi2():
    8150:	211c      	movs	r1, #28
    8152:	2301      	movs	r3, #1
    8154:	041b      	lsls	r3, r3, #16
    8156:	4298      	cmp	r0, r3
    8158:	d301      	bcc.n	815e <__clzsi2+0xe>
    815a:	0c00      	lsrs	r0, r0, #16
    815c:	3910      	subs	r1, #16
    815e:	0a1b      	lsrs	r3, r3, #8
    8160:	4298      	cmp	r0, r3
    8162:	d301      	bcc.n	8168 <__clzsi2+0x18>
    8164:	0a00      	lsrs	r0, r0, #8
    8166:	3908      	subs	r1, #8
    8168:	091b      	lsrs	r3, r3, #4
    816a:	4298      	cmp	r0, r3
    816c:	d301      	bcc.n	8172 <__clzsi2+0x22>
    816e:	0900      	lsrs	r0, r0, #4
    8170:	3904      	subs	r1, #4
    8172:	a202      	add	r2, pc, #8	; (adr r2, 817c <__clzsi2+0x2c>)
    8174:	5c10      	ldrb	r0, [r2, r0]
    8176:	1840      	adds	r0, r0, r1
    8178:	4770      	bx	lr
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	02020304 	.word	0x02020304
    8180:	01010101 	.word	0x01010101
	...

0000818c <__clzdi2>:
__clzdi2():
    818c:	b510      	push	{r4, lr}
    818e:	2900      	cmp	r1, #0
    8190:	d103      	bne.n	819a <__clzdi2+0xe>
    8192:	f7ff ffdd 	bl	8150 <__clzsi2>
    8196:	3020      	adds	r0, #32
    8198:	e002      	b.n	81a0 <__clzdi2+0x14>
    819a:	1c08      	adds	r0, r1, #0
    819c:	f7ff ffd8 	bl	8150 <__clzsi2>
    81a0:	bd10      	pop	{r4, pc}
    81a2:	46c0      	nop			; (mov r8, r8)

000081a4 <strlen>:
strlen():
    81a4:	2300      	movs	r3, #0
    81a6:	5cc2      	ldrb	r2, [r0, r3]
    81a8:	3301      	adds	r3, #1
    81aa:	2a00      	cmp	r2, #0
    81ac:	d1fb      	bne.n	81a6 <strlen+0x2>
    81ae:	1e58      	subs	r0, r3, #1
    81b0:	4770      	bx	lr
	...

000081b4 <SystemInit>:
SystemInit():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:112
    //看门狗默认为开启，而且复位之后只能开启或关闭看门狗一次
    //SIM_COPC &= ~SIM_COPC_COPT_MASK;    //DISABLE_WDOG 

    /* System clock initialization */
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    81b4:	4b27      	ldr	r3, [pc, #156]	; (8254 <SystemInit+0xa0>)
    81b6:	4a28      	ldr	r2, [pc, #160]	; (8258 <SystemInit+0xa4>)
    81b8:	21c0      	movs	r1, #192	; 0xc0
    81ba:	0289      	lsls	r1, r1, #10
    81bc:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:114
    /* SIM_SCGC5: PORTA=1 */
    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
    81be:	4927      	ldr	r1, [pc, #156]	; (825c <SystemInit+0xa8>)
    81c0:	5858      	ldr	r0, [r3, r1]
    81c2:	2280      	movs	r2, #128	; 0x80
    81c4:	0092      	lsls	r2, r2, #2
    81c6:	4302      	orrs	r2, r0
    81c8:	505a      	str	r2, [r3, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:115
    if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    81ca:	4b25      	ldr	r3, [pc, #148]	; (8260 <SystemInit+0xac>)
    81cc:	789b      	ldrb	r3, [r3, #2]
    81ce:	071b      	lsls	r3, r3, #28
    81d0:	d505      	bpl.n	81de <SystemInit+0x2a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:117
        /* PMC_REGSC: ACKISO=1 */
        PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    81d2:	4a23      	ldr	r2, [pc, #140]	; (8260 <SystemInit+0xac>)
    81d4:	7893      	ldrb	r3, [r2, #2]
    81d6:	2108      	movs	r1, #8
    81d8:	430b      	orrs	r3, r1
    81da:	b2db      	uxtb	r3, r3
    81dc:	7093      	strb	r3, [r2, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:120
    }
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
    81de:	4b1d      	ldr	r3, [pc, #116]	; (8254 <SystemInit+0xa0>)
    81e0:	4a1d      	ldr	r2, [pc, #116]	; (8258 <SystemInit+0xa4>)
    81e2:	2180      	movs	r1, #128	; 0x80
    81e4:	0249      	lsls	r1, r1, #9
    81e6:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:122
    /* SIM_SOPT2: ??=0,PLLFLLSEL=0 */
    SIM_SOPT2 &= (uint32_t)~(uint32_t)((SIM_SOPT2_PLLFLLSEL_MASK | 0x00020000U)); /* Select FLL as a clock source for various peripherals */
    81e8:	4a1e      	ldr	r2, [pc, #120]	; (8264 <SystemInit+0xb0>)
    81ea:	5899      	ldr	r1, [r3, r2]
    81ec:	481e      	ldr	r0, [pc, #120]	; (8268 <SystemInit+0xb4>)
    81ee:	4001      	ands	r1, r0
    81f0:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:124
    /* SIM_SOPT1: OSC32KSEL=0 */
    SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz clock for various peripherals */
    81f2:	6819      	ldr	r1, [r3, #0]
    81f4:	481d      	ldr	r0, [pc, #116]	; (826c <SystemInit+0xb8>)
    81f6:	4001      	ands	r1, r0
    81f8:	6019      	str	r1, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:126
    /* SIM_SOPT2: TPMSRC=1 */
    SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    81fa:	5899      	ldr	r1, [r3, r2]
    81fc:	481c      	ldr	r0, [pc, #112]	; (8270 <SystemInit+0xbc>)
    81fe:	4008      	ands	r0, r1
    8200:	2180      	movs	r1, #128	; 0x80
    8202:	0449      	lsls	r1, r1, #17
    8204:	4301      	orrs	r1, r0
    8206:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:133
    )) | (uint32_t)(
            SIM_SOPT2_TPMSRC(0x01)
    ));                      /* Set the TPM clock */
    /* Switch to FEI Mode */
    /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
    MCG_C1 = MCG_C1_CLKS(0x00) |
    8208:	4b1a      	ldr	r3, [pc, #104]	; (8274 <SystemInit+0xc0>)
    820a:	2206      	movs	r2, #6
    820c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:138
            MCG_C1_FRDIV(0x00) |
            MCG_C1_IREFS_MASK |
            MCG_C1_IRCLKEN_MASK;
    /* MCG_C2: LOCRE0=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
    MCG_C2 &= (uint8_t)~(uint8_t)(
    820e:	785a      	ldrb	r2, [r3, #1]
    8210:	2140      	movs	r1, #64	; 0x40
    8212:	400a      	ands	r2, r1
    8214:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:147
            MCG_C2_EREFS0_MASK |
            MCG_C2_LP_MASK |
            MCG_C2_IRCS_MASK
    );
    /* MCG_C4: DMX32=1,DRST_DRS=1 */
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    8216:	78d9      	ldrb	r1, [r3, #3]
    8218:	b249      	sxtb	r1, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:149
            MCG_C4_DRST_DRS(0x02)
    )) | (uint8_t)(
    821a:	221f      	movs	r2, #31
    821c:	4011      	ands	r1, r2
    821e:	3a7f      	subs	r2, #127	; 0x7f
    8220:	430a      	orrs	r2, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:147
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    8222:	b2d2      	uxtb	r2, r2
    8224:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:154
            MCG_C4_DMX32_MASK |
            MCG_C4_DRST_DRS(0x01)
    ));
    /* OSC0_CR: ERCLKEN=0,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
    OSC0_CR = 0x00U;
    8226:	2200      	movs	r2, #0
    8228:	4913      	ldr	r1, [pc, #76]	; (8278 <SystemInit+0xc4>)
    822a:	700a      	strb	r2, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:156
    /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
    MCG_C5 = MCG_C5_PRDIV0(0x00);
    822c:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:158
    /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
    MCG_C6 = MCG_C6_VDIV0(0x00);
    822e:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:159 (discriminator 1)
    while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    8230:	4b10      	ldr	r3, [pc, #64]	; (8274 <SystemInit+0xc0>)
    8232:	799b      	ldrb	r3, [r3, #6]
    8234:	06db      	lsls	r3, r3, #27
    8236:	d5fb      	bpl.n	8230 <SystemInit+0x7c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:161 (discriminator 1)
    }
    while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    8238:	4b0e      	ldr	r3, [pc, #56]	; (8274 <SystemInit+0xc0>)
    823a:	799a      	ldrb	r2, [r3, #6]
    823c:	230c      	movs	r3, #12
    823e:	421a      	tst	r2, r3
    8240:	d1fa      	bne.n	8238 <SystemInit+0x84>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:234
    //        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break;
    //    }
    //    //4.现在处于PEE模式

    //开启PORT模块时钟
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK
    8242:	4904      	ldr	r1, [pc, #16]	; (8254 <SystemInit+0xa0>)
    8244:	4a05      	ldr	r2, [pc, #20]	; (825c <SystemInit+0xa8>)
    8246:	5888      	ldr	r0, [r1, r2]
    8248:	23f8      	movs	r3, #248	; 0xf8
    824a:	019b      	lsls	r3, r3, #6
    824c:	4303      	orrs	r3, r0
    824e:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/system_MKL36Z4.c:239
            | SIM_SCGC5_PORTB_MASK
            | SIM_SCGC5_PORTC_MASK
            | SIM_SCGC5_PORTD_MASK
            | SIM_SCGC5_PORTE_MASK;
}
    8250:	4770      	bx	lr
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	40047000 	.word	0x40047000
    8258:	00001044 	.word	0x00001044
    825c:	00001038 	.word	0x00001038
    8260:	4007d000 	.word	0x4007d000
    8264:	00001004 	.word	0x00001004
    8268:	fffcffff 	.word	0xfffcffff
    826c:	fff3ffff 	.word	0xfff3ffff
    8270:	fcffffff 	.word	0xfcffffff
    8274:	40064000 	.word	0x40064000
    8278:	40065000 	.word	0x40065000

0000827c <dma_clear>:
dma_clear():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:197
//函数名称：dma_clear
//参数说明：ch:
//函数返回：清通道中断与错误标志
//======================================================================
void dma_clear(uint8_t ch) {
  if ((DMA_DSR_BCR(ch) & DMA_DSR_BCR_DONE_MASK) == DMA_DSR_BCR_DONE_MASK ||
    827c:	0103      	lsls	r3, r0, #4
    827e:	4a0f      	ldr	r2, [pc, #60]	; (82bc <dma_clear+0x40>)
    8280:	4694      	mov	ip, r2
    8282:	4463      	add	r3, ip
    8284:	681b      	ldr	r3, [r3, #0]
    8286:	01db      	lsls	r3, r3, #7
    8288:	d40e      	bmi.n	82a8 <dma_clear+0x2c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:198 (discriminator 1)
      (DMA_DSR_BCR(ch) & DMA_DSR_BCR_BES_MASK) == DMA_DSR_BCR_BES_MASK ||
    828a:	0103      	lsls	r3, r0, #4
    828c:	4463      	add	r3, ip
    828e:	681b      	ldr	r3, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:197 (discriminator 1)
  if ((DMA_DSR_BCR(ch) & DMA_DSR_BCR_DONE_MASK) == DMA_DSR_BCR_DONE_MASK ||
    8290:	009b      	lsls	r3, r3, #2
    8292:	d409      	bmi.n	82a8 <dma_clear+0x2c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:199
      (DMA_DSR_BCR(ch) & DMA_DSR_BCR_BED_MASK) == DMA_DSR_BCR_BED_MASK ||
    8294:	0103      	lsls	r3, r0, #4
    8296:	4463      	add	r3, ip
    8298:	681b      	ldr	r3, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:198
      (DMA_DSR_BCR(ch) & DMA_DSR_BCR_BES_MASK) == DMA_DSR_BCR_BES_MASK ||
    829a:	00db      	lsls	r3, r3, #3
    829c:	d404      	bmi.n	82a8 <dma_clear+0x2c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:200
      (DMA_DSR_BCR(ch) & DMA_DSR_BCR_CE_MASK) == DMA_DSR_BCR_CE_MASK) {
    829e:	0103      	lsls	r3, r0, #4
    82a0:	4463      	add	r3, ip
    82a2:	681b      	ldr	r3, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:199
      (DMA_DSR_BCR(ch) & DMA_DSR_BCR_BED_MASK) == DMA_DSR_BCR_BED_MASK ||
    82a4:	005b      	lsls	r3, r3, #1
    82a6:	d508      	bpl.n	82ba <dma_clear+0x3e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:201
    DMA_DSR_BCR(ch) |= DMA_DSR_BCR_DONE_MASK;  //清DMA传输完成标志, 写1清除
    82a8:	0100      	lsls	r0, r0, #4
    82aa:	4b04      	ldr	r3, [pc, #16]	; (82bc <dma_clear+0x40>)
    82ac:	469c      	mov	ip, r3
    82ae:	4460      	add	r0, ip
    82b0:	6802      	ldr	r2, [r0, #0]
    82b2:	2380      	movs	r3, #128	; 0x80
    82b4:	045b      	lsls	r3, r3, #17
    82b6:	4313      	orrs	r3, r2
    82b8:	6003      	str	r3, [r0, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:203
  }
}
    82ba:	4770      	bx	lr
    82bc:	40008108 	.word	0x40008108

000082c0 <dma_uart_init>:
dma_uart_init():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:26
void dma_uart_init(uint8_t chSend, uint8_t chRecv, uint32_t buff) {
    82c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82c2:	46de      	mov	lr, fp
    82c4:	4657      	mov	r7, sl
    82c6:	464e      	mov	r6, r9
    82c8:	4645      	mov	r5, r8
    82ca:	b5e0      	push	{r5, r6, r7, lr}
    82cc:	b083      	sub	sp, #12
    82ce:	0006      	movs	r6, r0
    82d0:	000c      	movs	r4, r1
    82d2:	4691      	mov	r9, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:28
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;  //启动串口0时钟
    82d4:	4b40      	ldr	r3, [pc, #256]	; (83d8 <dma_uart_init+0x118>)
    82d6:	4941      	ldr	r1, [pc, #260]	; (83dc <dma_uart_init+0x11c>)
    82d8:	5858      	ldr	r0, [r3, r1]
    82da:	2280      	movs	r2, #128	; 0x80
    82dc:	00d2      	lsls	r2, r2, #3
    82de:	4302      	orrs	r2, r0
    82e0:	505a      	str	r2, [r3, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:29
  UART0_C5 |= UART_C4_TDMAS_MASK;     //使能UART0的TDMA
    82e2:	493f      	ldr	r1, [pc, #252]	; (83e0 <dma_uart_init+0x120>)
    82e4:	7aca      	ldrb	r2, [r1, #11]
    82e6:	2780      	movs	r7, #128	; 0x80
    82e8:	427f      	negs	r7, r7
    82ea:	433a      	orrs	r2, r7
    82ec:	b2d2      	uxtb	r2, r2
    82ee:	72ca      	strb	r2, [r1, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:30
  UART0_C5 |= UART_C4_RDMAS_MASK;     //使能UART0的RDMA
    82f0:	7aca      	ldrb	r2, [r1, #11]
    82f2:	2020      	movs	r0, #32
    82f4:	4302      	orrs	r2, r0
    82f6:	b2d2      	uxtb	r2, r2
    82f8:	72ca      	strb	r2, [r1, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:36
  SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;  // 开DMA MUX模块时钟
    82fa:	493a      	ldr	r1, [pc, #232]	; (83e4 <dma_uart_init+0x124>)
    82fc:	585a      	ldr	r2, [r3, r1]
    82fe:	2002      	movs	r0, #2
    8300:	4302      	orrs	r2, r0
    8302:	505a      	str	r2, [r3, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:37
  SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;     // 开 DMA模块时钟
    8304:	3104      	adds	r1, #4
    8306:	5858      	ldr	r0, [r3, r1]
    8308:	2280      	movs	r2, #128	; 0x80
    830a:	0052      	lsls	r2, r2, #1
    830c:	4302      	orrs	r2, r0
    830e:	505a      	str	r2, [r3, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:39
  DMAMUX0_CHCFG(chSend) = 0x00;
    8310:	4d35      	ldr	r5, [pc, #212]	; (83e8 <dma_uart_init+0x128>)
    8312:	2300      	movs	r3, #0
    8314:	4698      	mov	r8, r3
    8316:	55ab      	strb	r3, [r5, r6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:40
  DMAMUX0_CHCFG(chRecv) = 0x00;
    8318:	552b      	strb	r3, [r5, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:42
  DMAMUX0_CHCFG(chSend) |= DMAMUX_CHCFG_SOURCE(DMA_UART0_Tx);
    831a:	5dab      	ldrb	r3, [r5, r6]
    831c:	2203      	movs	r2, #3
    831e:	4313      	orrs	r3, r2
    8320:	b2db      	uxtb	r3, r3
    8322:	55ab      	strb	r3, [r5, r6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:43
  DMAMUX0_CHCFG(chRecv) |= DMAMUX_CHCFG_SOURCE(DMA_UART0_Rx);
    8324:	5d2b      	ldrb	r3, [r5, r4]
    8326:	2202      	movs	r2, #2
    8328:	4313      	orrs	r3, r2
    832a:	b2db      	uxtb	r3, r3
    832c:	552b      	strb	r3, [r5, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:46
  dma_clear(chSend);
    832e:	0030      	movs	r0, r6
    8330:	f7ff ffa4 	bl	827c <dma_clear>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:47
  dma_clear(chRecv);
    8334:	0020      	movs	r0, r4
    8336:	f7ff ffa1 	bl	827c <dma_clear>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:51
  DMA_DCR(chSend) = 0x00;
    833a:	0132      	lsls	r2, r6, #4
    833c:	4b2b      	ldr	r3, [pc, #172]	; (83ec <dma_uart_init+0x12c>)
    833e:	469c      	mov	ip, r3
    8340:	4494      	add	ip, r2
    8342:	4663      	mov	r3, ip
    8344:	4641      	mov	r1, r8
    8346:	6019      	str	r1, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:52
  DMA_DCR(chRecv) = 0x00;
    8348:	0123      	lsls	r3, r4, #4
    834a:	4928      	ldr	r1, [pc, #160]	; (83ec <dma_uart_init+0x12c>)
    834c:	9301      	str	r3, [sp, #4]
    834e:	469a      	mov	sl, r3
    8350:	4451      	add	r1, sl
    8352:	4640      	mov	r0, r8
    8354:	6008      	str	r0, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:55
  DMA_DCR(chSend) |=
    8356:	4660      	mov	r0, ip
    8358:	6800      	ldr	r0, [r0, #0]
    835a:	4683      	mov	fp, r0
    835c:	4824      	ldr	r0, [pc, #144]	; (83f0 <dma_uart_init+0x130>)
    835e:	4682      	mov	sl, r0
    8360:	4658      	mov	r0, fp
    8362:	4653      	mov	r3, sl
    8364:	4318      	orrs	r0, r3
    8366:	4663      	mov	r3, ip
    8368:	6018      	str	r0, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:69
  DMA_DCR(chRecv) |=
    836a:	680b      	ldr	r3, [r1, #0]
    836c:	469a      	mov	sl, r3
    836e:	4b21      	ldr	r3, [pc, #132]	; (83f4 <dma_uart_init+0x134>)
    8370:	4650      	mov	r0, sl
    8372:	4318      	orrs	r0, r3
    8374:	6008      	str	r0, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:85
  DMA_SAR(chSend) = (uint32_t)buff;
    8376:	0031      	movs	r1, r6
    8378:	3110      	adds	r1, #16
    837a:	0109      	lsls	r1, r1, #4
    837c:	464b      	mov	r3, r9
    837e:	481e      	ldr	r0, [pc, #120]	; (83f8 <dma_uart_init+0x138>)
    8380:	500b      	str	r3, [r1, r0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:86
  DMA_DAR(chSend) = (uint32_t)&UART0_D;
    8382:	4684      	mov	ip, r0
    8384:	4461      	add	r1, ip
    8386:	4b1d      	ldr	r3, [pc, #116]	; (83fc <dma_uart_init+0x13c>)
    8388:	604b      	str	r3, [r1, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:88
  DMA_SAR(chRecv) = (uint32_t)&UART0_D;
    838a:	0021      	movs	r1, r4
    838c:	3110      	adds	r1, #16
    838e:	0109      	lsls	r1, r1, #4
    8390:	500b      	str	r3, [r1, r0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:89
  DMA_DAR(chRecv) = (uint32_t)buff;
    8392:	4461      	add	r1, ip
    8394:	464b      	mov	r3, r9
    8396:	604b      	str	r3, [r1, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:92
  DMA_DSR_BCR(chSend) &= ~DMA_DSR_BCR_BCR_MASK;  // 一定要先清零
    8398:	4b19      	ldr	r3, [pc, #100]	; (8400 <dma_uart_init+0x140>)
    839a:	469c      	mov	ip, r3
    839c:	4462      	add	r2, ip
    839e:	6811      	ldr	r1, [r2, #0]
    83a0:	0e09      	lsrs	r1, r1, #24
    83a2:	0609      	lsls	r1, r1, #24
    83a4:	6011      	str	r1, [r2, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:93
  DMA_DSR_BCR(chSend) = DMA_DSR_BCR_BCR(0);      // 初始化先不要发数据
    83a6:	4643      	mov	r3, r8
    83a8:	6013      	str	r3, [r2, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:96
  DMA_DSR_BCR(chRecv) &= ~DMA_DSR_BCR_BCR_MASK;  // 一定要先清零
    83aa:	9b01      	ldr	r3, [sp, #4]
    83ac:	4463      	add	r3, ip
    83ae:	681a      	ldr	r2, [r3, #0]
    83b0:	0e12      	lsrs	r2, r2, #24
    83b2:	0612      	lsls	r2, r2, #24
    83b4:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:97
  DMA_DSR_BCR(chRecv) = DMA_DSR_BCR_BCR(DMA_DSR_BCR_MAXLEN);
    83b6:	4a13      	ldr	r2, [pc, #76]	; (8404 <dma_uart_init+0x144>)
    83b8:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:100
  DMAMUX0_CHCFG(chSend) |= (DMAMUX_CHCFG_ENBL_MASK);
    83ba:	5dab      	ldrb	r3, [r5, r6]
    83bc:	433b      	orrs	r3, r7
    83be:	b2db      	uxtb	r3, r3
    83c0:	55ab      	strb	r3, [r5, r6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:101
  DMAMUX0_CHCFG(chRecv) |= (DMAMUX_CHCFG_ENBL_MASK);
    83c2:	5d2b      	ldrb	r3, [r5, r4]
    83c4:	431f      	orrs	r7, r3
    83c6:	b2ff      	uxtb	r7, r7
    83c8:	552f      	strb	r7, [r5, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:102
}
    83ca:	b003      	add	sp, #12
    83cc:	bcf0      	pop	{r4, r5, r6, r7}
    83ce:	46bb      	mov	fp, r7
    83d0:	46b2      	mov	sl, r6
    83d2:	46a9      	mov	r9, r5
    83d4:	46a0      	mov	r8, r4
    83d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83d8:	40047000 	.word	0x40047000
    83dc:	00001034 	.word	0x00001034
    83e0:	4006a000 	.word	0x4006a000
    83e4:	0000103c 	.word	0x0000103c
    83e8:	40021000 	.word	0x40021000
    83ec:	4000810c 	.word	0x4000810c
    83f0:	60d20080 	.word	0x60d20080
    83f4:	609a0080 	.word	0x609a0080
    83f8:	40008000 	.word	0x40008000
    83fc:	4006a007 	.word	0x4006a007
    8400:	40008108 	.word	0x40008108
    8404:	0000ffff 	.word	0x0000ffff

00008408 <dma_uart_recv>:
dma_uart_recv():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:112
void dma_uart_recv(uint8_t chRecv, uint32_t dstAddress, uint32_t len) {
    8408:	b570      	push	{r4, r5, r6, lr}
    840a:	0004      	movs	r4, r0
    840c:	0015      	movs	r5, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:114
  DMA_DAR(chRecv) = dstAddress;
    840e:	0003      	movs	r3, r0
    8410:	3310      	adds	r3, #16
    8412:	011b      	lsls	r3, r3, #4
    8414:	4a13      	ldr	r2, [pc, #76]	; (8464 <dma_uart_recv+0x5c>)
    8416:	4694      	mov	ip, r2
    8418:	4463      	add	r3, ip
    841a:	6059      	str	r1, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:117
  dma_clear(chRecv);
    841c:	f7ff ff2e 	bl	827c <dma_clear>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:120
  DMA_DCR(chRecv) &= ~DMA_DCR_ERQ_MASK;
    8420:	0123      	lsls	r3, r4, #4
    8422:	4a11      	ldr	r2, [pc, #68]	; (8468 <dma_uart_recv+0x60>)
    8424:	1899      	adds	r1, r3, r2
    8426:	680a      	ldr	r2, [r1, #0]
    8428:	4810      	ldr	r0, [pc, #64]	; (846c <dma_uart_recv+0x64>)
    842a:	4002      	ands	r2, r0
    842c:	600a      	str	r2, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:121
  DMAMUX0_CHCFG(chRecv) &= ~(DMAMUX_CHCFG_ENBL_MASK);
    842e:	4810      	ldr	r0, [pc, #64]	; (8470 <dma_uart_recv+0x68>)
    8430:	5d02      	ldrb	r2, [r0, r4]
    8432:	267f      	movs	r6, #127	; 0x7f
    8434:	4032      	ands	r2, r6
    8436:	5502      	strb	r2, [r0, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:124
  DMA_DSR_BCR(chRecv) &= ~DMA_DSR_BCR_BCR_MASK;  // 一定要先清零
    8438:	4a0e      	ldr	r2, [pc, #56]	; (8474 <dma_uart_recv+0x6c>)
    843a:	4694      	mov	ip, r2
    843c:	4463      	add	r3, ip
    843e:	681a      	ldr	r2, [r3, #0]
    8440:	0e12      	lsrs	r2, r2, #24
    8442:	0612      	lsls	r2, r2, #24
    8444:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:125
  DMA_DSR_BCR(chRecv) = DMA_DSR_BCR_BCR(len);
    8446:	022d      	lsls	r5, r5, #8
    8448:	0a2d      	lsrs	r5, r5, #8
    844a:	601d      	str	r5, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:128
  DMAMUX0_CHCFG(chRecv) |= (DMAMUX_CHCFG_ENBL_MASK);
    844c:	5d03      	ldrb	r3, [r0, r4]
    844e:	2280      	movs	r2, #128	; 0x80
    8450:	4252      	negs	r2, r2
    8452:	4313      	orrs	r3, r2
    8454:	b2db      	uxtb	r3, r3
    8456:	5503      	strb	r3, [r0, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:129
  DMA_DCR(chRecv) |= DMA_DCR_ERQ_MASK;
    8458:	680a      	ldr	r2, [r1, #0]
    845a:	2380      	movs	r3, #128	; 0x80
    845c:	05db      	lsls	r3, r3, #23
    845e:	4313      	orrs	r3, r2
    8460:	600b      	str	r3, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:130
}
    8462:	bd70      	pop	{r4, r5, r6, pc}
    8464:	40008000 	.word	0x40008000
    8468:	4000810c 	.word	0x4000810c
    846c:	bfffffff 	.word	0xbfffffff
    8470:	40021000 	.word	0x40021000
    8474:	40008108 	.word	0x40008108

00008478 <dma_uart_send>:
dma_uart_send():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:140
void dma_uart_send(uint8_t chSend, uint32_t srcAddress, uint32_t len) {
    8478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    847a:	46ce      	mov	lr, r9
    847c:	4647      	mov	r7, r8
    847e:	b580      	push	{r7, lr}
    8480:	0004      	movs	r4, r0
    8482:	4689      	mov	r9, r1
    8484:	0015      	movs	r5, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:142
  if ((len & 0xFFF00000) > 0) {
    8486:	0d13      	lsrs	r3, r2, #20
    8488:	d000      	beq.n	848c <dma_uart_send+0x14>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:143
    len = 0xFFFFF;
    848a:	4d1a      	ldr	r5, [pc, #104]	; (84f4 <dma_uart_send+0x7c>)
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:147
  dma_clear(chSend);
    848c:	0020      	movs	r0, r4
    848e:	f7ff fef5 	bl	827c <dma_clear>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:150
  DMA_DCR(chSend) &= ~DMA_DCR_ERQ_MASK;
    8492:	0123      	lsls	r3, r4, #4
    8494:	4a18      	ldr	r2, [pc, #96]	; (84f8 <dma_uart_send+0x80>)
    8496:	1898      	adds	r0, r3, r2
    8498:	6802      	ldr	r2, [r0, #0]
    849a:	4918      	ldr	r1, [pc, #96]	; (84fc <dma_uart_send+0x84>)
    849c:	400a      	ands	r2, r1
    849e:	6002      	str	r2, [r0, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:151
  DMAMUX0_CHCFG(chSend) &= ~(DMAMUX_CHCFG_ENBL_MASK);
    84a0:	4e17      	ldr	r6, [pc, #92]	; (8500 <dma_uart_send+0x88>)
    84a2:	5d32      	ldrb	r2, [r6, r4]
    84a4:	217f      	movs	r1, #127	; 0x7f
    84a6:	400a      	ands	r2, r1
    84a8:	5532      	strb	r2, [r6, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:154
  DMA_DAR(chSend) = (uint32_t)&UART0_D;
    84aa:	0022      	movs	r2, r4
    84ac:	3210      	adds	r2, #16
    84ae:	0112      	lsls	r2, r2, #4
    84b0:	4914      	ldr	r1, [pc, #80]	; (8504 <dma_uart_send+0x8c>)
    84b2:	4688      	mov	r8, r1
    84b4:	4490      	add	r8, r2
    84b6:	4914      	ldr	r1, [pc, #80]	; (8508 <dma_uart_send+0x90>)
    84b8:	4647      	mov	r7, r8
    84ba:	6079      	str	r1, [r7, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:157
  DMA_SAR(chSend) = srcAddress;
    84bc:	4911      	ldr	r1, [pc, #68]	; (8504 <dma_uart_send+0x8c>)
    84be:	464f      	mov	r7, r9
    84c0:	5057      	str	r7, [r2, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:160
  DMA_DSR_BCR(chSend) &= ~DMA_DSR_BCR_BCR_MASK;  // 一定要先清零
    84c2:	4a12      	ldr	r2, [pc, #72]	; (850c <dma_uart_send+0x94>)
    84c4:	4694      	mov	ip, r2
    84c6:	4463      	add	r3, ip
    84c8:	681a      	ldr	r2, [r3, #0]
    84ca:	0e12      	lsrs	r2, r2, #24
    84cc:	0612      	lsls	r2, r2, #24
    84ce:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:161
  DMA_DSR_BCR(chSend) = DMA_DSR_BCR_BCR(len);
    84d0:	022d      	lsls	r5, r5, #8
    84d2:	0a2d      	lsrs	r5, r5, #8
    84d4:	601d      	str	r5, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:164
  DMAMUX0_CHCFG(chSend) |= (DMAMUX_CHCFG_ENBL_MASK);
    84d6:	5d33      	ldrb	r3, [r6, r4]
    84d8:	2280      	movs	r2, #128	; 0x80
    84da:	4252      	negs	r2, r2
    84dc:	4313      	orrs	r3, r2
    84de:	b2db      	uxtb	r3, r3
    84e0:	5533      	strb	r3, [r6, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:165
  DMA_DCR(chSend) |= DMA_DCR_ERQ_MASK;
    84e2:	6802      	ldr	r2, [r0, #0]
    84e4:	2380      	movs	r3, #128	; 0x80
    84e6:	05db      	lsls	r3, r3, #23
    84e8:	4313      	orrs	r3, r2
    84ea:	6003      	str	r3, [r0, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/dma.c:166
}
    84ec:	bcc0      	pop	{r6, r7}
    84ee:	46b9      	mov	r9, r7
    84f0:	46b0      	mov	r8, r6
    84f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84f4:	000fffff 	.word	0x000fffff
    84f8:	4000810c 	.word	0x4000810c
    84fc:	bfffffff 	.word	0xbfffffff
    8500:	40021000 	.word	0x40021000
    8504:	40008000 	.word	0x40008000
    8508:	4006a007 	.word	0x4006a007
    850c:	40008108 	.word	0x40008108

00008510 <flash_read_physical>:
flash_read_physical():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:203
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
    8510:	b510      	push	{r4, lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:206
	uint8_t *src;
	src=(uint8_t *)addr;
	memcpy(dest,src,N);
    8512:	f000 fe4d 	bl	91b0 <memcpy>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:207
}
    8516:	bd10      	pop	{r4, pc}

00008518 <flash_isempty>:
flash_isempty():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:254
{
   uint16_t i,flag;
   uint8_t* buff;
   i = 0;
   flag = 1;
   for(i = 0; i<N; i++)   //遍历区域内字节
    8518:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:254 (discriminator 1)
    851a:	428b      	cmp	r3, r1
    851c:	d206      	bcs.n	852c <flash_isempty+0x14>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:256
   {
	  buff=(uint8_t*)(sect*0x400);
    851e:	0282      	lsls	r2, r0, #10
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:257
      if(buff[i]!=0xff)   //非空
    8520:	5cd2      	ldrb	r2, [r2, r3]
    8522:	2aff      	cmp	r2, #255	; 0xff
    8524:	d105      	bne.n	8532 <flash_isempty+0x1a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:254 (discriminator 2)
   for(i = 0; i<N; i++)   //遍历区域内字节
    8526:	3301      	adds	r3, #1
    8528:	b29b      	uxth	r3, r3
    852a:	e7f6      	b.n	851a <flash_isempty+0x2>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:253
   flag = 1;
    852c:	2001      	movs	r0, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:263
      {
      	  flag=0;
          break;
       }
   }
   return flag;
    852e:	b2c0      	uxtb	r0, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:264
}
    8530:	4770      	bx	lr
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:259
      	  flag=0;
    8532:	2000      	movs	r0, #0
    8534:	e7fb      	b.n	852e <flash_isempty+0x16>
	...

00008538 <flash_cmd_launch>:
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:342
//======================================================================
uint32_t flash_cmd_launch(void)
{
	uint8_t irq_flag=0;
    // 清除访问错误标志位和非法访问标志位
    FTFA_FSTAT = ACCERR | FPVIOL;
    8538:	4b0f      	ldr	r3, [pc, #60]	; (8578 <flash_cmd_launch+0x40>)
    853a:	2230      	movs	r2, #48	; 0x30
    853c:	701a      	strb	r2, [r3, #0]
__get_PRIMASK():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\02_CPU/core_cmFunc.h:484
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    853e:	f3ef 8310 	mrs	r3, PRIMASK
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:343
    if(__get_PRIMASK() == 0U)
    8542:	2b00      	cmp	r3, #0
    8544:	d112      	bne.n	856c <flash_cmd_launch+0x34>
__disable_irq():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\02_CPU/core_cmFunc.h:344
  __ASM volatile ("cpsid i" : : : "memory");
    8546:	b672      	cpsid	i
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:346
    {
    	__disable_irq();  //关总中断
    	irq_flag = 1;
    8548:	3a2f      	subs	r2, #47	; 0x2f
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:349
    }
    // 启动命令
    FTFA_FSTAT = CCIF;
    854a:	4b0b      	ldr	r3, [pc, #44]	; (8578 <flash_cmd_launch+0x40>)
    854c:	2180      	movs	r1, #128	; 0x80
    854e:	7019      	strb	r1, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:351 (discriminator 1)
    // 等待命令结束
    while(!(FTFA_FSTAT & CCIF));
    8550:	4b09      	ldr	r3, [pc, #36]	; (8578 <flash_cmd_launch+0x40>)
    8552:	781b      	ldrb	r3, [r3, #0]
    8554:	b25b      	sxtb	r3, r3
    8556:	2b00      	cmp	r3, #0
    8558:	dafa      	bge.n	8550 <flash_cmd_launch+0x18>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:352
    if(irq_flag == 1)
    855a:	2a01      	cmp	r2, #1
    855c:	d008      	beq.n	8570 <flash_cmd_launch+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:357
    {
    	__enable_irq();  //开总中断
    }
    // 检查错误标志
    if(FTFA_FSTAT & (ACCERR | FPVIOL | MGSTAT0))
    855e:	4b06      	ldr	r3, [pc, #24]	; (8578 <flash_cmd_launch+0x40>)
    8560:	781a      	ldrb	r2, [r3, #0]
    8562:	2331      	movs	r3, #49	; 0x31
    8564:	421a      	tst	r2, r3
    8566:	d105      	bne.n	8574 <flash_cmd_launch+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:359
        return 1 ; //执行命令出错
    return 0; //执行命令成功
    8568:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:360
}
    856a:	4770      	bx	lr
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:340
	uint8_t irq_flag=0;
    856c:	2200      	movs	r2, #0
    856e:	e7ec      	b.n	854a <flash_cmd_launch+0x12>
__enable_irq():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\02_CPU/core_cmFunc.h:333
  __ASM volatile ("cpsie i" : : : "memory");
    8570:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\02_CPU/core_cmFunc.h:334
}
    8572:	e7f4      	b.n	855e <flash_cmd_launch+0x26>
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:358
        return 1 ; //执行命令出错
    8574:	2001      	movs	r0, #1
    8576:	e7f8      	b.n	856a <flash_cmd_launch+0x32>
    8578:	40020000 	.word	0x40020000

0000857c <flash_erase>:
flash_erase():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:50
{
    857c:	b510      	push	{r4, lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:57
    dest.word    = (uint32_t)(sect*(1<<10));
    857e:	0284      	lsls	r4, r0, #10
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:60
    FTFA_FCCOB0 = ERSSCR; // 擦除扇区命令
    8580:	4b16      	ldr	r3, [pc, #88]	; (85dc <flash_erase+0x60>)
    8582:	2209      	movs	r2, #9
    8584:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:63
    FTFA_FCCOB1 = dest.byte[2];
    8586:	0482      	lsls	r2, r0, #18
    8588:	0e12      	lsrs	r2, r2, #24
    858a:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:64
    FTFA_FCCOB2 = dest.byte[1];
    858c:	0680      	lsls	r0, r0, #26
    858e:	0e00      	lsrs	r0, r0, #24
    8590:	7158      	strb	r0, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:65
    FTFA_FCCOB3 = dest.byte[0];
    8592:	2200      	movs	r2, #0
    8594:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:68
    if(1 == flash_cmd_launch())    //若执行命令出现错误
    8596:	f7ff ffcf 	bl	8538 <flash_cmd_launch>
    859a:	2801      	cmp	r0, #1
    859c:	d01a      	beq.n	85d4 <flash_erase+0x58>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:73
    if(dest.word < 0x400)
    859e:	2380      	movs	r3, #128	; 0x80
    85a0:	00db      	lsls	r3, r3, #3
    85a2:	429c      	cmp	r4, r3
    85a4:	d301      	bcc.n	85aa <flash_erase+0x2e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:91
    return 0;  //成功返回
    85a6:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:92
}
    85a8:	bd10      	pop	{r4, pc}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:76
        FTFA_FCCOB0 = PGM4; 
    85aa:	4b0c      	ldr	r3, [pc, #48]	; (85dc <flash_erase+0x60>)
    85ac:	2206      	movs	r2, #6
    85ae:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:78
        FTFA_FCCOB1 = 0x00;
    85b0:	2200      	movs	r2, #0
    85b2:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:79
        FTFA_FCCOB2 = 0x04;
    85b4:	3204      	adds	r2, #4
    85b6:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:80
        FTFA_FCCOB3 = 0x0C;
    85b8:	3208      	adds	r2, #8
    85ba:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:82
        FTFA_FCCOB4 = 0xFF;
    85bc:	32f3      	adds	r2, #243	; 0xf3
    85be:	72da      	strb	r2, [r3, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:83
        FTFA_FCCOB5 = 0xFF;
    85c0:	729a      	strb	r2, [r3, #10]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:84
        FTFA_FCCOB6 = 0xFF;
    85c2:	725a      	strb	r2, [r3, #9]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:85
        FTFA_FCCOB7 = 0xFE;
    85c4:	3a01      	subs	r2, #1
    85c6:	721a      	strb	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:87
        if(1 == flash_cmd_launch())  //若执行命令出现错误
    85c8:	f7ff ffb6 	bl	8538 <flash_cmd_launch>
    85cc:	2801      	cmp	r0, #1
    85ce:	d003      	beq.n	85d8 <flash_erase+0x5c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:91
    return 0;  //成功返回
    85d0:	2000      	movs	r0, #0
    85d2:	e7e9      	b.n	85a8 <flash_erase+0x2c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:69
        return 1;     //擦除命令错误
    85d4:	2001      	movs	r0, #1
    85d6:	e7e7      	b.n	85a8 <flash_erase+0x2c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:88
            return 2;   //解锁命令错误
    85d8:	2002      	movs	r0, #2
    85da:	e7e5      	b.n	85a8 <flash_erase+0x2c>
    85dc:	40020000 	.word	0x40020000

000085e0 <flash_write_physical>:
flash_write_physical():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:147
{
    85e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85e2:	000f      	movs	r7, r1
    85e4:	0014      	movs	r4, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:156
    FTFA_FCCOB0 = PGM4;
    85e6:	4b12      	ldr	r3, [pc, #72]	; (8630 <flash_write_physical+0x50>)
    85e8:	2206      	movs	r2, #6
    85ea:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:157
    dest.word = destaddr;
    85ec:	0005      	movs	r5, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:158
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    85ee:	2600      	movs	r6, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:158 (discriminator 1)
    85f0:	42b7      	cmp	r7, r6
    85f2:	d918      	bls.n	8626 <flash_write_physical+0x46>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:161
        FTFA_FCCOB1 = dest.byte[2];
    85f4:	022a      	lsls	r2, r5, #8
    85f6:	0e12      	lsrs	r2, r2, #24
    85f8:	4b0d      	ldr	r3, [pc, #52]	; (8630 <flash_write_physical+0x50>)
    85fa:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:162
        FTFA_FCCOB2 = dest.byte[1];
    85fc:	042a      	lsls	r2, r5, #16
    85fe:	0e12      	lsrs	r2, r2, #24
    8600:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:163
        FTFA_FCCOB3 = dest.byte[0];
    8602:	b2ea      	uxtb	r2, r5
    8604:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:166
        FTFA_FCCOB4 = buf[3];//大端寻址
    8606:	78e2      	ldrb	r2, [r4, #3]
    8608:	72da      	strb	r2, [r3, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:167
        FTFA_FCCOB5 = buf[2];
    860a:	78a2      	ldrb	r2, [r4, #2]
    860c:	729a      	strb	r2, [r3, #10]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:168
        FTFA_FCCOB6 = buf[1];
    860e:	7862      	ldrb	r2, [r4, #1]
    8610:	725a      	strb	r2, [r3, #9]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:169
        FTFA_FCCOB7 = buf[0];
    8612:	7822      	ldrb	r2, [r4, #0]
    8614:	721a      	strb	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:171
        if(1 == flash_cmd_launch())
    8616:	f7ff ff8f 	bl	8538 <flash_cmd_launch>
    861a:	2801      	cmp	r0, #1
    861c:	d005      	beq.n	862a <flash_write_physical+0x4a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:158 (discriminator 2)
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    861e:	3604      	adds	r6, #4
    8620:	3504      	adds	r5, #4
    8622:	3404      	adds	r4, #4
    8624:	e7e4      	b.n	85f0 <flash_write_physical+0x10>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:175
    return 0;  //成功执行
    8626:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:176
}
    8628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/flash.c:172
            return 2;  //写入命令错误
    862a:	2002      	movs	r0, #2
    862c:	e7fc      	b.n	8628 <flash_write_physical+0x48>
    862e:	46c0      	nop			; (mov r8, r8)
    8630:	40020000 	.word	0x40020000

00008634 <wdog_stop>:
wdog_stop():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/wdog.c:40
//参数说明：无
//函数返回：无
//=========================================================================
void wdog_stop()
{
    SIM_COPC &= ~SIM_COPC_COPT_MASK;
    8634:	4903      	ldr	r1, [pc, #12]	; (8644 <wdog_stop+0x10>)
    8636:	2288      	movs	r2, #136	; 0x88
    8638:	0152      	lsls	r2, r2, #5
    863a:	588b      	ldr	r3, [r1, r2]
    863c:	200c      	movs	r0, #12
    863e:	4383      	bics	r3, r0
    8640:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/wdog.c:41
}
    8642:	4770      	bx	lr
    8644:	40047000 	.word	0x40047000

00008648 <Vectors_Init>:
Vectors_Init():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:15
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
    8648:	b580      	push	{r7, lr}
    864a:	4f1e      	ldr	r7, [pc, #120]	; (86c4 <Vectors_Init+0x7c>)
    864c:	44bd      	add	sp, r7
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:19
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)   
    //（1）若Flash倒数2扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
    864e:	2118      	movs	r1, #24
    8650:	203f      	movs	r0, #63	; 0x3f
    8652:	f7ff ff61 	bl	8518 <flash_isempty>
    8656:	2800      	cmp	r0, #0
    8658:	d11a      	bne.n	8690 <Vectors_Init+0x48>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:28
    }
    //（2）继承BIOS的串口中断              
    void ** bios=MCU_FLASH_ADDR_START;   //向量表起始地址  
    uint32_t user[MCU_SECTORSIZE/4];     //向量表变量数组
    //读取USER中断向量表各中断处理程序地址赋给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
    865a:	2280      	movs	r2, #128	; 0x80
    865c:	21d0      	movs	r1, #208	; 0xd0
    865e:	00d2      	lsls	r2, r2, #3
    8660:	01c9      	lsls	r1, r1, #7
    8662:	a802      	add	r0, sp, #8
    8664:	f7ff ff54 	bl	8510 <flash_read_physical>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:32
    MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE);
    //判断USER中串口更新中断是否为BIOS对应中断地址。若是，则不作操作；否则修改
    //为BIOS对应中断地址
    if(user[BIOS_UART_UPDATE_IRQn] != (uint32_t)bios[BIOS_UART_UPDATE_IRQn])
    8668:	2378      	movs	r3, #120	; 0x78
    866a:	681b      	ldr	r3, [r3, #0]
    866c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    866e:	429a      	cmp	r2, r3
    8670:	d115      	bne.n	869e <Vectors_Init+0x56>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:44
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
        MCU_FLASH_ADDR_START,MCU_SECTORSIZE,(uint8_t *)user);
    }
    
    //（3）中断向量表指针重定向到USER程序的中断向量表
    SCB->VTOR = (uint32_t)(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    8672:	4b15      	ldr	r3, [pc, #84]	; (86c8 <Vectors_Init+0x80>)
    8674:	22d0      	movs	r2, #208	; 0xd0
    8676:	01d2      	lsls	r2, r2, #7
    8678:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:47
    MCU_FLASH_ADDR_START);  
    //（4）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+
    867a:	4b14      	ldr	r3, [pc, #80]	; (86cc <Vectors_Init+0x84>)
    867c:	22e0      	movs	r2, #224	; 0xe0
    867e:	0192      	lsls	r2, r2, #6
    8680:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:50
    GEC_COMPONENT_LST_START*MCU_SECTORSIZE); 
    //（5）printf提示             
    printf("  【User提示】：将进入User的main()执行...\r\n");
    8682:	4813      	ldr	r0, [pc, #76]	; (86d0 <Vectors_Init+0x88>)
    8684:	f000 fd82 	bl	918c <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:53
    
    #endif
}
    8688:	2381      	movs	r3, #129	; 0x81
    868a:	00db      	lsls	r3, r3, #3
    868c:	449d      	add	sp, r3
    868e:	bd80      	pop	{r7, pc}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:21
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
    8690:	20fc      	movs	r0, #252	; 0xfc
    8692:	4a10      	ldr	r2, [pc, #64]	; (86d4 <Vectors_Init+0x8c>)
    8694:	2118      	movs	r1, #24
    8696:	0200      	lsls	r0, r0, #8
    8698:	f7ff ffa2 	bl	85e0 <flash_write_physical>
    869c:	e7dd      	b.n	865a <Vectors_Init+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:35
        flash_erase(GEC_USER_SECTOR_START);
    869e:	201a      	movs	r0, #26
    86a0:	f7ff ff6c 	bl	857c <flash_erase>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:37
        user[2]=(uint32_t)bios[2];     //【20200903】
    86a4:	2308      	movs	r3, #8
    86a6:	681b      	ldr	r3, [r3, #0]
    86a8:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:38
        user[BIOS_UART_UPDATE_IRQn]=(uint32_t)bios[BIOS_UART_UPDATE_IRQn];
    86aa:	2378      	movs	r3, #120	; 0x78
    86ac:	681b      	ldr	r3, [r3, #0]
    86ae:	9301      	str	r3, [sp, #4]
    86b0:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/gec.c:39
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    86b2:	2180      	movs	r1, #128	; 0x80
    86b4:	20d0      	movs	r0, #208	; 0xd0
    86b6:	aa02      	add	r2, sp, #8
    86b8:	00c9      	lsls	r1, r1, #3
    86ba:	01c0      	lsls	r0, r0, #7
    86bc:	f7ff ff90 	bl	85e0 <flash_write_physical>
    86c0:	e7d7      	b.n	8672 <Vectors_Init+0x2a>
    86c2:	46c0      	nop			; (mov r8, r8)
    86c4:	fffffbf8 	.word	0xfffffbf8
    86c8:	e000ed00 	.word	0xe000ed00
    86cc:	20000424 	.word	0x20000424
    86d0:	00009230 	.word	0x00009230
    86d4:	00009214 	.word	0x00009214

000086d8 <main>:
main():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:17
//声明使用到的内部函数
// main.c使用的内部函数声明处
void delay_ms(uint32_t ms);
//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程见书稿）
int main(void) {
    86d8:	b510      	push	{r4, lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:22
  //（1）======启动部分（开头）==========================================
  //（1.1）声明main函数使用的局部变量

  //（1.2）【不变】关总中断
  DISABLE_INTERRUPTS;
    86da:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:23
  wdog_stop();
    86dc:	f7ff ffaa 	bl	8634 <wdog_stop>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:28

  //（1.3）给主函数使用的局部变量赋初值

  //（1.4）给全局变量赋初值
  gFlag = 0;
    86e0:	4b11      	ldr	r3, [pc, #68]	; (8728 <main+0x50>)
    86e2:	2200      	movs	r2, #0
    86e4:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:32

  //（1.5）用户外设模块初始化
  // DMA通道0发送，DMA通道1接收
  dma_uart_init(DMA_SEND, DMA_RECV, (uint32_t)gRecvBuff);
    86e6:	4c11      	ldr	r4, [pc, #68]	; (872c <main+0x54>)
    86e8:	0022      	movs	r2, r4
    86ea:	2101      	movs	r1, #1
    86ec:	2000      	movs	r0, #0
    86ee:	f7ff fde7 	bl	82c0 <dma_uart_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:33
  uart_init(UART_User, 115200);
    86f2:	21e1      	movs	r1, #225	; 0xe1
    86f4:	0249      	lsls	r1, r1, #9
    86f6:	2000      	movs	r0, #0
    86f8:	f000 f822 	bl	8740 <uart_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:36

  //（1.6）使能模块中断
  uart_enable_idle_int(UART_User);  // 使能空闲线中断, 不要使能接收中断
    86fc:	2000      	movs	r0, #0
    86fe:	f000 f8f3 	bl	88e8 <uart_enable_idle_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:38
  //（1.7）【不变】开总中断
  ENABLE_INTERRUPTS;
    8702:	b662      	cpsie	i
    8704:	e00a      	b.n	871c <main+0x44>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:45
  //（1）======启动部分（结尾）==========================================

  //（2）======主循环部分（开头）=========================================
  for (;;) {
    if (gFlag) {
      dma_uart_send(DMA_SEND, (uint32_t)gRecvBuff, 10);
    8706:	220a      	movs	r2, #10
    8708:	0021      	movs	r1, r4
    870a:	2000      	movs	r0, #0
    870c:	f7ff feb4 	bl	8478 <dma_uart_send>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:46
      gFlag = 0;
    8710:	4b05      	ldr	r3, [pc, #20]	; (8728 <main+0x50>)
    8712:	2200      	movs	r2, #0
    8714:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:47
      printf("\nDMA Read Success!\n");
    8716:	4806      	ldr	r0, [pc, #24]	; (8730 <main+0x58>)
    8718:	f000 fd38 	bl	918c <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/main.c:44
    if (gFlag) {
    871c:	4b02      	ldr	r3, [pc, #8]	; (8728 <main+0x50>)
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	2b00      	cmp	r3, #0
    8722:	d0fb      	beq.n	871c <main+0x44>
    8724:	e7ef      	b.n	8706 <main+0x2e>
    8726:	46c0      	nop			; (mov r8, r8)
    8728:	2000082c 	.word	0x2000082c
    872c:	20000428 	.word	0x20000428
    8730:	0000925c 	.word	0x0000925c

00008734 <uart_is_uartNo>:
uart_is_uartNo():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:534
//函数返回：1:串口号在合理范围内，0：串口号不合理
//参数说明：串口号uartNo  :UART_0、UART_1、UART_2
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo) {
  if (uartNo < UART_0 || uartNo > UART_2)
    8734:	2802      	cmp	r0, #2
    8736:	d901      	bls.n	873c <uart_is_uartNo+0x8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:535
    return 0;
    8738:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:538
  else
    return 1;
}
    873a:	4770      	bx	lr
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:537
    return 1;
    873c:	2001      	movs	r0, #1
    873e:	e7fc      	b.n	873a <uart_is_uartNo+0x6>

00008740 <uart_init>:
uart_init():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:23
void uart_init(uint8_t uartNo, uint32_t baud_rate) {
    8740:	b570      	push	{r4, r5, r6, lr}
    8742:	0004      	movs	r4, r0
    8744:	000d      	movs	r5, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:32
  if (!uart_is_uartNo(uartNo)) {
    8746:	f7ff fff5 	bl	8734 <uart_is_uartNo>
    874a:	2800      	cmp	r0, #0
    874c:	d048      	beq.n	87e0 <uart_init+0xa0>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:37
  if (uartNo == 0) {
    874e:	2c00      	cmp	r4, #0
    8750:	d147      	bne.n	87e2 <uart_init+0xa2>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:39
    SIM_SOPT2 |= SIM_SOPT2_UART0SRC(0x1);
    8752:	4a46      	ldr	r2, [pc, #280]	; (886c <uart_init+0x12c>)
    8754:	4b46      	ldr	r3, [pc, #280]	; (8870 <uart_init+0x130>)
    8756:	58d0      	ldr	r0, [r2, r3]
    8758:	2180      	movs	r1, #128	; 0x80
    875a:	04c9      	lsls	r1, r1, #19
    875c:	4301      	orrs	r1, r0
    875e:	50d1      	str	r1, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:40
    SIM_SOPT2 &= ~SIM_SOPT2_PLLFLLSEL_MASK;
    8760:	58d1      	ldr	r1, [r2, r3]
    8762:	4844      	ldr	r0, [pc, #272]	; (8874 <uart_init+0x134>)
    8764:	4001      	ands	r1, r0
    8766:	50d1      	str	r1, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:45
        PORTE_PCR20 |= PORT_PCR_MUX(0x4);  //使能UART0_TXD
    8768:	4943      	ldr	r1, [pc, #268]	; (8878 <uart_init+0x138>)
    876a:	6d08      	ldr	r0, [r1, #80]	; 0x50
    876c:	2380      	movs	r3, #128	; 0x80
    876e:	00db      	lsls	r3, r3, #3
    8770:	4318      	orrs	r0, r3
    8772:	6508      	str	r0, [r1, #80]	; 0x50
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:46
        PORTE_PCR21 |= PORT_PCR_MUX(0x4);  //使能UART0_RXD
    8774:	6d48      	ldr	r0, [r1, #84]	; 0x54
    8776:	4318      	orrs	r0, r3
    8778:	6548      	str	r0, [r1, #84]	; 0x54
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:63
    SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;  //启动串口0时钟
    877a:	4940      	ldr	r1, [pc, #256]	; (887c <uart_init+0x13c>)
    877c:	5850      	ldr	r0, [r2, r1]
    877e:	4303      	orrs	r3, r0
    8780:	5053      	str	r3, [r2, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:66
    UART0_C2_REG(UART_2h_0) &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
    8782:	4c3f      	ldr	r4, [pc, #252]	; (8880 <uart_init+0x140>)
    8784:	78e3      	ldrb	r3, [r4, #3]
    8786:	220c      	movs	r2, #12
    8788:	4393      	bics	r3, r2
    878a:	70e3      	strb	r3, [r4, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:69
    sbr = (uint16_t)((SystemCoreClock) / (baud_rate * 16));
    878c:	0129      	lsls	r1, r5, #4
    878e:	4b3d      	ldr	r3, [pc, #244]	; (8884 <uart_init+0x144>)
    8790:	6818      	ldr	r0, [r3, #0]
    8792:	f7fe fa89 	bl	6ca8 <__udivsi3>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:70
    temp = UART0_BDH_REG(UART_2h_0) & ~(UART0_BDH_SBR(0x1F));
    8796:	7823      	ldrb	r3, [r4, #0]
    8798:	221f      	movs	r2, #31
    879a:	4393      	bics	r3, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:71
    UART0_BDH_REG(UART_2h_0) = temp | UART0_BDH_SBR(((sbr & 0x1F00) >> 8));
    879c:	1202      	asrs	r2, r0, #8
    879e:	211f      	movs	r1, #31
    87a0:	400a      	ands	r2, r1
    87a2:	4313      	orrs	r3, r2
    87a4:	7023      	strb	r3, [r4, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:72
    UART0_BDL_REG(UART_2h_0) = (uint8_t)(sbr & UART0_BDL_SBR_MASK);
    87a6:	b2c0      	uxtb	r0, r0
    87a8:	7060      	strb	r0, [r4, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:75
    UART0_C4_REG(UART_2h_0) = 0x0F;
    87aa:	230f      	movs	r3, #15
    87ac:	72a3      	strb	r3, [r4, #10]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:76
    UART0_C1_REG(UART_2h_0) = 0x00;
    87ae:	2300      	movs	r3, #0
    87b0:	70a3      	strb	r3, [r4, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:77
    UART0_C3_REG(UART_2h_0) = 0x00;
    87b2:	71a3      	strb	r3, [r4, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:78
    UART0_MA1_REG(UART_2h_0) = 0x00;
    87b4:	7223      	strb	r3, [r4, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:79
    UART0_MA2_REG(UART_2h_0) = 0x00;
    87b6:	7263      	strb	r3, [r4, #9]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:80
    UART0_S1_REG(UART_2h_0) |= 0x1F;
    87b8:	7923      	ldrb	r3, [r4, #4]
    87ba:	221f      	movs	r2, #31
    87bc:	4313      	orrs	r3, r2
    87be:	b2db      	uxtb	r3, r3
    87c0:	7123      	strb	r3, [r4, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:81
    UART0_S2_REG(UART_2h_0) |= 0xC0;
    87c2:	7963      	ldrb	r3, [r4, #5]
    87c4:	2240      	movs	r2, #64	; 0x40
    87c6:	4252      	negs	r2, r2
    87c8:	4313      	orrs	r3, r2
    87ca:	b2db      	uxtb	r3, r3
    87cc:	7163      	strb	r3, [r4, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:83
    UART0_C2_REG(UART_2h_0) &= ~UART0_C2_TIE_MASK;
    87ce:	78e3      	ldrb	r3, [r4, #3]
    87d0:	32bf      	adds	r2, #191	; 0xbf
    87d2:	4013      	ands	r3, r2
    87d4:	70e3      	strb	r3, [r4, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:85
    UART0_C2_REG(UART_2h_0) |= (UART0_C2_TE_MASK | UART0_C2_RE_MASK);
    87d6:	78e3      	ldrb	r3, [r4, #3]
    87d8:	220c      	movs	r2, #12
    87da:	4313      	orrs	r3, r2
    87dc:	b2db      	uxtb	r3, r3
    87de:	70e3      	strb	r3, [r4, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:156
}
    87e0:	bd70      	pop	{r4, r5, r6, pc}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:87
    switch (uartNo) {
    87e2:	2c01      	cmp	r4, #1
    87e4:	d027      	beq.n	8836 <uart_init+0xf6>
    87e6:	2c02      	cmp	r4, #2
    87e8:	d032      	beq.n	8850 <uart_init+0x110>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:134
    UART_2h_1_2 = UART_ARR[uartNo - 1];  //获得UART1、2模块相应口基地址
    87ea:	3c01      	subs	r4, #1
    87ec:	00a4      	lsls	r4, r4, #2
    87ee:	4b26      	ldr	r3, [pc, #152]	; (8888 <uart_init+0x148>)
    87f0:	58e4      	ldr	r4, [r4, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:137
    UART_C2_REG(UART_2h_1_2) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
    87f2:	78e3      	ldrb	r3, [r4, #3]
    87f4:	220c      	movs	r2, #12
    87f6:	4393      	bics	r3, r2
    87f8:	70e3      	strb	r3, [r4, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:142
    sbr = (uint16_t)((SystemCoreClock / 2) / (baud_rate * 16));
    87fa:	4b22      	ldr	r3, [pc, #136]	; (8884 <uart_init+0x144>)
    87fc:	6818      	ldr	r0, [r3, #0]
    87fe:	0840      	lsrs	r0, r0, #1
    8800:	0129      	lsls	r1, r5, #4
    8802:	f7fe fa51 	bl	6ca8 <__udivsi3>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:143
    temp = UART_BDH_REG(UART_2h_1_2) & ~(UART_BDH_SBR(0x1F));
    8806:	7823      	ldrb	r3, [r4, #0]
    8808:	221f      	movs	r2, #31
    880a:	4393      	bics	r3, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:144
    UART_BDH_REG(UART_2h_1_2) = temp | UART_BDH_SBR(((sbr & 0x1F00) >> 8));
    880c:	1202      	asrs	r2, r0, #8
    880e:	211f      	movs	r1, #31
    8810:	400a      	ands	r2, r1
    8812:	4313      	orrs	r3, r2
    8814:	7023      	strb	r3, [r4, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:145
    UART_BDL_REG(UART_2h_1_2) = (uint8_t)(sbr & UART_BDL_SBR_MASK);
    8816:	b2c0      	uxtb	r0, r0
    8818:	7060      	strb	r0, [r4, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:148
    UART_C1_REG(UART_2h_1_2) = 0x00;
    881a:	2300      	movs	r3, #0
    881c:	70a3      	strb	r3, [r4, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:149
    UART_C3_REG(UART_2h_1_2) = 0x00;
    881e:	71a3      	strb	r3, [r4, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:150
    UART_S2_REG(UART_2h_1_2) = 0x00;
    8820:	7163      	strb	r3, [r4, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:152
    UART_C2_REG(UART_2h_1_2) &= ~UART_C2_TIE_MASK;
    8822:	78e3      	ldrb	r3, [r4, #3]
    8824:	227f      	movs	r2, #127	; 0x7f
    8826:	4013      	ands	r3, r2
    8828:	70e3      	strb	r3, [r4, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:154
    UART_C2_REG(UART_2h_1_2) |= (UART_C2_TE_MASK | UART_C2_RE_MASK);
    882a:	78e3      	ldrb	r3, [r4, #3]
    882c:	220c      	movs	r2, #12
    882e:	4313      	orrs	r3, r2
    8830:	b2db      	uxtb	r3, r3
    8832:	70e3      	strb	r3, [r4, #3]
    8834:	e7d4      	b.n	87e0 <uart_init+0xa0>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:92
            PORTE_PCR0 = PORT_PCR_MUX(0x3);  //使能UART1_TXD
    8836:	4b10      	ldr	r3, [pc, #64]	; (8878 <uart_init+0x138>)
    8838:	22c0      	movs	r2, #192	; 0xc0
    883a:	0092      	lsls	r2, r2, #2
    883c:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:93
            PORTE_PCR1 = PORT_PCR_MUX(0x3);  //使能UART1_RXD
    883e:	605a      	str	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:106
        SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;  //启动串口1时钟
    8840:	490a      	ldr	r1, [pc, #40]	; (886c <uart_init+0x12c>)
    8842:	4a0e      	ldr	r2, [pc, #56]	; (887c <uart_init+0x13c>)
    8844:	5888      	ldr	r0, [r1, r2]
    8846:	2380      	movs	r3, #128	; 0x80
    8848:	011b      	lsls	r3, r3, #4
    884a:	4303      	orrs	r3, r0
    884c:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:107
        break;
    884e:	e7cc      	b.n	87ea <uart_init+0xaa>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:112
            PORTE_PCR16 = PORT_PCR_MUX(0x3);  //使能UART2_TXD
    8850:	4b09      	ldr	r3, [pc, #36]	; (8878 <uart_init+0x138>)
    8852:	22c0      	movs	r2, #192	; 0xc0
    8854:	0092      	lsls	r2, r2, #2
    8856:	641a      	str	r2, [r3, #64]	; 0x40
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:113
            PORTE_PCR17 = PORT_PCR_MUX(0x3);  //使能UART2_RXD
    8858:	645a      	str	r2, [r3, #68]	; 0x44
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:129
        SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;  //启动串口2时钟
    885a:	4904      	ldr	r1, [pc, #16]	; (886c <uart_init+0x12c>)
    885c:	4a07      	ldr	r2, [pc, #28]	; (887c <uart_init+0x13c>)
    885e:	5888      	ldr	r0, [r1, r2]
    8860:	2380      	movs	r3, #128	; 0x80
    8862:	015b      	lsls	r3, r3, #5
    8864:	4303      	orrs	r3, r0
    8866:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:130
        break;
    8868:	e7bf      	b.n	87ea <uart_init+0xaa>
    886a:	46c0      	nop			; (mov r8, r8)
    886c:	40047000 	.word	0x40047000
    8870:	00001004 	.word	0x00001004
    8874:	fffeffff 	.word	0xfffeffff
    8878:	4004d000 	.word	0x4004d000
    887c:	00001034 	.word	0x00001034
    8880:	4006a000 	.word	0x4006a000
    8884:	20000400 	.word	0x20000400
    8888:	00009270 	.word	0x00009270

0000888c <uart_send1>:
uart_send1():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:164
uint8_t uart_send1(uint8_t uartNo, uint8_t ch) {
    888c:	b570      	push	{r4, r5, r6, lr}
    888e:	0005      	movs	r5, r0
    8890:	000c      	movs	r4, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:168
  UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo - 1];  //获取UART1或者2基地址
    8892:	1e43      	subs	r3, r0, #1
    8894:	009b      	lsls	r3, r3, #2
    8896:	4a11      	ldr	r2, [pc, #68]	; (88dc <uart_send1+0x50>)
    8898:	589e      	ldr	r6, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:176
  if (!uart_is_uartNo(uartNo)) {
    889a:	f7ff ff4b 	bl	8734 <uart_is_uartNo>
    889e:	2800      	cmp	r0, #0
    88a0:	d016      	beq.n	88d0 <uart_send1+0x44>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:180
  for (t = 0; t < 0xFBBB; t++)  //查询指定次数
    88a2:	2300      	movs	r3, #0
    88a4:	e004      	b.n	88b0 <uart_send1+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:192
      if (UART_S1_REG(UART_2h_1_2) & UART_S1_TDRE_MASK) {
    88a6:	7932      	ldrb	r2, [r6, #4]
    88a8:	b252      	sxtb	r2, r2
    88aa:	2a00      	cmp	r2, #0
    88ac:	db11      	blt.n	88d2 <uart_send1+0x46>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:180 (discriminator 2)
  for (t = 0; t < 0xFBBB; t++)  //查询指定次数
    88ae:	3301      	adds	r3, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:180 (discriminator 1)
    88b0:	4a0b      	ldr	r2, [pc, #44]	; (88e0 <uart_send1+0x54>)
    88b2:	4293      	cmp	r3, r2
    88b4:	d808      	bhi.n	88c8 <uart_send1+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:182
    if (0 == uartNo)  //判断使用的哪个串口
    88b6:	2d00      	cmp	r5, #0
    88b8:	d1f5      	bne.n	88a6 <uart_send1+0x1a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:185
      if (UART0_S1_REG(UART_2h_0) & UART0_S1_TDRE_MASK) {
    88ba:	4a0a      	ldr	r2, [pc, #40]	; (88e4 <uart_send1+0x58>)
    88bc:	7912      	ldrb	r2, [r2, #4]
    88be:	b252      	sxtb	r2, r2
    88c0:	2a00      	cmp	r2, #0
    88c2:	daf4      	bge.n	88ae <uart_send1+0x22>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:186
        UART0_D_REG(UART_2h_0) = ch;
    88c4:	4a07      	ldr	r2, [pc, #28]	; (88e4 <uart_send1+0x58>)
    88c6:	71d4      	strb	r4, [r2, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:204
  if (t >= 0xFBBB)
    88c8:	4a05      	ldr	r2, [pc, #20]	; (88e0 <uart_send1+0x54>)
    88ca:	4293      	cmp	r3, r2
    88cc:	d903      	bls.n	88d6 <uart_send1+0x4a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:205
    return 0;  //发送超时，发送失败
    88ce:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:208
}
    88d0:	bd70      	pop	{r4, r5, r6, pc}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:193
        UART_D_REG(UART_2h_1_2) = ch;
    88d2:	71f4      	strb	r4, [r6, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:194
        break;
    88d4:	e7f8      	b.n	88c8 <uart_send1+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:207
    return 1;  //成功发送
    88d6:	2001      	movs	r0, #1
    88d8:	e7fa      	b.n	88d0 <uart_send1+0x44>
    88da:	46c0      	nop			; (mov r8, r8)
    88dc:	00009270 	.word	0x00009270
    88e0:	0000fbba 	.word	0x0000fbba
    88e4:	4006a000 	.word	0x4006a000

000088e8 <uart_enable_idle_int>:
uart_enable_idle_int():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:495
void uart_enable_idle_int(uint8_t uartNo) {
    88e8:	b510      	push	{r4, lr}
    88ea:	0004      	movs	r4, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:499
  if (!uart_is_uartNo(uartNo)) {
    88ec:	f7ff ff22 	bl	8734 <uart_is_uartNo>
    88f0:	2800      	cmp	r0, #0
    88f2:	d013      	beq.n	891c <uart_enable_idle_int+0x34>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:503
  if (0 == uartNo) {
    88f4:	2c00      	cmp	r4, #0
    88f6:	d109      	bne.n	890c <uart_enable_idle_int+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:504
    UART0_C2_REG(UART_2h_0) |= UART0_C2_ILIE_MASK;  //开放UART空闲线中断
    88f8:	4909      	ldr	r1, [pc, #36]	; (8920 <uart_enable_idle_int+0x38>)
    88fa:	78ca      	ldrb	r2, [r1, #3]
    88fc:	2010      	movs	r0, #16
    88fe:	4302      	orrs	r2, r0
    8900:	b2d2      	uxtb	r2, r2
    8902:	70ca      	strb	r2, [r1, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:505
    UART0_S1_REG(UART_2h_0) |= UART0_S1_IDLE_MASK;
    8904:	790b      	ldrb	r3, [r1, #4]
    8906:	4303      	orrs	r3, r0
    8908:	b2db      	uxtb	r3, r3
    890a:	710b      	strb	r3, [r1, #4]
NVIC_EnableIRQ():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\02_CPU/core_cm0plus.h:685

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    890c:	4b05      	ldr	r3, [pc, #20]	; (8924 <uart_enable_idle_int+0x3c>)
    890e:	5d1b      	ldrb	r3, [r3, r4]
    8910:	221f      	movs	r2, #31
    8912:	401a      	ands	r2, r3
    8914:	2301      	movs	r3, #1
    8916:	4093      	lsls	r3, r2
    8918:	4a03      	ldr	r2, [pc, #12]	; (8928 <uart_enable_idle_int+0x40>)
    891a:	6013      	str	r3, [r2, #0]
uart_enable_idle_int():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:509
}
    891c:	bd10      	pop	{r4, pc}
    891e:	46c0      	nop			; (mov r8, r8)
    8920:	4006a000 	.word	0x4006a000
    8924:	20000404 	.word	0x20000404
    8928:	e000e100 	.word	0xe000e100

0000892c <uart_clear_idle_int>:
uart_clear_idle_int():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:516
void uart_clear_idle_int(uint8_t uartNo) {
    892c:	b510      	push	{r4, lr}
    892e:	0004      	movs	r4, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:519
  if (!uart_is_uartNo(uartNo)) {
    8930:	f7ff ff00 	bl	8734 <uart_is_uartNo>
    8934:	2800      	cmp	r0, #0
    8936:	d007      	beq.n	8948 <uart_clear_idle_int+0x1c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:522
  if (0 == uartNo) {
    8938:	2c00      	cmp	r4, #0
    893a:	d105      	bne.n	8948 <uart_clear_idle_int+0x1c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:523
    UART0_S1_REG(UART0_BASE_PTR) |= UART0_S1_IDLE_MASK;
    893c:	4a03      	ldr	r2, [pc, #12]	; (894c <uart_clear_idle_int+0x20>)
    893e:	7913      	ldrb	r3, [r2, #4]
    8940:	2110      	movs	r1, #16
    8942:	430b      	orrs	r3, r1
    8944:	b2db      	uxtb	r3, r3
    8946:	7113      	strb	r3, [r2, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/uart.c:525
}
    8948:	bd10      	pop	{r4, pc}
    894a:	46c0      	nop			; (mov r8, r8)
    894c:	4006a000 	.word	0x4006a000

00008950 <UART0_IRQHandler>:
UART0_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:15
//触发条件：UART_USE串口收到一个字节触发
//功    能：收到一个字节，直接返回该字节
//备    注：进入本程序后，可使用uart_get_re_int函数可再进行中断标志判断
//          （1-有UART接收中断，0-没有UART接收中断）
//======================================================================
void UART_User_Handler(void) {
    8950:	b510      	push	{r4, lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:19
  uint32_t ch;
  uint8_t flag;
  uint8_t arr[2];
  DISABLE_INTERRUPTS;  //关总中断
    8952:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:21
  //------------------------------------------------------------------
  printf("I am in idle interput\n");
    8954:	4807      	ldr	r0, [pc, #28]	; (8974 <UART0_IRQHandler+0x24>)
    8956:	f000 fc19 	bl	918c <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:22
  gFlag = 1;
    895a:	4b07      	ldr	r3, [pc, #28]	; (8978 <UART0_IRQHandler+0x28>)
    895c:	2201      	movs	r2, #1
    895e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:25

  // 使能下一次DMA接收传输
  dma_uart_recv(DMA_RECV, (uint32_t)gRecvBuff, 10);
    8960:	3209      	adds	r2, #9
    8962:	4906      	ldr	r1, [pc, #24]	; (897c <UART0_IRQHandler+0x2c>)
    8964:	2001      	movs	r0, #1
    8966:	f7ff fd4f 	bl	8408 <dma_uart_recv>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:26
  uart_clear_idle_int(UART_User);  // 清除空闲线中断
    896a:	2000      	movs	r0, #0
    896c:	f7ff ffde 	bl	892c <uart_clear_idle_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:28
  //------------------------------------------------------------------
  ENABLE_INTERRUPTS;  //开总中断
    8970:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/isr.c:29
}
    8972:	bd10      	pop	{r4, pc}
    8974:	00009278 	.word	0x00009278
    8978:	2000082c 	.word	0x2000082c
    897c:	20000428 	.word	0x20000428

00008980 <printk_putc>:
printk_putc():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:26
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
    8980:	b510      	push	{r4, lr}
    8982:	000c      	movs	r4, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:27
	switch (info->dest) {
    8984:	6813      	ldr	r3, [r2, #0]
    8986:	2b01      	cmp	r3, #1
    8988:	d005      	beq.n	8996 <printk_putc+0x16>
    898a:	2b02      	cmp	r3, #2
    898c:	d007      	beq.n	899e <printk_putc+0x1e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:38
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
    898e:	6823      	ldr	r3, [r4, #0]
    8990:	3301      	adds	r3, #1
    8992:	6023      	str	r3, [r4, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:39
}
    8994:	bd10      	pop	{r4, pc}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:29
		info->func((char) c);
    8996:	6853      	ldr	r3, [r2, #4]
    8998:	b240      	sxtb	r0, r0
    899a:	4798      	blx	r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:30
		break;
    899c:	e7f7      	b.n	898e <printk_putc+0xe>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:32
		*(info->loc) = (unsigned char) c;
    899e:	6893      	ldr	r3, [r2, #8]
    89a0:	7018      	strb	r0, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:33
		++(info->loc);
    89a2:	6893      	ldr	r3, [r2, #8]
    89a4:	3301      	adds	r3, #1
    89a6:	6093      	str	r3, [r2, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:34
		break;
    89a8:	e7f1      	b.n	898e <printk_putc+0xe>

000089aa <printk_mknumstr>:
printk_mknumstr():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:126
//       neg:有无符号:判断数据时有符号还是无符号整形
//       radix:格式选择:确定输出格式例如：十进制或十六进制...
//函数返回：无
//======================================================================
static int printk_mknumstr(char *numstr, void *nump, int neg, int radix)
{
    89aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    89ac:	b083      	sub	sp, #12
    89ae:	0017      	movs	r7, r2
    89b0:	001e      	movs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:134
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
    89b2:	1c45      	adds	r5, r0, #1
    89b4:	2300      	movs	r3, #0
    89b6:	7003      	strb	r3, [r0, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:136

	if (neg) {
    89b8:	2a00      	cmp	r2, #0
    89ba:	d01d      	beq.n	89f8 <printk_mknumstr+0x4e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:137
		a = *(int *) nump;
    89bc:	680f      	ldr	r7, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:138
		if (a == 0) {
    89be:	2f00      	cmp	r7, #0
    89c0:	d001      	beq.n	89c6 <printk_mknumstr+0x1c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:132
	nlen = 0;
    89c2:	2400      	movs	r4, #0
    89c4:	e009      	b.n	89da <printk_mknumstr+0x30>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:139
			*nstrp = '0';
    89c6:	3330      	adds	r3, #48	; 0x30
    89c8:	7043      	strb	r3, [r0, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:140
			++nlen;
    89ca:	2401      	movs	r4, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:141
			goto done;
    89cc:	e02e      	b.n	8a2c <printk_mknumstr+0x82>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:147
		}
		while (a != 0) {
			b = (int) a / (int) radix;
			c = (int) a - ((int) b * (int) radix);
			if (c < 0) {
				c = ~c + 1 + '0';
    89ce:	2330      	movs	r3, #48	; 0x30
    89d0:	1a59      	subs	r1, r3, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:152
			} else {
				c = c + '0';
			}
			a = b;
			*nstrp++ = (char) c;
    89d2:	7029      	strb	r1, [r5, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:153
			++nlen;
    89d4:	3401      	adds	r4, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:152
			*nstrp++ = (char) c;
    89d6:	3501      	adds	r5, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:151
			a = b;
    89d8:	9f01      	ldr	r7, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:143
		while (a != 0) {
    89da:	2f00      	cmp	r7, #0
    89dc:	d026      	beq.n	8a2c <printk_mknumstr+0x82>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:144
			b = (int) a / (int) radix;
    89de:	0031      	movs	r1, r6
    89e0:	0038      	movs	r0, r7
    89e2:	f7fe f9eb 	bl	6dbc <__divsi3>
    89e6:	9001      	str	r0, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:145
			c = (int) a - ((int) b * (int) radix);
    89e8:	0031      	movs	r1, r6
    89ea:	0038      	movs	r0, r7
    89ec:	f7fe facc 	bl	6f88 <__aeabi_idivmod>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:146
			if (c < 0) {
    89f0:	2900      	cmp	r1, #0
    89f2:	dbec      	blt.n	89ce <printk_mknumstr+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:149
				c = c + '0';
    89f4:	3130      	adds	r1, #48	; 0x30
    89f6:	e7ec      	b.n	89d2 <printk_mknumstr+0x28>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:156
		}
	} else {
		ua = *(unsigned int *) nump;
    89f8:	680c      	ldr	r4, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:157
		if (ua == 0) {
    89fa:	2c00      	cmp	r4, #0
    89fc:	d108      	bne.n	8a10 <printk_mknumstr+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:158
			*nstrp = '0';
    89fe:	2330      	movs	r3, #48	; 0x30
    8a00:	7043      	strb	r3, [r0, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:159
			++nlen;
    8a02:	3401      	adds	r4, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:160
			goto done;
    8a04:	e012      	b.n	8a2c <printk_mknumstr+0x82>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:168
			ub = (unsigned int) ua / (unsigned int) radix;
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
			if (uc < 10) {
				uc = uc + '0';
			} else {
				uc = uc - 10 + 'A';
    8a06:	3437      	adds	r4, #55	; 0x37
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:171
			}
			ua = ub;
			*nstrp++ = (char) uc;
    8a08:	702c      	strb	r4, [r5, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:172
			++nlen;
    8a0a:	3701      	adds	r7, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:171
			*nstrp++ = (char) uc;
    8a0c:	3501      	adds	r5, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:170
			ua = ub;
    8a0e:	0004      	movs	r4, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:162
		while (ua != 0) {
    8a10:	2c00      	cmp	r4, #0
    8a12:	d00a      	beq.n	8a2a <printk_mknumstr+0x80>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:163
			ub = (unsigned int) ua / (unsigned int) radix;
    8a14:	0031      	movs	r1, r6
    8a16:	0020      	movs	r0, r4
    8a18:	f7fe f946 	bl	6ca8 <__udivsi3>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:164
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
    8a1c:	0003      	movs	r3, r0
    8a1e:	4373      	muls	r3, r6
    8a20:	1ae4      	subs	r4, r4, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:165
			if (uc < 10) {
    8a22:	2c09      	cmp	r4, #9
    8a24:	d8ef      	bhi.n	8a06 <printk_mknumstr+0x5c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:166
				uc = uc + '0';
    8a26:	3430      	adds	r4, #48	; 0x30
    8a28:	e7ee      	b.n	8a08 <printk_mknumstr+0x5e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:175
		}
	}
	done: return nlen;
    8a2a:	003c      	movs	r4, r7
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:176
}
    8a2c:	0020      	movs	r0, r4
    8a2e:	b003      	add	sp, #12
    8a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008a32 <printk_pad_zero>:
printk_pad_zero():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:179
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
    8a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a34:	0004      	movs	r4, r0
    8a36:	000d      	movs	r5, r1
    8a38:	0017      	movs	r7, r2
    8a3a:	001e      	movs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:182 (discriminator 1)
	int i;

	for (i = curlen; i < field_width; i++) {
    8a3c:	42ac      	cmp	r4, r5
    8a3e:	da06      	bge.n	8a4e <printk_pad_zero+0x1c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:183 (discriminator 3)
		printk_putc('0', count, info);
    8a40:	0032      	movs	r2, r6
    8a42:	0039      	movs	r1, r7
    8a44:	2030      	movs	r0, #48	; 0x30
    8a46:	f7ff ff9b 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:182 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    8a4a:	3401      	adds	r4, #1
    8a4c:	e7f6      	b.n	8a3c <printk_pad_zero+0xa>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:185
	}
}
    8a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a50 <printk_pad_space>:
printk_pad_space():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:189

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
    8a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a52:	0004      	movs	r4, r0
    8a54:	000d      	movs	r5, r1
    8a56:	0017      	movs	r7, r2
    8a58:	001e      	movs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:192 (discriminator 1)
	int i;

	for (i = curlen; i < field_width; i++) {
    8a5a:	42ac      	cmp	r4, r5
    8a5c:	da06      	bge.n	8a6c <printk_pad_space+0x1c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:193 (discriminator 3)
		printk_putc(' ', count, info);
    8a5e:	0032      	movs	r2, r6
    8a60:	0039      	movs	r1, r7
    8a62:	2020      	movs	r0, #32
    8a64:	f7ff ff8c 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:192 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    8a68:	3401      	adds	r4, #1
    8a6a:	e7f6      	b.n	8a5a <printk_pad_space+0xa>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:195
	}
}
    8a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a6e <out_char>:
out_char():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:17
void out_char(char data) {
    8a6e:	b510      	push	{r4, lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:18
	uart_send1(UART_printf, data);
    8a70:	b2c1      	uxtb	r1, r0
    8a72:	2002      	movs	r0, #2
    8a74:	f7ff ff0a 	bl	888c <uart_send1>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:19
}
    8a78:	bd10      	pop	{r4, pc}
	...

00008a7c <printk_mkfloatstr>:
printk_mkfloatstr():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:47
{
    8a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a7e:	46d6      	mov	lr, sl
    8a80:	464f      	mov	r7, r9
    8a82:	4646      	mov	r6, r8
    8a84:	b5c0      	push	{r6, r7, lr}
    8a86:	b098      	sub	sp, #96	; 0x60
    8a88:	0004      	movs	r4, r0
    8a8a:	4688      	mov	r8, r1
    8a8c:	0016      	movs	r6, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:48
	uint32_t p,i,j,k,a[5]={0},b[19]={0};
    8a8e:	2214      	movs	r2, #20
    8a90:	2100      	movs	r1, #0
    8a92:	a813      	add	r0, sp, #76	; 0x4c
    8a94:	f000 fb95 	bl	91c2 <memset>
    8a98:	224c      	movs	r2, #76	; 0x4c
    8a9a:	2100      	movs	r1, #0
    8a9c:	4668      	mov	r0, sp
    8a9e:	f000 fb90 	bl	91c2 <memset>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:55
	p=(uint32_t)*f;//整数部分
    8aa2:	6865      	ldr	r5, [r4, #4]
    8aa4:	6824      	ldr	r4, [r4, #0]
    8aa6:	0020      	movs	r0, r4
    8aa8:	0029      	movs	r1, r5
    8aaa:	f7fe fad1 	bl	7050 <__aeabi_d2uiz>
    8aae:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:56
	tempf=(*f-p);
    8ab0:	f7ff fb28 	bl	8104 <__aeabi_ui2d>
    8ab4:	0002      	movs	r2, r0
    8ab6:	000b      	movs	r3, r1
    8ab8:	0020      	movs	r0, r4
    8aba:	0029      	movs	r1, r5
    8abc:	f7fe ff5a 	bl	7974 <__aeabi_dsub>
    8ac0:	0004      	movs	r4, r0
    8ac2:	000d      	movs	r5, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:57
	if(precision_width==0)
    8ac4:	2e00      	cmp	r6, #0
    8ac6:	d10a      	bne.n	8ade <printk_mkfloatstr+0x62>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:58
	q=(*f-p)*100000000000000000;//小数部分
    8ac8:	4a51      	ldr	r2, [pc, #324]	; (8c10 <printk_mkfloatstr+0x194>)
    8aca:	4b52      	ldr	r3, [pc, #328]	; (8c14 <printk_mkfloatstr+0x198>)
    8acc:	f7fe fce6 	bl	749c <__aeabi_dmul>
    8ad0:	f7fe fadc 	bl	708c <__aeabi_d2ulz>
    8ad4:	0006      	movs	r6, r0
    8ad6:	000f      	movs	r7, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:66
	k=0;
    8ad8:	2300      	movs	r3, #0
    8ada:	469a      	mov	sl, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:67
	while(m<1)
    8adc:	e018      	b.n	8b10 <printk_mkfloatstr+0x94>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:61
		while(precision_width--)
    8ade:	1e77      	subs	r7, r6, #1
    8ae0:	2e00      	cmp	r6, #0
    8ae2:	d005      	beq.n	8af0 <printk_mkfloatstr+0x74>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:62
		tempf*=10;
    8ae4:	2200      	movs	r2, #0
    8ae6:	4b4c      	ldr	r3, [pc, #304]	; (8c18 <printk_mkfloatstr+0x19c>)
    8ae8:	f7fe fcd8 	bl	749c <__aeabi_dmul>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:61
		while(precision_width--)
    8aec:	003e      	movs	r6, r7
    8aee:	e7f6      	b.n	8ade <printk_mkfloatstr+0x62>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:63
		q=tempf;
    8af0:	f7fe facc 	bl	708c <__aeabi_d2ulz>
    8af4:	0006      	movs	r6, r0
    8af6:	000f      	movs	r7, r1
    8af8:	e7ee      	b.n	8ad8 <printk_mkfloatstr+0x5c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:69
		m=m*10;
    8afa:	2200      	movs	r2, #0
    8afc:	4b46      	ldr	r3, [pc, #280]	; (8c18 <printk_mkfloatstr+0x19c>)
    8afe:	0020      	movs	r0, r4
    8b00:	0029      	movs	r1, r5
    8b02:	f7fe fccb 	bl	749c <__aeabi_dmul>
    8b06:	0004      	movs	r4, r0
    8b08:	000d      	movs	r5, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:70
		k++;
    8b0a:	2301      	movs	r3, #1
    8b0c:	469c      	mov	ip, r3
    8b0e:	44e2      	add	sl, ip
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:67
	while(m<1)
    8b10:	2200      	movs	r2, #0
    8b12:	4b42      	ldr	r3, [pc, #264]	; (8c1c <printk_mkfloatstr+0x1a0>)
    8b14:	0020      	movs	r0, r4
    8b16:	0029      	movs	r1, r5
    8b18:	f7fe fa52 	bl	6fc0 <__aeabi_dcmplt>
    8b1c:	2800      	cmp	r0, #0
    8b1e:	d1ec      	bne.n	8afa <printk_mkfloatstr+0x7e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:72
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
    8b20:	4655      	mov	r5, sl
    8b22:	3d01      	subs	r5, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:75
	if(0==p)     //整数部分为0
    8b24:	464b      	mov	r3, r9
    8b26:	2b00      	cmp	r3, #0
    8b28:	d132      	bne.n	8b90 <printk_mkfloatstr+0x114>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:76
		c[i++]='0';
    8b2a:	3330      	adds	r3, #48	; 0x30
    8b2c:	4642      	mov	r2, r8
    8b2e:	7013      	strb	r3, [r2, #0]
    8b30:	3b2f      	subs	r3, #47	; 0x2f
    8b32:	4699      	mov	r9, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:91
	c[i++]='.';     //小数点
    8b34:	2301      	movs	r3, #1
    8b36:	444b      	add	r3, r9
    8b38:	469a      	mov	sl, r3
    8b3a:	232e      	movs	r3, #46	; 0x2e
    8b3c:	4642      	mov	r2, r8
    8b3e:	4649      	mov	r1, r9
    8b40:	5453      	strb	r3, [r2, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:92
	if(0==q)        //小数部分为0
    8b42:	0033      	movs	r3, r6
    8b44:	433b      	orrs	r3, r7
    8b46:	d133      	bne.n	8bb0 <printk_mkfloatstr+0x134>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:93
		c[i++]='0';
    8b48:	3330      	adds	r3, #48	; 0x30
    8b4a:	4651      	mov	r1, sl
    8b4c:	5453      	strb	r3, [r2, r1]
    8b4e:	3b2e      	subs	r3, #46	; 0x2e
    8b50:	444b      	add	r3, r9
    8b52:	469a      	mov	sl, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:114
	c[i]='\0';
    8b54:	4641      	mov	r1, r8
    8b56:	4451      	add	r1, sl
    8b58:	2300      	movs	r3, #0
    8b5a:	700b      	strb	r3, [r1, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:116
}
    8b5c:	4650      	mov	r0, sl
    8b5e:	b018      	add	sp, #96	; 0x60
    8b60:	bce0      	pop	{r5, r6, r7}
    8b62:	46ba      	mov	sl, r7
    8b64:	46b1      	mov	r9, r6
    8b66:	46a8      	mov	r8, r5
    8b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:82
			a[j++]=p%10;
    8b6a:	1c63      	adds	r3, r4, #1
    8b6c:	469a      	mov	sl, r3
    8b6e:	210a      	movs	r1, #10
    8b70:	4648      	mov	r0, r9
    8b72:	f7fe f91f 	bl	6db4 <__aeabi_uidivmod>
    8b76:	00a4      	lsls	r4, r4, #2
    8b78:	ab13      	add	r3, sp, #76	; 0x4c
    8b7a:	5119      	str	r1, [r3, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:83
			p/=10;
    8b7c:	210a      	movs	r1, #10
    8b7e:	4648      	mov	r0, r9
    8b80:	f7fe f892 	bl	6ca8 <__udivsi3>
    8b84:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:82
			a[j++]=p%10;
    8b86:	4654      	mov	r4, sl
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:80
		while(p!=0)//倒序的数字
    8b88:	464b      	mov	r3, r9
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d1ed      	bne.n	8b6a <printk_mkfloatstr+0xee>
    8b8e:	e00c      	b.n	8baa <printk_mkfloatstr+0x12e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:79
		j=0;
    8b90:	2400      	movs	r4, #0
    8b92:	e7f9      	b.n	8b88 <printk_mkfloatstr+0x10c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:87
			c[i++]=a[j-1]+'0';
    8b94:	3c01      	subs	r4, #1
    8b96:	00a2      	lsls	r2, r4, #2
    8b98:	ab13      	add	r3, sp, #76	; 0x4c
    8b9a:	58d3      	ldr	r3, [r2, r3]
    8b9c:	3330      	adds	r3, #48	; 0x30
    8b9e:	4642      	mov	r2, r8
    8ba0:	4649      	mov	r1, r9
    8ba2:	5453      	strb	r3, [r2, r1]
    8ba4:	2301      	movs	r3, #1
    8ba6:	469c      	mov	ip, r3
    8ba8:	44e1      	add	r9, ip
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:85
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
    8baa:	2c00      	cmp	r4, #0
    8bac:	d1f2      	bne.n	8b94 <printk_mkfloatstr+0x118>
    8bae:	e7c1      	b.n	8b34 <printk_mkfloatstr+0xb8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:96
		j=0;
    8bb0:	2400      	movs	r4, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:98
		while(q!=0)//倒序的数字
    8bb2:	0033      	movs	r3, r6
    8bb4:	433b      	orrs	r3, r7
    8bb6:	d01a      	beq.n	8bee <printk_mkfloatstr+0x172>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:100
			b[j++]=q%10;
    8bb8:	220a      	movs	r2, #10
    8bba:	2300      	movs	r3, #0
    8bbc:	0030      	movs	r0, r6
    8bbe:	0039      	movs	r1, r7
    8bc0:	f7fe fa26 	bl	7010 <__aeabi_uldivmod>
    8bc4:	1c63      	adds	r3, r4, #1
    8bc6:	4699      	mov	r9, r3
    8bc8:	00a4      	lsls	r4, r4, #2
    8bca:	466b      	mov	r3, sp
    8bcc:	511a      	str	r2, [r3, r4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:101
			q/=10;
    8bce:	220a      	movs	r2, #10
    8bd0:	2300      	movs	r3, #0
    8bd2:	0030      	movs	r0, r6
    8bd4:	0039      	movs	r1, r7
    8bd6:	f7fe fa1b 	bl	7010 <__aeabi_uldivmod>
    8bda:	0006      	movs	r6, r0
    8bdc:	000f      	movs	r7, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:100
			b[j++]=q%10;
    8bde:	464c      	mov	r4, r9
    8be0:	e7e7      	b.n	8bb2 <printk_mkfloatstr+0x136>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:105
			b[j++]=0;
    8be2:	00a3      	lsls	r3, r4, #2
    8be4:	2200      	movs	r2, #0
    8be6:	4669      	mov	r1, sp
    8be8:	505a      	str	r2, [r3, r1]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:106
			k--;
    8bea:	3d01      	subs	r5, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:105
			b[j++]=0;
    8bec:	3401      	adds	r4, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:103
		while(k!=0)
    8bee:	2d00      	cmp	r5, #0
    8bf0:	d1f7      	bne.n	8be2 <printk_mkfloatstr+0x166>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:108
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
    8bf2:	2c00      	cmp	r4, #0
    8bf4:	d0ae      	beq.n	8b54 <printk_mkfloatstr+0xd8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:110
			c[i++]=b[j-1]+'0';
    8bf6:	3c01      	subs	r4, #1
    8bf8:	00a3      	lsls	r3, r4, #2
    8bfa:	466a      	mov	r2, sp
    8bfc:	589b      	ldr	r3, [r3, r2]
    8bfe:	3330      	adds	r3, #48	; 0x30
    8c00:	4642      	mov	r2, r8
    8c02:	4651      	mov	r1, sl
    8c04:	5453      	strb	r3, [r2, r1]
    8c06:	2301      	movs	r3, #1
    8c08:	469c      	mov	ip, r3
    8c0a:	44e2      	add	sl, ip
    8c0c:	e7f1      	b.n	8bf2 <printk_mkfloatstr+0x176>
    8c0e:	46c0      	nop			; (mov r8, r8)
    8c10:	85d8a000 	.word	0x85d8a000
    8c14:	43763457 	.word	0x43763457
    8c18:	40240000 	.word	0x40240000
    8c1c:	3ff00000 	.word	0x3ff00000

00008c20 <printk>:
printk():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:204
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
    8c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c22:	46de      	mov	lr, fp
    8c24:	4657      	mov	r7, sl
    8c26:	464e      	mov	r6, r9
    8c28:	4645      	mov	r5, r8
    8c2a:	b5e0      	push	{r5, r6, r7, lr}
    8c2c:	b095      	sub	sp, #84	; 0x54
    8c2e:	4682      	mov	sl, r0
    8c30:	000c      	movs	r4, r1
    8c32:	9200      	str	r2, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:228

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
    8c34:	2330      	movs	r3, #48	; 0x30
    8c36:	930b      	str	r3, [sp, #44]	; 0x2c
    8c38:	221d      	movs	r2, #29
    8c3a:	2100      	movs	r1, #0
    8c3c:	a80c      	add	r0, sp, #48	; 0x30
    8c3e:	f000 fac0 	bl	91c2 <memset>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:249
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
    8c42:	2300      	movs	r3, #0
    8c44:	930a      	str	r3, [sp, #40]	; 0x28
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:251
	length_modifier=0;
	precision_used=TRUE;
    8c46:	3301      	adds	r3, #1
    8c48:	9302      	str	r3, [sp, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:250
	length_modifier=0;
    8c4a:	2300      	movs	r3, #0
    8c4c:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:253
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
    8c4e:	e004      	b.n	8c5a <printk+0x3a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:261
		if (c != '%')
		{
#ifndef UNIX_DEBUG
			//%之前的字符
			if (c != '\n') {
				printk_putc(c, &count, info);
    8c50:	4652      	mov	r2, sl
    8c52:	a90a      	add	r1, sp, #40	; 0x28
    8c54:	f7ff fe94 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:253 (discriminator 2)
	for (p = (char *) fmt; (c = *p) != 0; p++)
    8c58:	3401      	adds	r4, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:253 (discriminator 1)
    8c5a:	2000      	movs	r0, #0
    8c5c:	5620      	ldrsb	r0, [r4, r0]
    8c5e:	2800      	cmp	r0, #0
    8c60:	d100      	bne.n	8c64 <printk+0x44>
    8c62:	e28a      	b.n	917a <printk+0x55a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:256
		if (c != '%')
    8c64:	2825      	cmp	r0, #37	; 0x25
    8c66:	d028      	beq.n	8cba <printk+0x9a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:260
			if (c != '\n') {
    8c68:	280a      	cmp	r0, #10
    8c6a:	d1f1      	bne.n	8c50 <printk+0x30>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:265
			}
			//输出换行符
			else {
				printk_putc(0x0D /* CR */, &count, info);
    8c6c:	4652      	mov	r2, sl
    8c6e:	a90a      	add	r1, sp, #40	; 0x28
    8c70:	200d      	movs	r0, #13
    8c72:	f7ff fe85 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:266
				printk_putc(0x0A /* LF */, &count, info);
    8c76:	4652      	mov	r2, sl
    8c78:	a90a      	add	r1, sp, #40	; 0x28
    8c7a:	200a      	movs	r0, #10
    8c7c:	f7ff fe80 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:272
			}
#else
			printk_putc(c, &count, info);
#endif

			continue;
    8c80:	e7ea      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:283
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
			case '-':
				flags_used |= FLAGS_MINUS;
    8c82:	2301      	movs	r3, #1
    8c84:	431e      	orrs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:204
{
    8c86:	000c      	movs	r4, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:280
		while (!done) {
    8c88:	2800      	cmp	r0, #0
    8c8a:	d11b      	bne.n	8cc4 <printk+0xa4>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:281
			switch (/* c = */*++p) {
    8c8c:	1c61      	adds	r1, r4, #1
    8c8e:	2301      	movs	r3, #1
    8c90:	56e3      	ldrsb	r3, [r4, r3]
    8c92:	3b20      	subs	r3, #32
    8c94:	b2da      	uxtb	r2, r3
    8c96:	2a10      	cmp	r2, #16
    8c98:	d812      	bhi.n	8cc0 <printk+0xa0>
    8c9a:	0093      	lsls	r3, r2, #2
    8c9c:	4ac0      	ldr	r2, [pc, #768]	; (8fa0 <printk+0x380>)
    8c9e:	58d3      	ldr	r3, [r2, r3]
    8ca0:	469f      	mov	pc, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:286
				break;
			case '+':
				flags_used |= FLAGS_PLUS;
    8ca2:	2302      	movs	r3, #2
    8ca4:	431e      	orrs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:287
				break;
    8ca6:	e7ee      	b.n	8c86 <printk+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:289
			case ' ':
				flags_used |= FLAGS_SPACE;
    8ca8:	2304      	movs	r3, #4
    8caa:	431e      	orrs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:290
				break;
    8cac:	e7eb      	b.n	8c86 <printk+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:292
			case '0':
				flags_used |= FLAGS_ZERO;
    8cae:	2308      	movs	r3, #8
    8cb0:	431e      	orrs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:293
				break;
    8cb2:	e7e8      	b.n	8c86 <printk+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:295
			case '#':
				flags_used |= FLAGS_POUND;
    8cb4:	2310      	movs	r3, #16
    8cb6:	431e      	orrs	r6, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:296
				break;
    8cb8:	e7e5      	b.n	8c86 <printk+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:278
		flags_used = 0;
    8cba:	2600      	movs	r6, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:279
		done = FALSE;
    8cbc:	2000      	movs	r0, #0
    8cbe:	e7e3      	b.n	8c88 <printk+0x68>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:281
			switch (/* c = */*++p) {
    8cc0:	2001      	movs	r0, #1
    8cc2:	e7e1      	b.n	8c88 <printk+0x68>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:307
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
    8cc4:	2500      	movs	r5, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:308
		done = FALSE;
    8cc6:	2700      	movs	r7, #0
    8cc8:	e000      	b.n	8ccc <printk+0xac>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:326
				field_width = (field_width * 10) + (c - '0');
				break;
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
    8cca:	0007      	movs	r7, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:309
		while (!done) {
    8ccc:	2f00      	cmp	r7, #0
    8cce:	d10d      	bne.n	8cec <printk+0xcc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:310
			switch (c = *++p) {
    8cd0:	1c61      	adds	r1, r4, #1
    8cd2:	2201      	movs	r2, #1
    8cd4:	56a2      	ldrsb	r2, [r4, r2]
    8cd6:	0013      	movs	r3, r2
    8cd8:	3b30      	subs	r3, #48	; 0x30
    8cda:	2b09      	cmp	r3, #9
    8cdc:	d8f5      	bhi.n	8cca <printk+0xaa>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:321
				field_width = (field_width * 10) + (c - '0');
    8cde:	00ab      	lsls	r3, r5, #2
    8ce0:	195d      	adds	r5, r3, r5
    8ce2:	006d      	lsls	r5, r5, #1
    8ce4:	3a30      	subs	r2, #48	; 0x30
    8ce6:	18ad      	adds	r5, r5, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:310
			switch (c = *++p) {
    8ce8:	000c      	movs	r4, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:322
				break;
    8cea:	e7ef      	b.n	8ccc <printk+0xac>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:331
				break;
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
    8cec:	1c62      	adds	r2, r4, #1
    8cee:	2301      	movs	r3, #1
    8cf0:	56e3      	ldrsb	r3, [r4, r3]
    8cf2:	2b2e      	cmp	r3, #46	; 0x2e
    8cf4:	d019      	beq.n	8d2a <printk+0x10a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:368
		} else {
			/* we've gone one char too far */
			--p;
#if 1
			precision_used = FALSE;
			precision_width = 0;
    8cf6:	2300      	movs	r3, #0
    8cf8:	4698      	mov	r8, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:367
			precision_used = FALSE;
    8cfa:	9302      	str	r3, [sp, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:372
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
    8cfc:	1c62      	adds	r2, r4, #1
    8cfe:	2301      	movs	r3, #1
    8d00:	56e3      	ldrsb	r3, [r4, r3]
    8d02:	2b68      	cmp	r3, #104	; 0x68
    8d04:	d004      	beq.n	8d10 <printk+0xf0>
    8d06:	2b6c      	cmp	r3, #108	; 0x6c
    8d08:	d02b      	beq.n	8d62 <printk+0x142>
    8d0a:	2b4c      	cmp	r3, #76	; 0x4c
    8d0c:	d02e      	beq.n	8d6c <printk+0x14c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:384
		case 'L':
			 length_modifier |= LENMOD_L;
			break;
		default:
			/* we've gone one char too far */
			--p;
    8d0e:	0022      	movs	r2, r4
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:389
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
    8d10:	1c54      	adds	r4, r2, #1
    8d12:	2001      	movs	r0, #1
    8d14:	5610      	ldrsb	r0, [r2, r0]
    8d16:	0003      	movs	r3, r0
    8d18:	3b58      	subs	r3, #88	; 0x58
    8d1a:	b2da      	uxtb	r2, r3
    8d1c:	2a20      	cmp	r2, #32
    8d1e:	d900      	bls.n	8d22 <printk+0x102>
    8d20:	e224      	b.n	916c <printk+0x54c>
    8d22:	0093      	lsls	r3, r2, #2
    8d24:	4a9f      	ldr	r2, [pc, #636]	; (8fa4 <printk+0x384>)
    8d26:	58d3      	ldr	r3, [r2, r3]
    8d28:	469f      	mov	pc, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:337
			precision_width = 0;
    8d2a:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:338
			done = FALSE;
    8d2c:	2000      	movs	r0, #0
    8d2e:	46ac      	mov	ip, r5
    8d30:	0005      	movs	r5, r0
    8d32:	0019      	movs	r1, r3
    8d34:	e000      	b.n	8d38 <printk+0x118>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:359
					done = TRUE;
    8d36:	003d      	movs	r5, r7
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:339
			while (!done) {
    8d38:	2d00      	cmp	r5, #0
    8d3a:	d10e      	bne.n	8d5a <printk+0x13a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:340
				switch ( c = *++p) {
    8d3c:	1c50      	adds	r0, r2, #1
    8d3e:	2401      	movs	r4, #1
    8d40:	5714      	ldrsb	r4, [r2, r4]
    8d42:	0023      	movs	r3, r4
    8d44:	3b30      	subs	r3, #48	; 0x30
    8d46:	2b09      	cmp	r3, #9
    8d48:	d8f5      	bhi.n	8d36 <printk+0x116>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:352
				precision_width = (precision_width * 10) +	(c - '0');
    8d4a:	008b      	lsls	r3, r1, #2
    8d4c:	185b      	adds	r3, r3, r1
    8d4e:	005b      	lsls	r3, r3, #1
    8d50:	0021      	movs	r1, r4
    8d52:	3930      	subs	r1, #48	; 0x30
    8d54:	1859      	adds	r1, r3, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:340
				switch ( c = *++p) {
    8d56:	0002      	movs	r2, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:355
					break;
    8d58:	e7ee      	b.n	8d38 <printk+0x118>
    8d5a:	4665      	mov	r5, ip
    8d5c:	4688      	mov	r8, r1
    8d5e:	0014      	movs	r4, r2
    8d60:	e7cc      	b.n	8cfc <printk+0xdc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:377
			 length_modifier |= LENMOD_l;
    8d62:	2301      	movs	r3, #1
    8d64:	9901      	ldr	r1, [sp, #4]
    8d66:	4319      	orrs	r1, r3
    8d68:	9101      	str	r1, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:378
			break;
    8d6a:	e7d1      	b.n	8d10 <printk+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:380
			 length_modifier |= LENMOD_L;
    8d6c:	2302      	movs	r3, #2
    8d6e:	9901      	ldr	r1, [sp, #4]
    8d70:	4319      	orrs	r1, r3
    8d72:	9101      	str	r1, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:381
			break;
    8d74:	e7cc      	b.n	8d10 <printk+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:394
		case 'd':
		case 'i':
			//此时ap为指向可变参数列表的第一个参数
			//返回当前参数，并将ap指向下一个参数
			ival = (int) va_arg(ap, int);  
    8d76:	9f00      	ldr	r7, [sp, #0]
    8d78:	cf08      	ldmia	r7!, {r3}
    8d7a:	9309      	str	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:396
			//将整型转换成字符型保存在vstr中，返回字符数vlen
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);
    8d7c:	230a      	movs	r3, #10
    8d7e:	2201      	movs	r2, #1
    8d80:	a909      	add	r1, sp, #36	; 0x24
    8d82:	a80b      	add	r0, sp, #44	; 0x2c
    8d84:	f7ff fe11 	bl	89aa <printk_mknumstr>
    8d88:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:398
			//指向转换后的最后一个字符
			vstrp = &vstr[vlen];  
    8d8a:	ab0b      	add	r3, sp, #44	; 0x2c
    8d8c:	444b      	add	r3, r9
    8d8e:	4698      	mov	r8, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:401

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
    8d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d92:	2b00      	cmp	r3, #0
    8d94:	db07      	blt.n	8da6 <printk+0x186>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:407
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    8d96:	07b3      	lsls	r3, r6, #30
    8d98:	d51b      	bpl.n	8dd2 <printk+0x1b2>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:409
					schar = '+';
					++vlen;
    8d9a:	2301      	movs	r3, #1
    8d9c:	469c      	mov	ip, r3
    8d9e:	44e1      	add	r9, ip
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:408
					schar = '+';
    8da0:	332a      	adds	r3, #42	; 0x2a
    8da2:	469b      	mov	fp, r3
    8da4:	e004      	b.n	8db0 <printk+0x190>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:403
				++vlen;
    8da6:	2301      	movs	r3, #1
    8da8:	469c      	mov	ip, r3
    8daa:	44e1      	add	r9, ip
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:402
				schar = '-';
    8dac:	332c      	adds	r3, #44	; 0x2c
    8dae:	469b      	mov	fp, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:424
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    8db0:	0733      	lsls	r3, r6, #28
    8db2:	d520      	bpl.n	8df6 <printk+0x1d6>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:425
				if (schar)
    8db4:	465b      	mov	r3, fp
    8db6:	2b00      	cmp	r3, #0
    8db8:	d117      	bne.n	8dea <printk+0x1ca>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:428
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
    8dba:	4653      	mov	r3, sl
    8dbc:	aa0a      	add	r2, sp, #40	; 0x28
    8dbe:	0029      	movs	r1, r5
    8dc0:	4648      	mov	r0, r9
    8dc2:	f7ff fe36 	bl	8a32 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:429
				vlen = field_width;
    8dc6:	46a9      	mov	r9, r5
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    8dc8:	9700      	str	r7, [sp, #0]
    8dca:	4647      	mov	r7, r8
    8dcc:	46a0      	mov	r8, r4
    8dce:	4654      	mov	r4, sl
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:445
			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
				printk_putc(schar, &count, info);
			}
			goto cont_xd;  //开始跳转
    8dd0:	e16c      	b.n	90ac <printk+0x48c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:411
					if (IS_FLAG_SPACE(flags_used)) {
    8dd2:	2304      	movs	r3, #4
    8dd4:	001a      	movs	r2, r3
    8dd6:	4032      	ands	r2, r6
    8dd8:	4693      	mov	fp, r2
    8dda:	4233      	tst	r3, r6
    8ddc:	d0e8      	beq.n	8db0 <printk+0x190>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:413
						++vlen;
    8dde:	3b03      	subs	r3, #3
    8de0:	469c      	mov	ip, r3
    8de2:	44e1      	add	r9, ip
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:412
						schar = ' ';
    8de4:	331f      	adds	r3, #31
    8de6:	469b      	mov	fp, r3
    8de8:	e7e2      	b.n	8db0 <printk+0x190>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:426
					printk_putc(schar, &count, info);  //输出符号
    8dea:	4652      	mov	r2, sl
    8dec:	a90a      	add	r1, sp, #40	; 0x28
    8dee:	4658      	mov	r0, fp
    8df0:	f7ff fdc6 	bl	8980 <printk_putc>
    8df4:	e7e1      	b.n	8dba <printk+0x19a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:431
				if (!IS_FLAG_MINUS(flags_used)) {
    8df6:	07f3      	lsls	r3, r6, #31
    8df8:	d508      	bpl.n	8e0c <printk+0x1ec>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:442
			if (!dschar && schar) {
    8dfa:	465b      	mov	r3, fp
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d0e3      	beq.n	8dc8 <printk+0x1a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:443
				printk_putc(schar, &count, info);
    8e00:	4652      	mov	r2, sl
    8e02:	a90a      	add	r1, sp, #40	; 0x28
    8e04:	4658      	mov	r0, fp
    8e06:	f7ff fdbb 	bl	8980 <printk_putc>
    8e0a:	e7dd      	b.n	8dc8 <printk+0x1a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:432
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    8e0c:	4653      	mov	r3, sl
    8e0e:	aa0a      	add	r2, sp, #40	; 0x28
    8e10:	0029      	movs	r1, r5
    8e12:	4648      	mov	r0, r9
    8e14:	f7ff fe1c 	bl	8a50 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:434
					if (schar)
    8e18:	465b      	mov	r3, fp
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d0d4      	beq.n	8dc8 <printk+0x1a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:435
						printk_putc(schar, &count, info);
    8e1e:	4652      	mov	r2, sl
    8e20:	a90a      	add	r1, sp, #40	; 0x28
    8e22:	4658      	mov	r0, fp
    8e24:	f7ff fdac 	bl	8980 <printk_putc>
    8e28:	e7ce      	b.n	8dc8 <printk+0x1a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:457
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg(ap,double);
    8e2a:	9b00      	ldr	r3, [sp, #0]
    8e2c:	001a      	movs	r2, r3
    8e2e:	320c      	adds	r2, #12
    8e30:	9200      	str	r2, [sp, #0]
    8e32:	6859      	ldr	r1, [r3, #4]
    8e34:	689f      	ldr	r7, [r3, #8]
    8e36:	9103      	str	r1, [sp, #12]
    8e38:	000a      	movs	r2, r1
    8e3a:	003b      	movs	r3, r7
    8e3c:	9206      	str	r2, [sp, #24]
    8e3e:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:461
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
    8e40:	2200      	movs	r2, #0
    8e42:	2300      	movs	r3, #0
    8e44:	9803      	ldr	r0, [sp, #12]
    8e46:	0039      	movs	r1, r7
    8e48:	f7fe f8ba 	bl	6fc0 <__aeabi_dcmplt>
    8e4c:	2800      	cmp	r0, #0
    8e4e:	d108      	bne.n	8e62 <printk+0x242>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:468
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    8e50:	07b3      	lsls	r3, r6, #30
    8e52:	d428      	bmi.n	8ea6 <printk+0x286>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:472
					schar = '+';
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
    8e54:	2304      	movs	r3, #4
    8e56:	001f      	movs	r7, r3
    8e58:	4037      	ands	r7, r6
    8e5a:	4233      	tst	r3, r6
    8e5c:	d008      	beq.n	8e70 <printk+0x250>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:473
						schar = ' ';
    8e5e:	2720      	movs	r7, #32
    8e60:	e006      	b.n	8e70 <printk+0x250>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:463
				fval = -fval;				//负数取它的正数
    8e62:	9a03      	ldr	r2, [sp, #12]
    8e64:	2180      	movs	r1, #128	; 0x80
    8e66:	0609      	lsls	r1, r1, #24
    8e68:	187b      	adds	r3, r7, r1
    8e6a:	9206      	str	r2, [sp, #24]
    8e6c:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:462
				schar = '-';
    8e6e:	272d      	movs	r7, #45	; 0x2d
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:483
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
    8e70:	9b02      	ldr	r3, [sp, #8]
    8e72:	2b00      	cmp	r3, #0
    8e74:	d119      	bne.n	8eaa <printk+0x28a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:491
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{	//浮点型精度到小数点后8位
				if(length_modifier==0)   
    8e76:	9b01      	ldr	r3, [sp, #4]
    8e78:	2b00      	cmp	r3, #0
    8e7a:	d11d      	bne.n	8eb8 <printk+0x298>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:493
				{	//将整型转换成字符型保存在vstr中，返回字符数vlen
					vlen = printk_mkfloatstr(&fval,vstr,8);
    8e7c:	2208      	movs	r2, #8
    8e7e:	a90b      	add	r1, sp, #44	; 0x2c
    8e80:	a806      	add	r0, sp, #24
    8e82:	f7ff fdfb 	bl	8a7c <printk_mkfloatstr>
    8e86:	4680      	mov	r8, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:511
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    8e88:	0733      	lsls	r3, r6, #28
    8e8a:	d522      	bpl.n	8ed2 <printk+0x2b2>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:512
				if (schar)
    8e8c:	2f00      	cmp	r7, #0
    8e8e:	d11a      	bne.n	8ec6 <printk+0x2a6>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:515
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
    8e90:	4653      	mov	r3, sl
    8e92:	aa0a      	add	r2, sp, #40	; 0x28
    8e94:	0029      	movs	r1, r5
    8e96:	4640      	mov	r0, r8
    8e98:	f7ff fdcb 	bl	8a32 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:516
				vlen = field_width;
    8e9c:	46a8      	mov	r8, r5
    8e9e:	af0b      	add	r7, sp, #44	; 0x2c
    8ea0:	46a1      	mov	r9, r4
    8ea2:	4654      	mov	r4, sl
    8ea4:	e032      	b.n	8f0c <printk+0x2ec>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:469
					schar = '+';
    8ea6:	272b      	movs	r7, #43	; 0x2b
    8ea8:	e7e2      	b.n	8e70 <printk+0x250>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:486
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);
    8eaa:	4642      	mov	r2, r8
    8eac:	a90b      	add	r1, sp, #44	; 0x2c
    8eae:	a806      	add	r0, sp, #24
    8eb0:	f7ff fde4 	bl	8a7c <printk_mkfloatstr>
    8eb4:	4680      	mov	r8, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:487
				vstrp = &vstr[0];  //指向转换后的第一个字符
    8eb6:	e7e7      	b.n	8e88 <printk+0x268>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:499
					vlen = printk_mkfloatstr(&fval,vstr,precision_width);
    8eb8:	4642      	mov	r2, r8
    8eba:	a90b      	add	r1, sp, #44	; 0x2c
    8ebc:	a806      	add	r0, sp, #24
    8ebe:	f7ff fddd 	bl	8a7c <printk_mkfloatstr>
    8ec2:	4680      	mov	r8, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:501
					vstrp = &vstr[0];  
    8ec4:	e7e0      	b.n	8e88 <printk+0x268>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:513
					printk_putc(schar, &count, info);  //输出符号
    8ec6:	4652      	mov	r2, sl
    8ec8:	a90a      	add	r1, sp, #40	; 0x28
    8eca:	0038      	movs	r0, r7
    8ecc:	f7ff fd58 	bl	8980 <printk_putc>
    8ed0:	e7de      	b.n	8e90 <printk+0x270>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:518
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    8ed2:	07f3      	lsls	r3, r6, #31
    8ed4:	d507      	bpl.n	8ee6 <printk+0x2c6>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:529
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    8ed6:	2f00      	cmp	r7, #0
    8ed8:	d0e1      	beq.n	8e9e <printk+0x27e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:530
				printk_putc(schar, &count, info);
    8eda:	4652      	mov	r2, sl
    8edc:	a90a      	add	r1, sp, #40	; 0x28
    8ede:	0038      	movs	r0, r7
    8ee0:	f7ff fd4e 	bl	8980 <printk_putc>
    8ee4:	e7db      	b.n	8e9e <printk+0x27e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:519
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    8ee6:	4653      	mov	r3, sl
    8ee8:	aa0a      	add	r2, sp, #40	; 0x28
    8eea:	0029      	movs	r1, r5
    8eec:	4640      	mov	r0, r8
    8eee:	f7ff fdaf 	bl	8a50 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:521
					if (schar)
    8ef2:	2f00      	cmp	r7, #0
    8ef4:	d0d3      	beq.n	8e9e <printk+0x27e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:522
						printk_putc(schar, &count, info);
    8ef6:	4652      	mov	r2, sl
    8ef8:	a90a      	add	r1, sp, #40	; 0x28
    8efa:	0038      	movs	r0, r7
    8efc:	f7ff fd40 	bl	8980 <printk_putc>
    8f00:	e7cd      	b.n	8e9e <printk+0x27e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:533
			}
			while (*vstrp)
				printk_putc(*vstrp++, &count, info);
    8f02:	3701      	adds	r7, #1
    8f04:	0022      	movs	r2, r4
    8f06:	a90a      	add	r1, sp, #40	; 0x28
    8f08:	f7ff fd3a 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:532
			while (*vstrp)
    8f0c:	2000      	movs	r0, #0
    8f0e:	5638      	ldrsb	r0, [r7, r0]
    8f10:	2800      	cmp	r0, #0
    8f12:	d1f6      	bne.n	8f02 <printk+0x2e2>
    8f14:	46a2      	mov	sl, r4
    8f16:	464c      	mov	r4, r9
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:534
			if (IS_FLAG_MINUS(flags_used)) {
    8f18:	07f3      	lsls	r3, r6, #31
    8f1a:	d400      	bmi.n	8f1e <printk+0x2fe>
    8f1c:	e69c      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:535
				printk_pad_space(vlen, field_width, &count, info);
    8f1e:	4653      	mov	r3, sl
    8f20:	aa0a      	add	r2, sp, #40	; 0x28
    8f22:	0029      	movs	r1, r5
    8f24:	4640      	mov	r0, r8
    8f26:	f7ff fd93 	bl	8a50 <printk_pad_space>
    8f2a:	e695      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:541
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg(ap, unsigned int);
    8f2c:	9b00      	ldr	r3, [sp, #0]
    8f2e:	001a      	movs	r2, r3
    8f30:	ca08      	ldmia	r2!, {r3}
    8f32:	4693      	mov	fp, r2
    8f34:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:542
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    8f36:	2310      	movs	r3, #16
    8f38:	2200      	movs	r2, #0
    8f3a:	a905      	add	r1, sp, #20
    8f3c:	a80b      	add	r0, sp, #44	; 0x2c
    8f3e:	f7ff fd34 	bl	89aa <printk_mknumstr>
    8f42:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:543
			vstrp = &vstr[vlen];
    8f44:	ab0b      	add	r3, sp, #44	; 0x2c
    8f46:	444b      	add	r3, r9
    8f48:	4698      	mov	r8, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:546

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
    8f4a:	2308      	movs	r3, #8
    8f4c:	001a      	movs	r2, r3
    8f4e:	4032      	ands	r2, r6
    8f50:	9200      	str	r2, [sp, #0]
    8f52:	4233      	tst	r3, r6
    8f54:	d028      	beq.n	8fa8 <printk+0x388>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:547
				if (IS_FLAG_POUND(flags_used)) {
    8f56:	3308      	adds	r3, #8
    8f58:	001a      	movs	r2, r3
    8f5a:	4032      	ands	r2, r6
    8f5c:	9200      	str	r2, [sp, #0]
    8f5e:	4233      	tst	r3, r6
    8f60:	d111      	bne.n	8f86 <printk+0x366>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:553
					printk_putc('0', &count, info);
					printk_putc('x', &count, info);
					/*vlen += 2;*/
					dschar = TRUE;
				}
				printk_pad_zero(vlen, field_width, &count, info);
    8f62:	4653      	mov	r3, sl
    8f64:	aa0a      	add	r2, sp, #40	; 0x28
    8f66:	0029      	movs	r1, r5
    8f68:	4648      	mov	r0, r9
    8f6a:	f7ff fd62 	bl	8a32 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:554
				vlen = field_width;
    8f6e:	46a9      	mov	r9, r5
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:569
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
    8f70:	06f3      	lsls	r3, r6, #27
    8f72:	d502      	bpl.n	8f7a <printk+0x35a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:569 (discriminator 1)
    8f74:	9b00      	ldr	r3, [sp, #0]
    8f76:	2b00      	cmp	r3, #0
    8f78:	d036      	beq.n	8fe8 <printk+0x3c8>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg(ap, unsigned int);
    8f7a:	465b      	mov	r3, fp
    8f7c:	9300      	str	r3, [sp, #0]
    8f7e:	4647      	mov	r7, r8
    8f80:	46a0      	mov	r8, r4
    8f82:	4654      	mov	r4, sl
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:574
				printk_putc('0', &count, info);
				printk_putc('x', &count, info);
				vlen += 2;
			}
			goto cont_xd;
    8f84:	e092      	b.n	90ac <printk+0x48c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:548
					printk_putc('0', &count, info);
    8f86:	4652      	mov	r2, sl
    8f88:	a90a      	add	r1, sp, #40	; 0x28
    8f8a:	2030      	movs	r0, #48	; 0x30
    8f8c:	f7ff fcf8 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:549
					printk_putc('x', &count, info);
    8f90:	4652      	mov	r2, sl
    8f92:	a90a      	add	r1, sp, #40	; 0x28
    8f94:	2078      	movs	r0, #120	; 0x78
    8f96:	f7ff fcf3 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:551
					dschar = TRUE;
    8f9a:	9700      	str	r7, [sp, #0]
    8f9c:	e7e1      	b.n	8f62 <printk+0x342>
    8f9e:	46c0      	nop			; (mov r8, r8)
    8fa0:	00009290 	.word	0x00009290
    8fa4:	000092d4 	.word	0x000092d4
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:556
				if (!IS_FLAG_MINUS(flags_used)) {
    8fa8:	07f3      	lsls	r3, r6, #31
    8faa:	d4e1      	bmi.n	8f70 <printk+0x350>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:557
					if (IS_FLAG_POUND(flags_used)) {
    8fac:	2310      	movs	r3, #16
    8fae:	001a      	movs	r2, r3
    8fb0:	4032      	ands	r2, r6
    8fb2:	9200      	str	r2, [sp, #0]
    8fb4:	4233      	tst	r3, r6
    8fb6:	d002      	beq.n	8fbe <printk+0x39e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:558
						vlen += 2;
    8fb8:	3b0e      	subs	r3, #14
    8fba:	469c      	mov	ip, r3
    8fbc:	44e1      	add	r9, ip
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:560
					printk_pad_space(vlen, field_width, &count, info);
    8fbe:	4653      	mov	r3, sl
    8fc0:	aa0a      	add	r2, sp, #40	; 0x28
    8fc2:	0029      	movs	r1, r5
    8fc4:	4648      	mov	r0, r9
    8fc6:	f7ff fd43 	bl	8a50 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:561
					if (IS_FLAG_POUND(flags_used)) {
    8fca:	9b00      	ldr	r3, [sp, #0]
    8fcc:	2b00      	cmp	r3, #0
    8fce:	d0cf      	beq.n	8f70 <printk+0x350>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:562
						printk_putc('0', &count, info);
    8fd0:	4652      	mov	r2, sl
    8fd2:	a90a      	add	r1, sp, #40	; 0x28
    8fd4:	2030      	movs	r0, #48	; 0x30
    8fd6:	f7ff fcd3 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:563
						printk_putc('x', &count, info);
    8fda:	4652      	mov	r2, sl
    8fdc:	a90a      	add	r1, sp, #40	; 0x28
    8fde:	2078      	movs	r0, #120	; 0x78
    8fe0:	f7ff fcce 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:564
						dschar = TRUE;
    8fe4:	9700      	str	r7, [sp, #0]
    8fe6:	e7c3      	b.n	8f70 <printk+0x350>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:570
				printk_putc('0', &count, info);
    8fe8:	4652      	mov	r2, sl
    8fea:	a90a      	add	r1, sp, #40	; 0x28
    8fec:	2030      	movs	r0, #48	; 0x30
    8fee:	f7ff fcc7 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:571
				printk_putc('x', &count, info);
    8ff2:	4652      	mov	r2, sl
    8ff4:	a90a      	add	r1, sp, #40	; 0x28
    8ff6:	2078      	movs	r0, #120	; 0x78
    8ff8:	f7ff fcc2 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:572
				vlen += 2;
    8ffc:	2302      	movs	r3, #2
    8ffe:	469c      	mov	ip, r3
    9000:	44e1      	add	r9, ip
    9002:	e7ba      	b.n	8f7a <printk+0x35a>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:577
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg(ap, unsigned int);
    9004:	9f00      	ldr	r7, [sp, #0]
    9006:	cf08      	ldmia	r7!, {r3}
    9008:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:578
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
    900a:	2308      	movs	r3, #8
    900c:	2200      	movs	r2, #0
    900e:	a905      	add	r1, sp, #20
    9010:	a80b      	add	r0, sp, #44	; 0x2c
    9012:	f7ff fcca 	bl	89aa <printk_mknumstr>
    9016:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:577
			uval = (unsigned int) va_arg(ap, unsigned int);
    9018:	9700      	str	r7, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:594
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
    901a:	ab0b      	add	r3, sp, #44	; 0x2c
    901c:	444b      	add	r3, r9
    901e:	4698      	mov	r8, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:596

			if (IS_FLAG_ZERO(flags_used)) {
    9020:	0733      	lsls	r3, r6, #28
    9022:	d429      	bmi.n	9078 <printk+0x458>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:600
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    9024:	07f3      	lsls	r3, r6, #31
    9026:	d532      	bpl.n	908e <printk+0x46e>
    9028:	4647      	mov	r7, r8
    902a:	46a0      	mov	r8, r4
    902c:	4654      	mov	r4, sl
    902e:	e03d      	b.n	90ac <printk+0x48c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg(ap, unsigned int);
    9030:	9f00      	ldr	r7, [sp, #0]
    9032:	cf08      	ldmia	r7!, {r3}
    9034:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:583
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
    9036:	2302      	movs	r3, #2
    9038:	2200      	movs	r2, #0
    903a:	a905      	add	r1, sp, #20
    903c:	a80b      	add	r0, sp, #44	; 0x2c
    903e:	f7ff fcb4 	bl	89aa <printk_mknumstr>
    9042:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg(ap, unsigned int);
    9044:	9700      	str	r7, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:584
			goto cont_u;
    9046:	e7e8      	b.n	901a <printk+0x3fa>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg(ap, void *);
    9048:	9f00      	ldr	r7, [sp, #0]
    904a:	cf08      	ldmia	r7!, {r3}
    904c:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:588
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    904e:	2310      	movs	r3, #16
    9050:	2200      	movs	r2, #0
    9052:	a905      	add	r1, sp, #20
    9054:	a80b      	add	r0, sp, #44	; 0x2c
    9056:	f7ff fca8 	bl	89aa <printk_mknumstr>
    905a:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg(ap, void *);
    905c:	9700      	str	r7, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:589
			goto cont_u;
    905e:	e7dc      	b.n	901a <printk+0x3fa>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg(ap, unsigned int);
    9060:	9f00      	ldr	r7, [sp, #0]
    9062:	cf08      	ldmia	r7!, {r3}
    9064:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:592
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
    9066:	230a      	movs	r3, #10
    9068:	2200      	movs	r2, #0
    906a:	a905      	add	r1, sp, #20
    906c:	a80b      	add	r0, sp, #44	; 0x2c
    906e:	f7ff fc9c 	bl	89aa <printk_mknumstr>
    9072:	4681      	mov	r9, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg(ap, unsigned int);
    9074:	9700      	str	r7, [sp, #0]
    9076:	e7d0      	b.n	901a <printk+0x3fa>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:597
				printk_pad_zero(vlen, field_width, &count, info);
    9078:	4653      	mov	r3, sl
    907a:	aa0a      	add	r2, sp, #40	; 0x28
    907c:	0029      	movs	r1, r5
    907e:	4648      	mov	r0, r9
    9080:	f7ff fcd7 	bl	8a32 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:598
				vlen = field_width;
    9084:	46a9      	mov	r9, r5
    9086:	4647      	mov	r7, r8
    9088:	46a0      	mov	r8, r4
    908a:	4654      	mov	r4, sl
    908c:	e00e      	b.n	90ac <printk+0x48c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:601
					printk_pad_space(vlen, field_width, &count, info);
    908e:	4653      	mov	r3, sl
    9090:	aa0a      	add	r2, sp, #40	; 0x28
    9092:	0029      	movs	r1, r5
    9094:	4648      	mov	r0, r9
    9096:	f7ff fcdb 	bl	8a50 <printk_pad_space>
    909a:	4647      	mov	r7, r8
    909c:	46a0      	mov	r8, r4
    909e:	4654      	mov	r4, sl
    90a0:	e004      	b.n	90ac <printk+0x48c>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:606
				}
			}

			cont_xd: while (*vstrp)
				printk_putc(*vstrp--, &count, info);
    90a2:	3f01      	subs	r7, #1
    90a4:	0022      	movs	r2, r4
    90a6:	a90a      	add	r1, sp, #40	; 0x28
    90a8:	f7ff fc6a 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:605 (discriminator 1)
			cont_xd: while (*vstrp)
    90ac:	2000      	movs	r0, #0
    90ae:	5638      	ldrsb	r0, [r7, r0]
    90b0:	2800      	cmp	r0, #0
    90b2:	d1f6      	bne.n	90a2 <printk+0x482>
    90b4:	46a2      	mov	sl, r4
    90b6:	4644      	mov	r4, r8
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:608

			if (IS_FLAG_MINUS(flags_used)) {
    90b8:	07f3      	lsls	r3, r6, #31
    90ba:	d400      	bmi.n	90be <printk+0x49e>
    90bc:	e5cc      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:609
				printk_pad_space(vlen, field_width, &count, info);
    90be:	4653      	mov	r3, sl
    90c0:	aa0a      	add	r2, sp, #40	; 0x28
    90c2:	0029      	movs	r1, r5
    90c4:	4648      	mov	r0, r9
    90c6:	f7ff fcc3 	bl	8a50 <printk_pad_space>
    90ca:	e5c5      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:615
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg(ap, unsigned int);
    90cc:	9d00      	ldr	r5, [sp, #0]
    90ce:	cd01      	ldmia	r5!, {r0}
    90d0:	b240      	sxtb	r0, r0
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:616
			printk_putc(cval, &count, info);
    90d2:	4652      	mov	r2, sl
    90d4:	a90a      	add	r1, sp, #40	; 0x28
    90d6:	f7ff fc53 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:615
			cval = (char) va_arg(ap, unsigned int);
    90da:	9500      	str	r5, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:617
			break;
    90dc:	e5bc      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:619
		case 's':
			sval = (char *) va_arg(ap, char *);
    90de:	9b00      	ldr	r3, [sp, #0]
    90e0:	cb80      	ldmia	r3!, {r7}
    90e2:	4699      	mov	r9, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:620
			if (sval) {
    90e4:	2f00      	cmp	r7, #0
    90e6:	d046      	beq.n	9176 <printk+0x556>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:621
				vlen = strlen(sval);
    90e8:	0038      	movs	r0, r7
    90ea:	f7ff f85b 	bl	81a4 <strlen>
    90ee:	9000      	str	r0, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:622
				if (!IS_FLAG_MINUS(flags_used)) {
    90f0:	2301      	movs	r3, #1
    90f2:	001a      	movs	r2, r3
    90f4:	4032      	ands	r2, r6
    90f6:	4693      	mov	fp, r2
    90f8:	4233      	tst	r3, r6
    90fa:	d004      	beq.n	9106 <printk+0x4e6>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:625
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
    90fc:	4643      	mov	r3, r8
    90fe:	2b00      	cmp	r3, #0
    9100:	d107      	bne.n	9112 <printk+0x4f2>
    9102:	4656      	mov	r6, sl
    9104:	e018      	b.n	9138 <printk+0x518>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:623
					printk_pad_space(vlen, field_width, &count, info);
    9106:	4653      	mov	r3, sl
    9108:	aa0a      	add	r2, sp, #40	; 0x28
    910a:	0029      	movs	r1, r5
    910c:	f7ff fca0 	bl	8a50 <printk_pad_space>
    9110:	e7f4      	b.n	90fc <printk+0x4dc>
    9112:	4646      	mov	r6, r8
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:627
				{
					while (*sval)
    9114:	2000      	movs	r0, #0
    9116:	5638      	ldrsb	r0, [r7, r0]
    9118:	2800      	cmp	r0, #0
    911a:	d012      	beq.n	9142 <printk+0x522>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:629
					{
						if(precision_width>=1)
    911c:	2e00      	cmp	r6, #0
    911e:	ddf9      	ble.n	9114 <printk+0x4f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:631
						{
							precision_width--;
    9120:	3e01      	subs	r6, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:632
							printk_putc(*sval++, &count, info);
    9122:	3701      	adds	r7, #1
    9124:	4652      	mov	r2, sl
    9126:	a90a      	add	r1, sp, #40	; 0x28
    9128:	f7ff fc2a 	bl	8980 <printk_putc>
    912c:	e7f2      	b.n	9114 <printk+0x4f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:639
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
					   printk_putc(*sval++, &count, info);
    912e:	3701      	adds	r7, #1
    9130:	0032      	movs	r2, r6
    9132:	a90a      	add	r1, sp, #40	; 0x28
    9134:	f7ff fc24 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:638
					while (*sval)
    9138:	2000      	movs	r0, #0
    913a:	5638      	ldrsb	r0, [r7, r0]
    913c:	2800      	cmp	r0, #0
    913e:	d1f6      	bne.n	912e <printk+0x50e>
    9140:	46b2      	mov	sl, r6
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:641
				}
				if (IS_FLAG_MINUS(flags_used)) {
    9142:	465b      	mov	r3, fp
    9144:	2b00      	cmp	r3, #0
    9146:	d102      	bne.n	914e <printk+0x52e>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    9148:	464b      	mov	r3, r9
    914a:	9300      	str	r3, [sp, #0]
    914c:	e584      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:642
					printk_pad_space(vlen, field_width, &count, info);
    914e:	4653      	mov	r3, sl
    9150:	aa0a      	add	r2, sp, #40	; 0x28
    9152:	0029      	movs	r1, r5
    9154:	9800      	ldr	r0, [sp, #0]
    9156:	f7ff fc7b 	bl	8a50 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    915a:	464b      	mov	r3, r9
    915c:	9300      	str	r3, [sp, #0]
    915e:	e57b      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:647
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg(ap, int *);
    9160:	9b00      	ldr	r3, [sp, #0]
    9162:	cb04      	ldmia	r3!, {r2}
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:648
			*ivalp = count;
    9164:	990a      	ldr	r1, [sp, #40]	; 0x28
    9166:	6011      	str	r1, [r2, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:647
			ivalp = (int *) va_arg(ap, int *);
    9168:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:649
			break;
    916a:	e575      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:652

		default:
			printk_putc(c, &count, info);
    916c:	4652      	mov	r2, sl
    916e:	a90a      	add	r1, sp, #40	; 0x28
    9170:	f7ff fc06 	bl	8980 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:653
			break;
    9174:	e570      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    9176:	9300      	str	r3, [sp, #0]
    9178:	e56e      	b.n	8c58 <printk+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:657
		}
	}
	return count;
}
    917a:	980a      	ldr	r0, [sp, #40]	; 0x28
    917c:	b015      	add	sp, #84	; 0x54
    917e:	bcf0      	pop	{r4, r5, r6, r7}
    9180:	46bb      	mov	fp, r7
    9182:	46b2      	mov	sl, r6
    9184:	46a9      	mov	r9, r5
    9186:	46a0      	mov	r8, r4
    9188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    918a:	46c0      	nop			; (mov r8, r8)

0000918c <myprintf>:
myprintf():
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:665
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
    918c:	b40f      	push	{r0, r1, r2, r3}
    918e:	b500      	push	{lr}
    9190:	b085      	sub	sp, #20
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:669
	char * ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
    9192:	2301      	movs	r3, #1
    9194:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:670
	info.func = &out_char;     //调用的串口输出函数
    9196:	4b05      	ldr	r3, [pc, #20]	; (91ac <myprintf+0x20>)
    9198:	9302      	str	r3, [sp, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:673
	//对ap 进行初始化，让它指向可变参数表里面的第一个参数
	va_start(ap, fmt); 
	rvalue = printk(&info, fmt, ap);
    919a:	aa06      	add	r2, sp, #24
    919c:	ca02      	ldmia	r2!, {r1}
    919e:	a801      	add	r0, sp, #4
    91a0:	f7ff fd3e 	bl	8c20 <printk>
F:\WorkSpace\AHL-GEC-EXP\Temp\DMA普通模式和周期模式\DMA_收发固定长度字符串\Debug/srcc/printf.c:678

	va_end(ap);

	return rvalue;
}
    91a4:	b005      	add	sp, #20
    91a6:	bc08      	pop	{r3}
    91a8:	b004      	add	sp, #16
    91aa:	4718      	bx	r3
    91ac:	00008a6f 	.word	0x00008a6f

000091b0 <memcpy>:
memcpy():
    91b0:	2300      	movs	r3, #0
    91b2:	b510      	push	{r4, lr}
    91b4:	429a      	cmp	r2, r3
    91b6:	d100      	bne.n	91ba <memcpy+0xa>
    91b8:	bd10      	pop	{r4, pc}
    91ba:	5ccc      	ldrb	r4, [r1, r3]
    91bc:	54c4      	strb	r4, [r0, r3]
    91be:	3301      	adds	r3, #1
    91c0:	e7f8      	b.n	91b4 <memcpy+0x4>

000091c2 <memset>:
memset():
    91c2:	0003      	movs	r3, r0
    91c4:	1882      	adds	r2, r0, r2
    91c6:	4293      	cmp	r3, r2
    91c8:	d100      	bne.n	91cc <memset+0xa>
    91ca:	4770      	bx	lr
    91cc:	7019      	strb	r1, [r3, #0]
    91ce:	3301      	adds	r3, #1
    91d0:	e7f9      	b.n	91c6 <memset+0x4>
    91d2:	0000      	movs	r0, r0
    91d4:	00007630 	.word	0x00007630
    91d8:	0000755e 	.word	0x0000755e
    91dc:	0000755e 	.word	0x0000755e
    91e0:	0000755a 	.word	0x0000755a
    91e4:	00007564 	.word	0x00007564
    91e8:	00007564 	.word	0x00007564
    91ec:	00007850 	.word	0x00007850
    91f0:	0000755a 	.word	0x0000755a
    91f4:	00007564 	.word	0x00007564
    91f8:	00007850 	.word	0x00007850
    91fc:	00007564 	.word	0x00007564
    9200:	0000755a 	.word	0x0000755a
    9204:	000077ee 	.word	0x000077ee
    9208:	000077ee 	.word	0x000077ee
    920c:	000077ee 	.word	0x000077ee
    9210:	000078ba 	.word	0x000078ba
    9214:	33323130 	.word	0x33323130
    9218:	37363534 	.word	0x37363534
    921c:	42413938 	.word	0x42413938
    9220:	46454443 	.word	0x46454443
    9224:	30323032 	.word	0x30323032
    9228:	36313730 	.word	0x36313730
    922c:	00000000 	.word	0x00000000
    9230:	bea12020 	.word	0xbea12020
    9234:	72657355 	.word	0x72657355
    9238:	becae1cc 	.word	0xbecae1cc
    923c:	baa3bfa1 	.word	0xbaa3bfa1
    9240:	f8bdabbd 	.word	0xf8bdabbd
    9244:	7355ebc8 	.word	0x7355ebc8
    9248:	c4b57265 	.word	0xc4b57265
    924c:	6e69616d 	.word	0x6e69616d
    9250:	b4d62928 	.word	0xb4d62928
    9254:	2e2ed0d0 	.word	0x2e2ed0d0
    9258:	000a0d2e 	.word	0x000a0d2e
    925c:	414d440a 	.word	0x414d440a
    9260:	61655220 	.word	0x61655220
    9264:	75532064 	.word	0x75532064
    9268:	73656363 	.word	0x73656363
    926c:	000a2173 	.word	0x000a2173

00009270 <UART_ARR>:
    9270:	4006b000 4006c000 6d612049 206e6920     ...@...@I am in 
    9280:	656c6469 746e6920 75707265 00000a74     idle interput...
    9290:	00008ca8 00008cc0 00008cc0 00008cb4     ................
    92a0:	00008cc0 00008cc0 00008cc0 00008cc0     ................
    92b0:	00008cc0 00008cc0 00008cc0 00008ca2     ................
    92c0:	00008cc0 00008c82 00008cc0 00008cc0     ................
    92d0:	00008cae 00008f2c 0000916c 0000916c     ....,...l...l...
    92e0:	0000916c 0000916c 0000916c 0000916c     l...l...l...l...
    92f0:	0000916c 0000916c 0000916c 00009030     l...l...l...0...
    9300:	000090cc 00008d76 0000916c 00008e2a     ....v...l...*...
    9310:	0000916c 0000916c 00008d76 0000916c     l...l...v...l...
    9320:	0000916c 0000916c 0000916c 00009160     l...l...l...`...
    9330:	00009004 00009048 0000916c 0000916c     ....H...l...l...
    9340:	000090de 0000916c 00009060 0000916c     ....l...`...l...
    9350:	0000916c 00008f2c                       l...,...

00009358 <_init>:
_init():
    9358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    935a:	46c0      	nop			; (mov r8, r8)
    935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    935e:	bc08      	pop	{r3}
    9360:	469e      	mov	lr, r3
    9362:	4770      	bx	lr

00009364 <_fini>:
_fini():
    9364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9366:	46c0      	nop			; (mov r8, r8)
    9368:	bcf8      	pop	{r3, r4, r5, r6, r7}
    936a:	bc08      	pop	{r3}
    936c:	469e      	mov	lr, r3
    936e:	4770      	bx	lr

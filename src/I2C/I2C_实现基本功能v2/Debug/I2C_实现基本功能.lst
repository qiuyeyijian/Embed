
I2C_实现基本功能.elf:     file format elf32-littlearm
I2C_实现基本功能.elf
architecture: armv6s-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00006c59

Program Header:
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000068c0 memsz 0x000068c0 flags r--
    LOAD off    0x00006c00 vaddr 0x00006c00 paddr 0x00006c00 align 2**16
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00006c10 vaddr 0x00006c10 paddr 0x00006c10 align 2**16
         filesz 0x00003ac4 memsz 0x00003ac4 flags rwx
    LOAD off    0x00000400 vaddr 0x20000400 paddr 0x20000400 align 2**16
         filesz 0x00000000 memsz 0x000003a0 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts     000000c0  00006800  00006800  00006800  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_config   00000010  00006c00  00006c00  00006c00  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text           00003ab4  00006c10  00006c10  00006c10  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM            00000008  0000a6c4  0000a6c4  0000a6c4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array     00000004  0000a6cc  0000a6cc  0000a6cc  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array     00000004  0000a6d0  0000a6d0  0000a6d0  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .mtb            00000000  20000400  20000400  0000a6d4  2**0  CONTENTS
  7 .data           00000000  20000400  20000400  0000a6d4  2**0  CONTENTS, ALLOC, LOAD, DATA
  8 .bss            0000009c  20000400  20000400  00010400  2**2  ALLOC
  9 .heap           00000204  2000049c  2000049c  00010400  2**0  ALLOC
 10 .stack          00000100  200006a0  200006a0  00010400  2**0  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a6d4  2**0  CONTENTS, READONLY
 12 .debug_info     00008a0e  00000000  00000000  0000a6fc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev   00001aab  00000000  00000000  0001310a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges  00000358  00000000  00000000  00014bb8  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges   00000298  00000000  00000000  00014f10  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro    0000f694  00000000  00000000  000151a8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line     000040fd  00000000  00000000  0002483c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str      0004ef94  00000000  00000000  00028939  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment        0000004c  00000000  00000000  000778cd  2**0  CONTENTS, READONLY
 20 .debug_frame    000009c8  00000000  00000000  0007791c  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00006800 l    d  .interrupts	00000000 .interrupts
00006c00 l    d  .flash_config	00000000 .flash_config
00006c10 l    d  .text	00000000 .text
0000a6c4 l    d  .ARM	00000000 .ARM
0000a6cc l    d  .init_array	00000000 .init_array
0000a6d0 l    d  .fini_array	00000000 .fini_array
20000400 l    d  .mtb	00000000 .mtb
20000400 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
2000049c l    d  .heap	00000000 .heap
200006a0 l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./obj/startup_MKL36Z4.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000a6ac l     O .text	00000000 __EH_FRAME_BEGIN__
00006c10 l     F .text	00000000 __do_global_dtors_aux
20000400 l       .bss	00000001 completed.8914
0000a6d0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00006c38 l     F .text	00000000 frame_dummy
20000404 l       .bss	00000018 object.8919
0000a6cc l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _udivsi3.o
00006ca8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00006dbc l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 _clzdi2.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 i2c.c
000081b4 l     F .text	0000002c NVIC_EnableIRQ
000081e0 l     F .text	0000002c NVIC_DisableIRQ
0000a5d0 l     O .text	00000008 I2C_BASE_TABLE
0000a5d8 l     O .text	00000002 I2C_IRQ_TABLE
2000041c l     O .bss	00000004 index.5600
00000000 l    df *ABS*	00000000 system_MKL36Z4.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 suart.c
00008c94 l     F .text	0000002c NVIC_EnableIRQ
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 isr.c
20000420 l     O .bss	00000001 isMe.5490
20000421 l     O .bss	00000001 isMe.5495
00000000 l    df *ABS*	00000000 printf.c
00009918 l     F .text	0000004c printk_putc
00009bdc l     F .text	000000f8 printk_mknumstr
00009cd4 l     F .text	00000034 printk_pad_zero
00009d08 l     F .text	00000034 printk_pad_space
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 d:/tools/armnoneeabi/bin/../lib/gcc/arm-none-eabi/9.3.1/thumb/v6-m/nofp/crti.o
00000000 l    df *ABS*	00000000 d:/tools/armnoneeabi/bin/../lib/gcc/arm-none-eabi/9.3.1/thumb/v6-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 
0000a6d0 l       .init_array	00000000 __init_array_end
0000a6cc l       .init_array	00000000 __preinit_array_end
0000a6cc l       .init_array	00000000 __init_array_start
0000a6cc l       .init_array	00000000 __preinit_array_start
200004a0 g       .heap	00000000 __HeapBase
00006fd4 g     F .text	00000012 .hidden __aeabi_dcmple
00008b90 g     F .text	00000028 flash_read_physical
00007260 g     F .text	00000078 .hidden __eqdf2
20000400 g       .data	00000000 __data_start__
00000100 g       *ABS*	00000000 STACK_SIZE
000097e8 g     F .text	00000088 I2C0_IRQHandler
00008ef0 g     F .text	00000278 suart_send
00008700 g     F .text	0000005c i2c_recv
0000003e g       *ABS*	00000000 GEC_USER_SECTOR_END
00006ca0  w    F .text	00000006 HardFault_Handler
0000848c g     F .text	00000058 i2c_enable_re_int
00008e14 g     F .text	0000009c suart_set
00006ca0  w    F .text	00000006 SysTick_Handler
00006ca0  w    F .text	00000006 PendSV_Handler
00006ca0  w    F .text	00000006 NMI_Handler
0000a6cc g       .ARM	00000000 __exidx_end
000097a4 g     F .text	00000044 PORTC_PORTD_IRQHandler
00009870 g     F .text	00000088 I2C1_IRQHandler
00006ca0  w    F .text	00000006 UART1_IRQHandler
000072d8 g     F .text	000000e4 .hidden __gtdf2
0000a6d4 g       .fini_array	00000000 __etext
00006ca0  w    F .text	00000006 DMA2_IRQHandler
0000860c g     F .text	00000034 i2c_write
2000042c g     O .bss	00000064 gRecvBuff
0000852c g     F .text	00000034 i2c_clear_re_int
00006ca0  w    F .text	00000006 TPM0_IRQHandler
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmple
00006ca0  w    F .text	00000006 I2S0_IRQHandler
00006ca0  w    F .text	00000006 LLWU_IRQHandler
000094cc g     F .text	000000e8 suart_enable_receive_interupt
0000001a g       *ABS*	00000000 GEC_USER_SECTOR_START
00006ca0  w    F .text	00000006 TSI0_IRQHandler
00008cc0 g     F .text	00000154 suart_init
00006ca0  w    F .text	00000006 UART0_IRQHandler
0000a48c g     F .text	00000012 memcpy
00006f94 g     F .text	00000020 .hidden __aeabi_cdrcmple
000073bc g     F .text	000000e0 .hidden __ltdf2
0000a6cc g       .init_array	00000000 __DTOR_END__
00007010 g     F .text	0000003e .hidden __aeabi_uldivmod
00006ca0  w    F .text	00000006 ADC0_IRQHandler
00006ca8 g     F .text	0000010a .hidden __udivsi3
20000400 g       .bss	00000000 __START_BSS
00007050 g     F .text	0000003c .hidden __fixunsdfsi
200006a0 g       .heap	00000000 __HeapLimit
00008560 g     F .text	00000078 i2c_wait
20000400 g       .bss	00000000 __bss_start__
00008a68 g     F .text	00000098 flash_erase
00008104 g     F .text	0000004c .hidden __aeabi_ui2d
00006ca0  w    F .text	00000006 SPI1_IRQHandler
000070c8 g     F .text	00000196 .hidden __udivmoddi4
00006ca0  w    F .text	00000006 DefaultISR
00006fc0 g     F .text	00000012 .hidden __aeabi_dcmplt
0000a6c4 g       .ARM	00000000 __exidx_start
0000749c g     F .text	000004d8 .hidden __aeabi_dmul
00009964 g     F .text	00000278 printk_mkfloatstr
0000a6ac g     F .text	00000000 _init
00006ca0  w    F .text	00000006 TPM2_IRQHandler
0000708c g     F .text	0000003c .hidden __aeabi_d2ulz
00006ca0  w    F .text	00000006 RTC_IRQHandler
00000400 g       *ABS*	00000000 MCU_SECTORSIZE
00006c58  w    F .text	00000048 Reset_Handler
00008684 g     F .text	00000044 i2c_start
00006ca0  w    F .text	00000006 LCD_IRQHandler
000084e4 g     F .text	00000048 i2c_disable_re_int
20000490 g     O .bss	00000001 i2c_m1_addr
000073bc g     F .text	000000e0 .hidden __ledf2
200017ff g       *ABS*	00000000 GEC_USER_RAM_END
0000a450 g     F .text	0000003c myprintf
00006ca0  w    F .text	00000006 RTC_Seconds_IRQHandler
00006dbc g     F .text	00000000 .hidden __aeabi_idiv
00006ca0  w    F .text	00000006 MCG_IRQHandler
00006ca0  w    F .text	00000006 UART2_IRQHandler
20000400 g       .data	00000000 __data_end__
0000a6cc g       .init_array	00000000 __CTOR_LIST__
00000200 g       *ABS*	00000000 HEAP_SIZE
00006fe8 g     F .text	00000012 .hidden __aeabi_dcmpgt
00008150 g     F .text	0000003c .hidden __clzsi2
20000491 g     O .bss	00000001 gSuartSendFlag
2000049c g       .bss	00000000 __bss_end__
00006ca0  w    F .text	00000006 Reserved20_IRQHandler
00006ffc g     F .text	00000012 .hidden __aeabi_dcmpge
00008c2c g     F .text	00000068 flash_cmd_launch
20000494 g     O .bss	00000003 gTime
00007974 g     F .text	00000724 .hidden __aeabi_dsub
20000424 g     O .bss	00000004 component_fun
20000400 g       *ABS*	00000000 GEC_USER_RAM_START
00009168 g     F .text	00000364 suart_receive
0000a5dc g     O .text	00000008 UART_ARR
0000837c g     F .text	0000010e i2c_writeN
000098f8 g     F .text	00000020 out_char
00009d3c g     F .text	00000714 printk
00006f90  w    F .text	00000002 .hidden __aeabi_ldiv0
00008640 g     F .text	00000044 i2c_stop
0000a49e g     F .text	00000010 memset
00006800 g       .interrupts	000000c0 __isr_vector
00008924 g     F .text	00000118 main
00008a3c g     F .text	0000002c delay_ms
000095b4 g     F .text	00000030 suart_get_port_pin
000085d8 g     F .text	00000034 i2c_read
00006ca0  w    F .text	00000006 PIT_IRQHandler
00006ca8 g     F .text	00000000 .hidden __aeabi_uidiv
00006ca0  w    F .text	00000006 SVC_Handler
20000400 g       .data	00000000 __DATA_RAM
200004a0 g       .heap	00000000 __end__
00006dbc g     F .text	000001cc .hidden __divsi3
0000a6cc g       .init_array	00000000 __CTOR_END__
00006ca0  w    F .text	00000006 DMA3_IRQHandler
0000a6cc g       .init_array	00000000 __DTOR_LIST__
2000049c g       .bss	00000000 __END_BSS
0000880c g     F .text	00000118 SystemInit
00006ca0  w    F .text	00000006 DMA0_IRQHandler
00007260 g     F .text	00000078 .hidden __nedf2
0000708c g     F .text	0000003c .hidden __fixunsdfdi
0000a6b8 g     F .text	00000000 _fini
00006ca0  w    F .text	00000006 DAC0_IRQHandler
20001800 g       .stack	00000000 __StackTop
00008b00 g     F .text	00000090 flash_write_physical
20000400 g       .mtb	00000000 _mtb_end
0000820c g     F .text	00000170 i2c_init
00008eb0 g     F .text	00000040 suart_get
0000a6d4 g       *ABS*	00000000 __DATA_END
00008bb8 g     F .text	00000072 flash_isempty
00007050 g     F .text	0000003c .hidden __aeabi_d2uiz
00006ca0  w    F .text	00000006 TPM1_IRQHandler
00009604 g     F .text	000000d4 Vectors_Init
20001800 g       *ABS*	00000000 __stack
00006db4 g     F .text	00000008 .hidden __aeabi_uidivmod
00006fb4 g     F .text	0000000c .hidden __aeabi_dcmpeq
00006ca0  w    F .text	00000006 LVD_LVW_IRQHandler
00006ca0  w    F .text	00000006 SPI0_IRQHandler
000086c8 g     F .text	00000038 i2c_get_ack
00006ca0  w    F .text	00000006 PORTA_IRQHandler
00006800 g       .interrupts	00000000 __VECTOR_TABLE
0000a6d4 g       .fini_array	00000000 __DATA_ROM
20001700 g       *ABS*	00000000 __StackLimit
20000497 g     O .bss	00000001 gI2CSendFlag
00006ca0  w    F .text	00000006 FTFA_IRQHandler
00008098 g     F .text	0000006c .hidden __aeabi_d2iz
20000498 g     O .bss	00000001 i2c_m0_addr
20000400 g       .mtb	00000000 _mtb_start
00006ca0  w    F .text	00000006 Reserved40_IRQHandler
00006f90  w    F .text	00000002 .hidden __aeabi_idiv0
00006ca0  w    F .text	00000006 LPTMR0_IRQHandler
000081a4 g     F .text	0000000e strlen
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000072d8 g     F .text	000000e4 .hidden __gedf2
000096d8 g     F .text	000000ac uart_send1
000095e4 g     F .text	00000020 wdog_stop
00009784 g     F .text	00000020 uart_is_uartNo
0000875c g     F .text	000000b0 i2c_send
0000818c g     F .text	00000016 .hidden __clzdi2
00006ca0  w    F .text	00000006 CMP0_IRQHandler
00006f88 g     F .text	00000008 .hidden __aeabi_idivmod
20000428 g     O .bss	00000001 ModeSelect
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START
00006ca0  w    F .text	00000006 DMA1_IRQHandler



Disassembly of section .text:

00006c10 <__do_global_dtors_aux>:
__do_global_dtors_aux():
    6c10:	b510      	push	{r4, lr}
    6c12:	4c06      	ldr	r4, [pc, #24]	; (6c2c <__do_global_dtors_aux+0x1c>)
    6c14:	7823      	ldrb	r3, [r4, #0]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d107      	bne.n	6c2a <__do_global_dtors_aux+0x1a>
    6c1a:	4b05      	ldr	r3, [pc, #20]	; (6c30 <__do_global_dtors_aux+0x20>)
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d002      	beq.n	6c26 <__do_global_dtors_aux+0x16>
    6c20:	4804      	ldr	r0, [pc, #16]	; (6c34 <__do_global_dtors_aux+0x24>)
    6c22:	e000      	b.n	6c26 <__do_global_dtors_aux+0x16>
    6c24:	bf00      	nop
    6c26:	2301      	movs	r3, #1
    6c28:	7023      	strb	r3, [r4, #0]
    6c2a:	bd10      	pop	{r4, pc}
    6c2c:	20000400 	.word	0x20000400
    6c30:	00000000 	.word	0x00000000
    6c34:	0000a6ac 	.word	0x0000a6ac

00006c38 <frame_dummy>:
frame_dummy():
    6c38:	4b04      	ldr	r3, [pc, #16]	; (6c4c <frame_dummy+0x14>)
    6c3a:	b510      	push	{r4, lr}
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d003      	beq.n	6c48 <frame_dummy+0x10>
    6c40:	4903      	ldr	r1, [pc, #12]	; (6c50 <frame_dummy+0x18>)
    6c42:	4804      	ldr	r0, [pc, #16]	; (6c54 <frame_dummy+0x1c>)
    6c44:	e000      	b.n	6c48 <frame_dummy+0x10>
    6c46:	bf00      	nop
    6c48:	bd10      	pop	{r4, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	00000000 	.word	0x00000000
    6c50:	20000404 	.word	0x20000404
    6c54:	0000a6ac 	.word	0x0000a6ac

00006c58 <Reset_Handler>:
Reset_Handler():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:118
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
    6c58:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:120
#ifndef __NO_SYSTEM_INIT
    bl SystemInit
    6c5a:	f001 fdd7 	bl	880c <SystemInit>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:122
#endif
    cpsie   i               /* Unmask interrupts */
    6c5e:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:130
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    6c60:	490a      	ldr	r1, [pc, #40]	; (6c8c <Reset_Handler+0x34>)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c62:	4a0b      	ldr	r2, [pc, #44]	; (6c90 <Reset_Handler+0x38>)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c64:	4b0b      	ldr	r3, [pc, #44]	; (6c94 <Reset_Handler+0x3c>)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:134

    subs    r3, r2
    6c66:	1a9b      	subs	r3, r3, r2
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:135
    ble     .LC0
    6c68:	dd03      	ble.n	6c72 <Reset_Handler+0x1a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:138

.LC1:
    subs    r3, 4
    6c6a:	3b04      	subs	r3, #4
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:139
    ldr    r0, [r1,r3]
    6c6c:	58c8      	ldr	r0, [r1, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:140
    str    r0, [r2,r3]
    6c6e:	50d0      	str	r0, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:141
    bgt    .LC1
    6c70:	dcfb      	bgt.n	6c6a <Reset_Handler+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:154
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
    6c72:	4909      	ldr	r1, [pc, #36]	; (6c98 <Reset_Handler+0x40>)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c74:	4a09      	ldr	r2, [pc, #36]	; (6c9c <Reset_Handler+0x44>)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:157

    subs    r2, r1
    6c76:	1a52      	subs	r2, r2, r1
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:158
    ble .LC3
    6c78:	dd03      	ble.n	6c82 <Reset_Handler+0x2a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:160

    movs    r0, 0
    6c7a:	2000      	movs	r0, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:162
.LC2:
    str r0, [r1, r2]
    6c7c:	5088      	str	r0, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:163
    subs    r2, 4
    6c7e:	3a04      	subs	r2, #4
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:164
    bge .LC2
    6c80:	dafc      	bge.n	6c7c <Reset_Handler+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:173
#define __START _start
#endif


/*【User程序修改处1】*/
	bl	 Vectors_Init  
    6c82:	f002 fcbf 	bl	9604 <Vectors_Init>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:175
  //  bl    __START
   bl main
    6c86:	f001 fe4d 	bl	8924 <main>
    6c8a:	0000      	.short	0x0000
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:130
    ldr    r1, =__etext
    6c8c:	0000a6d4 	.word	0x0000a6d4
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c90:	20000400 	.word	0x20000400
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c94:	20000400 	.word	0x20000400
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:154
    ldr r1, =__bss_start__
    6c98:	20000400 	.word	0x20000400
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c9c:	2000049c 	.word	0x2000049c

00006ca0 <ADC0_IRQHandler>:
HardFault_Handler():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:186
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:    
    //ldr	r0, =DefaultISR   //误中断，进入无限循环
    //bx r0
       push  {lr}        //【20200326】WYH改，误中断，回原处
    6ca0:	b500      	push	{lr}
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:187
       nop
    6ca2:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcs/startup_MKL36Z4.S:188
       pop   {pc}
    6ca4:	bd00      	pop	{pc}
    6ca6:	46c0      	nop			; (mov r8, r8)

00006ca8 <__udivsi3>:
__udivsi3():
    6ca8:	2200      	movs	r2, #0
    6caa:	0843      	lsrs	r3, r0, #1
    6cac:	428b      	cmp	r3, r1
    6cae:	d374      	bcc.n	6d9a <__udivsi3+0xf2>
    6cb0:	0903      	lsrs	r3, r0, #4
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d35f      	bcc.n	6d76 <__udivsi3+0xce>
    6cb6:	0a03      	lsrs	r3, r0, #8
    6cb8:	428b      	cmp	r3, r1
    6cba:	d344      	bcc.n	6d46 <__udivsi3+0x9e>
    6cbc:	0b03      	lsrs	r3, r0, #12
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d328      	bcc.n	6d14 <__udivsi3+0x6c>
    6cc2:	0c03      	lsrs	r3, r0, #16
    6cc4:	428b      	cmp	r3, r1
    6cc6:	d30d      	bcc.n	6ce4 <__udivsi3+0x3c>
    6cc8:	22ff      	movs	r2, #255	; 0xff
    6cca:	0209      	lsls	r1, r1, #8
    6ccc:	ba12      	rev	r2, r2
    6cce:	0c03      	lsrs	r3, r0, #16
    6cd0:	428b      	cmp	r3, r1
    6cd2:	d302      	bcc.n	6cda <__udivsi3+0x32>
    6cd4:	1212      	asrs	r2, r2, #8
    6cd6:	0209      	lsls	r1, r1, #8
    6cd8:	d065      	beq.n	6da6 <__udivsi3+0xfe>
    6cda:	0b03      	lsrs	r3, r0, #12
    6cdc:	428b      	cmp	r3, r1
    6cde:	d319      	bcc.n	6d14 <__udivsi3+0x6c>
    6ce0:	e000      	b.n	6ce4 <__udivsi3+0x3c>
    6ce2:	0a09      	lsrs	r1, r1, #8
    6ce4:	0bc3      	lsrs	r3, r0, #15
    6ce6:	428b      	cmp	r3, r1
    6ce8:	d301      	bcc.n	6cee <__udivsi3+0x46>
    6cea:	03cb      	lsls	r3, r1, #15
    6cec:	1ac0      	subs	r0, r0, r3
    6cee:	4152      	adcs	r2, r2
    6cf0:	0b83      	lsrs	r3, r0, #14
    6cf2:	428b      	cmp	r3, r1
    6cf4:	d301      	bcc.n	6cfa <__udivsi3+0x52>
    6cf6:	038b      	lsls	r3, r1, #14
    6cf8:	1ac0      	subs	r0, r0, r3
    6cfa:	4152      	adcs	r2, r2
    6cfc:	0b43      	lsrs	r3, r0, #13
    6cfe:	428b      	cmp	r3, r1
    6d00:	d301      	bcc.n	6d06 <__udivsi3+0x5e>
    6d02:	034b      	lsls	r3, r1, #13
    6d04:	1ac0      	subs	r0, r0, r3
    6d06:	4152      	adcs	r2, r2
    6d08:	0b03      	lsrs	r3, r0, #12
    6d0a:	428b      	cmp	r3, r1
    6d0c:	d301      	bcc.n	6d12 <__udivsi3+0x6a>
    6d0e:	030b      	lsls	r3, r1, #12
    6d10:	1ac0      	subs	r0, r0, r3
    6d12:	4152      	adcs	r2, r2
    6d14:	0ac3      	lsrs	r3, r0, #11
    6d16:	428b      	cmp	r3, r1
    6d18:	d301      	bcc.n	6d1e <__udivsi3+0x76>
    6d1a:	02cb      	lsls	r3, r1, #11
    6d1c:	1ac0      	subs	r0, r0, r3
    6d1e:	4152      	adcs	r2, r2
    6d20:	0a83      	lsrs	r3, r0, #10
    6d22:	428b      	cmp	r3, r1
    6d24:	d301      	bcc.n	6d2a <__udivsi3+0x82>
    6d26:	028b      	lsls	r3, r1, #10
    6d28:	1ac0      	subs	r0, r0, r3
    6d2a:	4152      	adcs	r2, r2
    6d2c:	0a43      	lsrs	r3, r0, #9
    6d2e:	428b      	cmp	r3, r1
    6d30:	d301      	bcc.n	6d36 <__udivsi3+0x8e>
    6d32:	024b      	lsls	r3, r1, #9
    6d34:	1ac0      	subs	r0, r0, r3
    6d36:	4152      	adcs	r2, r2
    6d38:	0a03      	lsrs	r3, r0, #8
    6d3a:	428b      	cmp	r3, r1
    6d3c:	d301      	bcc.n	6d42 <__udivsi3+0x9a>
    6d3e:	020b      	lsls	r3, r1, #8
    6d40:	1ac0      	subs	r0, r0, r3
    6d42:	4152      	adcs	r2, r2
    6d44:	d2cd      	bcs.n	6ce2 <__udivsi3+0x3a>
    6d46:	09c3      	lsrs	r3, r0, #7
    6d48:	428b      	cmp	r3, r1
    6d4a:	d301      	bcc.n	6d50 <__udivsi3+0xa8>
    6d4c:	01cb      	lsls	r3, r1, #7
    6d4e:	1ac0      	subs	r0, r0, r3
    6d50:	4152      	adcs	r2, r2
    6d52:	0983      	lsrs	r3, r0, #6
    6d54:	428b      	cmp	r3, r1
    6d56:	d301      	bcc.n	6d5c <__udivsi3+0xb4>
    6d58:	018b      	lsls	r3, r1, #6
    6d5a:	1ac0      	subs	r0, r0, r3
    6d5c:	4152      	adcs	r2, r2
    6d5e:	0943      	lsrs	r3, r0, #5
    6d60:	428b      	cmp	r3, r1
    6d62:	d301      	bcc.n	6d68 <__udivsi3+0xc0>
    6d64:	014b      	lsls	r3, r1, #5
    6d66:	1ac0      	subs	r0, r0, r3
    6d68:	4152      	adcs	r2, r2
    6d6a:	0903      	lsrs	r3, r0, #4
    6d6c:	428b      	cmp	r3, r1
    6d6e:	d301      	bcc.n	6d74 <__udivsi3+0xcc>
    6d70:	010b      	lsls	r3, r1, #4
    6d72:	1ac0      	subs	r0, r0, r3
    6d74:	4152      	adcs	r2, r2
    6d76:	08c3      	lsrs	r3, r0, #3
    6d78:	428b      	cmp	r3, r1
    6d7a:	d301      	bcc.n	6d80 <__udivsi3+0xd8>
    6d7c:	00cb      	lsls	r3, r1, #3
    6d7e:	1ac0      	subs	r0, r0, r3
    6d80:	4152      	adcs	r2, r2
    6d82:	0883      	lsrs	r3, r0, #2
    6d84:	428b      	cmp	r3, r1
    6d86:	d301      	bcc.n	6d8c <__udivsi3+0xe4>
    6d88:	008b      	lsls	r3, r1, #2
    6d8a:	1ac0      	subs	r0, r0, r3
    6d8c:	4152      	adcs	r2, r2
    6d8e:	0843      	lsrs	r3, r0, #1
    6d90:	428b      	cmp	r3, r1
    6d92:	d301      	bcc.n	6d98 <__udivsi3+0xf0>
    6d94:	004b      	lsls	r3, r1, #1
    6d96:	1ac0      	subs	r0, r0, r3
    6d98:	4152      	adcs	r2, r2
    6d9a:	1a41      	subs	r1, r0, r1
    6d9c:	d200      	bcs.n	6da0 <__udivsi3+0xf8>
    6d9e:	4601      	mov	r1, r0
    6da0:	4152      	adcs	r2, r2
    6da2:	4610      	mov	r0, r2
    6da4:	4770      	bx	lr
    6da6:	e7ff      	b.n	6da8 <__udivsi3+0x100>
    6da8:	b501      	push	{r0, lr}
    6daa:	2000      	movs	r0, #0
    6dac:	f000 f8f0 	bl	6f90 <__aeabi_idiv0>
    6db0:	bd02      	pop	{r1, pc}
    6db2:	46c0      	nop			; (mov r8, r8)

00006db4 <__aeabi_uidivmod>:
__aeabi_uidivmod():
    6db4:	2900      	cmp	r1, #0
    6db6:	d0f7      	beq.n	6da8 <__udivsi3+0x100>
    6db8:	e776      	b.n	6ca8 <__udivsi3>
    6dba:	4770      	bx	lr

00006dbc <__divsi3>:
__divsi3():
    6dbc:	4603      	mov	r3, r0
    6dbe:	430b      	orrs	r3, r1
    6dc0:	d47f      	bmi.n	6ec2 <__divsi3+0x106>
    6dc2:	2200      	movs	r2, #0
    6dc4:	0843      	lsrs	r3, r0, #1
    6dc6:	428b      	cmp	r3, r1
    6dc8:	d374      	bcc.n	6eb4 <__divsi3+0xf8>
    6dca:	0903      	lsrs	r3, r0, #4
    6dcc:	428b      	cmp	r3, r1
    6dce:	d35f      	bcc.n	6e90 <__divsi3+0xd4>
    6dd0:	0a03      	lsrs	r3, r0, #8
    6dd2:	428b      	cmp	r3, r1
    6dd4:	d344      	bcc.n	6e60 <__divsi3+0xa4>
    6dd6:	0b03      	lsrs	r3, r0, #12
    6dd8:	428b      	cmp	r3, r1
    6dda:	d328      	bcc.n	6e2e <__divsi3+0x72>
    6ddc:	0c03      	lsrs	r3, r0, #16
    6dde:	428b      	cmp	r3, r1
    6de0:	d30d      	bcc.n	6dfe <__divsi3+0x42>
    6de2:	22ff      	movs	r2, #255	; 0xff
    6de4:	0209      	lsls	r1, r1, #8
    6de6:	ba12      	rev	r2, r2
    6de8:	0c03      	lsrs	r3, r0, #16
    6dea:	428b      	cmp	r3, r1
    6dec:	d302      	bcc.n	6df4 <__divsi3+0x38>
    6dee:	1212      	asrs	r2, r2, #8
    6df0:	0209      	lsls	r1, r1, #8
    6df2:	d065      	beq.n	6ec0 <__divsi3+0x104>
    6df4:	0b03      	lsrs	r3, r0, #12
    6df6:	428b      	cmp	r3, r1
    6df8:	d319      	bcc.n	6e2e <__divsi3+0x72>
    6dfa:	e000      	b.n	6dfe <__divsi3+0x42>
    6dfc:	0a09      	lsrs	r1, r1, #8
    6dfe:	0bc3      	lsrs	r3, r0, #15
    6e00:	428b      	cmp	r3, r1
    6e02:	d301      	bcc.n	6e08 <__divsi3+0x4c>
    6e04:	03cb      	lsls	r3, r1, #15
    6e06:	1ac0      	subs	r0, r0, r3
    6e08:	4152      	adcs	r2, r2
    6e0a:	0b83      	lsrs	r3, r0, #14
    6e0c:	428b      	cmp	r3, r1
    6e0e:	d301      	bcc.n	6e14 <__divsi3+0x58>
    6e10:	038b      	lsls	r3, r1, #14
    6e12:	1ac0      	subs	r0, r0, r3
    6e14:	4152      	adcs	r2, r2
    6e16:	0b43      	lsrs	r3, r0, #13
    6e18:	428b      	cmp	r3, r1
    6e1a:	d301      	bcc.n	6e20 <__divsi3+0x64>
    6e1c:	034b      	lsls	r3, r1, #13
    6e1e:	1ac0      	subs	r0, r0, r3
    6e20:	4152      	adcs	r2, r2
    6e22:	0b03      	lsrs	r3, r0, #12
    6e24:	428b      	cmp	r3, r1
    6e26:	d301      	bcc.n	6e2c <__divsi3+0x70>
    6e28:	030b      	lsls	r3, r1, #12
    6e2a:	1ac0      	subs	r0, r0, r3
    6e2c:	4152      	adcs	r2, r2
    6e2e:	0ac3      	lsrs	r3, r0, #11
    6e30:	428b      	cmp	r3, r1
    6e32:	d301      	bcc.n	6e38 <__divsi3+0x7c>
    6e34:	02cb      	lsls	r3, r1, #11
    6e36:	1ac0      	subs	r0, r0, r3
    6e38:	4152      	adcs	r2, r2
    6e3a:	0a83      	lsrs	r3, r0, #10
    6e3c:	428b      	cmp	r3, r1
    6e3e:	d301      	bcc.n	6e44 <__divsi3+0x88>
    6e40:	028b      	lsls	r3, r1, #10
    6e42:	1ac0      	subs	r0, r0, r3
    6e44:	4152      	adcs	r2, r2
    6e46:	0a43      	lsrs	r3, r0, #9
    6e48:	428b      	cmp	r3, r1
    6e4a:	d301      	bcc.n	6e50 <__divsi3+0x94>
    6e4c:	024b      	lsls	r3, r1, #9
    6e4e:	1ac0      	subs	r0, r0, r3
    6e50:	4152      	adcs	r2, r2
    6e52:	0a03      	lsrs	r3, r0, #8
    6e54:	428b      	cmp	r3, r1
    6e56:	d301      	bcc.n	6e5c <__divsi3+0xa0>
    6e58:	020b      	lsls	r3, r1, #8
    6e5a:	1ac0      	subs	r0, r0, r3
    6e5c:	4152      	adcs	r2, r2
    6e5e:	d2cd      	bcs.n	6dfc <__divsi3+0x40>
    6e60:	09c3      	lsrs	r3, r0, #7
    6e62:	428b      	cmp	r3, r1
    6e64:	d301      	bcc.n	6e6a <__divsi3+0xae>
    6e66:	01cb      	lsls	r3, r1, #7
    6e68:	1ac0      	subs	r0, r0, r3
    6e6a:	4152      	adcs	r2, r2
    6e6c:	0983      	lsrs	r3, r0, #6
    6e6e:	428b      	cmp	r3, r1
    6e70:	d301      	bcc.n	6e76 <__divsi3+0xba>
    6e72:	018b      	lsls	r3, r1, #6
    6e74:	1ac0      	subs	r0, r0, r3
    6e76:	4152      	adcs	r2, r2
    6e78:	0943      	lsrs	r3, r0, #5
    6e7a:	428b      	cmp	r3, r1
    6e7c:	d301      	bcc.n	6e82 <__divsi3+0xc6>
    6e7e:	014b      	lsls	r3, r1, #5
    6e80:	1ac0      	subs	r0, r0, r3
    6e82:	4152      	adcs	r2, r2
    6e84:	0903      	lsrs	r3, r0, #4
    6e86:	428b      	cmp	r3, r1
    6e88:	d301      	bcc.n	6e8e <__divsi3+0xd2>
    6e8a:	010b      	lsls	r3, r1, #4
    6e8c:	1ac0      	subs	r0, r0, r3
    6e8e:	4152      	adcs	r2, r2
    6e90:	08c3      	lsrs	r3, r0, #3
    6e92:	428b      	cmp	r3, r1
    6e94:	d301      	bcc.n	6e9a <__divsi3+0xde>
    6e96:	00cb      	lsls	r3, r1, #3
    6e98:	1ac0      	subs	r0, r0, r3
    6e9a:	4152      	adcs	r2, r2
    6e9c:	0883      	lsrs	r3, r0, #2
    6e9e:	428b      	cmp	r3, r1
    6ea0:	d301      	bcc.n	6ea6 <__divsi3+0xea>
    6ea2:	008b      	lsls	r3, r1, #2
    6ea4:	1ac0      	subs	r0, r0, r3
    6ea6:	4152      	adcs	r2, r2
    6ea8:	0843      	lsrs	r3, r0, #1
    6eaa:	428b      	cmp	r3, r1
    6eac:	d301      	bcc.n	6eb2 <__divsi3+0xf6>
    6eae:	004b      	lsls	r3, r1, #1
    6eb0:	1ac0      	subs	r0, r0, r3
    6eb2:	4152      	adcs	r2, r2
    6eb4:	1a41      	subs	r1, r0, r1
    6eb6:	d200      	bcs.n	6eba <__divsi3+0xfe>
    6eb8:	4601      	mov	r1, r0
    6eba:	4152      	adcs	r2, r2
    6ebc:	4610      	mov	r0, r2
    6ebe:	4770      	bx	lr
    6ec0:	e05d      	b.n	6f7e <__divsi3+0x1c2>
    6ec2:	0fca      	lsrs	r2, r1, #31
    6ec4:	d000      	beq.n	6ec8 <__divsi3+0x10c>
    6ec6:	4249      	negs	r1, r1
    6ec8:	1003      	asrs	r3, r0, #32
    6eca:	d300      	bcc.n	6ece <__divsi3+0x112>
    6ecc:	4240      	negs	r0, r0
    6ece:	4053      	eors	r3, r2
    6ed0:	2200      	movs	r2, #0
    6ed2:	469c      	mov	ip, r3
    6ed4:	0903      	lsrs	r3, r0, #4
    6ed6:	428b      	cmp	r3, r1
    6ed8:	d32d      	bcc.n	6f36 <__divsi3+0x17a>
    6eda:	0a03      	lsrs	r3, r0, #8
    6edc:	428b      	cmp	r3, r1
    6ede:	d312      	bcc.n	6f06 <__divsi3+0x14a>
    6ee0:	22fc      	movs	r2, #252	; 0xfc
    6ee2:	0189      	lsls	r1, r1, #6
    6ee4:	ba12      	rev	r2, r2
    6ee6:	0a03      	lsrs	r3, r0, #8
    6ee8:	428b      	cmp	r3, r1
    6eea:	d30c      	bcc.n	6f06 <__divsi3+0x14a>
    6eec:	0189      	lsls	r1, r1, #6
    6eee:	1192      	asrs	r2, r2, #6
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d308      	bcc.n	6f06 <__divsi3+0x14a>
    6ef4:	0189      	lsls	r1, r1, #6
    6ef6:	1192      	asrs	r2, r2, #6
    6ef8:	428b      	cmp	r3, r1
    6efa:	d304      	bcc.n	6f06 <__divsi3+0x14a>
    6efc:	0189      	lsls	r1, r1, #6
    6efe:	d03a      	beq.n	6f76 <__divsi3+0x1ba>
    6f00:	1192      	asrs	r2, r2, #6
    6f02:	e000      	b.n	6f06 <__divsi3+0x14a>
    6f04:	0989      	lsrs	r1, r1, #6
    6f06:	09c3      	lsrs	r3, r0, #7
    6f08:	428b      	cmp	r3, r1
    6f0a:	d301      	bcc.n	6f10 <__divsi3+0x154>
    6f0c:	01cb      	lsls	r3, r1, #7
    6f0e:	1ac0      	subs	r0, r0, r3
    6f10:	4152      	adcs	r2, r2
    6f12:	0983      	lsrs	r3, r0, #6
    6f14:	428b      	cmp	r3, r1
    6f16:	d301      	bcc.n	6f1c <__divsi3+0x160>
    6f18:	018b      	lsls	r3, r1, #6
    6f1a:	1ac0      	subs	r0, r0, r3
    6f1c:	4152      	adcs	r2, r2
    6f1e:	0943      	lsrs	r3, r0, #5
    6f20:	428b      	cmp	r3, r1
    6f22:	d301      	bcc.n	6f28 <__divsi3+0x16c>
    6f24:	014b      	lsls	r3, r1, #5
    6f26:	1ac0      	subs	r0, r0, r3
    6f28:	4152      	adcs	r2, r2
    6f2a:	0903      	lsrs	r3, r0, #4
    6f2c:	428b      	cmp	r3, r1
    6f2e:	d301      	bcc.n	6f34 <__divsi3+0x178>
    6f30:	010b      	lsls	r3, r1, #4
    6f32:	1ac0      	subs	r0, r0, r3
    6f34:	4152      	adcs	r2, r2
    6f36:	08c3      	lsrs	r3, r0, #3
    6f38:	428b      	cmp	r3, r1
    6f3a:	d301      	bcc.n	6f40 <__divsi3+0x184>
    6f3c:	00cb      	lsls	r3, r1, #3
    6f3e:	1ac0      	subs	r0, r0, r3
    6f40:	4152      	adcs	r2, r2
    6f42:	0883      	lsrs	r3, r0, #2
    6f44:	428b      	cmp	r3, r1
    6f46:	d301      	bcc.n	6f4c <__divsi3+0x190>
    6f48:	008b      	lsls	r3, r1, #2
    6f4a:	1ac0      	subs	r0, r0, r3
    6f4c:	4152      	adcs	r2, r2
    6f4e:	d2d9      	bcs.n	6f04 <__divsi3+0x148>
    6f50:	0843      	lsrs	r3, r0, #1
    6f52:	428b      	cmp	r3, r1
    6f54:	d301      	bcc.n	6f5a <__divsi3+0x19e>
    6f56:	004b      	lsls	r3, r1, #1
    6f58:	1ac0      	subs	r0, r0, r3
    6f5a:	4152      	adcs	r2, r2
    6f5c:	1a41      	subs	r1, r0, r1
    6f5e:	d200      	bcs.n	6f62 <__divsi3+0x1a6>
    6f60:	4601      	mov	r1, r0
    6f62:	4663      	mov	r3, ip
    6f64:	4152      	adcs	r2, r2
    6f66:	105b      	asrs	r3, r3, #1
    6f68:	4610      	mov	r0, r2
    6f6a:	d301      	bcc.n	6f70 <__divsi3+0x1b4>
    6f6c:	4240      	negs	r0, r0
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d500      	bpl.n	6f74 <__divsi3+0x1b8>
    6f72:	4249      	negs	r1, r1
    6f74:	4770      	bx	lr
    6f76:	4663      	mov	r3, ip
    6f78:	105b      	asrs	r3, r3, #1
    6f7a:	d300      	bcc.n	6f7e <__divsi3+0x1c2>
    6f7c:	4240      	negs	r0, r0
    6f7e:	b501      	push	{r0, lr}
    6f80:	2000      	movs	r0, #0
    6f82:	f000 f805 	bl	6f90 <__aeabi_idiv0>
    6f86:	bd02      	pop	{r1, pc}

00006f88 <__aeabi_idivmod>:
__aeabi_idivmod():
    6f88:	2900      	cmp	r1, #0
    6f8a:	d0f8      	beq.n	6f7e <__divsi3+0x1c2>
    6f8c:	e716      	b.n	6dbc <__divsi3>
    6f8e:	4770      	bx	lr

00006f90 <__aeabi_idiv0>:
__aeabi_ldiv0():
    6f90:	4770      	bx	lr
    6f92:	46c0      	nop			; (mov r8, r8)

00006f94 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
    6f94:	4684      	mov	ip, r0
    6f96:	1c10      	adds	r0, r2, #0
    6f98:	4662      	mov	r2, ip
    6f9a:	468c      	mov	ip, r1
    6f9c:	1c19      	adds	r1, r3, #0
    6f9e:	4663      	mov	r3, ip
    6fa0:	e000      	b.n	6fa4 <__aeabi_cdcmpeq>
    6fa2:	46c0      	nop			; (mov r8, r8)

00006fa4 <__aeabi_cdcmpeq>:
    6fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6fa6:	f000 fa09 	bl	73bc <__ledf2>
    6faa:	2800      	cmp	r0, #0
    6fac:	d401      	bmi.n	6fb2 <__aeabi_cdcmpeq+0xe>
    6fae:	2100      	movs	r1, #0
    6fb0:	42c8      	cmn	r0, r1
    6fb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006fb4 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
    6fb4:	b510      	push	{r4, lr}
    6fb6:	f000 f953 	bl	7260 <__eqdf2>
    6fba:	4240      	negs	r0, r0
    6fbc:	3001      	adds	r0, #1
    6fbe:	bd10      	pop	{r4, pc}

00006fc0 <__aeabi_dcmplt>:
__aeabi_dcmplt():
    6fc0:	b510      	push	{r4, lr}
    6fc2:	f000 f9fb 	bl	73bc <__ledf2>
    6fc6:	2800      	cmp	r0, #0
    6fc8:	db01      	blt.n	6fce <__aeabi_dcmplt+0xe>
    6fca:	2000      	movs	r0, #0
    6fcc:	bd10      	pop	{r4, pc}
    6fce:	2001      	movs	r0, #1
    6fd0:	bd10      	pop	{r4, pc}
    6fd2:	46c0      	nop			; (mov r8, r8)

00006fd4 <__aeabi_dcmple>:
__aeabi_dcmple():
    6fd4:	b510      	push	{r4, lr}
    6fd6:	f000 f9f1 	bl	73bc <__ledf2>
    6fda:	2800      	cmp	r0, #0
    6fdc:	dd01      	ble.n	6fe2 <__aeabi_dcmple+0xe>
    6fde:	2000      	movs	r0, #0
    6fe0:	bd10      	pop	{r4, pc}
    6fe2:	2001      	movs	r0, #1
    6fe4:	bd10      	pop	{r4, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)

00006fe8 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
    6fe8:	b510      	push	{r4, lr}
    6fea:	f000 f975 	bl	72d8 <__gedf2>
    6fee:	2800      	cmp	r0, #0
    6ff0:	dc01      	bgt.n	6ff6 <__aeabi_dcmpgt+0xe>
    6ff2:	2000      	movs	r0, #0
    6ff4:	bd10      	pop	{r4, pc}
    6ff6:	2001      	movs	r0, #1
    6ff8:	bd10      	pop	{r4, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)

00006ffc <__aeabi_dcmpge>:
__aeabi_dcmpge():
    6ffc:	b510      	push	{r4, lr}
    6ffe:	f000 f96b 	bl	72d8 <__gedf2>
    7002:	2800      	cmp	r0, #0
    7004:	da01      	bge.n	700a <__aeabi_dcmpge+0xe>
    7006:	2000      	movs	r0, #0
    7008:	bd10      	pop	{r4, pc}
    700a:	2001      	movs	r0, #1
    700c:	bd10      	pop	{r4, pc}
    700e:	46c0      	nop			; (mov r8, r8)

00007010 <__aeabi_uldivmod>:
__aeabi_uldivmod():
    7010:	2b00      	cmp	r3, #0
    7012:	d111      	bne.n	7038 <__aeabi_uldivmod+0x28>
    7014:	2a00      	cmp	r2, #0
    7016:	d10f      	bne.n	7038 <__aeabi_uldivmod+0x28>
    7018:	2900      	cmp	r1, #0
    701a:	d100      	bne.n	701e <__aeabi_uldivmod+0xe>
    701c:	2800      	cmp	r0, #0
    701e:	d002      	beq.n	7026 <__aeabi_uldivmod+0x16>
    7020:	2100      	movs	r1, #0
    7022:	43c9      	mvns	r1, r1
    7024:	1c08      	adds	r0, r1, #0
    7026:	b407      	push	{r0, r1, r2}
    7028:	4802      	ldr	r0, [pc, #8]	; (7034 <__aeabi_uldivmod+0x24>)
    702a:	a102      	add	r1, pc, #8	; (adr r1, 7034 <__aeabi_uldivmod+0x24>)
    702c:	1840      	adds	r0, r0, r1
    702e:	9002      	str	r0, [sp, #8]
    7030:	bd03      	pop	{r0, r1, pc}
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	ffffff5d 	.word	0xffffff5d
    7038:	b403      	push	{r0, r1}
    703a:	4668      	mov	r0, sp
    703c:	b501      	push	{r0, lr}
    703e:	9802      	ldr	r0, [sp, #8]
    7040:	f000 f842 	bl	70c8 <__udivmoddi4>
    7044:	9b01      	ldr	r3, [sp, #4]
    7046:	469e      	mov	lr, r3
    7048:	b002      	add	sp, #8
    704a:	bc0c      	pop	{r2, r3}
    704c:	4770      	bx	lr
    704e:	46c0      	nop			; (mov r8, r8)

00007050 <__aeabi_d2uiz>:
__fixunsdfsi():
    7050:	b570      	push	{r4, r5, r6, lr}
    7052:	2200      	movs	r2, #0
    7054:	4b0c      	ldr	r3, [pc, #48]	; (7088 <__aeabi_d2uiz+0x38>)
    7056:	0004      	movs	r4, r0
    7058:	000d      	movs	r5, r1
    705a:	f7ff ffcf 	bl	6ffc <__aeabi_dcmpge>
    705e:	2800      	cmp	r0, #0
    7060:	d104      	bne.n	706c <__aeabi_d2uiz+0x1c>
    7062:	0020      	movs	r0, r4
    7064:	0029      	movs	r1, r5
    7066:	f001 f817 	bl	8098 <__aeabi_d2iz>
    706a:	bd70      	pop	{r4, r5, r6, pc}
    706c:	4b06      	ldr	r3, [pc, #24]	; (7088 <__aeabi_d2uiz+0x38>)
    706e:	2200      	movs	r2, #0
    7070:	0020      	movs	r0, r4
    7072:	0029      	movs	r1, r5
    7074:	f000 fc7e 	bl	7974 <__aeabi_dsub>
    7078:	f001 f80e 	bl	8098 <__aeabi_d2iz>
    707c:	2380      	movs	r3, #128	; 0x80
    707e:	061b      	lsls	r3, r3, #24
    7080:	469c      	mov	ip, r3
    7082:	4460      	add	r0, ip
    7084:	e7f1      	b.n	706a <__aeabi_d2uiz+0x1a>
    7086:	46c0      	nop			; (mov r8, r8)
    7088:	41e00000 	.word	0x41e00000

0000708c <__aeabi_d2ulz>:
__aeabi_d2ulz():
    708c:	b570      	push	{r4, r5, r6, lr}
    708e:	2200      	movs	r2, #0
    7090:	4b0b      	ldr	r3, [pc, #44]	; (70c0 <__aeabi_d2ulz+0x34>)
    7092:	000d      	movs	r5, r1
    7094:	0004      	movs	r4, r0
    7096:	f000 fa01 	bl	749c <__aeabi_dmul>
    709a:	f7ff ffd9 	bl	7050 <__aeabi_d2uiz>
    709e:	0006      	movs	r6, r0
    70a0:	f001 f830 	bl	8104 <__aeabi_ui2d>
    70a4:	2200      	movs	r2, #0
    70a6:	4b07      	ldr	r3, [pc, #28]	; (70c4 <__aeabi_d2ulz+0x38>)
    70a8:	f000 f9f8 	bl	749c <__aeabi_dmul>
    70ac:	0002      	movs	r2, r0
    70ae:	000b      	movs	r3, r1
    70b0:	0020      	movs	r0, r4
    70b2:	0029      	movs	r1, r5
    70b4:	f000 fc5e 	bl	7974 <__aeabi_dsub>
    70b8:	f7ff ffca 	bl	7050 <__aeabi_d2uiz>
    70bc:	0031      	movs	r1, r6
    70be:	bd70      	pop	{r4, r5, r6, pc}
    70c0:	3df00000 	.word	0x3df00000
    70c4:	41f00000 	.word	0x41f00000

000070c8 <__udivmoddi4>:
__udivmoddi4():
    70c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ca:	4657      	mov	r7, sl
    70cc:	464e      	mov	r6, r9
    70ce:	4645      	mov	r5, r8
    70d0:	46de      	mov	lr, fp
    70d2:	b5e0      	push	{r5, r6, r7, lr}
    70d4:	0004      	movs	r4, r0
    70d6:	000d      	movs	r5, r1
    70d8:	4692      	mov	sl, r2
    70da:	4699      	mov	r9, r3
    70dc:	b083      	sub	sp, #12
    70de:	428b      	cmp	r3, r1
    70e0:	d830      	bhi.n	7144 <__udivmoddi4+0x7c>
    70e2:	d02d      	beq.n	7140 <__udivmoddi4+0x78>
    70e4:	4649      	mov	r1, r9
    70e6:	4650      	mov	r0, sl
    70e8:	f001 f850 	bl	818c <__clzdi2>
    70ec:	0029      	movs	r1, r5
    70ee:	0006      	movs	r6, r0
    70f0:	0020      	movs	r0, r4
    70f2:	f001 f84b 	bl	818c <__clzdi2>
    70f6:	1a33      	subs	r3, r6, r0
    70f8:	4698      	mov	r8, r3
    70fa:	3b20      	subs	r3, #32
    70fc:	469b      	mov	fp, r3
    70fe:	d433      	bmi.n	7168 <__udivmoddi4+0xa0>
    7100:	465a      	mov	r2, fp
    7102:	4653      	mov	r3, sl
    7104:	4093      	lsls	r3, r2
    7106:	4642      	mov	r2, r8
    7108:	001f      	movs	r7, r3
    710a:	4653      	mov	r3, sl
    710c:	4093      	lsls	r3, r2
    710e:	001e      	movs	r6, r3
    7110:	42af      	cmp	r7, r5
    7112:	d83a      	bhi.n	718a <__udivmoddi4+0xc2>
    7114:	42af      	cmp	r7, r5
    7116:	d100      	bne.n	711a <__udivmoddi4+0x52>
    7118:	e078      	b.n	720c <__udivmoddi4+0x144>
    711a:	465b      	mov	r3, fp
    711c:	1ba4      	subs	r4, r4, r6
    711e:	41bd      	sbcs	r5, r7
    7120:	2b00      	cmp	r3, #0
    7122:	da00      	bge.n	7126 <__udivmoddi4+0x5e>
    7124:	e075      	b.n	7212 <__udivmoddi4+0x14a>
    7126:	2200      	movs	r2, #0
    7128:	2300      	movs	r3, #0
    712a:	9200      	str	r2, [sp, #0]
    712c:	9301      	str	r3, [sp, #4]
    712e:	2301      	movs	r3, #1
    7130:	465a      	mov	r2, fp
    7132:	4093      	lsls	r3, r2
    7134:	9301      	str	r3, [sp, #4]
    7136:	2301      	movs	r3, #1
    7138:	4642      	mov	r2, r8
    713a:	4093      	lsls	r3, r2
    713c:	9300      	str	r3, [sp, #0]
    713e:	e028      	b.n	7192 <__udivmoddi4+0xca>
    7140:	4282      	cmp	r2, r0
    7142:	d9cf      	bls.n	70e4 <__udivmoddi4+0x1c>
    7144:	2200      	movs	r2, #0
    7146:	2300      	movs	r3, #0
    7148:	9200      	str	r2, [sp, #0]
    714a:	9301      	str	r3, [sp, #4]
    714c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    714e:	2b00      	cmp	r3, #0
    7150:	d001      	beq.n	7156 <__udivmoddi4+0x8e>
    7152:	601c      	str	r4, [r3, #0]
    7154:	605d      	str	r5, [r3, #4]
    7156:	9800      	ldr	r0, [sp, #0]
    7158:	9901      	ldr	r1, [sp, #4]
    715a:	b003      	add	sp, #12
    715c:	bcf0      	pop	{r4, r5, r6, r7}
    715e:	46bb      	mov	fp, r7
    7160:	46b2      	mov	sl, r6
    7162:	46a9      	mov	r9, r5
    7164:	46a0      	mov	r8, r4
    7166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7168:	4642      	mov	r2, r8
    716a:	2320      	movs	r3, #32
    716c:	1a9b      	subs	r3, r3, r2
    716e:	4652      	mov	r2, sl
    7170:	40da      	lsrs	r2, r3
    7172:	4641      	mov	r1, r8
    7174:	0013      	movs	r3, r2
    7176:	464a      	mov	r2, r9
    7178:	408a      	lsls	r2, r1
    717a:	0017      	movs	r7, r2
    717c:	4642      	mov	r2, r8
    717e:	431f      	orrs	r7, r3
    7180:	4653      	mov	r3, sl
    7182:	4093      	lsls	r3, r2
    7184:	001e      	movs	r6, r3
    7186:	42af      	cmp	r7, r5
    7188:	d9c4      	bls.n	7114 <__udivmoddi4+0x4c>
    718a:	2200      	movs	r2, #0
    718c:	2300      	movs	r3, #0
    718e:	9200      	str	r2, [sp, #0]
    7190:	9301      	str	r3, [sp, #4]
    7192:	4643      	mov	r3, r8
    7194:	2b00      	cmp	r3, #0
    7196:	d0d9      	beq.n	714c <__udivmoddi4+0x84>
    7198:	07fb      	lsls	r3, r7, #31
    719a:	0872      	lsrs	r2, r6, #1
    719c:	431a      	orrs	r2, r3
    719e:	4646      	mov	r6, r8
    71a0:	087b      	lsrs	r3, r7, #1
    71a2:	e00e      	b.n	71c2 <__udivmoddi4+0xfa>
    71a4:	42ab      	cmp	r3, r5
    71a6:	d101      	bne.n	71ac <__udivmoddi4+0xe4>
    71a8:	42a2      	cmp	r2, r4
    71aa:	d80c      	bhi.n	71c6 <__udivmoddi4+0xfe>
    71ac:	1aa4      	subs	r4, r4, r2
    71ae:	419d      	sbcs	r5, r3
    71b0:	2001      	movs	r0, #1
    71b2:	1924      	adds	r4, r4, r4
    71b4:	416d      	adcs	r5, r5
    71b6:	2100      	movs	r1, #0
    71b8:	3e01      	subs	r6, #1
    71ba:	1824      	adds	r4, r4, r0
    71bc:	414d      	adcs	r5, r1
    71be:	2e00      	cmp	r6, #0
    71c0:	d006      	beq.n	71d0 <__udivmoddi4+0x108>
    71c2:	42ab      	cmp	r3, r5
    71c4:	d9ee      	bls.n	71a4 <__udivmoddi4+0xdc>
    71c6:	3e01      	subs	r6, #1
    71c8:	1924      	adds	r4, r4, r4
    71ca:	416d      	adcs	r5, r5
    71cc:	2e00      	cmp	r6, #0
    71ce:	d1f8      	bne.n	71c2 <__udivmoddi4+0xfa>
    71d0:	9800      	ldr	r0, [sp, #0]
    71d2:	9901      	ldr	r1, [sp, #4]
    71d4:	465b      	mov	r3, fp
    71d6:	1900      	adds	r0, r0, r4
    71d8:	4169      	adcs	r1, r5
    71da:	2b00      	cmp	r3, #0
    71dc:	db24      	blt.n	7228 <__udivmoddi4+0x160>
    71de:	002b      	movs	r3, r5
    71e0:	465a      	mov	r2, fp
    71e2:	4644      	mov	r4, r8
    71e4:	40d3      	lsrs	r3, r2
    71e6:	002a      	movs	r2, r5
    71e8:	40e2      	lsrs	r2, r4
    71ea:	001c      	movs	r4, r3
    71ec:	465b      	mov	r3, fp
    71ee:	0015      	movs	r5, r2
    71f0:	2b00      	cmp	r3, #0
    71f2:	db2a      	blt.n	724a <__udivmoddi4+0x182>
    71f4:	0026      	movs	r6, r4
    71f6:	409e      	lsls	r6, r3
    71f8:	0033      	movs	r3, r6
    71fa:	0026      	movs	r6, r4
    71fc:	4647      	mov	r7, r8
    71fe:	40be      	lsls	r6, r7
    7200:	0032      	movs	r2, r6
    7202:	1a80      	subs	r0, r0, r2
    7204:	4199      	sbcs	r1, r3
    7206:	9000      	str	r0, [sp, #0]
    7208:	9101      	str	r1, [sp, #4]
    720a:	e79f      	b.n	714c <__udivmoddi4+0x84>
    720c:	42a3      	cmp	r3, r4
    720e:	d8bc      	bhi.n	718a <__udivmoddi4+0xc2>
    7210:	e783      	b.n	711a <__udivmoddi4+0x52>
    7212:	4642      	mov	r2, r8
    7214:	2320      	movs	r3, #32
    7216:	2100      	movs	r1, #0
    7218:	1a9b      	subs	r3, r3, r2
    721a:	2200      	movs	r2, #0
    721c:	9100      	str	r1, [sp, #0]
    721e:	9201      	str	r2, [sp, #4]
    7220:	2201      	movs	r2, #1
    7222:	40da      	lsrs	r2, r3
    7224:	9201      	str	r2, [sp, #4]
    7226:	e786      	b.n	7136 <__udivmoddi4+0x6e>
    7228:	4642      	mov	r2, r8
    722a:	2320      	movs	r3, #32
    722c:	1a9b      	subs	r3, r3, r2
    722e:	002a      	movs	r2, r5
    7230:	4646      	mov	r6, r8
    7232:	409a      	lsls	r2, r3
    7234:	0023      	movs	r3, r4
    7236:	40f3      	lsrs	r3, r6
    7238:	4644      	mov	r4, r8
    723a:	4313      	orrs	r3, r2
    723c:	002a      	movs	r2, r5
    723e:	40e2      	lsrs	r2, r4
    7240:	001c      	movs	r4, r3
    7242:	465b      	mov	r3, fp
    7244:	0015      	movs	r5, r2
    7246:	2b00      	cmp	r3, #0
    7248:	dad4      	bge.n	71f4 <__udivmoddi4+0x12c>
    724a:	4642      	mov	r2, r8
    724c:	002f      	movs	r7, r5
    724e:	2320      	movs	r3, #32
    7250:	0026      	movs	r6, r4
    7252:	4097      	lsls	r7, r2
    7254:	1a9b      	subs	r3, r3, r2
    7256:	40de      	lsrs	r6, r3
    7258:	003b      	movs	r3, r7
    725a:	4333      	orrs	r3, r6
    725c:	e7cd      	b.n	71fa <__udivmoddi4+0x132>
    725e:	46c0      	nop			; (mov r8, r8)

00007260 <__eqdf2>:
__eqdf2():
    7260:	b5f0      	push	{r4, r5, r6, r7, lr}
    7262:	464f      	mov	r7, r9
    7264:	4646      	mov	r6, r8
    7266:	46d6      	mov	lr, sl
    7268:	4694      	mov	ip, r2
    726a:	4691      	mov	r9, r2
    726c:	031a      	lsls	r2, r3, #12
    726e:	0b12      	lsrs	r2, r2, #12
    7270:	4d18      	ldr	r5, [pc, #96]	; (72d4 <__eqdf2+0x74>)
    7272:	b5c0      	push	{r6, r7, lr}
    7274:	004c      	lsls	r4, r1, #1
    7276:	030f      	lsls	r7, r1, #12
    7278:	4692      	mov	sl, r2
    727a:	005a      	lsls	r2, r3, #1
    727c:	0006      	movs	r6, r0
    727e:	4680      	mov	r8, r0
    7280:	0b3f      	lsrs	r7, r7, #12
    7282:	2001      	movs	r0, #1
    7284:	0d64      	lsrs	r4, r4, #21
    7286:	0fc9      	lsrs	r1, r1, #31
    7288:	0d52      	lsrs	r2, r2, #21
    728a:	0fdb      	lsrs	r3, r3, #31
    728c:	42ac      	cmp	r4, r5
    728e:	d00a      	beq.n	72a6 <__eqdf2+0x46>
    7290:	42aa      	cmp	r2, r5
    7292:	d003      	beq.n	729c <__eqdf2+0x3c>
    7294:	4294      	cmp	r4, r2
    7296:	d101      	bne.n	729c <__eqdf2+0x3c>
    7298:	4557      	cmp	r7, sl
    729a:	d00d      	beq.n	72b8 <__eqdf2+0x58>
    729c:	bce0      	pop	{r5, r6, r7}
    729e:	46ba      	mov	sl, r7
    72a0:	46b1      	mov	r9, r6
    72a2:	46a8      	mov	r8, r5
    72a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72a6:	003d      	movs	r5, r7
    72a8:	4335      	orrs	r5, r6
    72aa:	d1f7      	bne.n	729c <__eqdf2+0x3c>
    72ac:	42a2      	cmp	r2, r4
    72ae:	d1f5      	bne.n	729c <__eqdf2+0x3c>
    72b0:	4652      	mov	r2, sl
    72b2:	4665      	mov	r5, ip
    72b4:	432a      	orrs	r2, r5
    72b6:	d1f1      	bne.n	729c <__eqdf2+0x3c>
    72b8:	2001      	movs	r0, #1
    72ba:	45c8      	cmp	r8, r9
    72bc:	d1ee      	bne.n	729c <__eqdf2+0x3c>
    72be:	4299      	cmp	r1, r3
    72c0:	d006      	beq.n	72d0 <__eqdf2+0x70>
    72c2:	2c00      	cmp	r4, #0
    72c4:	d1ea      	bne.n	729c <__eqdf2+0x3c>
    72c6:	433e      	orrs	r6, r7
    72c8:	0030      	movs	r0, r6
    72ca:	1e46      	subs	r6, r0, #1
    72cc:	41b0      	sbcs	r0, r6
    72ce:	e7e5      	b.n	729c <__eqdf2+0x3c>
    72d0:	2000      	movs	r0, #0
    72d2:	e7e3      	b.n	729c <__eqdf2+0x3c>
    72d4:	000007ff 	.word	0x000007ff

000072d8 <__gedf2>:
__gtdf2():
    72d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72da:	464e      	mov	r6, r9
    72dc:	4645      	mov	r5, r8
    72de:	4657      	mov	r7, sl
    72e0:	46de      	mov	lr, fp
    72e2:	0004      	movs	r4, r0
    72e4:	0018      	movs	r0, r3
    72e6:	b5e0      	push	{r5, r6, r7, lr}
    72e8:	0016      	movs	r6, r2
    72ea:	031b      	lsls	r3, r3, #12
    72ec:	0b1b      	lsrs	r3, r3, #12
    72ee:	4d32      	ldr	r5, [pc, #200]	; (73b8 <__gedf2+0xe0>)
    72f0:	030f      	lsls	r7, r1, #12
    72f2:	004a      	lsls	r2, r1, #1
    72f4:	4699      	mov	r9, r3
    72f6:	0043      	lsls	r3, r0, #1
    72f8:	46a4      	mov	ip, r4
    72fa:	46b0      	mov	r8, r6
    72fc:	0b3f      	lsrs	r7, r7, #12
    72fe:	0d52      	lsrs	r2, r2, #21
    7300:	0fc9      	lsrs	r1, r1, #31
    7302:	0d5b      	lsrs	r3, r3, #21
    7304:	0fc0      	lsrs	r0, r0, #31
    7306:	42aa      	cmp	r2, r5
    7308:	d029      	beq.n	735e <__gedf2+0x86>
    730a:	42ab      	cmp	r3, r5
    730c:	d018      	beq.n	7340 <__gedf2+0x68>
    730e:	2a00      	cmp	r2, #0
    7310:	d12a      	bne.n	7368 <__gedf2+0x90>
    7312:	433c      	orrs	r4, r7
    7314:	46a3      	mov	fp, r4
    7316:	4265      	negs	r5, r4
    7318:	4165      	adcs	r5, r4
    731a:	2b00      	cmp	r3, #0
    731c:	d102      	bne.n	7324 <__gedf2+0x4c>
    731e:	464c      	mov	r4, r9
    7320:	4326      	orrs	r6, r4
    7322:	d027      	beq.n	7374 <__gedf2+0x9c>
    7324:	2d00      	cmp	r5, #0
    7326:	d115      	bne.n	7354 <__gedf2+0x7c>
    7328:	4281      	cmp	r1, r0
    732a:	d028      	beq.n	737e <__gedf2+0xa6>
    732c:	2002      	movs	r0, #2
    732e:	3901      	subs	r1, #1
    7330:	4008      	ands	r0, r1
    7332:	3801      	subs	r0, #1
    7334:	bcf0      	pop	{r4, r5, r6, r7}
    7336:	46bb      	mov	fp, r7
    7338:	46b2      	mov	sl, r6
    733a:	46a9      	mov	r9, r5
    733c:	46a0      	mov	r8, r4
    733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7340:	464d      	mov	r5, r9
    7342:	432e      	orrs	r6, r5
    7344:	d12f      	bne.n	73a6 <__gedf2+0xce>
    7346:	2a00      	cmp	r2, #0
    7348:	d1ee      	bne.n	7328 <__gedf2+0x50>
    734a:	433c      	orrs	r4, r7
    734c:	4265      	negs	r5, r4
    734e:	4165      	adcs	r5, r4
    7350:	2d00      	cmp	r5, #0
    7352:	d0e9      	beq.n	7328 <__gedf2+0x50>
    7354:	2800      	cmp	r0, #0
    7356:	d1ed      	bne.n	7334 <__gedf2+0x5c>
    7358:	2001      	movs	r0, #1
    735a:	4240      	negs	r0, r0
    735c:	e7ea      	b.n	7334 <__gedf2+0x5c>
    735e:	003d      	movs	r5, r7
    7360:	4325      	orrs	r5, r4
    7362:	d120      	bne.n	73a6 <__gedf2+0xce>
    7364:	4293      	cmp	r3, r2
    7366:	d0eb      	beq.n	7340 <__gedf2+0x68>
    7368:	2b00      	cmp	r3, #0
    736a:	d1dd      	bne.n	7328 <__gedf2+0x50>
    736c:	464c      	mov	r4, r9
    736e:	4326      	orrs	r6, r4
    7370:	d1da      	bne.n	7328 <__gedf2+0x50>
    7372:	e7db      	b.n	732c <__gedf2+0x54>
    7374:	465b      	mov	r3, fp
    7376:	2000      	movs	r0, #0
    7378:	2b00      	cmp	r3, #0
    737a:	d0db      	beq.n	7334 <__gedf2+0x5c>
    737c:	e7d6      	b.n	732c <__gedf2+0x54>
    737e:	429a      	cmp	r2, r3
    7380:	dc0a      	bgt.n	7398 <__gedf2+0xc0>
    7382:	dbe7      	blt.n	7354 <__gedf2+0x7c>
    7384:	454f      	cmp	r7, r9
    7386:	d8d1      	bhi.n	732c <__gedf2+0x54>
    7388:	d010      	beq.n	73ac <__gedf2+0xd4>
    738a:	2000      	movs	r0, #0
    738c:	454f      	cmp	r7, r9
    738e:	d2d1      	bcs.n	7334 <__gedf2+0x5c>
    7390:	2900      	cmp	r1, #0
    7392:	d0e1      	beq.n	7358 <__gedf2+0x80>
    7394:	0008      	movs	r0, r1
    7396:	e7cd      	b.n	7334 <__gedf2+0x5c>
    7398:	4243      	negs	r3, r0
    739a:	4158      	adcs	r0, r3
    739c:	2302      	movs	r3, #2
    739e:	4240      	negs	r0, r0
    73a0:	4018      	ands	r0, r3
    73a2:	3801      	subs	r0, #1
    73a4:	e7c6      	b.n	7334 <__gedf2+0x5c>
    73a6:	2002      	movs	r0, #2
    73a8:	4240      	negs	r0, r0
    73aa:	e7c3      	b.n	7334 <__gedf2+0x5c>
    73ac:	45c4      	cmp	ip, r8
    73ae:	d8bd      	bhi.n	732c <__gedf2+0x54>
    73b0:	2000      	movs	r0, #0
    73b2:	45c4      	cmp	ip, r8
    73b4:	d2be      	bcs.n	7334 <__gedf2+0x5c>
    73b6:	e7eb      	b.n	7390 <__gedf2+0xb8>
    73b8:	000007ff 	.word	0x000007ff

000073bc <__ledf2>:
__ltdf2():
    73bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    73be:	464e      	mov	r6, r9
    73c0:	4645      	mov	r5, r8
    73c2:	4657      	mov	r7, sl
    73c4:	46de      	mov	lr, fp
    73c6:	0004      	movs	r4, r0
    73c8:	0018      	movs	r0, r3
    73ca:	b5e0      	push	{r5, r6, r7, lr}
    73cc:	0016      	movs	r6, r2
    73ce:	031b      	lsls	r3, r3, #12
    73d0:	0b1b      	lsrs	r3, r3, #12
    73d2:	4d31      	ldr	r5, [pc, #196]	; (7498 <__ledf2+0xdc>)
    73d4:	030f      	lsls	r7, r1, #12
    73d6:	004a      	lsls	r2, r1, #1
    73d8:	4699      	mov	r9, r3
    73da:	0043      	lsls	r3, r0, #1
    73dc:	46a4      	mov	ip, r4
    73de:	46b0      	mov	r8, r6
    73e0:	0b3f      	lsrs	r7, r7, #12
    73e2:	0d52      	lsrs	r2, r2, #21
    73e4:	0fc9      	lsrs	r1, r1, #31
    73e6:	0d5b      	lsrs	r3, r3, #21
    73e8:	0fc0      	lsrs	r0, r0, #31
    73ea:	42aa      	cmp	r2, r5
    73ec:	d011      	beq.n	7412 <__ledf2+0x56>
    73ee:	42ab      	cmp	r3, r5
    73f0:	d014      	beq.n	741c <__ledf2+0x60>
    73f2:	2a00      	cmp	r2, #0
    73f4:	d12f      	bne.n	7456 <__ledf2+0x9a>
    73f6:	433c      	orrs	r4, r7
    73f8:	46a3      	mov	fp, r4
    73fa:	4265      	negs	r5, r4
    73fc:	4165      	adcs	r5, r4
    73fe:	2b00      	cmp	r3, #0
    7400:	d114      	bne.n	742c <__ledf2+0x70>
    7402:	464c      	mov	r4, r9
    7404:	4326      	orrs	r6, r4
    7406:	d111      	bne.n	742c <__ledf2+0x70>
    7408:	465b      	mov	r3, fp
    740a:	2000      	movs	r0, #0
    740c:	2b00      	cmp	r3, #0
    740e:	d017      	beq.n	7440 <__ledf2+0x84>
    7410:	e010      	b.n	7434 <__ledf2+0x78>
    7412:	003d      	movs	r5, r7
    7414:	4325      	orrs	r5, r4
    7416:	d112      	bne.n	743e <__ledf2+0x82>
    7418:	4293      	cmp	r3, r2
    741a:	d11c      	bne.n	7456 <__ledf2+0x9a>
    741c:	464d      	mov	r5, r9
    741e:	432e      	orrs	r6, r5
    7420:	d10d      	bne.n	743e <__ledf2+0x82>
    7422:	2a00      	cmp	r2, #0
    7424:	d104      	bne.n	7430 <__ledf2+0x74>
    7426:	433c      	orrs	r4, r7
    7428:	4265      	negs	r5, r4
    742a:	4165      	adcs	r5, r4
    742c:	2d00      	cmp	r5, #0
    742e:	d10d      	bne.n	744c <__ledf2+0x90>
    7430:	4281      	cmp	r1, r0
    7432:	d016      	beq.n	7462 <__ledf2+0xa6>
    7434:	2002      	movs	r0, #2
    7436:	3901      	subs	r1, #1
    7438:	4008      	ands	r0, r1
    743a:	3801      	subs	r0, #1
    743c:	e000      	b.n	7440 <__ledf2+0x84>
    743e:	2002      	movs	r0, #2
    7440:	bcf0      	pop	{r4, r5, r6, r7}
    7442:	46bb      	mov	fp, r7
    7444:	46b2      	mov	sl, r6
    7446:	46a9      	mov	r9, r5
    7448:	46a0      	mov	r8, r4
    744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    744c:	2800      	cmp	r0, #0
    744e:	d1f7      	bne.n	7440 <__ledf2+0x84>
    7450:	2001      	movs	r0, #1
    7452:	4240      	negs	r0, r0
    7454:	e7f4      	b.n	7440 <__ledf2+0x84>
    7456:	2b00      	cmp	r3, #0
    7458:	d1ea      	bne.n	7430 <__ledf2+0x74>
    745a:	464c      	mov	r4, r9
    745c:	4326      	orrs	r6, r4
    745e:	d1e7      	bne.n	7430 <__ledf2+0x74>
    7460:	e7e8      	b.n	7434 <__ledf2+0x78>
    7462:	429a      	cmp	r2, r3
    7464:	dd06      	ble.n	7474 <__ledf2+0xb8>
    7466:	4243      	negs	r3, r0
    7468:	4158      	adcs	r0, r3
    746a:	2302      	movs	r3, #2
    746c:	4240      	negs	r0, r0
    746e:	4018      	ands	r0, r3
    7470:	3801      	subs	r0, #1
    7472:	e7e5      	b.n	7440 <__ledf2+0x84>
    7474:	429a      	cmp	r2, r3
    7476:	dbe9      	blt.n	744c <__ledf2+0x90>
    7478:	454f      	cmp	r7, r9
    747a:	d8db      	bhi.n	7434 <__ledf2+0x78>
    747c:	d006      	beq.n	748c <__ledf2+0xd0>
    747e:	2000      	movs	r0, #0
    7480:	454f      	cmp	r7, r9
    7482:	d2dd      	bcs.n	7440 <__ledf2+0x84>
    7484:	2900      	cmp	r1, #0
    7486:	d0e3      	beq.n	7450 <__ledf2+0x94>
    7488:	0008      	movs	r0, r1
    748a:	e7d9      	b.n	7440 <__ledf2+0x84>
    748c:	45c4      	cmp	ip, r8
    748e:	d8d1      	bhi.n	7434 <__ledf2+0x78>
    7490:	2000      	movs	r0, #0
    7492:	45c4      	cmp	ip, r8
    7494:	d2d4      	bcs.n	7440 <__ledf2+0x84>
    7496:	e7f5      	b.n	7484 <__ledf2+0xc8>
    7498:	000007ff 	.word	0x000007ff

0000749c <__aeabi_dmul>:
__aeabi_dmul():
    749c:	b5f0      	push	{r4, r5, r6, r7, lr}
    749e:	4657      	mov	r7, sl
    74a0:	464e      	mov	r6, r9
    74a2:	4645      	mov	r5, r8
    74a4:	46de      	mov	lr, fp
    74a6:	b5e0      	push	{r5, r6, r7, lr}
    74a8:	4698      	mov	r8, r3
    74aa:	030c      	lsls	r4, r1, #12
    74ac:	004b      	lsls	r3, r1, #1
    74ae:	0006      	movs	r6, r0
    74b0:	4692      	mov	sl, r2
    74b2:	b087      	sub	sp, #28
    74b4:	0b24      	lsrs	r4, r4, #12
    74b6:	0d5b      	lsrs	r3, r3, #21
    74b8:	0fcf      	lsrs	r7, r1, #31
    74ba:	2b00      	cmp	r3, #0
    74bc:	d06c      	beq.n	7598 <__aeabi_dmul+0xfc>
    74be:	4add      	ldr	r2, [pc, #884]	; (7834 <__aeabi_dmul+0x398>)
    74c0:	4293      	cmp	r3, r2
    74c2:	d100      	bne.n	74c6 <__aeabi_dmul+0x2a>
    74c4:	e086      	b.n	75d4 <__aeabi_dmul+0x138>
    74c6:	0f42      	lsrs	r2, r0, #29
    74c8:	00e4      	lsls	r4, r4, #3
    74ca:	4314      	orrs	r4, r2
    74cc:	2280      	movs	r2, #128	; 0x80
    74ce:	0412      	lsls	r2, r2, #16
    74d0:	4314      	orrs	r4, r2
    74d2:	4ad9      	ldr	r2, [pc, #868]	; (7838 <__aeabi_dmul+0x39c>)
    74d4:	00c5      	lsls	r5, r0, #3
    74d6:	4694      	mov	ip, r2
    74d8:	4463      	add	r3, ip
    74da:	9300      	str	r3, [sp, #0]
    74dc:	2300      	movs	r3, #0
    74de:	4699      	mov	r9, r3
    74e0:	469b      	mov	fp, r3
    74e2:	4643      	mov	r3, r8
    74e4:	4642      	mov	r2, r8
    74e6:	031e      	lsls	r6, r3, #12
    74e8:	0fd2      	lsrs	r2, r2, #31
    74ea:	005b      	lsls	r3, r3, #1
    74ec:	4650      	mov	r0, sl
    74ee:	4690      	mov	r8, r2
    74f0:	0b36      	lsrs	r6, r6, #12
    74f2:	0d5b      	lsrs	r3, r3, #21
    74f4:	d100      	bne.n	74f8 <__aeabi_dmul+0x5c>
    74f6:	e078      	b.n	75ea <__aeabi_dmul+0x14e>
    74f8:	4ace      	ldr	r2, [pc, #824]	; (7834 <__aeabi_dmul+0x398>)
    74fa:	4293      	cmp	r3, r2
    74fc:	d01d      	beq.n	753a <__aeabi_dmul+0x9e>
    74fe:	49ce      	ldr	r1, [pc, #824]	; (7838 <__aeabi_dmul+0x39c>)
    7500:	0f42      	lsrs	r2, r0, #29
    7502:	468c      	mov	ip, r1
    7504:	9900      	ldr	r1, [sp, #0]
    7506:	4463      	add	r3, ip
    7508:	00f6      	lsls	r6, r6, #3
    750a:	468c      	mov	ip, r1
    750c:	4316      	orrs	r6, r2
    750e:	2280      	movs	r2, #128	; 0x80
    7510:	449c      	add	ip, r3
    7512:	0412      	lsls	r2, r2, #16
    7514:	4663      	mov	r3, ip
    7516:	4316      	orrs	r6, r2
    7518:	00c2      	lsls	r2, r0, #3
    751a:	2000      	movs	r0, #0
    751c:	9300      	str	r3, [sp, #0]
    751e:	9900      	ldr	r1, [sp, #0]
    7520:	4643      	mov	r3, r8
    7522:	3101      	adds	r1, #1
    7524:	468c      	mov	ip, r1
    7526:	4649      	mov	r1, r9
    7528:	407b      	eors	r3, r7
    752a:	9301      	str	r3, [sp, #4]
    752c:	290f      	cmp	r1, #15
    752e:	d900      	bls.n	7532 <__aeabi_dmul+0x96>
    7530:	e07e      	b.n	7630 <__aeabi_dmul+0x194>
    7532:	4bc2      	ldr	r3, [pc, #776]	; (783c <__aeabi_dmul+0x3a0>)
    7534:	0089      	lsls	r1, r1, #2
    7536:	5859      	ldr	r1, [r3, r1]
    7538:	468f      	mov	pc, r1
    753a:	4652      	mov	r2, sl
    753c:	9b00      	ldr	r3, [sp, #0]
    753e:	4332      	orrs	r2, r6
    7540:	d000      	beq.n	7544 <__aeabi_dmul+0xa8>
    7542:	e156      	b.n	77f2 <__aeabi_dmul+0x356>
    7544:	49bb      	ldr	r1, [pc, #748]	; (7834 <__aeabi_dmul+0x398>)
    7546:	2600      	movs	r6, #0
    7548:	468c      	mov	ip, r1
    754a:	4463      	add	r3, ip
    754c:	4649      	mov	r1, r9
    754e:	9300      	str	r3, [sp, #0]
    7550:	2302      	movs	r3, #2
    7552:	4319      	orrs	r1, r3
    7554:	4689      	mov	r9, r1
    7556:	2002      	movs	r0, #2
    7558:	e7e1      	b.n	751e <__aeabi_dmul+0x82>
    755a:	4643      	mov	r3, r8
    755c:	9301      	str	r3, [sp, #4]
    755e:	0034      	movs	r4, r6
    7560:	0015      	movs	r5, r2
    7562:	4683      	mov	fp, r0
    7564:	465b      	mov	r3, fp
    7566:	2b02      	cmp	r3, #2
    7568:	d05e      	beq.n	7628 <__aeabi_dmul+0x18c>
    756a:	2b03      	cmp	r3, #3
    756c:	d100      	bne.n	7570 <__aeabi_dmul+0xd4>
    756e:	e1f3      	b.n	7958 <__aeabi_dmul+0x4bc>
    7570:	2b01      	cmp	r3, #1
    7572:	d000      	beq.n	7576 <__aeabi_dmul+0xda>
    7574:	e118      	b.n	77a8 <__aeabi_dmul+0x30c>
    7576:	2200      	movs	r2, #0
    7578:	2400      	movs	r4, #0
    757a:	2500      	movs	r5, #0
    757c:	9b01      	ldr	r3, [sp, #4]
    757e:	0512      	lsls	r2, r2, #20
    7580:	4322      	orrs	r2, r4
    7582:	07db      	lsls	r3, r3, #31
    7584:	431a      	orrs	r2, r3
    7586:	0028      	movs	r0, r5
    7588:	0011      	movs	r1, r2
    758a:	b007      	add	sp, #28
    758c:	bcf0      	pop	{r4, r5, r6, r7}
    758e:	46bb      	mov	fp, r7
    7590:	46b2      	mov	sl, r6
    7592:	46a9      	mov	r9, r5
    7594:	46a0      	mov	r8, r4
    7596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7598:	0025      	movs	r5, r4
    759a:	4305      	orrs	r5, r0
    759c:	d100      	bne.n	75a0 <__aeabi_dmul+0x104>
    759e:	e141      	b.n	7824 <__aeabi_dmul+0x388>
    75a0:	2c00      	cmp	r4, #0
    75a2:	d100      	bne.n	75a6 <__aeabi_dmul+0x10a>
    75a4:	e1ad      	b.n	7902 <__aeabi_dmul+0x466>
    75a6:	0020      	movs	r0, r4
    75a8:	f000 fdd2 	bl	8150 <__clzsi2>
    75ac:	0001      	movs	r1, r0
    75ae:	0002      	movs	r2, r0
    75b0:	390b      	subs	r1, #11
    75b2:	231d      	movs	r3, #29
    75b4:	0010      	movs	r0, r2
    75b6:	1a5b      	subs	r3, r3, r1
    75b8:	0031      	movs	r1, r6
    75ba:	0035      	movs	r5, r6
    75bc:	3808      	subs	r0, #8
    75be:	4084      	lsls	r4, r0
    75c0:	40d9      	lsrs	r1, r3
    75c2:	4085      	lsls	r5, r0
    75c4:	430c      	orrs	r4, r1
    75c6:	489e      	ldr	r0, [pc, #632]	; (7840 <__aeabi_dmul+0x3a4>)
    75c8:	1a83      	subs	r3, r0, r2
    75ca:	9300      	str	r3, [sp, #0]
    75cc:	2300      	movs	r3, #0
    75ce:	4699      	mov	r9, r3
    75d0:	469b      	mov	fp, r3
    75d2:	e786      	b.n	74e2 <__aeabi_dmul+0x46>
    75d4:	0005      	movs	r5, r0
    75d6:	4325      	orrs	r5, r4
    75d8:	d000      	beq.n	75dc <__aeabi_dmul+0x140>
    75da:	e11c      	b.n	7816 <__aeabi_dmul+0x37a>
    75dc:	2208      	movs	r2, #8
    75de:	9300      	str	r3, [sp, #0]
    75e0:	2302      	movs	r3, #2
    75e2:	2400      	movs	r4, #0
    75e4:	4691      	mov	r9, r2
    75e6:	469b      	mov	fp, r3
    75e8:	e77b      	b.n	74e2 <__aeabi_dmul+0x46>
    75ea:	4652      	mov	r2, sl
    75ec:	4332      	orrs	r2, r6
    75ee:	d100      	bne.n	75f2 <__aeabi_dmul+0x156>
    75f0:	e10a      	b.n	7808 <__aeabi_dmul+0x36c>
    75f2:	2e00      	cmp	r6, #0
    75f4:	d100      	bne.n	75f8 <__aeabi_dmul+0x15c>
    75f6:	e176      	b.n	78e6 <__aeabi_dmul+0x44a>
    75f8:	0030      	movs	r0, r6
    75fa:	f000 fda9 	bl	8150 <__clzsi2>
    75fe:	0002      	movs	r2, r0
    7600:	3a0b      	subs	r2, #11
    7602:	231d      	movs	r3, #29
    7604:	0001      	movs	r1, r0
    7606:	1a9b      	subs	r3, r3, r2
    7608:	4652      	mov	r2, sl
    760a:	3908      	subs	r1, #8
    760c:	40da      	lsrs	r2, r3
    760e:	408e      	lsls	r6, r1
    7610:	4316      	orrs	r6, r2
    7612:	4652      	mov	r2, sl
    7614:	408a      	lsls	r2, r1
    7616:	9b00      	ldr	r3, [sp, #0]
    7618:	4989      	ldr	r1, [pc, #548]	; (7840 <__aeabi_dmul+0x3a4>)
    761a:	1a18      	subs	r0, r3, r0
    761c:	0003      	movs	r3, r0
    761e:	468c      	mov	ip, r1
    7620:	4463      	add	r3, ip
    7622:	2000      	movs	r0, #0
    7624:	9300      	str	r3, [sp, #0]
    7626:	e77a      	b.n	751e <__aeabi_dmul+0x82>
    7628:	2400      	movs	r4, #0
    762a:	2500      	movs	r5, #0
    762c:	4a81      	ldr	r2, [pc, #516]	; (7834 <__aeabi_dmul+0x398>)
    762e:	e7a5      	b.n	757c <__aeabi_dmul+0xe0>
    7630:	0c2f      	lsrs	r7, r5, #16
    7632:	042d      	lsls	r5, r5, #16
    7634:	0c2d      	lsrs	r5, r5, #16
    7636:	002b      	movs	r3, r5
    7638:	0c11      	lsrs	r1, r2, #16
    763a:	0412      	lsls	r2, r2, #16
    763c:	0c12      	lsrs	r2, r2, #16
    763e:	4353      	muls	r3, r2
    7640:	4698      	mov	r8, r3
    7642:	0013      	movs	r3, r2
    7644:	0028      	movs	r0, r5
    7646:	437b      	muls	r3, r7
    7648:	4699      	mov	r9, r3
    764a:	4348      	muls	r0, r1
    764c:	4448      	add	r0, r9
    764e:	4683      	mov	fp, r0
    7650:	4640      	mov	r0, r8
    7652:	000b      	movs	r3, r1
    7654:	0c00      	lsrs	r0, r0, #16
    7656:	4682      	mov	sl, r0
    7658:	4658      	mov	r0, fp
    765a:	437b      	muls	r3, r7
    765c:	4450      	add	r0, sl
    765e:	9302      	str	r3, [sp, #8]
    7660:	4581      	cmp	r9, r0
    7662:	d906      	bls.n	7672 <__aeabi_dmul+0x1d6>
    7664:	469a      	mov	sl, r3
    7666:	2380      	movs	r3, #128	; 0x80
    7668:	025b      	lsls	r3, r3, #9
    766a:	4699      	mov	r9, r3
    766c:	44ca      	add	sl, r9
    766e:	4653      	mov	r3, sl
    7670:	9302      	str	r3, [sp, #8]
    7672:	0c03      	lsrs	r3, r0, #16
    7674:	469b      	mov	fp, r3
    7676:	4643      	mov	r3, r8
    7678:	041b      	lsls	r3, r3, #16
    767a:	0400      	lsls	r0, r0, #16
    767c:	0c1b      	lsrs	r3, r3, #16
    767e:	4698      	mov	r8, r3
    7680:	0003      	movs	r3, r0
    7682:	4443      	add	r3, r8
    7684:	9304      	str	r3, [sp, #16]
    7686:	0c33      	lsrs	r3, r6, #16
    7688:	4699      	mov	r9, r3
    768a:	002b      	movs	r3, r5
    768c:	0436      	lsls	r6, r6, #16
    768e:	0c36      	lsrs	r6, r6, #16
    7690:	4373      	muls	r3, r6
    7692:	4698      	mov	r8, r3
    7694:	0033      	movs	r3, r6
    7696:	437b      	muls	r3, r7
    7698:	469a      	mov	sl, r3
    769a:	464b      	mov	r3, r9
    769c:	435d      	muls	r5, r3
    769e:	435f      	muls	r7, r3
    76a0:	4643      	mov	r3, r8
    76a2:	4455      	add	r5, sl
    76a4:	0c18      	lsrs	r0, r3, #16
    76a6:	1940      	adds	r0, r0, r5
    76a8:	4582      	cmp	sl, r0
    76aa:	d903      	bls.n	76b4 <__aeabi_dmul+0x218>
    76ac:	2380      	movs	r3, #128	; 0x80
    76ae:	025b      	lsls	r3, r3, #9
    76b0:	469a      	mov	sl, r3
    76b2:	4457      	add	r7, sl
    76b4:	0c05      	lsrs	r5, r0, #16
    76b6:	19eb      	adds	r3, r5, r7
    76b8:	9305      	str	r3, [sp, #20]
    76ba:	4643      	mov	r3, r8
    76bc:	041d      	lsls	r5, r3, #16
    76be:	0c2d      	lsrs	r5, r5, #16
    76c0:	0400      	lsls	r0, r0, #16
    76c2:	1940      	adds	r0, r0, r5
    76c4:	0c25      	lsrs	r5, r4, #16
    76c6:	0424      	lsls	r4, r4, #16
    76c8:	0c24      	lsrs	r4, r4, #16
    76ca:	0027      	movs	r7, r4
    76cc:	4357      	muls	r7, r2
    76ce:	436a      	muls	r2, r5
    76d0:	4690      	mov	r8, r2
    76d2:	002a      	movs	r2, r5
    76d4:	0c3b      	lsrs	r3, r7, #16
    76d6:	469a      	mov	sl, r3
    76d8:	434a      	muls	r2, r1
    76da:	4361      	muls	r1, r4
    76dc:	4441      	add	r1, r8
    76de:	4451      	add	r1, sl
    76e0:	4483      	add	fp, r0
    76e2:	4588      	cmp	r8, r1
    76e4:	d903      	bls.n	76ee <__aeabi_dmul+0x252>
    76e6:	2380      	movs	r3, #128	; 0x80
    76e8:	025b      	lsls	r3, r3, #9
    76ea:	4698      	mov	r8, r3
    76ec:	4442      	add	r2, r8
    76ee:	043f      	lsls	r7, r7, #16
    76f0:	0c0b      	lsrs	r3, r1, #16
    76f2:	0c3f      	lsrs	r7, r7, #16
    76f4:	0409      	lsls	r1, r1, #16
    76f6:	19c9      	adds	r1, r1, r7
    76f8:	0027      	movs	r7, r4
    76fa:	4698      	mov	r8, r3
    76fc:	464b      	mov	r3, r9
    76fe:	4377      	muls	r7, r6
    7700:	435c      	muls	r4, r3
    7702:	436e      	muls	r6, r5
    7704:	435d      	muls	r5, r3
    7706:	0c3b      	lsrs	r3, r7, #16
    7708:	4699      	mov	r9, r3
    770a:	19a4      	adds	r4, r4, r6
    770c:	444c      	add	r4, r9
    770e:	4442      	add	r2, r8
    7710:	9503      	str	r5, [sp, #12]
    7712:	42a6      	cmp	r6, r4
    7714:	d904      	bls.n	7720 <__aeabi_dmul+0x284>
    7716:	2380      	movs	r3, #128	; 0x80
    7718:	025b      	lsls	r3, r3, #9
    771a:	4698      	mov	r8, r3
    771c:	4445      	add	r5, r8
    771e:	9503      	str	r5, [sp, #12]
    7720:	9b02      	ldr	r3, [sp, #8]
    7722:	043f      	lsls	r7, r7, #16
    7724:	445b      	add	r3, fp
    7726:	001e      	movs	r6, r3
    7728:	4283      	cmp	r3, r0
    772a:	4180      	sbcs	r0, r0
    772c:	0423      	lsls	r3, r4, #16
    772e:	4698      	mov	r8, r3
    7730:	9b05      	ldr	r3, [sp, #20]
    7732:	0c3f      	lsrs	r7, r7, #16
    7734:	4447      	add	r7, r8
    7736:	4698      	mov	r8, r3
    7738:	1876      	adds	r6, r6, r1
    773a:	428e      	cmp	r6, r1
    773c:	4189      	sbcs	r1, r1
    773e:	4447      	add	r7, r8
    7740:	4240      	negs	r0, r0
    7742:	183d      	adds	r5, r7, r0
    7744:	46a8      	mov	r8, r5
    7746:	4693      	mov	fp, r2
    7748:	4249      	negs	r1, r1
    774a:	468a      	mov	sl, r1
    774c:	44c3      	add	fp, r8
    774e:	429f      	cmp	r7, r3
    7750:	41bf      	sbcs	r7, r7
    7752:	4580      	cmp	r8, r0
    7754:	4180      	sbcs	r0, r0
    7756:	9b03      	ldr	r3, [sp, #12]
    7758:	44da      	add	sl, fp
    775a:	4698      	mov	r8, r3
    775c:	4653      	mov	r3, sl
    775e:	4240      	negs	r0, r0
    7760:	427f      	negs	r7, r7
    7762:	4307      	orrs	r7, r0
    7764:	0c24      	lsrs	r4, r4, #16
    7766:	4593      	cmp	fp, r2
    7768:	4192      	sbcs	r2, r2
    776a:	458a      	cmp	sl, r1
    776c:	4189      	sbcs	r1, r1
    776e:	193f      	adds	r7, r7, r4
    7770:	0ddc      	lsrs	r4, r3, #23
    7772:	9b04      	ldr	r3, [sp, #16]
    7774:	0275      	lsls	r5, r6, #9
    7776:	431d      	orrs	r5, r3
    7778:	1e68      	subs	r0, r5, #1
    777a:	4185      	sbcs	r5, r0
    777c:	4653      	mov	r3, sl
    777e:	4252      	negs	r2, r2
    7780:	4249      	negs	r1, r1
    7782:	430a      	orrs	r2, r1
    7784:	18bf      	adds	r7, r7, r2
    7786:	4447      	add	r7, r8
    7788:	0df6      	lsrs	r6, r6, #23
    778a:	027f      	lsls	r7, r7, #9
    778c:	4335      	orrs	r5, r6
    778e:	025a      	lsls	r2, r3, #9
    7790:	433c      	orrs	r4, r7
    7792:	4315      	orrs	r5, r2
    7794:	01fb      	lsls	r3, r7, #7
    7796:	d400      	bmi.n	779a <__aeabi_dmul+0x2fe>
    7798:	e0c1      	b.n	791e <__aeabi_dmul+0x482>
    779a:	2101      	movs	r1, #1
    779c:	086a      	lsrs	r2, r5, #1
    779e:	400d      	ands	r5, r1
    77a0:	4315      	orrs	r5, r2
    77a2:	07e2      	lsls	r2, r4, #31
    77a4:	4315      	orrs	r5, r2
    77a6:	0864      	lsrs	r4, r4, #1
    77a8:	4926      	ldr	r1, [pc, #152]	; (7844 <__aeabi_dmul+0x3a8>)
    77aa:	4461      	add	r1, ip
    77ac:	2900      	cmp	r1, #0
    77ae:	dd56      	ble.n	785e <__aeabi_dmul+0x3c2>
    77b0:	076b      	lsls	r3, r5, #29
    77b2:	d009      	beq.n	77c8 <__aeabi_dmul+0x32c>
    77b4:	220f      	movs	r2, #15
    77b6:	402a      	ands	r2, r5
    77b8:	2a04      	cmp	r2, #4
    77ba:	d005      	beq.n	77c8 <__aeabi_dmul+0x32c>
    77bc:	1d2a      	adds	r2, r5, #4
    77be:	42aa      	cmp	r2, r5
    77c0:	41ad      	sbcs	r5, r5
    77c2:	426d      	negs	r5, r5
    77c4:	1964      	adds	r4, r4, r5
    77c6:	0015      	movs	r5, r2
    77c8:	01e3      	lsls	r3, r4, #7
    77ca:	d504      	bpl.n	77d6 <__aeabi_dmul+0x33a>
    77cc:	2180      	movs	r1, #128	; 0x80
    77ce:	4a1e      	ldr	r2, [pc, #120]	; (7848 <__aeabi_dmul+0x3ac>)
    77d0:	00c9      	lsls	r1, r1, #3
    77d2:	4014      	ands	r4, r2
    77d4:	4461      	add	r1, ip
    77d6:	4a1d      	ldr	r2, [pc, #116]	; (784c <__aeabi_dmul+0x3b0>)
    77d8:	4291      	cmp	r1, r2
    77da:	dd00      	ble.n	77de <__aeabi_dmul+0x342>
    77dc:	e724      	b.n	7628 <__aeabi_dmul+0x18c>
    77de:	0762      	lsls	r2, r4, #29
    77e0:	08ed      	lsrs	r5, r5, #3
    77e2:	0264      	lsls	r4, r4, #9
    77e4:	0549      	lsls	r1, r1, #21
    77e6:	4315      	orrs	r5, r2
    77e8:	0b24      	lsrs	r4, r4, #12
    77ea:	0d4a      	lsrs	r2, r1, #21
    77ec:	e6c6      	b.n	757c <__aeabi_dmul+0xe0>
    77ee:	9701      	str	r7, [sp, #4]
    77f0:	e6b8      	b.n	7564 <__aeabi_dmul+0xc8>
    77f2:	4a10      	ldr	r2, [pc, #64]	; (7834 <__aeabi_dmul+0x398>)
    77f4:	2003      	movs	r0, #3
    77f6:	4694      	mov	ip, r2
    77f8:	4463      	add	r3, ip
    77fa:	464a      	mov	r2, r9
    77fc:	9300      	str	r3, [sp, #0]
    77fe:	2303      	movs	r3, #3
    7800:	431a      	orrs	r2, r3
    7802:	4691      	mov	r9, r2
    7804:	4652      	mov	r2, sl
    7806:	e68a      	b.n	751e <__aeabi_dmul+0x82>
    7808:	4649      	mov	r1, r9
    780a:	2301      	movs	r3, #1
    780c:	4319      	orrs	r1, r3
    780e:	4689      	mov	r9, r1
    7810:	2600      	movs	r6, #0
    7812:	2001      	movs	r0, #1
    7814:	e683      	b.n	751e <__aeabi_dmul+0x82>
    7816:	220c      	movs	r2, #12
    7818:	9300      	str	r3, [sp, #0]
    781a:	2303      	movs	r3, #3
    781c:	0005      	movs	r5, r0
    781e:	4691      	mov	r9, r2
    7820:	469b      	mov	fp, r3
    7822:	e65e      	b.n	74e2 <__aeabi_dmul+0x46>
    7824:	2304      	movs	r3, #4
    7826:	4699      	mov	r9, r3
    7828:	2300      	movs	r3, #0
    782a:	9300      	str	r3, [sp, #0]
    782c:	3301      	adds	r3, #1
    782e:	2400      	movs	r4, #0
    7830:	469b      	mov	fp, r3
    7832:	e656      	b.n	74e2 <__aeabi_dmul+0x46>
    7834:	000007ff 	.word	0x000007ff
    7838:	fffffc01 	.word	0xfffffc01
    783c:	0000a590 	.word	0x0000a590
    7840:	fffffc0d 	.word	0xfffffc0d
    7844:	000003ff 	.word	0x000003ff
    7848:	feffffff 	.word	0xfeffffff
    784c:	000007fe 	.word	0x000007fe
    7850:	2300      	movs	r3, #0
    7852:	2480      	movs	r4, #128	; 0x80
    7854:	2500      	movs	r5, #0
    7856:	4a44      	ldr	r2, [pc, #272]	; (7968 <__aeabi_dmul+0x4cc>)
    7858:	9301      	str	r3, [sp, #4]
    785a:	0324      	lsls	r4, r4, #12
    785c:	e68e      	b.n	757c <__aeabi_dmul+0xe0>
    785e:	2001      	movs	r0, #1
    7860:	1a40      	subs	r0, r0, r1
    7862:	2838      	cmp	r0, #56	; 0x38
    7864:	dd00      	ble.n	7868 <__aeabi_dmul+0x3cc>
    7866:	e686      	b.n	7576 <__aeabi_dmul+0xda>
    7868:	281f      	cmp	r0, #31
    786a:	dd5b      	ble.n	7924 <__aeabi_dmul+0x488>
    786c:	221f      	movs	r2, #31
    786e:	0023      	movs	r3, r4
    7870:	4252      	negs	r2, r2
    7872:	1a51      	subs	r1, r2, r1
    7874:	40cb      	lsrs	r3, r1
    7876:	0019      	movs	r1, r3
    7878:	2820      	cmp	r0, #32
    787a:	d003      	beq.n	7884 <__aeabi_dmul+0x3e8>
    787c:	4a3b      	ldr	r2, [pc, #236]	; (796c <__aeabi_dmul+0x4d0>)
    787e:	4462      	add	r2, ip
    7880:	4094      	lsls	r4, r2
    7882:	4325      	orrs	r5, r4
    7884:	1e6a      	subs	r2, r5, #1
    7886:	4195      	sbcs	r5, r2
    7888:	002a      	movs	r2, r5
    788a:	430a      	orrs	r2, r1
    788c:	2107      	movs	r1, #7
    788e:	000d      	movs	r5, r1
    7890:	2400      	movs	r4, #0
    7892:	4015      	ands	r5, r2
    7894:	4211      	tst	r1, r2
    7896:	d05b      	beq.n	7950 <__aeabi_dmul+0x4b4>
    7898:	210f      	movs	r1, #15
    789a:	2400      	movs	r4, #0
    789c:	4011      	ands	r1, r2
    789e:	2904      	cmp	r1, #4
    78a0:	d053      	beq.n	794a <__aeabi_dmul+0x4ae>
    78a2:	1d11      	adds	r1, r2, #4
    78a4:	4291      	cmp	r1, r2
    78a6:	4192      	sbcs	r2, r2
    78a8:	4252      	negs	r2, r2
    78aa:	18a4      	adds	r4, r4, r2
    78ac:	000a      	movs	r2, r1
    78ae:	0223      	lsls	r3, r4, #8
    78b0:	d54b      	bpl.n	794a <__aeabi_dmul+0x4ae>
    78b2:	2201      	movs	r2, #1
    78b4:	2400      	movs	r4, #0
    78b6:	2500      	movs	r5, #0
    78b8:	e660      	b.n	757c <__aeabi_dmul+0xe0>
    78ba:	2380      	movs	r3, #128	; 0x80
    78bc:	031b      	lsls	r3, r3, #12
    78be:	421c      	tst	r4, r3
    78c0:	d009      	beq.n	78d6 <__aeabi_dmul+0x43a>
    78c2:	421e      	tst	r6, r3
    78c4:	d107      	bne.n	78d6 <__aeabi_dmul+0x43a>
    78c6:	4333      	orrs	r3, r6
    78c8:	031c      	lsls	r4, r3, #12
    78ca:	4643      	mov	r3, r8
    78cc:	0015      	movs	r5, r2
    78ce:	0b24      	lsrs	r4, r4, #12
    78d0:	4a25      	ldr	r2, [pc, #148]	; (7968 <__aeabi_dmul+0x4cc>)
    78d2:	9301      	str	r3, [sp, #4]
    78d4:	e652      	b.n	757c <__aeabi_dmul+0xe0>
    78d6:	2280      	movs	r2, #128	; 0x80
    78d8:	0312      	lsls	r2, r2, #12
    78da:	4314      	orrs	r4, r2
    78dc:	0324      	lsls	r4, r4, #12
    78de:	4a22      	ldr	r2, [pc, #136]	; (7968 <__aeabi_dmul+0x4cc>)
    78e0:	0b24      	lsrs	r4, r4, #12
    78e2:	9701      	str	r7, [sp, #4]
    78e4:	e64a      	b.n	757c <__aeabi_dmul+0xe0>
    78e6:	f000 fc33 	bl	8150 <__clzsi2>
    78ea:	0003      	movs	r3, r0
    78ec:	001a      	movs	r2, r3
    78ee:	3215      	adds	r2, #21
    78f0:	3020      	adds	r0, #32
    78f2:	2a1c      	cmp	r2, #28
    78f4:	dc00      	bgt.n	78f8 <__aeabi_dmul+0x45c>
    78f6:	e684      	b.n	7602 <__aeabi_dmul+0x166>
    78f8:	4656      	mov	r6, sl
    78fa:	3b08      	subs	r3, #8
    78fc:	2200      	movs	r2, #0
    78fe:	409e      	lsls	r6, r3
    7900:	e689      	b.n	7616 <__aeabi_dmul+0x17a>
    7902:	f000 fc25 	bl	8150 <__clzsi2>
    7906:	0001      	movs	r1, r0
    7908:	0002      	movs	r2, r0
    790a:	3115      	adds	r1, #21
    790c:	3220      	adds	r2, #32
    790e:	291c      	cmp	r1, #28
    7910:	dc00      	bgt.n	7914 <__aeabi_dmul+0x478>
    7912:	e64e      	b.n	75b2 <__aeabi_dmul+0x116>
    7914:	0034      	movs	r4, r6
    7916:	3808      	subs	r0, #8
    7918:	2500      	movs	r5, #0
    791a:	4084      	lsls	r4, r0
    791c:	e653      	b.n	75c6 <__aeabi_dmul+0x12a>
    791e:	9b00      	ldr	r3, [sp, #0]
    7920:	469c      	mov	ip, r3
    7922:	e741      	b.n	77a8 <__aeabi_dmul+0x30c>
    7924:	4912      	ldr	r1, [pc, #72]	; (7970 <__aeabi_dmul+0x4d4>)
    7926:	0022      	movs	r2, r4
    7928:	4461      	add	r1, ip
    792a:	002e      	movs	r6, r5
    792c:	408d      	lsls	r5, r1
    792e:	408a      	lsls	r2, r1
    7930:	40c6      	lsrs	r6, r0
    7932:	1e69      	subs	r1, r5, #1
    7934:	418d      	sbcs	r5, r1
    7936:	4332      	orrs	r2, r6
    7938:	432a      	orrs	r2, r5
    793a:	40c4      	lsrs	r4, r0
    793c:	0753      	lsls	r3, r2, #29
    793e:	d0b6      	beq.n	78ae <__aeabi_dmul+0x412>
    7940:	210f      	movs	r1, #15
    7942:	4011      	ands	r1, r2
    7944:	2904      	cmp	r1, #4
    7946:	d1ac      	bne.n	78a2 <__aeabi_dmul+0x406>
    7948:	e7b1      	b.n	78ae <__aeabi_dmul+0x412>
    794a:	0765      	lsls	r5, r4, #29
    794c:	0264      	lsls	r4, r4, #9
    794e:	0b24      	lsrs	r4, r4, #12
    7950:	08d2      	lsrs	r2, r2, #3
    7952:	4315      	orrs	r5, r2
    7954:	2200      	movs	r2, #0
    7956:	e611      	b.n	757c <__aeabi_dmul+0xe0>
    7958:	2280      	movs	r2, #128	; 0x80
    795a:	0312      	lsls	r2, r2, #12
    795c:	4314      	orrs	r4, r2
    795e:	0324      	lsls	r4, r4, #12
    7960:	4a01      	ldr	r2, [pc, #4]	; (7968 <__aeabi_dmul+0x4cc>)
    7962:	0b24      	lsrs	r4, r4, #12
    7964:	e60a      	b.n	757c <__aeabi_dmul+0xe0>
    7966:	46c0      	nop			; (mov r8, r8)
    7968:	000007ff 	.word	0x000007ff
    796c:	0000043e 	.word	0x0000043e
    7970:	0000041e 	.word	0x0000041e

00007974 <__aeabi_dsub>:
__aeabi_dsub():
    7974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7976:	4657      	mov	r7, sl
    7978:	464e      	mov	r6, r9
    797a:	4645      	mov	r5, r8
    797c:	46de      	mov	lr, fp
    797e:	0004      	movs	r4, r0
    7980:	b5e0      	push	{r5, r6, r7, lr}
    7982:	001f      	movs	r7, r3
    7984:	0010      	movs	r0, r2
    7986:	030b      	lsls	r3, r1, #12
    7988:	0f62      	lsrs	r2, r4, #29
    798a:	004e      	lsls	r6, r1, #1
    798c:	0fcd      	lsrs	r5, r1, #31
    798e:	0a5b      	lsrs	r3, r3, #9
    7990:	0339      	lsls	r1, r7, #12
    7992:	4313      	orrs	r3, r2
    7994:	0a49      	lsrs	r1, r1, #9
    7996:	00e2      	lsls	r2, r4, #3
    7998:	0f44      	lsrs	r4, r0, #29
    799a:	4321      	orrs	r1, r4
    799c:	4cc2      	ldr	r4, [pc, #776]	; (7ca8 <__aeabi_dsub+0x334>)
    799e:	4691      	mov	r9, r2
    79a0:	4692      	mov	sl, r2
    79a2:	00c0      	lsls	r0, r0, #3
    79a4:	007a      	lsls	r2, r7, #1
    79a6:	4680      	mov	r8, r0
    79a8:	0d76      	lsrs	r6, r6, #21
    79aa:	0d52      	lsrs	r2, r2, #21
    79ac:	0fff      	lsrs	r7, r7, #31
    79ae:	42a2      	cmp	r2, r4
    79b0:	d100      	bne.n	79b4 <__aeabi_dsub+0x40>
    79b2:	e0b4      	b.n	7b1e <__aeabi_dsub+0x1aa>
    79b4:	2401      	movs	r4, #1
    79b6:	4067      	eors	r7, r4
    79b8:	46bb      	mov	fp, r7
    79ba:	42bd      	cmp	r5, r7
    79bc:	d100      	bne.n	79c0 <__aeabi_dsub+0x4c>
    79be:	e088      	b.n	7ad2 <__aeabi_dsub+0x15e>
    79c0:	1ab4      	subs	r4, r6, r2
    79c2:	46a4      	mov	ip, r4
    79c4:	2c00      	cmp	r4, #0
    79c6:	dc00      	bgt.n	79ca <__aeabi_dsub+0x56>
    79c8:	e0b2      	b.n	7b30 <__aeabi_dsub+0x1bc>
    79ca:	2a00      	cmp	r2, #0
    79cc:	d100      	bne.n	79d0 <__aeabi_dsub+0x5c>
    79ce:	e0c5      	b.n	7b5c <__aeabi_dsub+0x1e8>
    79d0:	4ab5      	ldr	r2, [pc, #724]	; (7ca8 <__aeabi_dsub+0x334>)
    79d2:	4296      	cmp	r6, r2
    79d4:	d100      	bne.n	79d8 <__aeabi_dsub+0x64>
    79d6:	e28b      	b.n	7ef0 <__aeabi_dsub+0x57c>
    79d8:	2280      	movs	r2, #128	; 0x80
    79da:	0412      	lsls	r2, r2, #16
    79dc:	4311      	orrs	r1, r2
    79de:	4662      	mov	r2, ip
    79e0:	2a38      	cmp	r2, #56	; 0x38
    79e2:	dd00      	ble.n	79e6 <__aeabi_dsub+0x72>
    79e4:	e1a1      	b.n	7d2a <__aeabi_dsub+0x3b6>
    79e6:	2a1f      	cmp	r2, #31
    79e8:	dd00      	ble.n	79ec <__aeabi_dsub+0x78>
    79ea:	e216      	b.n	7e1a <__aeabi_dsub+0x4a6>
    79ec:	2720      	movs	r7, #32
    79ee:	000c      	movs	r4, r1
    79f0:	1abf      	subs	r7, r7, r2
    79f2:	40bc      	lsls	r4, r7
    79f4:	0002      	movs	r2, r0
    79f6:	46a0      	mov	r8, r4
    79f8:	4664      	mov	r4, ip
    79fa:	40b8      	lsls	r0, r7
    79fc:	40e2      	lsrs	r2, r4
    79fe:	4644      	mov	r4, r8
    7a00:	4314      	orrs	r4, r2
    7a02:	0002      	movs	r2, r0
    7a04:	1e50      	subs	r0, r2, #1
    7a06:	4182      	sbcs	r2, r0
    7a08:	4660      	mov	r0, ip
    7a0a:	40c1      	lsrs	r1, r0
    7a0c:	4322      	orrs	r2, r4
    7a0e:	1a5b      	subs	r3, r3, r1
    7a10:	4649      	mov	r1, r9
    7a12:	1a8c      	subs	r4, r1, r2
    7a14:	45a1      	cmp	r9, r4
    7a16:	4192      	sbcs	r2, r2
    7a18:	4252      	negs	r2, r2
    7a1a:	1a9b      	subs	r3, r3, r2
    7a1c:	4698      	mov	r8, r3
    7a1e:	4643      	mov	r3, r8
    7a20:	021b      	lsls	r3, r3, #8
    7a22:	d400      	bmi.n	7a26 <__aeabi_dsub+0xb2>
    7a24:	e117      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7a26:	4643      	mov	r3, r8
    7a28:	025b      	lsls	r3, r3, #9
    7a2a:	0a5b      	lsrs	r3, r3, #9
    7a2c:	4698      	mov	r8, r3
    7a2e:	4643      	mov	r3, r8
    7a30:	2b00      	cmp	r3, #0
    7a32:	d100      	bne.n	7a36 <__aeabi_dsub+0xc2>
    7a34:	e16c      	b.n	7d10 <__aeabi_dsub+0x39c>
    7a36:	4640      	mov	r0, r8
    7a38:	f000 fb8a 	bl	8150 <__clzsi2>
    7a3c:	0002      	movs	r2, r0
    7a3e:	3a08      	subs	r2, #8
    7a40:	2120      	movs	r1, #32
    7a42:	0020      	movs	r0, r4
    7a44:	4643      	mov	r3, r8
    7a46:	1a89      	subs	r1, r1, r2
    7a48:	4093      	lsls	r3, r2
    7a4a:	40c8      	lsrs	r0, r1
    7a4c:	4094      	lsls	r4, r2
    7a4e:	4303      	orrs	r3, r0
    7a50:	4296      	cmp	r6, r2
    7a52:	dd00      	ble.n	7a56 <__aeabi_dsub+0xe2>
    7a54:	e157      	b.n	7d06 <__aeabi_dsub+0x392>
    7a56:	1b96      	subs	r6, r2, r6
    7a58:	1c71      	adds	r1, r6, #1
    7a5a:	291f      	cmp	r1, #31
    7a5c:	dd00      	ble.n	7a60 <__aeabi_dsub+0xec>
    7a5e:	e1cb      	b.n	7df8 <__aeabi_dsub+0x484>
    7a60:	2220      	movs	r2, #32
    7a62:	0018      	movs	r0, r3
    7a64:	0026      	movs	r6, r4
    7a66:	1a52      	subs	r2, r2, r1
    7a68:	4094      	lsls	r4, r2
    7a6a:	4090      	lsls	r0, r2
    7a6c:	40ce      	lsrs	r6, r1
    7a6e:	40cb      	lsrs	r3, r1
    7a70:	1e62      	subs	r2, r4, #1
    7a72:	4194      	sbcs	r4, r2
    7a74:	4330      	orrs	r0, r6
    7a76:	4698      	mov	r8, r3
    7a78:	2600      	movs	r6, #0
    7a7a:	4304      	orrs	r4, r0
    7a7c:	0763      	lsls	r3, r4, #29
    7a7e:	d009      	beq.n	7a94 <__aeabi_dsub+0x120>
    7a80:	230f      	movs	r3, #15
    7a82:	4023      	ands	r3, r4
    7a84:	2b04      	cmp	r3, #4
    7a86:	d005      	beq.n	7a94 <__aeabi_dsub+0x120>
    7a88:	1d23      	adds	r3, r4, #4
    7a8a:	42a3      	cmp	r3, r4
    7a8c:	41a4      	sbcs	r4, r4
    7a8e:	4264      	negs	r4, r4
    7a90:	44a0      	add	r8, r4
    7a92:	001c      	movs	r4, r3
    7a94:	4643      	mov	r3, r8
    7a96:	021b      	lsls	r3, r3, #8
    7a98:	d400      	bmi.n	7a9c <__aeabi_dsub+0x128>
    7a9a:	e0df      	b.n	7c5c <__aeabi_dsub+0x2e8>
    7a9c:	4b82      	ldr	r3, [pc, #520]	; (7ca8 <__aeabi_dsub+0x334>)
    7a9e:	3601      	adds	r6, #1
    7aa0:	429e      	cmp	r6, r3
    7aa2:	d100      	bne.n	7aa6 <__aeabi_dsub+0x132>
    7aa4:	e0fb      	b.n	7c9e <__aeabi_dsub+0x32a>
    7aa6:	4642      	mov	r2, r8
    7aa8:	4b80      	ldr	r3, [pc, #512]	; (7cac <__aeabi_dsub+0x338>)
    7aaa:	08e4      	lsrs	r4, r4, #3
    7aac:	401a      	ands	r2, r3
    7aae:	0013      	movs	r3, r2
    7ab0:	0571      	lsls	r1, r6, #21
    7ab2:	0752      	lsls	r2, r2, #29
    7ab4:	025b      	lsls	r3, r3, #9
    7ab6:	4322      	orrs	r2, r4
    7ab8:	0b1b      	lsrs	r3, r3, #12
    7aba:	0d49      	lsrs	r1, r1, #21
    7abc:	0509      	lsls	r1, r1, #20
    7abe:	07ed      	lsls	r5, r5, #31
    7ac0:	4319      	orrs	r1, r3
    7ac2:	4329      	orrs	r1, r5
    7ac4:	0010      	movs	r0, r2
    7ac6:	bcf0      	pop	{r4, r5, r6, r7}
    7ac8:	46bb      	mov	fp, r7
    7aca:	46b2      	mov	sl, r6
    7acc:	46a9      	mov	r9, r5
    7ace:	46a0      	mov	r8, r4
    7ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ad2:	1ab4      	subs	r4, r6, r2
    7ad4:	46a4      	mov	ip, r4
    7ad6:	2c00      	cmp	r4, #0
    7ad8:	dd58      	ble.n	7b8c <__aeabi_dsub+0x218>
    7ada:	2a00      	cmp	r2, #0
    7adc:	d100      	bne.n	7ae0 <__aeabi_dsub+0x16c>
    7ade:	e09e      	b.n	7c1e <__aeabi_dsub+0x2aa>
    7ae0:	4a71      	ldr	r2, [pc, #452]	; (7ca8 <__aeabi_dsub+0x334>)
    7ae2:	4296      	cmp	r6, r2
    7ae4:	d100      	bne.n	7ae8 <__aeabi_dsub+0x174>
    7ae6:	e13b      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7ae8:	2280      	movs	r2, #128	; 0x80
    7aea:	0412      	lsls	r2, r2, #16
    7aec:	4311      	orrs	r1, r2
    7aee:	4662      	mov	r2, ip
    7af0:	2a38      	cmp	r2, #56	; 0x38
    7af2:	dd00      	ble.n	7af6 <__aeabi_dsub+0x182>
    7af4:	e0c1      	b.n	7c7a <__aeabi_dsub+0x306>
    7af6:	2a1f      	cmp	r2, #31
    7af8:	dc00      	bgt.n	7afc <__aeabi_dsub+0x188>
    7afa:	e1bb      	b.n	7e74 <__aeabi_dsub+0x500>
    7afc:	000c      	movs	r4, r1
    7afe:	3a20      	subs	r2, #32
    7b00:	40d4      	lsrs	r4, r2
    7b02:	0022      	movs	r2, r4
    7b04:	4664      	mov	r4, ip
    7b06:	2c20      	cmp	r4, #32
    7b08:	d004      	beq.n	7b14 <__aeabi_dsub+0x1a0>
    7b0a:	2740      	movs	r7, #64	; 0x40
    7b0c:	1b3f      	subs	r7, r7, r4
    7b0e:	40b9      	lsls	r1, r7
    7b10:	4308      	orrs	r0, r1
    7b12:	4680      	mov	r8, r0
    7b14:	4644      	mov	r4, r8
    7b16:	1e61      	subs	r1, r4, #1
    7b18:	418c      	sbcs	r4, r1
    7b1a:	4314      	orrs	r4, r2
    7b1c:	e0b1      	b.n	7c82 <__aeabi_dsub+0x30e>
    7b1e:	000c      	movs	r4, r1
    7b20:	4304      	orrs	r4, r0
    7b22:	d02a      	beq.n	7b7a <__aeabi_dsub+0x206>
    7b24:	46bb      	mov	fp, r7
    7b26:	42bd      	cmp	r5, r7
    7b28:	d02d      	beq.n	7b86 <__aeabi_dsub+0x212>
    7b2a:	4c61      	ldr	r4, [pc, #388]	; (7cb0 <__aeabi_dsub+0x33c>)
    7b2c:	46a4      	mov	ip, r4
    7b2e:	44b4      	add	ip, r6
    7b30:	4664      	mov	r4, ip
    7b32:	2c00      	cmp	r4, #0
    7b34:	d05c      	beq.n	7bf0 <__aeabi_dsub+0x27c>
    7b36:	1b94      	subs	r4, r2, r6
    7b38:	46a4      	mov	ip, r4
    7b3a:	2e00      	cmp	r6, #0
    7b3c:	d000      	beq.n	7b40 <__aeabi_dsub+0x1cc>
    7b3e:	e115      	b.n	7d6c <__aeabi_dsub+0x3f8>
    7b40:	464d      	mov	r5, r9
    7b42:	431d      	orrs	r5, r3
    7b44:	d100      	bne.n	7b48 <__aeabi_dsub+0x1d4>
    7b46:	e1c3      	b.n	7ed0 <__aeabi_dsub+0x55c>
    7b48:	1e65      	subs	r5, r4, #1
    7b4a:	2c01      	cmp	r4, #1
    7b4c:	d100      	bne.n	7b50 <__aeabi_dsub+0x1dc>
    7b4e:	e20c      	b.n	7f6a <__aeabi_dsub+0x5f6>
    7b50:	4e55      	ldr	r6, [pc, #340]	; (7ca8 <__aeabi_dsub+0x334>)
    7b52:	42b4      	cmp	r4, r6
    7b54:	d100      	bne.n	7b58 <__aeabi_dsub+0x1e4>
    7b56:	e1f8      	b.n	7f4a <__aeabi_dsub+0x5d6>
    7b58:	46ac      	mov	ip, r5
    7b5a:	e10e      	b.n	7d7a <__aeabi_dsub+0x406>
    7b5c:	000a      	movs	r2, r1
    7b5e:	4302      	orrs	r2, r0
    7b60:	d100      	bne.n	7b64 <__aeabi_dsub+0x1f0>
    7b62:	e136      	b.n	7dd2 <__aeabi_dsub+0x45e>
    7b64:	0022      	movs	r2, r4
    7b66:	3a01      	subs	r2, #1
    7b68:	2c01      	cmp	r4, #1
    7b6a:	d100      	bne.n	7b6e <__aeabi_dsub+0x1fa>
    7b6c:	e1c6      	b.n	7efc <__aeabi_dsub+0x588>
    7b6e:	4c4e      	ldr	r4, [pc, #312]	; (7ca8 <__aeabi_dsub+0x334>)
    7b70:	45a4      	cmp	ip, r4
    7b72:	d100      	bne.n	7b76 <__aeabi_dsub+0x202>
    7b74:	e0f4      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7b76:	4694      	mov	ip, r2
    7b78:	e731      	b.n	79de <__aeabi_dsub+0x6a>
    7b7a:	2401      	movs	r4, #1
    7b7c:	4067      	eors	r7, r4
    7b7e:	46bb      	mov	fp, r7
    7b80:	42bd      	cmp	r5, r7
    7b82:	d000      	beq.n	7b86 <__aeabi_dsub+0x212>
    7b84:	e71c      	b.n	79c0 <__aeabi_dsub+0x4c>
    7b86:	4c4a      	ldr	r4, [pc, #296]	; (7cb0 <__aeabi_dsub+0x33c>)
    7b88:	46a4      	mov	ip, r4
    7b8a:	44b4      	add	ip, r6
    7b8c:	4664      	mov	r4, ip
    7b8e:	2c00      	cmp	r4, #0
    7b90:	d100      	bne.n	7b94 <__aeabi_dsub+0x220>
    7b92:	e0cf      	b.n	7d34 <__aeabi_dsub+0x3c0>
    7b94:	1b94      	subs	r4, r2, r6
    7b96:	46a4      	mov	ip, r4
    7b98:	2e00      	cmp	r6, #0
    7b9a:	d100      	bne.n	7b9e <__aeabi_dsub+0x22a>
    7b9c:	e15c      	b.n	7e58 <__aeabi_dsub+0x4e4>
    7b9e:	4e42      	ldr	r6, [pc, #264]	; (7ca8 <__aeabi_dsub+0x334>)
    7ba0:	42b2      	cmp	r2, r6
    7ba2:	d100      	bne.n	7ba6 <__aeabi_dsub+0x232>
    7ba4:	e1ec      	b.n	7f80 <__aeabi_dsub+0x60c>
    7ba6:	2680      	movs	r6, #128	; 0x80
    7ba8:	0436      	lsls	r6, r6, #16
    7baa:	4333      	orrs	r3, r6
    7bac:	4664      	mov	r4, ip
    7bae:	2c38      	cmp	r4, #56	; 0x38
    7bb0:	dd00      	ble.n	7bb4 <__aeabi_dsub+0x240>
    7bb2:	e1b3      	b.n	7f1c <__aeabi_dsub+0x5a8>
    7bb4:	2c1f      	cmp	r4, #31
    7bb6:	dd00      	ble.n	7bba <__aeabi_dsub+0x246>
    7bb8:	e238      	b.n	802c <__aeabi_dsub+0x6b8>
    7bba:	2620      	movs	r6, #32
    7bbc:	1b36      	subs	r6, r6, r4
    7bbe:	001c      	movs	r4, r3
    7bc0:	40b4      	lsls	r4, r6
    7bc2:	464f      	mov	r7, r9
    7bc4:	46a0      	mov	r8, r4
    7bc6:	4664      	mov	r4, ip
    7bc8:	40e7      	lsrs	r7, r4
    7bca:	4644      	mov	r4, r8
    7bcc:	433c      	orrs	r4, r7
    7bce:	464f      	mov	r7, r9
    7bd0:	40b7      	lsls	r7, r6
    7bd2:	003e      	movs	r6, r7
    7bd4:	1e77      	subs	r7, r6, #1
    7bd6:	41be      	sbcs	r6, r7
    7bd8:	4334      	orrs	r4, r6
    7bda:	4666      	mov	r6, ip
    7bdc:	40f3      	lsrs	r3, r6
    7bde:	18c9      	adds	r1, r1, r3
    7be0:	1824      	adds	r4, r4, r0
    7be2:	4284      	cmp	r4, r0
    7be4:	419b      	sbcs	r3, r3
    7be6:	425b      	negs	r3, r3
    7be8:	4698      	mov	r8, r3
    7bea:	0016      	movs	r6, r2
    7bec:	4488      	add	r8, r1
    7bee:	e04e      	b.n	7c8e <__aeabi_dsub+0x31a>
    7bf0:	4a30      	ldr	r2, [pc, #192]	; (7cb4 <__aeabi_dsub+0x340>)
    7bf2:	1c74      	adds	r4, r6, #1
    7bf4:	4214      	tst	r4, r2
    7bf6:	d000      	beq.n	7bfa <__aeabi_dsub+0x286>
    7bf8:	e0d6      	b.n	7da8 <__aeabi_dsub+0x434>
    7bfa:	464a      	mov	r2, r9
    7bfc:	431a      	orrs	r2, r3
    7bfe:	2e00      	cmp	r6, #0
    7c00:	d000      	beq.n	7c04 <__aeabi_dsub+0x290>
    7c02:	e15b      	b.n	7ebc <__aeabi_dsub+0x548>
    7c04:	2a00      	cmp	r2, #0
    7c06:	d100      	bne.n	7c0a <__aeabi_dsub+0x296>
    7c08:	e1a5      	b.n	7f56 <__aeabi_dsub+0x5e2>
    7c0a:	000a      	movs	r2, r1
    7c0c:	4302      	orrs	r2, r0
    7c0e:	d000      	beq.n	7c12 <__aeabi_dsub+0x29e>
    7c10:	e1bb      	b.n	7f8a <__aeabi_dsub+0x616>
    7c12:	464a      	mov	r2, r9
    7c14:	0759      	lsls	r1, r3, #29
    7c16:	08d2      	lsrs	r2, r2, #3
    7c18:	430a      	orrs	r2, r1
    7c1a:	08db      	lsrs	r3, r3, #3
    7c1c:	e027      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7c1e:	000a      	movs	r2, r1
    7c20:	4302      	orrs	r2, r0
    7c22:	d100      	bne.n	7c26 <__aeabi_dsub+0x2b2>
    7c24:	e174      	b.n	7f10 <__aeabi_dsub+0x59c>
    7c26:	0022      	movs	r2, r4
    7c28:	3a01      	subs	r2, #1
    7c2a:	2c01      	cmp	r4, #1
    7c2c:	d005      	beq.n	7c3a <__aeabi_dsub+0x2c6>
    7c2e:	4c1e      	ldr	r4, [pc, #120]	; (7ca8 <__aeabi_dsub+0x334>)
    7c30:	45a4      	cmp	ip, r4
    7c32:	d100      	bne.n	7c36 <__aeabi_dsub+0x2c2>
    7c34:	e094      	b.n	7d60 <__aeabi_dsub+0x3ec>
    7c36:	4694      	mov	ip, r2
    7c38:	e759      	b.n	7aee <__aeabi_dsub+0x17a>
    7c3a:	4448      	add	r0, r9
    7c3c:	4548      	cmp	r0, r9
    7c3e:	4192      	sbcs	r2, r2
    7c40:	185b      	adds	r3, r3, r1
    7c42:	4698      	mov	r8, r3
    7c44:	0004      	movs	r4, r0
    7c46:	4252      	negs	r2, r2
    7c48:	4490      	add	r8, r2
    7c4a:	4643      	mov	r3, r8
    7c4c:	2602      	movs	r6, #2
    7c4e:	021b      	lsls	r3, r3, #8
    7c50:	d500      	bpl.n	7c54 <__aeabi_dsub+0x2e0>
    7c52:	e0c4      	b.n	7dde <__aeabi_dsub+0x46a>
    7c54:	3e01      	subs	r6, #1
    7c56:	0763      	lsls	r3, r4, #29
    7c58:	d000      	beq.n	7c5c <__aeabi_dsub+0x2e8>
    7c5a:	e711      	b.n	7a80 <__aeabi_dsub+0x10c>
    7c5c:	4643      	mov	r3, r8
    7c5e:	46b4      	mov	ip, r6
    7c60:	0759      	lsls	r1, r3, #29
    7c62:	08e2      	lsrs	r2, r4, #3
    7c64:	430a      	orrs	r2, r1
    7c66:	08db      	lsrs	r3, r3, #3
    7c68:	490f      	ldr	r1, [pc, #60]	; (7ca8 <__aeabi_dsub+0x334>)
    7c6a:	458c      	cmp	ip, r1
    7c6c:	d040      	beq.n	7cf0 <__aeabi_dsub+0x37c>
    7c6e:	4661      	mov	r1, ip
    7c70:	031b      	lsls	r3, r3, #12
    7c72:	0549      	lsls	r1, r1, #21
    7c74:	0b1b      	lsrs	r3, r3, #12
    7c76:	0d49      	lsrs	r1, r1, #21
    7c78:	e720      	b.n	7abc <__aeabi_dsub+0x148>
    7c7a:	4301      	orrs	r1, r0
    7c7c:	000c      	movs	r4, r1
    7c7e:	1e61      	subs	r1, r4, #1
    7c80:	418c      	sbcs	r4, r1
    7c82:	444c      	add	r4, r9
    7c84:	454c      	cmp	r4, r9
    7c86:	4192      	sbcs	r2, r2
    7c88:	4252      	negs	r2, r2
    7c8a:	4690      	mov	r8, r2
    7c8c:	4498      	add	r8, r3
    7c8e:	4643      	mov	r3, r8
    7c90:	021b      	lsls	r3, r3, #8
    7c92:	d5e0      	bpl.n	7c56 <__aeabi_dsub+0x2e2>
    7c94:	4b04      	ldr	r3, [pc, #16]	; (7ca8 <__aeabi_dsub+0x334>)
    7c96:	3601      	adds	r6, #1
    7c98:	429e      	cmp	r6, r3
    7c9a:	d000      	beq.n	7c9e <__aeabi_dsub+0x32a>
    7c9c:	e09f      	b.n	7dde <__aeabi_dsub+0x46a>
    7c9e:	0031      	movs	r1, r6
    7ca0:	2300      	movs	r3, #0
    7ca2:	2200      	movs	r2, #0
    7ca4:	e70a      	b.n	7abc <__aeabi_dsub+0x148>
    7ca6:	46c0      	nop			; (mov r8, r8)
    7ca8:	000007ff 	.word	0x000007ff
    7cac:	ff7fffff 	.word	0xff7fffff
    7cb0:	fffff801 	.word	0xfffff801
    7cb4:	000007fe 	.word	0x000007fe
    7cb8:	2a00      	cmp	r2, #0
    7cba:	d100      	bne.n	7cbe <__aeabi_dsub+0x34a>
    7cbc:	e160      	b.n	7f80 <__aeabi_dsub+0x60c>
    7cbe:	000a      	movs	r2, r1
    7cc0:	4302      	orrs	r2, r0
    7cc2:	d04d      	beq.n	7d60 <__aeabi_dsub+0x3ec>
    7cc4:	464a      	mov	r2, r9
    7cc6:	075c      	lsls	r4, r3, #29
    7cc8:	08d2      	lsrs	r2, r2, #3
    7cca:	4322      	orrs	r2, r4
    7ccc:	2480      	movs	r4, #128	; 0x80
    7cce:	08db      	lsrs	r3, r3, #3
    7cd0:	0324      	lsls	r4, r4, #12
    7cd2:	4223      	tst	r3, r4
    7cd4:	d007      	beq.n	7ce6 <__aeabi_dsub+0x372>
    7cd6:	08ce      	lsrs	r6, r1, #3
    7cd8:	4226      	tst	r6, r4
    7cda:	d104      	bne.n	7ce6 <__aeabi_dsub+0x372>
    7cdc:	465d      	mov	r5, fp
    7cde:	0033      	movs	r3, r6
    7ce0:	08c2      	lsrs	r2, r0, #3
    7ce2:	0749      	lsls	r1, r1, #29
    7ce4:	430a      	orrs	r2, r1
    7ce6:	0f51      	lsrs	r1, r2, #29
    7ce8:	00d2      	lsls	r2, r2, #3
    7cea:	08d2      	lsrs	r2, r2, #3
    7cec:	0749      	lsls	r1, r1, #29
    7cee:	430a      	orrs	r2, r1
    7cf0:	0011      	movs	r1, r2
    7cf2:	4319      	orrs	r1, r3
    7cf4:	d100      	bne.n	7cf8 <__aeabi_dsub+0x384>
    7cf6:	e1c8      	b.n	808a <__aeabi_dsub+0x716>
    7cf8:	2180      	movs	r1, #128	; 0x80
    7cfa:	0309      	lsls	r1, r1, #12
    7cfc:	430b      	orrs	r3, r1
    7cfe:	031b      	lsls	r3, r3, #12
    7d00:	49d5      	ldr	r1, [pc, #852]	; (8058 <__aeabi_dsub+0x6e4>)
    7d02:	0b1b      	lsrs	r3, r3, #12
    7d04:	e6da      	b.n	7abc <__aeabi_dsub+0x148>
    7d06:	49d5      	ldr	r1, [pc, #852]	; (805c <__aeabi_dsub+0x6e8>)
    7d08:	1ab6      	subs	r6, r6, r2
    7d0a:	400b      	ands	r3, r1
    7d0c:	4698      	mov	r8, r3
    7d0e:	e6b5      	b.n	7a7c <__aeabi_dsub+0x108>
    7d10:	0020      	movs	r0, r4
    7d12:	f000 fa1d 	bl	8150 <__clzsi2>
    7d16:	0002      	movs	r2, r0
    7d18:	3218      	adds	r2, #24
    7d1a:	2a1f      	cmp	r2, #31
    7d1c:	dc00      	bgt.n	7d20 <__aeabi_dsub+0x3ac>
    7d1e:	e68f      	b.n	7a40 <__aeabi_dsub+0xcc>
    7d20:	0023      	movs	r3, r4
    7d22:	3808      	subs	r0, #8
    7d24:	4083      	lsls	r3, r0
    7d26:	2400      	movs	r4, #0
    7d28:	e692      	b.n	7a50 <__aeabi_dsub+0xdc>
    7d2a:	4308      	orrs	r0, r1
    7d2c:	0002      	movs	r2, r0
    7d2e:	1e50      	subs	r0, r2, #1
    7d30:	4182      	sbcs	r2, r0
    7d32:	e66d      	b.n	7a10 <__aeabi_dsub+0x9c>
    7d34:	4cca      	ldr	r4, [pc, #808]	; (8060 <__aeabi_dsub+0x6ec>)
    7d36:	1c72      	adds	r2, r6, #1
    7d38:	4222      	tst	r2, r4
    7d3a:	d000      	beq.n	7d3e <__aeabi_dsub+0x3ca>
    7d3c:	e0ad      	b.n	7e9a <__aeabi_dsub+0x526>
    7d3e:	464a      	mov	r2, r9
    7d40:	431a      	orrs	r2, r3
    7d42:	2e00      	cmp	r6, #0
    7d44:	d1b8      	bne.n	7cb8 <__aeabi_dsub+0x344>
    7d46:	2a00      	cmp	r2, #0
    7d48:	d100      	bne.n	7d4c <__aeabi_dsub+0x3d8>
    7d4a:	e158      	b.n	7ffe <__aeabi_dsub+0x68a>
    7d4c:	000a      	movs	r2, r1
    7d4e:	4302      	orrs	r2, r0
    7d50:	d000      	beq.n	7d54 <__aeabi_dsub+0x3e0>
    7d52:	e159      	b.n	8008 <__aeabi_dsub+0x694>
    7d54:	464a      	mov	r2, r9
    7d56:	0759      	lsls	r1, r3, #29
    7d58:	08d2      	lsrs	r2, r2, #3
    7d5a:	430a      	orrs	r2, r1
    7d5c:	08db      	lsrs	r3, r3, #3
    7d5e:	e786      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7d60:	464a      	mov	r2, r9
    7d62:	0759      	lsls	r1, r3, #29
    7d64:	08d2      	lsrs	r2, r2, #3
    7d66:	430a      	orrs	r2, r1
    7d68:	08db      	lsrs	r3, r3, #3
    7d6a:	e7c1      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7d6c:	4dba      	ldr	r5, [pc, #744]	; (8058 <__aeabi_dsub+0x6e4>)
    7d6e:	42aa      	cmp	r2, r5
    7d70:	d100      	bne.n	7d74 <__aeabi_dsub+0x400>
    7d72:	e11e      	b.n	7fb2 <__aeabi_dsub+0x63e>
    7d74:	2580      	movs	r5, #128	; 0x80
    7d76:	042d      	lsls	r5, r5, #16
    7d78:	432b      	orrs	r3, r5
    7d7a:	4664      	mov	r4, ip
    7d7c:	2c38      	cmp	r4, #56	; 0x38
    7d7e:	dc5d      	bgt.n	7e3c <__aeabi_dsub+0x4c8>
    7d80:	2c1f      	cmp	r4, #31
    7d82:	dd00      	ble.n	7d86 <__aeabi_dsub+0x412>
    7d84:	e0d0      	b.n	7f28 <__aeabi_dsub+0x5b4>
    7d86:	2520      	movs	r5, #32
    7d88:	4667      	mov	r7, ip
    7d8a:	1b2d      	subs	r5, r5, r4
    7d8c:	464e      	mov	r6, r9
    7d8e:	001c      	movs	r4, r3
    7d90:	40fe      	lsrs	r6, r7
    7d92:	40ac      	lsls	r4, r5
    7d94:	4334      	orrs	r4, r6
    7d96:	464e      	mov	r6, r9
    7d98:	40ae      	lsls	r6, r5
    7d9a:	0035      	movs	r5, r6
    7d9c:	40fb      	lsrs	r3, r7
    7d9e:	1e6e      	subs	r6, r5, #1
    7da0:	41b5      	sbcs	r5, r6
    7da2:	1ac9      	subs	r1, r1, r3
    7da4:	432c      	orrs	r4, r5
    7da6:	e04e      	b.n	7e46 <__aeabi_dsub+0x4d2>
    7da8:	464a      	mov	r2, r9
    7daa:	1a14      	subs	r4, r2, r0
    7dac:	45a1      	cmp	r9, r4
    7dae:	4192      	sbcs	r2, r2
    7db0:	4252      	negs	r2, r2
    7db2:	4690      	mov	r8, r2
    7db4:	1a5f      	subs	r7, r3, r1
    7db6:	003a      	movs	r2, r7
    7db8:	4647      	mov	r7, r8
    7dba:	1bd2      	subs	r2, r2, r7
    7dbc:	4690      	mov	r8, r2
    7dbe:	0212      	lsls	r2, r2, #8
    7dc0:	d500      	bpl.n	7dc4 <__aeabi_dsub+0x450>
    7dc2:	e08b      	b.n	7edc <__aeabi_dsub+0x568>
    7dc4:	4642      	mov	r2, r8
    7dc6:	4322      	orrs	r2, r4
    7dc8:	d000      	beq.n	7dcc <__aeabi_dsub+0x458>
    7dca:	e630      	b.n	7a2e <__aeabi_dsub+0xba>
    7dcc:	2300      	movs	r3, #0
    7dce:	2500      	movs	r5, #0
    7dd0:	e74d      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7dd2:	464a      	mov	r2, r9
    7dd4:	0759      	lsls	r1, r3, #29
    7dd6:	08d2      	lsrs	r2, r2, #3
    7dd8:	430a      	orrs	r2, r1
    7dda:	08db      	lsrs	r3, r3, #3
    7ddc:	e744      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7dde:	4642      	mov	r2, r8
    7de0:	4b9e      	ldr	r3, [pc, #632]	; (805c <__aeabi_dsub+0x6e8>)
    7de2:	0861      	lsrs	r1, r4, #1
    7de4:	401a      	ands	r2, r3
    7de6:	0013      	movs	r3, r2
    7de8:	2201      	movs	r2, #1
    7dea:	4014      	ands	r4, r2
    7dec:	430c      	orrs	r4, r1
    7dee:	07da      	lsls	r2, r3, #31
    7df0:	085b      	lsrs	r3, r3, #1
    7df2:	4698      	mov	r8, r3
    7df4:	4314      	orrs	r4, r2
    7df6:	e641      	b.n	7a7c <__aeabi_dsub+0x108>
    7df8:	001a      	movs	r2, r3
    7dfa:	3e1f      	subs	r6, #31
    7dfc:	40f2      	lsrs	r2, r6
    7dfe:	0016      	movs	r6, r2
    7e00:	2920      	cmp	r1, #32
    7e02:	d003      	beq.n	7e0c <__aeabi_dsub+0x498>
    7e04:	2240      	movs	r2, #64	; 0x40
    7e06:	1a51      	subs	r1, r2, r1
    7e08:	408b      	lsls	r3, r1
    7e0a:	431c      	orrs	r4, r3
    7e0c:	1e62      	subs	r2, r4, #1
    7e0e:	4194      	sbcs	r4, r2
    7e10:	2300      	movs	r3, #0
    7e12:	4334      	orrs	r4, r6
    7e14:	4698      	mov	r8, r3
    7e16:	2600      	movs	r6, #0
    7e18:	e71d      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7e1a:	000c      	movs	r4, r1
    7e1c:	3a20      	subs	r2, #32
    7e1e:	40d4      	lsrs	r4, r2
    7e20:	0022      	movs	r2, r4
    7e22:	4664      	mov	r4, ip
    7e24:	2c20      	cmp	r4, #32
    7e26:	d004      	beq.n	7e32 <__aeabi_dsub+0x4be>
    7e28:	2740      	movs	r7, #64	; 0x40
    7e2a:	1b3f      	subs	r7, r7, r4
    7e2c:	40b9      	lsls	r1, r7
    7e2e:	4308      	orrs	r0, r1
    7e30:	4680      	mov	r8, r0
    7e32:	4644      	mov	r4, r8
    7e34:	1e61      	subs	r1, r4, #1
    7e36:	418c      	sbcs	r4, r1
    7e38:	4322      	orrs	r2, r4
    7e3a:	e5e9      	b.n	7a10 <__aeabi_dsub+0x9c>
    7e3c:	464c      	mov	r4, r9
    7e3e:	4323      	orrs	r3, r4
    7e40:	001c      	movs	r4, r3
    7e42:	1e63      	subs	r3, r4, #1
    7e44:	419c      	sbcs	r4, r3
    7e46:	1b04      	subs	r4, r0, r4
    7e48:	42a0      	cmp	r0, r4
    7e4a:	419b      	sbcs	r3, r3
    7e4c:	425b      	negs	r3, r3
    7e4e:	1acb      	subs	r3, r1, r3
    7e50:	4698      	mov	r8, r3
    7e52:	465d      	mov	r5, fp
    7e54:	0016      	movs	r6, r2
    7e56:	e5e2      	b.n	7a1e <__aeabi_dsub+0xaa>
    7e58:	464e      	mov	r6, r9
    7e5a:	431e      	orrs	r6, r3
    7e5c:	d100      	bne.n	7e60 <__aeabi_dsub+0x4ec>
    7e5e:	e0ae      	b.n	7fbe <__aeabi_dsub+0x64a>
    7e60:	1e66      	subs	r6, r4, #1
    7e62:	2c01      	cmp	r4, #1
    7e64:	d100      	bne.n	7e68 <__aeabi_dsub+0x4f4>
    7e66:	e0fd      	b.n	8064 <__aeabi_dsub+0x6f0>
    7e68:	4f7b      	ldr	r7, [pc, #492]	; (8058 <__aeabi_dsub+0x6e4>)
    7e6a:	42bc      	cmp	r4, r7
    7e6c:	d100      	bne.n	7e70 <__aeabi_dsub+0x4fc>
    7e6e:	e107      	b.n	8080 <__aeabi_dsub+0x70c>
    7e70:	46b4      	mov	ip, r6
    7e72:	e69b      	b.n	7bac <__aeabi_dsub+0x238>
    7e74:	4664      	mov	r4, ip
    7e76:	2220      	movs	r2, #32
    7e78:	1b12      	subs	r2, r2, r4
    7e7a:	000c      	movs	r4, r1
    7e7c:	4094      	lsls	r4, r2
    7e7e:	0007      	movs	r7, r0
    7e80:	4090      	lsls	r0, r2
    7e82:	46a0      	mov	r8, r4
    7e84:	4664      	mov	r4, ip
    7e86:	1e42      	subs	r2, r0, #1
    7e88:	4190      	sbcs	r0, r2
    7e8a:	4662      	mov	r2, ip
    7e8c:	40e7      	lsrs	r7, r4
    7e8e:	4644      	mov	r4, r8
    7e90:	40d1      	lsrs	r1, r2
    7e92:	433c      	orrs	r4, r7
    7e94:	4304      	orrs	r4, r0
    7e96:	185b      	adds	r3, r3, r1
    7e98:	e6f3      	b.n	7c82 <__aeabi_dsub+0x30e>
    7e9a:	4c6f      	ldr	r4, [pc, #444]	; (8058 <__aeabi_dsub+0x6e4>)
    7e9c:	42a2      	cmp	r2, r4
    7e9e:	d100      	bne.n	7ea2 <__aeabi_dsub+0x52e>
    7ea0:	e0d5      	b.n	804e <__aeabi_dsub+0x6da>
    7ea2:	4448      	add	r0, r9
    7ea4:	185b      	adds	r3, r3, r1
    7ea6:	4548      	cmp	r0, r9
    7ea8:	4189      	sbcs	r1, r1
    7eaa:	4249      	negs	r1, r1
    7eac:	185b      	adds	r3, r3, r1
    7eae:	07dc      	lsls	r4, r3, #31
    7eb0:	0840      	lsrs	r0, r0, #1
    7eb2:	085b      	lsrs	r3, r3, #1
    7eb4:	4698      	mov	r8, r3
    7eb6:	0016      	movs	r6, r2
    7eb8:	4304      	orrs	r4, r0
    7eba:	e6cc      	b.n	7c56 <__aeabi_dsub+0x2e2>
    7ebc:	2a00      	cmp	r2, #0
    7ebe:	d000      	beq.n	7ec2 <__aeabi_dsub+0x54e>
    7ec0:	e082      	b.n	7fc8 <__aeabi_dsub+0x654>
    7ec2:	000a      	movs	r2, r1
    7ec4:	4302      	orrs	r2, r0
    7ec6:	d140      	bne.n	7f4a <__aeabi_dsub+0x5d6>
    7ec8:	2380      	movs	r3, #128	; 0x80
    7eca:	2500      	movs	r5, #0
    7ecc:	031b      	lsls	r3, r3, #12
    7ece:	e713      	b.n	7cf8 <__aeabi_dsub+0x384>
    7ed0:	074b      	lsls	r3, r1, #29
    7ed2:	08c2      	lsrs	r2, r0, #3
    7ed4:	431a      	orrs	r2, r3
    7ed6:	465d      	mov	r5, fp
    7ed8:	08cb      	lsrs	r3, r1, #3
    7eda:	e6c5      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7edc:	464a      	mov	r2, r9
    7ede:	1a84      	subs	r4, r0, r2
    7ee0:	42a0      	cmp	r0, r4
    7ee2:	4192      	sbcs	r2, r2
    7ee4:	1acb      	subs	r3, r1, r3
    7ee6:	4252      	negs	r2, r2
    7ee8:	1a9b      	subs	r3, r3, r2
    7eea:	4698      	mov	r8, r3
    7eec:	465d      	mov	r5, fp
    7eee:	e59e      	b.n	7a2e <__aeabi_dsub+0xba>
    7ef0:	464a      	mov	r2, r9
    7ef2:	0759      	lsls	r1, r3, #29
    7ef4:	08d2      	lsrs	r2, r2, #3
    7ef6:	430a      	orrs	r2, r1
    7ef8:	08db      	lsrs	r3, r3, #3
    7efa:	e6f9      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7efc:	464a      	mov	r2, r9
    7efe:	1a14      	subs	r4, r2, r0
    7f00:	45a1      	cmp	r9, r4
    7f02:	4192      	sbcs	r2, r2
    7f04:	1a5b      	subs	r3, r3, r1
    7f06:	4252      	negs	r2, r2
    7f08:	1a9b      	subs	r3, r3, r2
    7f0a:	4698      	mov	r8, r3
    7f0c:	2601      	movs	r6, #1
    7f0e:	e586      	b.n	7a1e <__aeabi_dsub+0xaa>
    7f10:	464a      	mov	r2, r9
    7f12:	0759      	lsls	r1, r3, #29
    7f14:	08d2      	lsrs	r2, r2, #3
    7f16:	430a      	orrs	r2, r1
    7f18:	08db      	lsrs	r3, r3, #3
    7f1a:	e6a5      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7f1c:	464c      	mov	r4, r9
    7f1e:	4323      	orrs	r3, r4
    7f20:	001c      	movs	r4, r3
    7f22:	1e63      	subs	r3, r4, #1
    7f24:	419c      	sbcs	r4, r3
    7f26:	e65b      	b.n	7be0 <__aeabi_dsub+0x26c>
    7f28:	4665      	mov	r5, ip
    7f2a:	001e      	movs	r6, r3
    7f2c:	3d20      	subs	r5, #32
    7f2e:	40ee      	lsrs	r6, r5
    7f30:	2c20      	cmp	r4, #32
    7f32:	d005      	beq.n	7f40 <__aeabi_dsub+0x5cc>
    7f34:	2540      	movs	r5, #64	; 0x40
    7f36:	1b2d      	subs	r5, r5, r4
    7f38:	40ab      	lsls	r3, r5
    7f3a:	464c      	mov	r4, r9
    7f3c:	431c      	orrs	r4, r3
    7f3e:	46a2      	mov	sl, r4
    7f40:	4654      	mov	r4, sl
    7f42:	1e63      	subs	r3, r4, #1
    7f44:	419c      	sbcs	r4, r3
    7f46:	4334      	orrs	r4, r6
    7f48:	e77d      	b.n	7e46 <__aeabi_dsub+0x4d2>
    7f4a:	074b      	lsls	r3, r1, #29
    7f4c:	08c2      	lsrs	r2, r0, #3
    7f4e:	431a      	orrs	r2, r3
    7f50:	465d      	mov	r5, fp
    7f52:	08cb      	lsrs	r3, r1, #3
    7f54:	e6cc      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7f56:	000a      	movs	r2, r1
    7f58:	4302      	orrs	r2, r0
    7f5a:	d100      	bne.n	7f5e <__aeabi_dsub+0x5ea>
    7f5c:	e736      	b.n	7dcc <__aeabi_dsub+0x458>
    7f5e:	074b      	lsls	r3, r1, #29
    7f60:	08c2      	lsrs	r2, r0, #3
    7f62:	431a      	orrs	r2, r3
    7f64:	465d      	mov	r5, fp
    7f66:	08cb      	lsrs	r3, r1, #3
    7f68:	e681      	b.n	7c6e <__aeabi_dsub+0x2fa>
    7f6a:	464a      	mov	r2, r9
    7f6c:	1a84      	subs	r4, r0, r2
    7f6e:	42a0      	cmp	r0, r4
    7f70:	4192      	sbcs	r2, r2
    7f72:	1acb      	subs	r3, r1, r3
    7f74:	4252      	negs	r2, r2
    7f76:	1a9b      	subs	r3, r3, r2
    7f78:	4698      	mov	r8, r3
    7f7a:	465d      	mov	r5, fp
    7f7c:	2601      	movs	r6, #1
    7f7e:	e54e      	b.n	7a1e <__aeabi_dsub+0xaa>
    7f80:	074b      	lsls	r3, r1, #29
    7f82:	08c2      	lsrs	r2, r0, #3
    7f84:	431a      	orrs	r2, r3
    7f86:	08cb      	lsrs	r3, r1, #3
    7f88:	e6b2      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7f8a:	464a      	mov	r2, r9
    7f8c:	1a14      	subs	r4, r2, r0
    7f8e:	45a1      	cmp	r9, r4
    7f90:	4192      	sbcs	r2, r2
    7f92:	1a5f      	subs	r7, r3, r1
    7f94:	4252      	negs	r2, r2
    7f96:	1aba      	subs	r2, r7, r2
    7f98:	4690      	mov	r8, r2
    7f9a:	0212      	lsls	r2, r2, #8
    7f9c:	d56b      	bpl.n	8076 <__aeabi_dsub+0x702>
    7f9e:	464a      	mov	r2, r9
    7fa0:	1a84      	subs	r4, r0, r2
    7fa2:	42a0      	cmp	r0, r4
    7fa4:	4192      	sbcs	r2, r2
    7fa6:	1acb      	subs	r3, r1, r3
    7fa8:	4252      	negs	r2, r2
    7faa:	1a9b      	subs	r3, r3, r2
    7fac:	4698      	mov	r8, r3
    7fae:	465d      	mov	r5, fp
    7fb0:	e564      	b.n	7a7c <__aeabi_dsub+0x108>
    7fb2:	074b      	lsls	r3, r1, #29
    7fb4:	08c2      	lsrs	r2, r0, #3
    7fb6:	431a      	orrs	r2, r3
    7fb8:	465d      	mov	r5, fp
    7fba:	08cb      	lsrs	r3, r1, #3
    7fbc:	e698      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7fbe:	074b      	lsls	r3, r1, #29
    7fc0:	08c2      	lsrs	r2, r0, #3
    7fc2:	431a      	orrs	r2, r3
    7fc4:	08cb      	lsrs	r3, r1, #3
    7fc6:	e64f      	b.n	7c68 <__aeabi_dsub+0x2f4>
    7fc8:	000a      	movs	r2, r1
    7fca:	4302      	orrs	r2, r0
    7fcc:	d090      	beq.n	7ef0 <__aeabi_dsub+0x57c>
    7fce:	464a      	mov	r2, r9
    7fd0:	075c      	lsls	r4, r3, #29
    7fd2:	08d2      	lsrs	r2, r2, #3
    7fd4:	4314      	orrs	r4, r2
    7fd6:	2280      	movs	r2, #128	; 0x80
    7fd8:	08db      	lsrs	r3, r3, #3
    7fda:	0312      	lsls	r2, r2, #12
    7fdc:	4213      	tst	r3, r2
    7fde:	d008      	beq.n	7ff2 <__aeabi_dsub+0x67e>
    7fe0:	08ce      	lsrs	r6, r1, #3
    7fe2:	4216      	tst	r6, r2
    7fe4:	d105      	bne.n	7ff2 <__aeabi_dsub+0x67e>
    7fe6:	08c0      	lsrs	r0, r0, #3
    7fe8:	0749      	lsls	r1, r1, #29
    7fea:	4308      	orrs	r0, r1
    7fec:	0004      	movs	r4, r0
    7fee:	465d      	mov	r5, fp
    7ff0:	0033      	movs	r3, r6
    7ff2:	0f61      	lsrs	r1, r4, #29
    7ff4:	00e2      	lsls	r2, r4, #3
    7ff6:	0749      	lsls	r1, r1, #29
    7ff8:	08d2      	lsrs	r2, r2, #3
    7ffa:	430a      	orrs	r2, r1
    7ffc:	e678      	b.n	7cf0 <__aeabi_dsub+0x37c>
    7ffe:	074b      	lsls	r3, r1, #29
    8000:	08c2      	lsrs	r2, r0, #3
    8002:	431a      	orrs	r2, r3
    8004:	08cb      	lsrs	r3, r1, #3
    8006:	e632      	b.n	7c6e <__aeabi_dsub+0x2fa>
    8008:	4448      	add	r0, r9
    800a:	185b      	adds	r3, r3, r1
    800c:	4548      	cmp	r0, r9
    800e:	4192      	sbcs	r2, r2
    8010:	4698      	mov	r8, r3
    8012:	4252      	negs	r2, r2
    8014:	4490      	add	r8, r2
    8016:	4643      	mov	r3, r8
    8018:	0004      	movs	r4, r0
    801a:	021b      	lsls	r3, r3, #8
    801c:	d400      	bmi.n	8020 <__aeabi_dsub+0x6ac>
    801e:	e61a      	b.n	7c56 <__aeabi_dsub+0x2e2>
    8020:	4642      	mov	r2, r8
    8022:	4b0e      	ldr	r3, [pc, #56]	; (805c <__aeabi_dsub+0x6e8>)
    8024:	2601      	movs	r6, #1
    8026:	401a      	ands	r2, r3
    8028:	4690      	mov	r8, r2
    802a:	e614      	b.n	7c56 <__aeabi_dsub+0x2e2>
    802c:	4666      	mov	r6, ip
    802e:	001f      	movs	r7, r3
    8030:	3e20      	subs	r6, #32
    8032:	40f7      	lsrs	r7, r6
    8034:	2c20      	cmp	r4, #32
    8036:	d005      	beq.n	8044 <__aeabi_dsub+0x6d0>
    8038:	2640      	movs	r6, #64	; 0x40
    803a:	1b36      	subs	r6, r6, r4
    803c:	40b3      	lsls	r3, r6
    803e:	464c      	mov	r4, r9
    8040:	431c      	orrs	r4, r3
    8042:	46a2      	mov	sl, r4
    8044:	4654      	mov	r4, sl
    8046:	1e63      	subs	r3, r4, #1
    8048:	419c      	sbcs	r4, r3
    804a:	433c      	orrs	r4, r7
    804c:	e5c8      	b.n	7be0 <__aeabi_dsub+0x26c>
    804e:	0011      	movs	r1, r2
    8050:	2300      	movs	r3, #0
    8052:	2200      	movs	r2, #0
    8054:	e532      	b.n	7abc <__aeabi_dsub+0x148>
    8056:	46c0      	nop			; (mov r8, r8)
    8058:	000007ff 	.word	0x000007ff
    805c:	ff7fffff 	.word	0xff7fffff
    8060:	000007fe 	.word	0x000007fe
    8064:	464a      	mov	r2, r9
    8066:	1814      	adds	r4, r2, r0
    8068:	4284      	cmp	r4, r0
    806a:	4192      	sbcs	r2, r2
    806c:	185b      	adds	r3, r3, r1
    806e:	4698      	mov	r8, r3
    8070:	4252      	negs	r2, r2
    8072:	4490      	add	r8, r2
    8074:	e5e9      	b.n	7c4a <__aeabi_dsub+0x2d6>
    8076:	4642      	mov	r2, r8
    8078:	4322      	orrs	r2, r4
    807a:	d100      	bne.n	807e <__aeabi_dsub+0x70a>
    807c:	e6a6      	b.n	7dcc <__aeabi_dsub+0x458>
    807e:	e5ea      	b.n	7c56 <__aeabi_dsub+0x2e2>
    8080:	074b      	lsls	r3, r1, #29
    8082:	08c2      	lsrs	r2, r0, #3
    8084:	431a      	orrs	r2, r3
    8086:	08cb      	lsrs	r3, r1, #3
    8088:	e632      	b.n	7cf0 <__aeabi_dsub+0x37c>
    808a:	2200      	movs	r2, #0
    808c:	4901      	ldr	r1, [pc, #4]	; (8094 <__aeabi_dsub+0x720>)
    808e:	0013      	movs	r3, r2
    8090:	e514      	b.n	7abc <__aeabi_dsub+0x148>
    8092:	46c0      	nop			; (mov r8, r8)
    8094:	000007ff 	.word	0x000007ff

00008098 <__aeabi_d2iz>:
__aeabi_d2iz():
    8098:	000a      	movs	r2, r1
    809a:	b530      	push	{r4, r5, lr}
    809c:	4c13      	ldr	r4, [pc, #76]	; (80ec <__aeabi_d2iz+0x54>)
    809e:	0053      	lsls	r3, r2, #1
    80a0:	0309      	lsls	r1, r1, #12
    80a2:	0005      	movs	r5, r0
    80a4:	0b09      	lsrs	r1, r1, #12
    80a6:	2000      	movs	r0, #0
    80a8:	0d5b      	lsrs	r3, r3, #21
    80aa:	0fd2      	lsrs	r2, r2, #31
    80ac:	42a3      	cmp	r3, r4
    80ae:	dd04      	ble.n	80ba <__aeabi_d2iz+0x22>
    80b0:	480f      	ldr	r0, [pc, #60]	; (80f0 <__aeabi_d2iz+0x58>)
    80b2:	4283      	cmp	r3, r0
    80b4:	dd02      	ble.n	80bc <__aeabi_d2iz+0x24>
    80b6:	4b0f      	ldr	r3, [pc, #60]	; (80f4 <__aeabi_d2iz+0x5c>)
    80b8:	18d0      	adds	r0, r2, r3
    80ba:	bd30      	pop	{r4, r5, pc}
    80bc:	2080      	movs	r0, #128	; 0x80
    80be:	0340      	lsls	r0, r0, #13
    80c0:	4301      	orrs	r1, r0
    80c2:	480d      	ldr	r0, [pc, #52]	; (80f8 <__aeabi_d2iz+0x60>)
    80c4:	1ac0      	subs	r0, r0, r3
    80c6:	281f      	cmp	r0, #31
    80c8:	dd08      	ble.n	80dc <__aeabi_d2iz+0x44>
    80ca:	480c      	ldr	r0, [pc, #48]	; (80fc <__aeabi_d2iz+0x64>)
    80cc:	1ac3      	subs	r3, r0, r3
    80ce:	40d9      	lsrs	r1, r3
    80d0:	000b      	movs	r3, r1
    80d2:	4258      	negs	r0, r3
    80d4:	2a00      	cmp	r2, #0
    80d6:	d1f0      	bne.n	80ba <__aeabi_d2iz+0x22>
    80d8:	0018      	movs	r0, r3
    80da:	e7ee      	b.n	80ba <__aeabi_d2iz+0x22>
    80dc:	4c08      	ldr	r4, [pc, #32]	; (8100 <__aeabi_d2iz+0x68>)
    80de:	40c5      	lsrs	r5, r0
    80e0:	46a4      	mov	ip, r4
    80e2:	4463      	add	r3, ip
    80e4:	4099      	lsls	r1, r3
    80e6:	000b      	movs	r3, r1
    80e8:	432b      	orrs	r3, r5
    80ea:	e7f2      	b.n	80d2 <__aeabi_d2iz+0x3a>
    80ec:	000003fe 	.word	0x000003fe
    80f0:	0000041d 	.word	0x0000041d
    80f4:	7fffffff 	.word	0x7fffffff
    80f8:	00000433 	.word	0x00000433
    80fc:	00000413 	.word	0x00000413
    8100:	fffffbed 	.word	0xfffffbed

00008104 <__aeabi_ui2d>:
__aeabi_ui2d():
    8104:	b510      	push	{r4, lr}
    8106:	1e04      	subs	r4, r0, #0
    8108:	d010      	beq.n	812c <__aeabi_ui2d+0x28>
    810a:	f000 f821 	bl	8150 <__clzsi2>
    810e:	4b0f      	ldr	r3, [pc, #60]	; (814c <__aeabi_ui2d+0x48>)
    8110:	1a1b      	subs	r3, r3, r0
    8112:	280a      	cmp	r0, #10
    8114:	dc11      	bgt.n	813a <__aeabi_ui2d+0x36>
    8116:	220b      	movs	r2, #11
    8118:	0021      	movs	r1, r4
    811a:	1a12      	subs	r2, r2, r0
    811c:	40d1      	lsrs	r1, r2
    811e:	3015      	adds	r0, #21
    8120:	030a      	lsls	r2, r1, #12
    8122:	055b      	lsls	r3, r3, #21
    8124:	4084      	lsls	r4, r0
    8126:	0b12      	lsrs	r2, r2, #12
    8128:	0d5b      	lsrs	r3, r3, #21
    812a:	e001      	b.n	8130 <__aeabi_ui2d+0x2c>
    812c:	2300      	movs	r3, #0
    812e:	2200      	movs	r2, #0
    8130:	051b      	lsls	r3, r3, #20
    8132:	4313      	orrs	r3, r2
    8134:	0020      	movs	r0, r4
    8136:	0019      	movs	r1, r3
    8138:	bd10      	pop	{r4, pc}
    813a:	0022      	movs	r2, r4
    813c:	380b      	subs	r0, #11
    813e:	4082      	lsls	r2, r0
    8140:	055b      	lsls	r3, r3, #21
    8142:	0312      	lsls	r2, r2, #12
    8144:	2400      	movs	r4, #0
    8146:	0b12      	lsrs	r2, r2, #12
    8148:	0d5b      	lsrs	r3, r3, #21
    814a:	e7f1      	b.n	8130 <__aeabi_ui2d+0x2c>
    814c:	0000041e 	.word	0x0000041e

00008150 <__clzsi2>:
__clzsi2():
    8150:	211c      	movs	r1, #28
    8152:	2301      	movs	r3, #1
    8154:	041b      	lsls	r3, r3, #16
    8156:	4298      	cmp	r0, r3
    8158:	d301      	bcc.n	815e <__clzsi2+0xe>
    815a:	0c00      	lsrs	r0, r0, #16
    815c:	3910      	subs	r1, #16
    815e:	0a1b      	lsrs	r3, r3, #8
    8160:	4298      	cmp	r0, r3
    8162:	d301      	bcc.n	8168 <__clzsi2+0x18>
    8164:	0a00      	lsrs	r0, r0, #8
    8166:	3908      	subs	r1, #8
    8168:	091b      	lsrs	r3, r3, #4
    816a:	4298      	cmp	r0, r3
    816c:	d301      	bcc.n	8172 <__clzsi2+0x22>
    816e:	0900      	lsrs	r0, r0, #4
    8170:	3904      	subs	r1, #4
    8172:	a202      	add	r2, pc, #8	; (adr r2, 817c <__clzsi2+0x2c>)
    8174:	5c10      	ldrb	r0, [r2, r0]
    8176:	1840      	adds	r0, r0, r1
    8178:	4770      	bx	lr
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	02020304 	.word	0x02020304
    8180:	01010101 	.word	0x01010101
	...

0000818c <__clzdi2>:
__clzdi2():
    818c:	b510      	push	{r4, lr}
    818e:	2900      	cmp	r1, #0
    8190:	d103      	bne.n	819a <__clzdi2+0xe>
    8192:	f7ff ffdd 	bl	8150 <__clzsi2>
    8196:	3020      	adds	r0, #32
    8198:	e002      	b.n	81a0 <__clzdi2+0x14>
    819a:	1c08      	adds	r0, r1, #0
    819c:	f7ff ffd8 	bl	8150 <__clzsi2>
    81a0:	bd10      	pop	{r4, pc}
    81a2:	46c0      	nop			; (mov r8, r8)

000081a4 <strlen>:
strlen():
    81a4:	2300      	movs	r3, #0
    81a6:	5cc2      	ldrb	r2, [r0, r3]
    81a8:	3301      	adds	r3, #1
    81aa:	2a00      	cmp	r2, #0
    81ac:	d1fb      	bne.n	81a6 <strlen+0x2>
    81ae:	1e58      	subs	r0, r3, #1
    81b0:	4770      	bx	lr
	...

000081b4 <NVIC_EnableIRQ>:
NVIC_EnableIRQ():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:684
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    81b4:	b082      	sub	sp, #8
    81b6:	0002      	movs	r2, r0
    81b8:	466b      	mov	r3, sp
    81ba:	3307      	adds	r3, #7
    81bc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:685
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    81be:	466b      	mov	r3, sp
    81c0:	3307      	adds	r3, #7
    81c2:	781b      	ldrb	r3, [r3, #0]
    81c4:	001a      	movs	r2, r3
    81c6:	231f      	movs	r3, #31
    81c8:	401a      	ands	r2, r3
    81ca:	4b04      	ldr	r3, [pc, #16]	; (81dc <NVIC_EnableIRQ+0x28>)
    81cc:	2101      	movs	r1, #1
    81ce:	4091      	lsls	r1, r2
    81d0:	000a      	movs	r2, r1
    81d2:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:686
}
    81d4:	46c0      	nop			; (mov r8, r8)
    81d6:	b002      	add	sp, #8
    81d8:	4770      	bx	lr
    81da:	46c0      	nop			; (mov r8, r8)
    81dc:	e000e100 	.word	0xe000e100

000081e0 <NVIC_DisableIRQ>:
NVIC_DisableIRQ():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:696
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    81e0:	b082      	sub	sp, #8
    81e2:	0002      	movs	r2, r0
    81e4:	466b      	mov	r3, sp
    81e6:	3307      	adds	r3, #7
    81e8:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:697
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    81ea:	466b      	mov	r3, sp
    81ec:	3307      	adds	r3, #7
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	001a      	movs	r2, r3
    81f2:	231f      	movs	r3, #31
    81f4:	4013      	ands	r3, r2
    81f6:	4904      	ldr	r1, [pc, #16]	; (8208 <NVIC_DisableIRQ+0x28>)
    81f8:	2201      	movs	r2, #1
    81fa:	409a      	lsls	r2, r3
    81fc:	0013      	movs	r3, r2
    81fe:	2280      	movs	r2, #128	; 0x80
    8200:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:698
}
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	b002      	add	sp, #8
    8206:	4770      	bx	lr
    8208:	e000e100 	.word	0xe000e100

0000820c <i2c_init>:
i2c_init():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:24
//         address：本模块初始化地址    范围(1~255)
//         BaudRate：为波特率，其单位为Kb/s，其取值为25,50,75,100K
//函数返回：无
//=====================================================================
void i2c_init(uint8_t No, uint8_t Mode, uint8_t address, uint8_t BaudRate)
{
    820c:	b530      	push	{r4, r5, lr}
    820e:	b085      	sub	sp, #20
    8210:	0005      	movs	r5, r0
    8212:	000c      	movs	r4, r1
    8214:	0010      	movs	r0, r2
    8216:	0019      	movs	r1, r3
    8218:	466b      	mov	r3, sp
    821a:	3307      	adds	r3, #7
    821c:	1c2a      	adds	r2, r5, #0
    821e:	701a      	strb	r2, [r3, #0]
    8220:	466b      	mov	r3, sp
    8222:	3306      	adds	r3, #6
    8224:	1c22      	adds	r2, r4, #0
    8226:	701a      	strb	r2, [r3, #0]
    8228:	466b      	mov	r3, sp
    822a:	3305      	adds	r3, #5
    822c:	1c02      	adds	r2, r0, #0
    822e:	701a      	strb	r2, [r3, #0]
    8230:	ab01      	add	r3, sp, #4
    8232:	1c0a      	adds	r2, r1, #0
    8234:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:25
	ModeSelect = Mode;
    8236:	4b4b      	ldr	r3, [pc, #300]	; (8364 <i2c_init+0x158>)
    8238:	466a      	mov	r2, sp
    823a:	3206      	adds	r2, #6
    823c:	7812      	ldrb	r2, [r2, #0]
    823e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:26
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    8240:	466b      	mov	r3, sp
    8242:	3307      	adds	r3, #7
    8244:	781a      	ldrb	r2, [r3, #0]
    8246:	4b48      	ldr	r3, [pc, #288]	; (8368 <i2c_init+0x15c>)
    8248:	0092      	lsls	r2, r2, #2
    824a:	58d3      	ldr	r3, [r2, r3]
    824c:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:27
	if (No == 0)
    824e:	466b      	mov	r3, sp
    8250:	3307      	adds	r3, #7
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	2b00      	cmp	r3, #0
    8256:	d110      	bne.n	827a <i2c_init+0x6e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:29
	{
		BSET(SIM_SCGC4_I2C0_SHIFT, SIM_SCGC4); //开时钟门
    8258:	4a44      	ldr	r2, [pc, #272]	; (836c <i2c_init+0x160>)
    825a:	4b45      	ldr	r3, [pc, #276]	; (8370 <i2c_init+0x164>)
    825c:	58d3      	ldr	r3, [r2, r3]
    825e:	4943      	ldr	r1, [pc, #268]	; (836c <i2c_init+0x160>)
    8260:	2240      	movs	r2, #64	; 0x40
    8262:	4313      	orrs	r3, r2
    8264:	4a42      	ldr	r2, [pc, #264]	; (8370 <i2c_init+0x164>)
    8266:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:30
		PORTB_PCR2 = PORT_PCR_MUX(0x2);      //使能IIC0_SCL
    8268:	4b42      	ldr	r3, [pc, #264]	; (8374 <i2c_init+0x168>)
    826a:	2280      	movs	r2, #128	; 0x80
    826c:	0092      	lsls	r2, r2, #2
    826e:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:31
		PORTB_PCR3 = PORT_PCR_MUX(0x2);      //使能IIC0_SDA
    8270:	4b40      	ldr	r3, [pc, #256]	; (8374 <i2c_init+0x168>)
    8272:	2280      	movs	r2, #128	; 0x80
    8274:	0092      	lsls	r2, r2, #2
    8276:	60da      	str	r2, [r3, #12]
    8278:	e00f      	b.n	829a <i2c_init+0x8e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:35
	}
	else
	{
		BSET(SIM_SCGC4_I2C1_SHIFT, SIM_SCGC4); //开时钟门
    827a:	4a3c      	ldr	r2, [pc, #240]	; (836c <i2c_init+0x160>)
    827c:	4b3c      	ldr	r3, [pc, #240]	; (8370 <i2c_init+0x164>)
    827e:	58d3      	ldr	r3, [r2, r3]
    8280:	493a      	ldr	r1, [pc, #232]	; (836c <i2c_init+0x160>)
    8282:	2280      	movs	r2, #128	; 0x80
    8284:	4313      	orrs	r3, r2
    8286:	4a3a      	ldr	r2, [pc, #232]	; (8370 <i2c_init+0x164>)
    8288:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:36
		PORTC_PCR1 = PORT_PCR_MUX(0x2);      //使能IIC1_SCL
    828a:	4b3b      	ldr	r3, [pc, #236]	; (8378 <i2c_init+0x16c>)
    828c:	2280      	movs	r2, #128	; 0x80
    828e:	0092      	lsls	r2, r2, #2
    8290:	605a      	str	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:37
		PORTC_PCR2 = PORT_PCR_MUX(0x2);      //使能IIC1_SDA
    8292:	4b39      	ldr	r3, [pc, #228]	; (8378 <i2c_init+0x16c>)
    8294:	2280      	movs	r2, #128	; 0x80
    8296:	0092      	lsls	r2, r2, #2
    8298:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:39
	}
	i2c_ptr->C1 = 0X00;   //初始化C1
    829a:	9b03      	ldr	r3, [sp, #12]
    829c:	2200      	movs	r2, #0
    829e:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:40
	i2c_ptr->FLT |= I2C_FLT_STOPF_MASK;//清停止标志位
    82a0:	9b03      	ldr	r3, [sp, #12]
    82a2:	799b      	ldrb	r3, [r3, #6]
    82a4:	b2db      	uxtb	r3, r3
    82a6:	2240      	movs	r2, #64	; 0x40
    82a8:	4313      	orrs	r3, r2
    82aa:	b2da      	uxtb	r2, r3
    82ac:	9b03      	ldr	r3, [sp, #12]
    82ae:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:41
	i2c_ptr->S |= I2C_S_ARBL_MASK | I2C_S_IICIF_MASK; //初始化S
    82b0:	9b03      	ldr	r3, [sp, #12]
    82b2:	78db      	ldrb	r3, [r3, #3]
    82b4:	b2db      	uxtb	r3, r3
    82b6:	2212      	movs	r2, #18
    82b8:	4313      	orrs	r3, r2
    82ba:	b2da      	uxtb	r2, r3
    82bc:	9b03      	ldr	r3, [sp, #12]
    82be:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:42
	if (1 == ModeSelect)   //主机模式
    82c0:	4b28      	ldr	r3, [pc, #160]	; (8364 <i2c_init+0x158>)
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	2b01      	cmp	r3, #1
    82c6:	d12a      	bne.n	831e <i2c_init+0x112>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:44
	{
		switch (BaudRate)
    82c8:	ab01      	add	r3, sp, #4
    82ca:	781b      	ldrb	r3, [r3, #0]
    82cc:	2b64      	cmp	r3, #100	; 0x64
    82ce:	d014      	beq.n	82fa <i2c_init+0xee>
    82d0:	dc17      	bgt.n	8302 <i2c_init+0xf6>
    82d2:	2b4b      	cmp	r3, #75	; 0x4b
    82d4:	d00d      	beq.n	82f2 <i2c_init+0xe6>
    82d6:	dc14      	bgt.n	8302 <i2c_init+0xf6>
    82d8:	2b19      	cmp	r3, #25
    82da:	d002      	beq.n	82e2 <i2c_init+0xd6>
    82dc:	2b32      	cmp	r3, #50	; 0x32
    82de:	d004      	beq.n	82ea <i2c_init+0xde>
    82e0:	e00f      	b.n	8302 <i2c_init+0xf6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:47
		{
		case 25:
			i2c_ptr->F = 0x9f;
    82e2:	9b03      	ldr	r3, [sp, #12]
    82e4:	229f      	movs	r2, #159	; 0x9f
    82e6:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:48
			break;
    82e8:	e00f      	b.n	830a <i2c_init+0xfe>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:50
		case 50:
			i2c_ptr->F = 0x5f;
    82ea:	9b03      	ldr	r3, [sp, #12]
    82ec:	225f      	movs	r2, #95	; 0x5f
    82ee:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:51
			break;
    82f0:	e00b      	b.n	830a <i2c_init+0xfe>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:53
		case 75:
			i2c_ptr->F = 0x25;
    82f2:	9b03      	ldr	r3, [sp, #12]
    82f4:	2225      	movs	r2, #37	; 0x25
    82f6:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:54
			break;
    82f8:	e007      	b.n	830a <i2c_init+0xfe>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:56
		case 100:
			i2c_ptr->F = 0x1f;
    82fa:	9b03      	ldr	r3, [sp, #12]
    82fc:	221f      	movs	r2, #31
    82fe:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:57
			break;
    8300:	e003      	b.n	830a <i2c_init+0xfe>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:59
		default:
			i2c_ptr->F = 0x1f;
    8302:	9b03      	ldr	r3, [sp, #12]
    8304:	221f      	movs	r2, #31
    8306:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:60
			break;
    8308:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:62
		}
		BSET(I2C_C1_IICEN_SHIFT, i2c_ptr->C1);//开i2c0模块使能
    830a:	9b03      	ldr	r3, [sp, #12]
    830c:	789b      	ldrb	r3, [r3, #2]
    830e:	b2db      	uxtb	r3, r3
    8310:	2280      	movs	r2, #128	; 0x80
    8312:	4252      	negs	r2, r2
    8314:	4313      	orrs	r3, r2
    8316:	b2da      	uxtb	r2, r3
    8318:	9b03      	ldr	r3, [sp, #12]
    831a:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:71
		i2c_ptr->A1 = address << 1;
		BSET(I2C_C1_IICEN_SHIFT, i2c_ptr->C1);//使能I2C模块
		BCLR(I2C_C1_TX_SHIFT, i2c_ptr->C1);//TX = 0,MCU设置为接收模式
		BCLR(I2C_C1_MST_SHIFT, i2c_ptr->C1);//MST位由1变成0，设置为从机模式
	}
}
    831c:	e01f      	b.n	835e <i2c_init+0x152>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:66
		i2c_ptr->A1 = address << 1;
    831e:	466b      	mov	r3, sp
    8320:	3305      	adds	r3, #5
    8322:	781b      	ldrb	r3, [r3, #0]
    8324:	18db      	adds	r3, r3, r3
    8326:	b2da      	uxtb	r2, r3
    8328:	9b03      	ldr	r3, [sp, #12]
    832a:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:67
		BSET(I2C_C1_IICEN_SHIFT, i2c_ptr->C1);//使能I2C模块
    832c:	9b03      	ldr	r3, [sp, #12]
    832e:	789b      	ldrb	r3, [r3, #2]
    8330:	b2db      	uxtb	r3, r3
    8332:	2280      	movs	r2, #128	; 0x80
    8334:	4252      	negs	r2, r2
    8336:	4313      	orrs	r3, r2
    8338:	b2da      	uxtb	r2, r3
    833a:	9b03      	ldr	r3, [sp, #12]
    833c:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:68
		BCLR(I2C_C1_TX_SHIFT, i2c_ptr->C1);//TX = 0,MCU设置为接收模式
    833e:	9b03      	ldr	r3, [sp, #12]
    8340:	789b      	ldrb	r3, [r3, #2]
    8342:	b2db      	uxtb	r3, r3
    8344:	2210      	movs	r2, #16
    8346:	4393      	bics	r3, r2
    8348:	b2da      	uxtb	r2, r3
    834a:	9b03      	ldr	r3, [sp, #12]
    834c:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:69
		BCLR(I2C_C1_MST_SHIFT, i2c_ptr->C1);//MST位由1变成0，设置为从机模式
    834e:	9b03      	ldr	r3, [sp, #12]
    8350:	789b      	ldrb	r3, [r3, #2]
    8352:	b2db      	uxtb	r3, r3
    8354:	2220      	movs	r2, #32
    8356:	4393      	bics	r3, r2
    8358:	b2da      	uxtb	r2, r3
    835a:	9b03      	ldr	r3, [sp, #12]
    835c:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:71
}
    835e:	46c0      	nop			; (mov r8, r8)
    8360:	b005      	add	sp, #20
    8362:	bd30      	pop	{r4, r5, pc}
    8364:	20000428 	.word	0x20000428
    8368:	0000a5d0 	.word	0x0000a5d0
    836c:	40047000 	.word	0x40047000
    8370:	00001034 	.word	0x00001034
    8374:	4004a000 	.word	0x4004a000
    8378:	4004b000 	.word	0x4004b000

0000837c <i2c_writeN>:
i2c_writeN():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:249
//          *Data:待发送N字节数据首地址
//          DataNum：发送的字节数N
//函数返回：  0，成功发送一个字节；1，发送一个字节失败
//函数说明: 1：表示发送失败；0：发送成功
//=====================================================================
uint8_t i2c_writeN(uint8_t No, uint8_t slaveAddress, uint8_t* Data, uint8_t DataNum) {
    837c:	b510      	push	{r4, lr}
    837e:	b084      	sub	sp, #16
    8380:	0004      	movs	r4, r0
    8382:	0008      	movs	r0, r1
    8384:	9200      	str	r2, [sp, #0]
    8386:	0019      	movs	r1, r3
    8388:	466b      	mov	r3, sp
    838a:	3307      	adds	r3, #7
    838c:	1c22      	adds	r2, r4, #0
    838e:	701a      	strb	r2, [r3, #0]
    8390:	466b      	mov	r3, sp
    8392:	3306      	adds	r3, #6
    8394:	1c02      	adds	r2, r0, #0
    8396:	701a      	strb	r2, [r3, #0]
    8398:	466b      	mov	r3, sp
    839a:	3305      	adds	r3, #5
    839c:	1c0a      	adds	r2, r1, #0
    839e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:251
	uint8_t i;
	i2c_start(No);               //发送开始信号
    83a0:	466b      	mov	r3, sp
    83a2:	3307      	adds	r3, #7
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	0018      	movs	r0, r3
    83a8:	f000 f96c 	bl	8684 <i2c_start>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:253

	slaveAddress = (slaveAddress << 1) & 0xfe;
    83ac:	466b      	mov	r3, sp
    83ae:	3306      	adds	r3, #6
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	005a      	lsls	r2, r3, #1
    83b4:	466b      	mov	r3, sp
    83b6:	3306      	adds	r3, #6
    83b8:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:255

	i2c_write(No, slaveAddress);  //将地址和方向位发送给从机
    83ba:	466b      	mov	r3, sp
    83bc:	3306      	adds	r3, #6
    83be:	781a      	ldrb	r2, [r3, #0]
    83c0:	466b      	mov	r3, sp
    83c2:	3307      	adds	r3, #7
    83c4:	781b      	ldrb	r3, [r3, #0]
    83c6:	0011      	movs	r1, r2
    83c8:	0018      	movs	r0, r3
    83ca:	f000 f91f 	bl	860c <i2c_write>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:257

	if (i2c_wait(No) == 1) return 1;    //等待完成, 如果失败就返回1
    83ce:	466b      	mov	r3, sp
    83d0:	3307      	adds	r3, #7
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	0018      	movs	r0, r3
    83d6:	f000 f8c3 	bl	8560 <i2c_wait>
    83da:	0003      	movs	r3, r0
    83dc:	2b01      	cmp	r3, #1
    83de:	d101      	bne.n	83e4 <i2c_writeN+0x68>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:257 (discriminator 1)
    83e0:	2301      	movs	r3, #1
    83e2:	e04f      	b.n	8484 <i2c_writeN+0x108>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:258
	if (i2c_get_ack(No) == 1)	return 1;      //判断是否是ACK，若是非应答信号则返回失败
    83e4:	466b      	mov	r3, sp
    83e6:	3307      	adds	r3, #7
    83e8:	781b      	ldrb	r3, [r3, #0]
    83ea:	0018      	movs	r0, r3
    83ec:	f000 f96c 	bl	86c8 <i2c_get_ack>
    83f0:	0003      	movs	r3, r0
    83f2:	2b01      	cmp	r3, #1
    83f4:	d101      	bne.n	83fa <i2c_writeN+0x7e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:258 (discriminator 1)
    83f6:	2301      	movs	r3, #1
    83f8:	e044      	b.n	8484 <i2c_writeN+0x108>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:260

	for (i = 0; i < DataNum; i++) {
    83fa:	230f      	movs	r3, #15
    83fc:	446b      	add	r3, sp
    83fe:	2200      	movs	r2, #0
    8400:	701a      	strb	r2, [r3, #0]
    8402:	e01e      	b.n	8442 <i2c_writeN+0xc6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:261
		i2c_write(No, Data[i]);   //发送真正的数据给从机
    8404:	230f      	movs	r3, #15
    8406:	446b      	add	r3, sp
    8408:	781b      	ldrb	r3, [r3, #0]
    840a:	9a00      	ldr	r2, [sp, #0]
    840c:	18d3      	adds	r3, r2, r3
    840e:	781a      	ldrb	r2, [r3, #0]
    8410:	466b      	mov	r3, sp
    8412:	3307      	adds	r3, #7
    8414:	781b      	ldrb	r3, [r3, #0]
    8416:	0011      	movs	r1, r2
    8418:	0018      	movs	r0, r3
    841a:	f000 f8f7 	bl	860c <i2c_write>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:262
		if (i2c_wait(No) == 1) return 1;    //等待完成, 如果失败就返回1
    841e:	466b      	mov	r3, sp
    8420:	3307      	adds	r3, #7
    8422:	781b      	ldrb	r3, [r3, #0]
    8424:	0018      	movs	r0, r3
    8426:	f000 f89b 	bl	8560 <i2c_wait>
    842a:	0003      	movs	r3, r0
    842c:	2b01      	cmp	r3, #1
    842e:	d101      	bne.n	8434 <i2c_writeN+0xb8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:262 (discriminator 1)
    8430:	2301      	movs	r3, #1
    8432:	e027      	b.n	8484 <i2c_writeN+0x108>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:260 (discriminator 2)
	for (i = 0; i < DataNum; i++) {
    8434:	230f      	movs	r3, #15
    8436:	446b      	add	r3, sp
    8438:	781a      	ldrb	r2, [r3, #0]
    843a:	230f      	movs	r3, #15
    843c:	446b      	add	r3, sp
    843e:	3201      	adds	r2, #1
    8440:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:260 (discriminator 1)
    8442:	220f      	movs	r2, #15
    8444:	446a      	add	r2, sp
    8446:	466b      	mov	r3, sp
    8448:	3305      	adds	r3, #5
    844a:	7812      	ldrb	r2, [r2, #0]
    844c:	781b      	ldrb	r3, [r3, #0]
    844e:	429a      	cmp	r2, r3
    8450:	d3d8      	bcc.n	8404 <i2c_writeN+0x88>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:266
	}

	// 发送字符串结束标志
	i2c_write(No, '\0');
    8452:	466b      	mov	r3, sp
    8454:	3307      	adds	r3, #7
    8456:	781b      	ldrb	r3, [r3, #0]
    8458:	2100      	movs	r1, #0
    845a:	0018      	movs	r0, r3
    845c:	f000 f8d6 	bl	860c <i2c_write>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:267
	if (i2c_wait(No) == 1) return 1;    //等待完成, 如果失败就返回1
    8460:	466b      	mov	r3, sp
    8462:	3307      	adds	r3, #7
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	0018      	movs	r0, r3
    8468:	f000 f87a 	bl	8560 <i2c_wait>
    846c:	0003      	movs	r3, r0
    846e:	2b01      	cmp	r3, #1
    8470:	d101      	bne.n	8476 <i2c_writeN+0xfa>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:267 (discriminator 1)
    8472:	2301      	movs	r3, #1
    8474:	e006      	b.n	8484 <i2c_writeN+0x108>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:269

	i2c_stop(No);                //发送停止信号
    8476:	466b      	mov	r3, sp
    8478:	3307      	adds	r3, #7
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	0018      	movs	r0, r3
    847e:	f000 f8df 	bl	8640 <i2c_stop>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:270
	return 0;                        //成功
    8482:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:271
}
    8484:	0018      	movs	r0, r3
    8486:	b004      	add	sp, #16
    8488:	bd10      	pop	{r4, pc}
	...

0000848c <i2c_enable_re_int>:
i2c_enable_re_int():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:280
//功能说明：打开i2c的IRQ中断。
//函数参数：No:i2c模块号，可用参数可参见gec.h文件
//函数返回：无。
//==============================================================================
void i2c_enable_re_int(uint8_t No)
{
    848c:	b500      	push	{lr}
    848e:	b085      	sub	sp, #20
    8490:	0002      	movs	r2, r0
    8492:	466b      	mov	r3, sp
    8494:	3307      	adds	r3, #7
    8496:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:281
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    8498:	466b      	mov	r3, sp
    849a:	3307      	adds	r3, #7
    849c:	781a      	ldrb	r2, [r3, #0]
    849e:	4b0f      	ldr	r3, [pc, #60]	; (84dc <i2c_enable_re_int+0x50>)
    84a0:	0092      	lsls	r2, r2, #2
    84a2:	58d3      	ldr	r3, [r2, r3]
    84a4:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:282
	i2c_ptr->S |= I2C_S_IICIF_MASK;
    84a6:	9b03      	ldr	r3, [sp, #12]
    84a8:	78db      	ldrb	r3, [r3, #3]
    84aa:	b2db      	uxtb	r3, r3
    84ac:	2202      	movs	r2, #2
    84ae:	4313      	orrs	r3, r2
    84b0:	b2da      	uxtb	r2, r3
    84b2:	9b03      	ldr	r3, [sp, #12]
    84b4:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:283
	i2c_ptr->C1 |= I2C_C1_IICIE_MASK;
    84b6:	9b03      	ldr	r3, [sp, #12]
    84b8:	789b      	ldrb	r3, [r3, #2]
    84ba:	b2db      	uxtb	r3, r3
    84bc:	2240      	movs	r2, #64	; 0x40
    84be:	4313      	orrs	r3, r2
    84c0:	b2da      	uxtb	r2, r3
    84c2:	9b03      	ldr	r3, [sp, #12]
    84c4:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:284
	NVIC_EnableIRQ(I2C_IRQ_TABLE[No]);
    84c6:	466b      	mov	r3, sp
    84c8:	3307      	adds	r3, #7
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	4a04      	ldr	r2, [pc, #16]	; (84e0 <i2c_enable_re_int+0x54>)
    84ce:	56d3      	ldrsb	r3, [r2, r3]
    84d0:	0018      	movs	r0, r3
    84d2:	f7ff fe6f 	bl	81b4 <NVIC_EnableIRQ>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:285
}
    84d6:	46c0      	nop			; (mov r8, r8)
    84d8:	b005      	add	sp, #20
    84da:	bd00      	pop	{pc}
    84dc:	0000a5d0 	.word	0x0000a5d0
    84e0:	0000a5d8 	.word	0x0000a5d8

000084e4 <i2c_disable_re_int>:
i2c_disable_re_int():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:294
//功能说明：关闭i2c的IRQ中断。
//函数参数：No:i2c模块号，可用参数可参见gec.h文件
//函数返回：无。
//==============================================================================
void i2c_disable_re_int(uint8_t No)
{
    84e4:	b500      	push	{lr}
    84e6:	b085      	sub	sp, #20
    84e8:	0002      	movs	r2, r0
    84ea:	466b      	mov	r3, sp
    84ec:	3307      	adds	r3, #7
    84ee:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:295
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    84f0:	466b      	mov	r3, sp
    84f2:	3307      	adds	r3, #7
    84f4:	781a      	ldrb	r2, [r3, #0]
    84f6:	4b0b      	ldr	r3, [pc, #44]	; (8524 <i2c_disable_re_int+0x40>)
    84f8:	0092      	lsls	r2, r2, #2
    84fa:	58d3      	ldr	r3, [r2, r3]
    84fc:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:296
	i2c_ptr->C1 &= ~I2C_C1_IICIE_MASK;
    84fe:	9b03      	ldr	r3, [sp, #12]
    8500:	789b      	ldrb	r3, [r3, #2]
    8502:	b2db      	uxtb	r3, r3
    8504:	2240      	movs	r2, #64	; 0x40
    8506:	4393      	bics	r3, r2
    8508:	b2da      	uxtb	r2, r3
    850a:	9b03      	ldr	r3, [sp, #12]
    850c:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:297
	NVIC_DisableIRQ(I2C_IRQ_TABLE[No]);
    850e:	466b      	mov	r3, sp
    8510:	3307      	adds	r3, #7
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	4a04      	ldr	r2, [pc, #16]	; (8528 <i2c_disable_re_int+0x44>)
    8516:	56d3      	ldrsb	r3, [r2, r3]
    8518:	0018      	movs	r0, r3
    851a:	f7ff fe61 	bl	81e0 <NVIC_DisableIRQ>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:298
}
    851e:	46c0      	nop			; (mov r8, r8)
    8520:	b005      	add	sp, #20
    8522:	bd00      	pop	{pc}
    8524:	0000a5d0 	.word	0x0000a5d0
    8528:	0000a5d8 	.word	0x0000a5d8

0000852c <i2c_clear_re_int>:
i2c_clear_re_int():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:307
//功能说明：清除i2c的接收中断标志。
//函数参数：No:i2c模块号 ，可用参数可参见gec.h文件
//函数返回：无。
//=====================================================================
void i2c_clear_re_int(uint8_t No)
{
    852c:	b084      	sub	sp, #16
    852e:	0002      	movs	r2, r0
    8530:	466b      	mov	r3, sp
    8532:	3307      	adds	r3, #7
    8534:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:308
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    8536:	466b      	mov	r3, sp
    8538:	3307      	adds	r3, #7
    853a:	781a      	ldrb	r2, [r3, #0]
    853c:	4b07      	ldr	r3, [pc, #28]	; (855c <i2c_clear_re_int+0x30>)
    853e:	0092      	lsls	r2, r2, #2
    8540:	58d3      	ldr	r3, [r2, r3]
    8542:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:309
	i2c_ptr->S |= 0x02;
    8544:	9b03      	ldr	r3, [sp, #12]
    8546:	78db      	ldrb	r3, [r3, #3]
    8548:	b2db      	uxtb	r3, r3
    854a:	2202      	movs	r2, #2
    854c:	4313      	orrs	r3, r2
    854e:	b2da      	uxtb	r2, r3
    8550:	9b03      	ldr	r3, [sp, #12]
    8552:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:310
}
    8554:	46c0      	nop			; (mov r8, r8)
    8556:	b004      	add	sp, #16
    8558:	4770      	bx	lr
    855a:	46c0      	nop			; (mov r8, r8)
    855c:	0000a5d0 	.word	0x0000a5d0

00008560 <i2c_wait>:
i2c_wait():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:318
//函数名称：wait
//功能概要：等待完成
//参数说明：No:模块号,可用参数可参见gec.h文件
//函数返回：1：表示超时，0：表示正常
//=====================================================================
uint8_t i2c_wait(uint8_t No) {
    8560:	b084      	sub	sp, #16
    8562:	0002      	movs	r2, r0
    8564:	466b      	mov	r3, sp
    8566:	3307      	adds	r3, #7
    8568:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:319
	uint16_t time = 0;
    856a:	230e      	movs	r3, #14
    856c:	446b      	add	r3, sp
    856e:	2200      	movs	r2, #0
    8570:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:320
	uint16_t time_out = 0xfffe;
    8572:	ab03      	add	r3, sp, #12
    8574:	2202      	movs	r2, #2
    8576:	4252      	negs	r2, r2
    8578:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:321
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    857a:	466b      	mov	r3, sp
    857c:	3307      	adds	r3, #7
    857e:	781a      	ldrb	r2, [r3, #0]
    8580:	4b14      	ldr	r3, [pc, #80]	; (85d4 <i2c_wait+0x74>)
    8582:	0092      	lsls	r2, r2, #2
    8584:	58d3      	ldr	r3, [r2, r3]
    8586:	9302      	str	r3, [sp, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:323
	// 当IICIF为0时没有中断挂起，当IICIF为1时有中断挂起
	while (BGET(I2C_S_IICIF_SHIFT, i2c_ptr->S) == 0) {
    8588:	e00f      	b.n	85aa <i2c_wait+0x4a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:324
		time++;
    858a:	230e      	movs	r3, #14
    858c:	446b      	add	r3, sp
    858e:	881a      	ldrh	r2, [r3, #0]
    8590:	230e      	movs	r3, #14
    8592:	446b      	add	r3, sp
    8594:	3201      	adds	r2, #1
    8596:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:325
		if (time > time_out)
    8598:	220e      	movs	r2, #14
    859a:	446a      	add	r2, sp
    859c:	ab03      	add	r3, sp, #12
    859e:	8812      	ldrh	r2, [r2, #0]
    85a0:	881b      	ldrh	r3, [r3, #0]
    85a2:	429a      	cmp	r2, r3
    85a4:	d901      	bls.n	85aa <i2c_wait+0x4a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:326
			return 1;
    85a6:	2301      	movs	r3, #1
    85a8:	e011      	b.n	85ce <i2c_wait+0x6e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:323
	while (BGET(I2C_S_IICIF_SHIFT, i2c_ptr->S) == 0) {
    85aa:	9b02      	ldr	r3, [sp, #8]
    85ac:	78db      	ldrb	r3, [r3, #3]
    85ae:	b2db      	uxtb	r3, r3
    85b0:	085b      	lsrs	r3, r3, #1
    85b2:	b2db      	uxtb	r3, r3
    85b4:	001a      	movs	r2, r3
    85b6:	2301      	movs	r3, #1
    85b8:	4013      	ands	r3, r2
    85ba:	d0e6      	beq.n	858a <i2c_wait+0x2a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:330
	}

	// 通过写1来进行清零
	BSET(I2C_S_IICIF_SHIFT, i2c_ptr->S);
    85bc:	9b02      	ldr	r3, [sp, #8]
    85be:	78db      	ldrb	r3, [r3, #3]
    85c0:	b2db      	uxtb	r3, r3
    85c2:	2202      	movs	r2, #2
    85c4:	4313      	orrs	r3, r2
    85c6:	b2da      	uxtb	r2, r3
    85c8:	9b02      	ldr	r3, [sp, #8]
    85ca:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:331
	return 0;
    85cc:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:332
}
    85ce:	0018      	movs	r0, r3
    85d0:	b004      	add	sp, #16
    85d2:	4770      	bx	lr
    85d4:	0000a5d0 	.word	0x0000a5d0

000085d8 <i2c_read>:
i2c_read():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:340
//函数名称：i2c_read
//功能概要：接收数据
//参数说明：No:模块号,可用参数可参见gec.h文件
//函数返回：寄存器中的数据
//=====================================================================
uint8_t i2c_read(uint8_t No) {
    85d8:	b084      	sub	sp, #16
    85da:	0002      	movs	r2, r0
    85dc:	466b      	mov	r3, sp
    85de:	3307      	adds	r3, #7
    85e0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:342
	uint8_t result;
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    85e2:	466b      	mov	r3, sp
    85e4:	3307      	adds	r3, #7
    85e6:	781a      	ldrb	r2, [r3, #0]
    85e8:	4b07      	ldr	r3, [pc, #28]	; (8608 <i2c_read+0x30>)
    85ea:	0092      	lsls	r2, r2, #2
    85ec:	58d3      	ldr	r3, [r2, r3]
    85ee:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:344
	//	for(int i=0;i<500000;i++);
	result = i2c_ptr->D;
    85f0:	230b      	movs	r3, #11
    85f2:	446b      	add	r3, sp
    85f4:	9a03      	ldr	r2, [sp, #12]
    85f6:	7912      	ldrb	r2, [r2, #4]
    85f8:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:345
	return result;
    85fa:	230b      	movs	r3, #11
    85fc:	446b      	add	r3, sp
    85fe:	781b      	ldrb	r3, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:346
}
    8600:	0018      	movs	r0, r3
    8602:	b004      	add	sp, #16
    8604:	4770      	bx	lr
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	0000a5d0 	.word	0x0000a5d0

0000860c <i2c_write>:
i2c_write():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:356
//参数说明： No:模块号,可用参数可参见gec.h文件
//          data：要写入的数据
//函数返回： 无
//=====================================================================
void i2c_write(uint8_t No, uint8_t data)
{
    860c:	b084      	sub	sp, #16
    860e:	0002      	movs	r2, r0
    8610:	466b      	mov	r3, sp
    8612:	3307      	adds	r3, #7
    8614:	701a      	strb	r2, [r3, #0]
    8616:	466b      	mov	r3, sp
    8618:	3306      	adds	r3, #6
    861a:	1c0a      	adds	r2, r1, #0
    861c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:357
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    861e:	466b      	mov	r3, sp
    8620:	3307      	adds	r3, #7
    8622:	781a      	ldrb	r2, [r3, #0]
    8624:	4b05      	ldr	r3, [pc, #20]	; (863c <i2c_write+0x30>)
    8626:	0092      	lsls	r2, r2, #2
    8628:	58d3      	ldr	r3, [r2, r3]
    862a:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:358
	i2c_ptr->D = data;
    862c:	9b03      	ldr	r3, [sp, #12]
    862e:	466a      	mov	r2, sp
    8630:	3206      	adds	r2, #6
    8632:	7812      	ldrb	r2, [r2, #0]
    8634:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:359
}
    8636:	46c0      	nop			; (mov r8, r8)
    8638:	b004      	add	sp, #16
    863a:	4770      	bx	lr
    863c:	0000a5d0 	.word	0x0000a5d0

00008640 <i2c_stop>:
i2c_stop():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:368
//功能概要： 停止信号
//参数说明： No:模块号,可用参数可参见gec.h文件
//函数返回： 无
//=====================================================================
void i2c_stop(uint8_t No)
{
    8640:	b084      	sub	sp, #16
    8642:	0002      	movs	r2, r0
    8644:	466b      	mov	r3, sp
    8646:	3307      	adds	r3, #7
    8648:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:369
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    864a:	466b      	mov	r3, sp
    864c:	3307      	adds	r3, #7
    864e:	781a      	ldrb	r2, [r3, #0]
    8650:	4b0b      	ldr	r3, [pc, #44]	; (8680 <i2c_stop+0x40>)
    8652:	0092      	lsls	r2, r2, #2
    8654:	58d3      	ldr	r3, [r2, r3]
    8656:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:370
	BCLR(I2C_C1_MST_SHIFT, i2c_ptr->C1); //将主机改成从机发送停止信号
    8658:	9b03      	ldr	r3, [sp, #12]
    865a:	789b      	ldrb	r3, [r3, #2]
    865c:	b2db      	uxtb	r3, r3
    865e:	2220      	movs	r2, #32
    8660:	4393      	bics	r3, r2
    8662:	b2da      	uxtb	r2, r3
    8664:	9b03      	ldr	r3, [sp, #12]
    8666:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:371
	BCLR(I2C_C1_TX_SHIFT, i2c_ptr->C1);  //该位接收模式
    8668:	9b03      	ldr	r3, [sp, #12]
    866a:	789b      	ldrb	r3, [r3, #2]
    866c:	b2db      	uxtb	r3, r3
    866e:	2210      	movs	r2, #16
    8670:	4393      	bics	r3, r2
    8672:	b2da      	uxtb	r2, r3
    8674:	9b03      	ldr	r3, [sp, #12]
    8676:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:372
}
    8678:	46c0      	nop			; (mov r8, r8)
    867a:	b004      	add	sp, #16
    867c:	4770      	bx	lr
    867e:	46c0      	nop			; (mov r8, r8)
    8680:	0000a5d0 	.word	0x0000a5d0

00008684 <i2c_start>:
i2c_start():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:381
//功能概要： 开始信号
//参数说明： No:模块号,可用参数可参见gec.h文件
//函数返回： 无
//=====================================================================
void i2c_start(uint8_t No)
{
    8684:	b084      	sub	sp, #16
    8686:	0002      	movs	r2, r0
    8688:	466b      	mov	r3, sp
    868a:	3307      	adds	r3, #7
    868c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:382
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    868e:	466b      	mov	r3, sp
    8690:	3307      	adds	r3, #7
    8692:	781a      	ldrb	r2, [r3, #0]
    8694:	4b0b      	ldr	r3, [pc, #44]	; (86c4 <i2c_start+0x40>)
    8696:	0092      	lsls	r2, r2, #2
    8698:	58d3      	ldr	r3, [r2, r3]
    869a:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:383
	BSET(I2C_C1_TX_SHIFT, i2c_ptr->C1);  //该位接收模式
    869c:	9b03      	ldr	r3, [sp, #12]
    869e:	789b      	ldrb	r3, [r3, #2]
    86a0:	b2db      	uxtb	r3, r3
    86a2:	2210      	movs	r2, #16
    86a4:	4313      	orrs	r3, r2
    86a6:	b2da      	uxtb	r2, r3
    86a8:	9b03      	ldr	r3, [sp, #12]
    86aa:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:384
	BSET(I2C_C1_MST_SHIFT, i2c_ptr->C1); //将主机改成从机发送停止信号
    86ac:	9b03      	ldr	r3, [sp, #12]
    86ae:	789b      	ldrb	r3, [r3, #2]
    86b0:	b2db      	uxtb	r3, r3
    86b2:	2220      	movs	r2, #32
    86b4:	4313      	orrs	r3, r2
    86b6:	b2da      	uxtb	r2, r3
    86b8:	9b03      	ldr	r3, [sp, #12]
    86ba:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:385
}
    86bc:	46c0      	nop			; (mov r8, r8)
    86be:	b004      	add	sp, #16
    86c0:	4770      	bx	lr
    86c2:	46c0      	nop			; (mov r8, r8)
    86c4:	0000a5d0 	.word	0x0000a5d0

000086c8 <i2c_get_ack>:
i2c_get_ack():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:444
//功能概要： 获取应答或者非应答信号
//参数说明： No:模块号,可用参数可参见gec.h文件
//函数返回：0：应答信号；1：非应答信号
//=====================================================================
uint8_t i2c_get_ack(uint8_t No)
{
    86c8:	b084      	sub	sp, #16
    86ca:	0002      	movs	r2, r0
    86cc:	466b      	mov	r3, sp
    86ce:	3307      	adds	r3, #7
    86d0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:445
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];
    86d2:	466b      	mov	r3, sp
    86d4:	3307      	adds	r3, #7
    86d6:	781a      	ldrb	r2, [r3, #0]
    86d8:	4b08      	ldr	r3, [pc, #32]	; (86fc <i2c_get_ack+0x34>)
    86da:	0092      	lsls	r2, r2, #2
    86dc:	58d3      	ldr	r3, [r2, r3]
    86de:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:447
	uint8_t ack;
	ack = BGET(I2C_S_RXAK_SHIFT, i2c_ptr->S);
    86e0:	9b03      	ldr	r3, [sp, #12]
    86e2:	78db      	ldrb	r3, [r3, #3]
    86e4:	b2da      	uxtb	r2, r3
    86e6:	230b      	movs	r3, #11
    86e8:	446b      	add	r3, sp
    86ea:	2101      	movs	r1, #1
    86ec:	400a      	ands	r2, r1
    86ee:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:448
	return ack;
    86f0:	230b      	movs	r3, #11
    86f2:	446b      	add	r3, sp
    86f4:	781b      	ldrb	r3, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:449
}
    86f6:	0018      	movs	r0, r3
    86f8:	b004      	add	sp, #16
    86fa:	4770      	bx	lr
    86fc:	0000a5d0 	.word	0x0000a5d0

00008700 <i2c_recv>:
i2c_recv():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:451

uint32_t i2c_recv(uint8_t No, uint8_t* buff) {
    8700:	b510      	push	{r4, lr}
    8702:	b082      	sub	sp, #8
    8704:	0002      	movs	r2, r0
    8706:	9100      	str	r1, [sp, #0]
    8708:	466b      	mov	r3, sp
    870a:	3307      	adds	r3, #7
    870c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:453
	static uint32_t index = 0;
	buff[index++] = i2c_read(No);
    870e:	4b12      	ldr	r3, [pc, #72]	; (8758 <i2c_recv+0x58>)
    8710:	681b      	ldr	r3, [r3, #0]
    8712:	1c59      	adds	r1, r3, #1
    8714:	4a10      	ldr	r2, [pc, #64]	; (8758 <i2c_recv+0x58>)
    8716:	6011      	str	r1, [r2, #0]
    8718:	9a00      	ldr	r2, [sp, #0]
    871a:	18d4      	adds	r4, r2, r3
    871c:	466b      	mov	r3, sp
    871e:	3307      	adds	r3, #7
    8720:	781b      	ldrb	r3, [r3, #0]
    8722:	0018      	movs	r0, r3
    8724:	f7ff ff58 	bl	85d8 <i2c_read>
    8728:	0003      	movs	r3, r0
    872a:	7023      	strb	r3, [r4, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:456

	// 当接收到字符'\0'时，说明字符串接收成功
	if (buff[index - 1] == '\0') {
    872c:	4b0a      	ldr	r3, [pc, #40]	; (8758 <i2c_recv+0x58>)
    872e:	681b      	ldr	r3, [r3, #0]
    8730:	3b01      	subs	r3, #1
    8732:	9a00      	ldr	r2, [sp, #0]
    8734:	18d3      	adds	r3, r2, r3
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	2b00      	cmp	r3, #0
    873a:	d108      	bne.n	874e <i2c_recv+0x4e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:457
		index = 0;
    873c:	4b06      	ldr	r3, [pc, #24]	; (8758 <i2c_recv+0x58>)
    873e:	2200      	movs	r2, #0
    8740:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:458
		return strlen(buff);
    8742:	9b00      	ldr	r3, [sp, #0]
    8744:	0018      	movs	r0, r3
    8746:	f7ff fd2d 	bl	81a4 <strlen>
    874a:	0003      	movs	r3, r0
    874c:	e000      	b.n	8750 <i2c_recv+0x50>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:461
	}

	return 0;
    874e:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:462
}
    8750:	0018      	movs	r0, r3
    8752:	b002      	add	sp, #8
    8754:	bd10      	pop	{r4, pc}
    8756:	46c0      	nop			; (mov r8, r8)
    8758:	2000041c 	.word	0x2000041c

0000875c <i2c_send>:
i2c_send():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:464

uint8_t i2c_send(uint8_t No, uint8_t slaveAddress, uint8_t* buff, uint8_t len) {
    875c:	b510      	push	{r4, lr}
    875e:	b084      	sub	sp, #16
    8760:	0004      	movs	r4, r0
    8762:	0008      	movs	r0, r1
    8764:	9200      	str	r2, [sp, #0]
    8766:	0019      	movs	r1, r3
    8768:	466b      	mov	r3, sp
    876a:	3307      	adds	r3, #7
    876c:	1c22      	adds	r2, r4, #0
    876e:	701a      	strb	r2, [r3, #0]
    8770:	466b      	mov	r3, sp
    8772:	3306      	adds	r3, #6
    8774:	1c02      	adds	r2, r0, #0
    8776:	701a      	strb	r2, [r3, #0]
    8778:	466b      	mov	r3, sp
    877a:	3305      	adds	r3, #5
    877c:	1c0a      	adds	r2, r1, #0
    877e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:483
	// i2c_enable_re_int(No);

	/*
		第二种实现方式，直接
	*/
	I2C_MemMapPtr i2c_ptr = I2C_BASE_TABLE[No];		// 获取该模块相关配置寄存器：地址，分频，控制，状态，数据寄存器
    8780:	466b      	mov	r3, sp
    8782:	3307      	adds	r3, #7
    8784:	781a      	ldrb	r2, [r3, #0]
    8786:	4b20      	ldr	r3, [pc, #128]	; (8808 <i2c_send+0xac>)
    8788:	0092      	lsls	r2, r2, #2
    878a:	58d3      	ldr	r3, [r2, r3]
    878c:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:484
	BSET(I2C_C1_TX_SHIFT, i2c_ptr->C1);//TX = 1,MCU设置为发送模式
    878e:	9b03      	ldr	r3, [sp, #12]
    8790:	789b      	ldrb	r3, [r3, #2]
    8792:	b2db      	uxtb	r3, r3
    8794:	2210      	movs	r2, #16
    8796:	4313      	orrs	r3, r2
    8798:	b2da      	uxtb	r2, r3
    879a:	9b03      	ldr	r3, [sp, #12]
    879c:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:485
	BSET(I2C_C1_MST_SHIFT, i2c_ptr->C1);//MST位由0变成1，设置为主机模式
    879e:	9b03      	ldr	r3, [sp, #12]
    87a0:	789b      	ldrb	r3, [r3, #2]
    87a2:	b2db      	uxtb	r3, r3
    87a4:	2220      	movs	r2, #32
    87a6:	4313      	orrs	r3, r2
    87a8:	b2da      	uxtb	r2, r3
    87aa:	9b03      	ldr	r3, [sp, #12]
    87ac:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:486
	i2c_disable_re_int(No);		// 设置成主机之后要禁用接收中断
    87ae:	466b      	mov	r3, sp
    87b0:	3307      	adds	r3, #7
    87b2:	781b      	ldrb	r3, [r3, #0]
    87b4:	0018      	movs	r0, r3
    87b6:	f7ff fe95 	bl	84e4 <i2c_disable_re_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:488

	i2c_writeN(No, slaveAddress, buff, len);	// 发送数据
    87ba:	466b      	mov	r3, sp
    87bc:	3305      	adds	r3, #5
    87be:	781c      	ldrb	r4, [r3, #0]
    87c0:	9a00      	ldr	r2, [sp, #0]
    87c2:	466b      	mov	r3, sp
    87c4:	3306      	adds	r3, #6
    87c6:	7819      	ldrb	r1, [r3, #0]
    87c8:	466b      	mov	r3, sp
    87ca:	3307      	adds	r3, #7
    87cc:	7818      	ldrb	r0, [r3, #0]
    87ce:	0023      	movs	r3, r4
    87d0:	f7ff fdd4 	bl	837c <i2c_writeN>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:490

	BCLR(I2C_C1_TX_SHIFT, i2c_ptr->C1);//TX = 0,MCU设置为接收模式
    87d4:	9b03      	ldr	r3, [sp, #12]
    87d6:	789b      	ldrb	r3, [r3, #2]
    87d8:	b2db      	uxtb	r3, r3
    87da:	2210      	movs	r2, #16
    87dc:	4393      	bics	r3, r2
    87de:	b2da      	uxtb	r2, r3
    87e0:	9b03      	ldr	r3, [sp, #12]
    87e2:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:491
	BCLR(I2C_C1_MST_SHIFT, i2c_ptr->C1);//MST位由1变成0，设置为从机模式
    87e4:	9b03      	ldr	r3, [sp, #12]
    87e6:	789b      	ldrb	r3, [r3, #2]
    87e8:	b2db      	uxtb	r3, r3
    87ea:	2220      	movs	r2, #32
    87ec:	4393      	bics	r3, r2
    87ee:	b2da      	uxtb	r2, r3
    87f0:	9b03      	ldr	r3, [sp, #12]
    87f2:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:492
	i2c_enable_re_int(No);	// 设置成从机之后开启接收中断
    87f4:	466b      	mov	r3, sp
    87f6:	3307      	adds	r3, #7
    87f8:	781b      	ldrb	r3, [r3, #0]
    87fa:	0018      	movs	r0, r3
    87fc:	f7ff fe46 	bl	848c <i2c_enable_re_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/i2c.c:493
}
    8800:	46c0      	nop			; (mov r8, r8)
    8802:	0018      	movs	r0, r3
    8804:	b004      	add	sp, #16
    8806:	bd10      	pop	{r4, pc}
    8808:	0000a5d0 	.word	0x0000a5d0

0000880c <SystemInit>:
SystemInit():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:112
    //看门狗默认为开启，而且复位之后只能开启或关闭看门狗一次
    //SIM_COPC &= ~SIM_COPC_COPT_MASK;    //DISABLE_WDOG 

    /* System clock initialization */
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    880c:	493b      	ldr	r1, [pc, #236]	; (88fc <SystemInit+0xf0>)
    880e:	4a3c      	ldr	r2, [pc, #240]	; (8900 <SystemInit+0xf4>)
    8810:	23c0      	movs	r3, #192	; 0xc0
    8812:	029b      	lsls	r3, r3, #10
    8814:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:114
    /* SIM_SCGC5: PORTA=1 */
    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
    8816:	4a39      	ldr	r2, [pc, #228]	; (88fc <SystemInit+0xf0>)
    8818:	4b3a      	ldr	r3, [pc, #232]	; (8904 <SystemInit+0xf8>)
    881a:	58d3      	ldr	r3, [r2, r3]
    881c:	4937      	ldr	r1, [pc, #220]	; (88fc <SystemInit+0xf0>)
    881e:	2280      	movs	r2, #128	; 0x80
    8820:	0092      	lsls	r2, r2, #2
    8822:	4313      	orrs	r3, r2
    8824:	4a37      	ldr	r2, [pc, #220]	; (8904 <SystemInit+0xf8>)
    8826:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:115
    if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    8828:	4b37      	ldr	r3, [pc, #220]	; (8908 <SystemInit+0xfc>)
    882a:	789b      	ldrb	r3, [r3, #2]
    882c:	b2db      	uxtb	r3, r3
    882e:	001a      	movs	r2, r3
    8830:	2308      	movs	r3, #8
    8832:	4013      	ands	r3, r2
    8834:	d007      	beq.n	8846 <SystemInit+0x3a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:117
        /* PMC_REGSC: ACKISO=1 */
        PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    8836:	4b34      	ldr	r3, [pc, #208]	; (8908 <SystemInit+0xfc>)
    8838:	789b      	ldrb	r3, [r3, #2]
    883a:	b2db      	uxtb	r3, r3
    883c:	4a32      	ldr	r2, [pc, #200]	; (8908 <SystemInit+0xfc>)
    883e:	2108      	movs	r1, #8
    8840:	430b      	orrs	r3, r1
    8842:	b2db      	uxtb	r3, r3
    8844:	7093      	strb	r3, [r2, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:120
    }
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
    8846:	492d      	ldr	r1, [pc, #180]	; (88fc <SystemInit+0xf0>)
    8848:	4a2d      	ldr	r2, [pc, #180]	; (8900 <SystemInit+0xf4>)
    884a:	2380      	movs	r3, #128	; 0x80
    884c:	025b      	lsls	r3, r3, #9
    884e:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:122
    /* SIM_SOPT2: ??=0,PLLFLLSEL=0 */
    SIM_SOPT2 &= (uint32_t)~(uint32_t)((SIM_SOPT2_PLLFLLSEL_MASK | 0x00020000U)); /* Select FLL as a clock source for various peripherals */
    8850:	4a2a      	ldr	r2, [pc, #168]	; (88fc <SystemInit+0xf0>)
    8852:	4b2e      	ldr	r3, [pc, #184]	; (890c <SystemInit+0x100>)
    8854:	58d3      	ldr	r3, [r2, r3]
    8856:	4929      	ldr	r1, [pc, #164]	; (88fc <SystemInit+0xf0>)
    8858:	4a2d      	ldr	r2, [pc, #180]	; (8910 <SystemInit+0x104>)
    885a:	4013      	ands	r3, r2
    885c:	4a2b      	ldr	r2, [pc, #172]	; (890c <SystemInit+0x100>)
    885e:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:124
    /* SIM_SOPT1: OSC32KSEL=0 */
    SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz clock for various peripherals */
    8860:	4b26      	ldr	r3, [pc, #152]	; (88fc <SystemInit+0xf0>)
    8862:	681a      	ldr	r2, [r3, #0]
    8864:	4b25      	ldr	r3, [pc, #148]	; (88fc <SystemInit+0xf0>)
    8866:	492b      	ldr	r1, [pc, #172]	; (8914 <SystemInit+0x108>)
    8868:	400a      	ands	r2, r1
    886a:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:126
    /* SIM_SOPT2: TPMSRC=1 */
    SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    886c:	4a23      	ldr	r2, [pc, #140]	; (88fc <SystemInit+0xf0>)
    886e:	4b27      	ldr	r3, [pc, #156]	; (890c <SystemInit+0x100>)
    8870:	58d3      	ldr	r3, [r2, r3]
    8872:	4a29      	ldr	r2, [pc, #164]	; (8918 <SystemInit+0x10c>)
    8874:	4013      	ands	r3, r2
    8876:	4921      	ldr	r1, [pc, #132]	; (88fc <SystemInit+0xf0>)
    8878:	2280      	movs	r2, #128	; 0x80
    887a:	0452      	lsls	r2, r2, #17
    887c:	4313      	orrs	r3, r2
    887e:	4a23      	ldr	r2, [pc, #140]	; (890c <SystemInit+0x100>)
    8880:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:133
    )) | (uint32_t)(
            SIM_SOPT2_TPMSRC(0x01)
    ));                      /* Set the TPM clock */
    /* Switch to FEI Mode */
    /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
    MCG_C1 = MCG_C1_CLKS(0x00) |
    8882:	4b26      	ldr	r3, [pc, #152]	; (891c <SystemInit+0x110>)
    8884:	2206      	movs	r2, #6
    8886:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:138
            MCG_C1_FRDIV(0x00) |
            MCG_C1_IREFS_MASK |
            MCG_C1_IRCLKEN_MASK;
    /* MCG_C2: LOCRE0=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
    MCG_C2 &= (uint8_t)~(uint8_t)(
    8888:	4b24      	ldr	r3, [pc, #144]	; (891c <SystemInit+0x110>)
    888a:	785b      	ldrb	r3, [r3, #1]
    888c:	b2db      	uxtb	r3, r3
    888e:	4a23      	ldr	r2, [pc, #140]	; (891c <SystemInit+0x110>)
    8890:	2140      	movs	r1, #64	; 0x40
    8892:	400b      	ands	r3, r1
    8894:	b2db      	uxtb	r3, r3
    8896:	7053      	strb	r3, [r2, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:147
            MCG_C2_EREFS0_MASK |
            MCG_C2_LP_MASK |
            MCG_C2_IRCS_MASK
    );
    /* MCG_C4: DMX32=1,DRST_DRS=1 */
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    8898:	4b20      	ldr	r3, [pc, #128]	; (891c <SystemInit+0x110>)
    889a:	78db      	ldrb	r3, [r3, #3]
    889c:	b2db      	uxtb	r3, r3
    889e:	b25b      	sxtb	r3, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:149
            MCG_C4_DRST_DRS(0x02)
    )) | (uint8_t)(
    88a0:	221f      	movs	r2, #31
    88a2:	4013      	ands	r3, r2
    88a4:	b25b      	sxtb	r3, r3
    88a6:	2260      	movs	r2, #96	; 0x60
    88a8:	4252      	negs	r2, r2
    88aa:	4313      	orrs	r3, r2
    88ac:	b25a      	sxtb	r2, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:147
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    88ae:	4b1b      	ldr	r3, [pc, #108]	; (891c <SystemInit+0x110>)
    88b0:	b2d2      	uxtb	r2, r2
    88b2:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:154
            MCG_C4_DMX32_MASK |
            MCG_C4_DRST_DRS(0x01)
    ));
    /* OSC0_CR: ERCLKEN=0,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
    OSC0_CR = 0x00U;
    88b4:	4b1a      	ldr	r3, [pc, #104]	; (8920 <SystemInit+0x114>)
    88b6:	2200      	movs	r2, #0
    88b8:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:156
    /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
    MCG_C5 = MCG_C5_PRDIV0(0x00);
    88ba:	4b18      	ldr	r3, [pc, #96]	; (891c <SystemInit+0x110>)
    88bc:	2200      	movs	r2, #0
    88be:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:158
    /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
    MCG_C6 = MCG_C6_VDIV0(0x00);
    88c0:	4b16      	ldr	r3, [pc, #88]	; (891c <SystemInit+0x110>)
    88c2:	2200      	movs	r2, #0
    88c4:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:159
    while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    88c6:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:159 (discriminator 1)
    88c8:	4b14      	ldr	r3, [pc, #80]	; (891c <SystemInit+0x110>)
    88ca:	799b      	ldrb	r3, [r3, #6]
    88cc:	b2db      	uxtb	r3, r3
    88ce:	001a      	movs	r2, r3
    88d0:	2310      	movs	r3, #16
    88d2:	4013      	ands	r3, r2
    88d4:	d0f8      	beq.n	88c8 <SystemInit+0xbc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:161
    }
    while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    88d6:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:161 (discriminator 1)
    88d8:	4b10      	ldr	r3, [pc, #64]	; (891c <SystemInit+0x110>)
    88da:	799b      	ldrb	r3, [r3, #6]
    88dc:	b2db      	uxtb	r3, r3
    88de:	001a      	movs	r2, r3
    88e0:	230c      	movs	r3, #12
    88e2:	4013      	ands	r3, r2
    88e4:	d1f8      	bne.n	88d8 <SystemInit+0xcc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:234
    //        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break;
    //    }
    //    //4.现在处于PEE模式

    //开启PORT模块时钟
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK
    88e6:	4a05      	ldr	r2, [pc, #20]	; (88fc <SystemInit+0xf0>)
    88e8:	4b06      	ldr	r3, [pc, #24]	; (8904 <SystemInit+0xf8>)
    88ea:	58d3      	ldr	r3, [r2, r3]
    88ec:	4903      	ldr	r1, [pc, #12]	; (88fc <SystemInit+0xf0>)
    88ee:	22f8      	movs	r2, #248	; 0xf8
    88f0:	0192      	lsls	r2, r2, #6
    88f2:	4313      	orrs	r3, r2
    88f4:	4a03      	ldr	r2, [pc, #12]	; (8904 <SystemInit+0xf8>)
    88f6:	508b      	str	r3, [r1, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/system_MKL36Z4.c:239
            | SIM_SCGC5_PORTB_MASK
            | SIM_SCGC5_PORTC_MASK
            | SIM_SCGC5_PORTD_MASK
            | SIM_SCGC5_PORTE_MASK;
}
    88f8:	46c0      	nop			; (mov r8, r8)
    88fa:	4770      	bx	lr
    88fc:	40047000 	.word	0x40047000
    8900:	00001044 	.word	0x00001044
    8904:	00001038 	.word	0x00001038
    8908:	4007d000 	.word	0x4007d000
    890c:	00001004 	.word	0x00001004
    8910:	fffcffff 	.word	0xfffcffff
    8914:	fff3ffff 	.word	0xfff3ffff
    8918:	fcffffff 	.word	0xfcffffff
    891c:	40064000 	.word	0x40064000
    8920:	40065000 	.word	0x40065000

00008924 <main>:
main():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:18
//main.c使用的内部函数声明处
void delay_ms(uint32_t ms);
//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程见书稿）
int main(void)
{
    8924:	b510      	push	{r4, lr}
    8926:	b084      	sub	sp, #16
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:20

    uint8_t data[11] = "QIUYEYIJIAN";
    8928:	ab01      	add	r3, sp, #4
    892a:	4a3a      	ldr	r2, [pc, #232]	; (8a14 <main+0xf0>)
    892c:	ca03      	ldmia	r2!, {r0, r1}
    892e:	c303      	stmia	r3!, {r0, r1}
    8930:	8811      	ldrh	r1, [r2, #0]
    8932:	8019      	strh	r1, [r3, #0]
    8934:	7892      	ldrb	r2, [r2, #2]
    8936:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:21
    gI2CSendFlag = 0;
    8938:	4b37      	ldr	r3, [pc, #220]	; (8a18 <main+0xf4>)
    893a:	2200      	movs	r2, #0
    893c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:22
    i2c_m0_addr = 0x74;
    893e:	4b37      	ldr	r3, [pc, #220]	; (8a1c <main+0xf8>)
    8940:	2274      	movs	r2, #116	; 0x74
    8942:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:23
    i2c_m1_addr = 0x73;
    8944:	4b36      	ldr	r3, [pc, #216]	; (8a20 <main+0xfc>)
    8946:	2273      	movs	r2, #115	; 0x73
    8948:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:27


    //（1.2）【不变】关总中断
    DISABLE_INTERRUPTS;
    894a:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:28
    wdog_stop();
    894c:	f000 fe4a 	bl	95e4 <wdog_stop>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:31

    // 初始化发送串口和接收串口
    suart_init(SUART_TX, SUART_SEND);
    8950:	4b34      	ldr	r3, [pc, #208]	; (8a24 <main+0x100>)
    8952:	2101      	movs	r1, #1
    8954:	0018      	movs	r0, r3
    8956:	f000 f9b3 	bl	8cc0 <suart_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:32
    suart_init(SUART_RX, SUART_RECEVIE);
    895a:	4b33      	ldr	r3, [pc, #204]	; (8a28 <main+0x104>)
    895c:	2100      	movs	r1, #0
    895e:	0018      	movs	r0, r3
    8960:	f000 f9ae 	bl	8cc0 <suart_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:35

    //I2C_M0初始化，I2C_M0:模块号 1:主机 0x74:地址  100:波特率(单位:KBps)
    i2c_init(I2C_M0, 0, i2c_m0_addr, 100);
    8964:	4b2d      	ldr	r3, [pc, #180]	; (8a1c <main+0xf8>)
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	b2da      	uxtb	r2, r3
    896a:	2364      	movs	r3, #100	; 0x64
    896c:	2100      	movs	r1, #0
    896e:	2000      	movs	r0, #0
    8970:	f7ff fc4c 	bl	820c <i2c_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:37
    //I2C_M1初始化，I2C_M1:模块号 0:从机 0x73:地址  100:波特率(单位:KBps)
    i2c_init(I2C_M1, 0, i2c_m1_addr, 100);
    8974:	4b2a      	ldr	r3, [pc, #168]	; (8a20 <main+0xfc>)
    8976:	781b      	ldrb	r3, [r3, #0]
    8978:	b2da      	uxtb	r2, r3
    897a:	2364      	movs	r3, #100	; 0x64
    897c:	2100      	movs	r1, #0
    897e:	2001      	movs	r0, #1
    8980:	f7ff fc44 	bl	820c <i2c_init>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:40

    // 使能串口接收中断
    suart_enable_receive_interupt(SUART_RX);
    8984:	4b28      	ldr	r3, [pc, #160]	; (8a28 <main+0x104>)
    8986:	0018      	movs	r0, r3
    8988:	f000 fda0 	bl	94cc <suart_enable_receive_interupt>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:42
    // 禁止i2c接收中断
    i2c_enable_re_int(I2C_M0);
    898c:	2000      	movs	r0, #0
    898e:	f7ff fd7d 	bl	848c <i2c_enable_re_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:43
    i2c_enable_re_int(I2C_M1);
    8992:	2001      	movs	r0, #1
    8994:	f7ff fd7a 	bl	848c <i2c_enable_re_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:47


    //（1.7）【不变】开总中断
    ENABLE_INTERRUPTS;
    8998:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:50
    //（2）======主循环部分（结尾）========================================
    for (;;) {
        delay_ms(1000);
    899a:	23fa      	movs	r3, #250	; 0xfa
    899c:	009b      	lsls	r3, r3, #2
    899e:	0018      	movs	r0, r3
    89a0:	f000 f84c 	bl	8a3c <delay_ms>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:52

        if (gI2CSendFlag == 1) {
    89a4:	4b1c      	ldr	r3, [pc, #112]	; (8a18 <main+0xf4>)
    89a6:	781b      	ldrb	r3, [r3, #0]
    89a8:	2b01      	cmp	r3, #1
    89aa:	d115      	bne.n	89d8 <main+0xb4>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:53
            i2c_send(I2C_M0, i2c_m1_addr, gRecvBuff, strlen(gRecvBuff));
    89ac:	4b1c      	ldr	r3, [pc, #112]	; (8a20 <main+0xfc>)
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	b2dc      	uxtb	r4, r3
    89b2:	4b1e      	ldr	r3, [pc, #120]	; (8a2c <main+0x108>)
    89b4:	0018      	movs	r0, r3
    89b6:	f7ff fbf5 	bl	81a4 <strlen>
    89ba:	0003      	movs	r3, r0
    89bc:	b2db      	uxtb	r3, r3
    89be:	4a1b      	ldr	r2, [pc, #108]	; (8a2c <main+0x108>)
    89c0:	0021      	movs	r1, r4
    89c2:	2000      	movs	r0, #0
    89c4:	f7ff feca 	bl	875c <i2c_send>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:54
            gI2CSendFlag = 0;
    89c8:	4b13      	ldr	r3, [pc, #76]	; (8a18 <main+0xf4>)
    89ca:	2200      	movs	r2, #0
    89cc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:55
            printf("1111\n");
    89ce:	4b18      	ldr	r3, [pc, #96]	; (8a30 <main+0x10c>)
    89d0:	0018      	movs	r0, r3
    89d2:	f001 fd3d 	bl	a450 <myprintf>
    89d6:	e018      	b.n	8a0a <main+0xe6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:58

        }
        else if (gI2CSendFlag == 2) {
    89d8:	4b0f      	ldr	r3, [pc, #60]	; (8a18 <main+0xf4>)
    89da:	781b      	ldrb	r3, [r3, #0]
    89dc:	2b02      	cmp	r3, #2
    89de:	d114      	bne.n	8a0a <main+0xe6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:59
            i2c_send(I2C_M1, i2c_m0_addr, gRecvBuff, strlen(gRecvBuff));
    89e0:	4b0e      	ldr	r3, [pc, #56]	; (8a1c <main+0xf8>)
    89e2:	781b      	ldrb	r3, [r3, #0]
    89e4:	b2dc      	uxtb	r4, r3
    89e6:	4b11      	ldr	r3, [pc, #68]	; (8a2c <main+0x108>)
    89e8:	0018      	movs	r0, r3
    89ea:	f7ff fbdb 	bl	81a4 <strlen>
    89ee:	0003      	movs	r3, r0
    89f0:	b2db      	uxtb	r3, r3
    89f2:	4a0e      	ldr	r2, [pc, #56]	; (8a2c <main+0x108>)
    89f4:	0021      	movs	r1, r4
    89f6:	2001      	movs	r0, #1
    89f8:	f7ff feb0 	bl	875c <i2c_send>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:60
            gI2CSendFlag = 0;
    89fc:	4b06      	ldr	r3, [pc, #24]	; (8a18 <main+0xf4>)
    89fe:	2200      	movs	r2, #0
    8a00:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:61
            printf("2222\n");
    8a02:	4b0c      	ldr	r3, [pc, #48]	; (8a34 <main+0x110>)
    8a04:	0018      	movs	r0, r3
    8a06:	f001 fd23 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:65
        }


        printf("Hello, World!\n");
    8a0a:	4b0b      	ldr	r3, [pc, #44]	; (8a38 <main+0x114>)
    8a0c:	0018      	movs	r0, r3
    8a0e:	f001 fd1f 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:50
        delay_ms(1000);
    8a12:	e7c2      	b.n	899a <main+0x76>
    8a14:	0000a4d0 	.word	0x0000a4d0
    8a18:	20000497 	.word	0x20000497
    8a1c:	20000498 	.word	0x20000498
    8a20:	20000490 	.word	0x20000490
    8a24:	00000303 	.word	0x00000303
    8a28:	00000302 	.word	0x00000302
    8a2c:	2000042c 	.word	0x2000042c
    8a30:	0000a4b0 	.word	0x0000a4b0
    8a34:	0000a4b8 	.word	0x0000a4b8
    8a38:	0000a4c0 	.word	0x0000a4c0

00008a3c <delay_ms>:
delay_ms():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:70
    }
}

// 延时函数
void delay_ms(uint32_t ms) {
    8a3c:	b084      	sub	sp, #16
    8a3e:	9001      	str	r0, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:71
    for (uint32_t i = 0; i < (6000 * ms); i++) {
    8a40:	2300      	movs	r3, #0
    8a42:	9303      	str	r3, [sp, #12]
    8a44:	e003      	b.n	8a4e <delay_ms+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:72 (discriminator 3)
        __asm("nop");
    8a46:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:71 (discriminator 3)
    for (uint32_t i = 0; i < (6000 * ms); i++) {
    8a48:	9b03      	ldr	r3, [sp, #12]
    8a4a:	3301      	adds	r3, #1
    8a4c:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:71 (discriminator 1)
    8a4e:	9b01      	ldr	r3, [sp, #4]
    8a50:	4a04      	ldr	r2, [pc, #16]	; (8a64 <delay_ms+0x28>)
    8a52:	4353      	muls	r3, r2
    8a54:	9a03      	ldr	r2, [sp, #12]
    8a56:	429a      	cmp	r2, r3
    8a58:	d3f5      	bcc.n	8a46 <delay_ms+0xa>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/main.c:74
    }
}
    8a5a:	46c0      	nop			; (mov r8, r8)
    8a5c:	46c0      	nop			; (mov r8, r8)
    8a5e:	b004      	add	sp, #16
    8a60:	4770      	bx	lr
    8a62:	46c0      	nop			; (mov r8, r8)
    8a64:	00001770 	.word	0x00001770

00008a68 <flash_erase>:
flash_erase():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:50
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片，见mcu.h）
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint8_t flash_erase(uint16_t sect)
{
    8a68:	b500      	push	{lr}
    8a6a:	b085      	sub	sp, #20
    8a6c:	0002      	movs	r2, r0
    8a6e:	466b      	mov	r3, sp
    8a70:	3306      	adds	r3, #6
    8a72:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:57
    {
        uint32_t  word;
        uint8_t   byte[4];
    } dest;
    
    dest.word    = (uint32_t)(sect*(1<<10));
    8a74:	466b      	mov	r3, sp
    8a76:	3306      	adds	r3, #6
    8a78:	881b      	ldrh	r3, [r3, #0]
    8a7a:	029b      	lsls	r3, r3, #10
    8a7c:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:60

    // 设置擦除命令
    FTFA_FCCOB0 = ERSSCR; // 擦除扇区命令
    8a7e:	4b1f      	ldr	r3, [pc, #124]	; (8afc <flash_erase+0x94>)
    8a80:	2209      	movs	r2, #9
    8a82:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:63
    
    // 设置目标地址
    FTFA_FCCOB1 = dest.byte[2];
    8a84:	4a1d      	ldr	r2, [pc, #116]	; (8afc <flash_erase+0x94>)
    8a86:	ab03      	add	r3, sp, #12
    8a88:	789b      	ldrb	r3, [r3, #2]
    8a8a:	7193      	strb	r3, [r2, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:64
    FTFA_FCCOB2 = dest.byte[1];
    8a8c:	4a1b      	ldr	r2, [pc, #108]	; (8afc <flash_erase+0x94>)
    8a8e:	ab03      	add	r3, sp, #12
    8a90:	785b      	ldrb	r3, [r3, #1]
    8a92:	7153      	strb	r3, [r2, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:65
    FTFA_FCCOB3 = dest.byte[0];
    8a94:	4a19      	ldr	r2, [pc, #100]	; (8afc <flash_erase+0x94>)
    8a96:	ab03      	add	r3, sp, #12
    8a98:	781b      	ldrb	r3, [r3, #0]
    8a9a:	7113      	strb	r3, [r2, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:68
    
    // 执行命令序列
    if(1 == flash_cmd_launch())    //若执行命令出现错误
    8a9c:	f000 f8c6 	bl	8c2c <flash_cmd_launch>
    8aa0:	0003      	movs	r3, r0
    8aa2:	2b01      	cmp	r3, #1
    8aa4:	d101      	bne.n	8aaa <flash_erase+0x42>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:69
        return 1;     //擦除命令错误
    8aa6:	2301      	movs	r3, #1
    8aa8:	e024      	b.n	8af4 <flash_erase+0x8c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:73
   
    // 若擦除sector0时，则解锁设备
//    if(dest.word <= 0x800)
    if(dest.word < 0x400)
    8aaa:	9a03      	ldr	r2, [sp, #12]
    8aac:	2380      	movs	r3, #128	; 0x80
    8aae:	00db      	lsls	r3, r3, #3
    8ab0:	429a      	cmp	r2, r3
    8ab2:	d21e      	bcs.n	8af2 <flash_erase+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:76
    {
        // 写入4字节
        FTFA_FCCOB0 = PGM4; 
    8ab4:	4b11      	ldr	r3, [pc, #68]	; (8afc <flash_erase+0x94>)
    8ab6:	2206      	movs	r2, #6
    8ab8:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:78
        // 设置目标地址
        FTFA_FCCOB1 = 0x00;
    8aba:	4b10      	ldr	r3, [pc, #64]	; (8afc <flash_erase+0x94>)
    8abc:	2200      	movs	r2, #0
    8abe:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:79
        FTFA_FCCOB2 = 0x04;
    8ac0:	4b0e      	ldr	r3, [pc, #56]	; (8afc <flash_erase+0x94>)
    8ac2:	2204      	movs	r2, #4
    8ac4:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:80
        FTFA_FCCOB3 = 0x0C;
    8ac6:	4b0d      	ldr	r3, [pc, #52]	; (8afc <flash_erase+0x94>)
    8ac8:	220c      	movs	r2, #12
    8aca:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:82
        // 数据
        FTFA_FCCOB4 = 0xFF;
    8acc:	4b0b      	ldr	r3, [pc, #44]	; (8afc <flash_erase+0x94>)
    8ace:	22ff      	movs	r2, #255	; 0xff
    8ad0:	72da      	strb	r2, [r3, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:83
        FTFA_FCCOB5 = 0xFF;
    8ad2:	4b0a      	ldr	r3, [pc, #40]	; (8afc <flash_erase+0x94>)
    8ad4:	22ff      	movs	r2, #255	; 0xff
    8ad6:	729a      	strb	r2, [r3, #10]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:84
        FTFA_FCCOB6 = 0xFF;
    8ad8:	4b08      	ldr	r3, [pc, #32]	; (8afc <flash_erase+0x94>)
    8ada:	22ff      	movs	r2, #255	; 0xff
    8adc:	725a      	strb	r2, [r3, #9]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:85
        FTFA_FCCOB7 = 0xFE;
    8ade:	4b07      	ldr	r3, [pc, #28]	; (8afc <flash_erase+0x94>)
    8ae0:	22fe      	movs	r2, #254	; 0xfe
    8ae2:	721a      	strb	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:87
        // 执行命令序列
        if(1 == flash_cmd_launch())  //若执行命令出现错误
    8ae4:	f000 f8a2 	bl	8c2c <flash_cmd_launch>
    8ae8:	0003      	movs	r3, r0
    8aea:	2b01      	cmp	r3, #1
    8aec:	d101      	bne.n	8af2 <flash_erase+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:88
            return 2;   //解锁命令错误
    8aee:	2302      	movs	r3, #2
    8af0:	e000      	b.n	8af4 <flash_erase+0x8c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:91
    }  
    
    return 0;  //成功返回
    8af2:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:92 (discriminator 1)
}
    8af4:	0018      	movs	r0, r3
    8af6:	b005      	add	sp, #20
    8af8:	bd00      	pop	{pc}
    8afa:	46c0      	nop			; (mov r8, r8)
    8afc:	40020000 	.word	0x40020000

00008b00 <flash_write_physical>:
flash_write_physical():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:147
//        N：写字节数目（0~1020,要求为4，8,12,......）
//        buf：写入数据存放处
//功能概要：读取flash指定地址的内容
//========================================================================
uint8_t flash_write_physical(uint32_t destaddr,uint16_t N,uint8_t *buf)
{
    8b00:	b500      	push	{lr}
    8b02:	b087      	sub	sp, #28
    8b04:	9003      	str	r0, [sp, #12]
    8b06:	9201      	str	r2, [sp, #4]
    8b08:	230a      	movs	r3, #10
    8b0a:	446b      	add	r3, sp
    8b0c:	1c0a      	adds	r2, r1, #0
    8b0e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:156
        uint32_t   word;
        uint8_t  byte[4];
    } dest;

    // 设置写入命令
    FTFA_FCCOB0 = PGM4;
    8b10:	4b1e      	ldr	r3, [pc, #120]	; (8b8c <flash_write_physical+0x8c>)
    8b12:	2206      	movs	r2, #6
    8b14:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:157
    dest.word = destaddr;
    8b16:	9b03      	ldr	r3, [sp, #12]
    8b18:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:158
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    8b1a:	2300      	movs	r3, #0
    8b1c:	9305      	str	r3, [sp, #20]
    8b1e:	e02b      	b.n	8b78 <flash_write_physical+0x78>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:161
    {
        // 设置目标地址
        FTFA_FCCOB1 = dest.byte[2];
    8b20:	4a1a      	ldr	r2, [pc, #104]	; (8b8c <flash_write_physical+0x8c>)
    8b22:	ab04      	add	r3, sp, #16
    8b24:	789b      	ldrb	r3, [r3, #2]
    8b26:	7193      	strb	r3, [r2, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:162
        FTFA_FCCOB2 = dest.byte[1];
    8b28:	4a18      	ldr	r2, [pc, #96]	; (8b8c <flash_write_physical+0x8c>)
    8b2a:	ab04      	add	r3, sp, #16
    8b2c:	785b      	ldrb	r3, [r3, #1]
    8b2e:	7153      	strb	r3, [r2, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:163
        FTFA_FCCOB3 = dest.byte[0];
    8b30:	4a16      	ldr	r2, [pc, #88]	; (8b8c <flash_write_physical+0x8c>)
    8b32:	ab04      	add	r3, sp, #16
    8b34:	781b      	ldrb	r3, [r3, #0]
    8b36:	7113      	strb	r3, [r2, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:166

        // 拷贝数据
        FTFA_FCCOB4 = buf[3];//大端寻址
    8b38:	4a14      	ldr	r2, [pc, #80]	; (8b8c <flash_write_physical+0x8c>)
    8b3a:	9b01      	ldr	r3, [sp, #4]
    8b3c:	78db      	ldrb	r3, [r3, #3]
    8b3e:	72d3      	strb	r3, [r2, #11]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:167
        FTFA_FCCOB5 = buf[2];
    8b40:	4a12      	ldr	r2, [pc, #72]	; (8b8c <flash_write_physical+0x8c>)
    8b42:	9b01      	ldr	r3, [sp, #4]
    8b44:	789b      	ldrb	r3, [r3, #2]
    8b46:	7293      	strb	r3, [r2, #10]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:168
        FTFA_FCCOB6 = buf[1];
    8b48:	4a10      	ldr	r2, [pc, #64]	; (8b8c <flash_write_physical+0x8c>)
    8b4a:	9b01      	ldr	r3, [sp, #4]
    8b4c:	785b      	ldrb	r3, [r3, #1]
    8b4e:	7253      	strb	r3, [r2, #9]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:169
        FTFA_FCCOB7 = buf[0];
    8b50:	4a0e      	ldr	r2, [pc, #56]	; (8b8c <flash_write_physical+0x8c>)
    8b52:	9b01      	ldr	r3, [sp, #4]
    8b54:	781b      	ldrb	r3, [r3, #0]
    8b56:	7213      	strb	r3, [r2, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:171

        if(1 == flash_cmd_launch())
    8b58:	f000 f868 	bl	8c2c <flash_cmd_launch>
    8b5c:	0003      	movs	r3, r0
    8b5e:	2b01      	cmp	r3, #1
    8b60:	d101      	bne.n	8b66 <flash_write_physical+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:172
            return 2;  //写入命令错误
    8b62:	2302      	movs	r3, #2
    8b64:	e00f      	b.n	8b86 <flash_write_physical+0x86>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:158 (discriminator 2)
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    8b66:	9b05      	ldr	r3, [sp, #20]
    8b68:	3304      	adds	r3, #4
    8b6a:	9305      	str	r3, [sp, #20]
    8b6c:	9b04      	ldr	r3, [sp, #16]
    8b6e:	3304      	adds	r3, #4
    8b70:	9304      	str	r3, [sp, #16]
    8b72:	9b01      	ldr	r3, [sp, #4]
    8b74:	3304      	adds	r3, #4
    8b76:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:158 (discriminator 1)
    8b78:	230a      	movs	r3, #10
    8b7a:	446b      	add	r3, sp
    8b7c:	881b      	ldrh	r3, [r3, #0]
    8b7e:	9a05      	ldr	r2, [sp, #20]
    8b80:	429a      	cmp	r2, r3
    8b82:	d3cd      	bcc.n	8b20 <flash_write_physical+0x20>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:175
    }

    return 0;  //成功执行
    8b84:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:176 (discriminator 1)
}
    8b86:	0018      	movs	r0, r3
    8b88:	b007      	add	sp, #28
    8b8a:	bd00      	pop	{pc}
    8b8c:	40020000 	.word	0x40020000

00008b90 <flash_read_physical>:
flash_read_physical():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:203
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
    8b90:	b500      	push	{lr}
    8b92:	b087      	sub	sp, #28
    8b94:	9003      	str	r0, [sp, #12]
    8b96:	9102      	str	r1, [sp, #8]
    8b98:	466b      	mov	r3, sp
    8b9a:	3306      	adds	r3, #6
    8b9c:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:205
	uint8_t *src;
	src=(uint8_t *)addr;
    8b9e:	9b02      	ldr	r3, [sp, #8]
    8ba0:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:206
	memcpy(dest,src,N);
    8ba2:	466b      	mov	r3, sp
    8ba4:	3306      	adds	r3, #6
    8ba6:	881a      	ldrh	r2, [r3, #0]
    8ba8:	9905      	ldr	r1, [sp, #20]
    8baa:	9b03      	ldr	r3, [sp, #12]
    8bac:	0018      	movs	r0, r3
    8bae:	f001 fc6d 	bl	a48c <memcpy>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:207
}
    8bb2:	46c0      	nop			; (mov r8, r8)
    8bb4:	b007      	add	sp, #28
    8bb6:	bd00      	pop	{pc}

00008bb8 <flash_isempty>:
flash_isempty():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:249
//函数返回：1=目标区域为空；0=目标区域非空。
//参数说明：所要探测的flash区域扇区号及字节数
//功能概要：flash判空操作
//========================================================================
uint8_t flash_isempty(uint16_t sect,uint16_t N)
{
    8bb8:	b084      	sub	sp, #16
    8bba:	0002      	movs	r2, r0
    8bbc:	466b      	mov	r3, sp
    8bbe:	3306      	adds	r3, #6
    8bc0:	801a      	strh	r2, [r3, #0]
    8bc2:	ab01      	add	r3, sp, #4
    8bc4:	1c0a      	adds	r2, r1, #0
    8bc6:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:252
   uint16_t i,flag;
   uint8_t* buff;
   i = 0;
    8bc8:	230e      	movs	r3, #14
    8bca:	446b      	add	r3, sp
    8bcc:	2200      	movs	r2, #0
    8bce:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:253
   flag = 1;
    8bd0:	ab03      	add	r3, sp, #12
    8bd2:	2201      	movs	r2, #1
    8bd4:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:254
   for(i = 0; i<N; i++)   //遍历区域内字节
    8bd6:	230e      	movs	r3, #14
    8bd8:	446b      	add	r3, sp
    8bda:	2200      	movs	r2, #0
    8bdc:	801a      	strh	r2, [r3, #0]
    8bde:	e017      	b.n	8c10 <flash_isempty+0x58>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:256
   {
	  buff=(uint8_t*)(sect*0x400);
    8be0:	466b      	mov	r3, sp
    8be2:	3306      	adds	r3, #6
    8be4:	881b      	ldrh	r3, [r3, #0]
    8be6:	029b      	lsls	r3, r3, #10
    8be8:	9302      	str	r3, [sp, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:257
      if(buff[i]!=0xff)   //非空
    8bea:	230e      	movs	r3, #14
    8bec:	446b      	add	r3, sp
    8bee:	881b      	ldrh	r3, [r3, #0]
    8bf0:	9a02      	ldr	r2, [sp, #8]
    8bf2:	18d3      	adds	r3, r2, r3
    8bf4:	781b      	ldrb	r3, [r3, #0]
    8bf6:	2bff      	cmp	r3, #255	; 0xff
    8bf8:	d003      	beq.n	8c02 <flash_isempty+0x4a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:259
      {
      	  flag=0;
    8bfa:	ab03      	add	r3, sp, #12
    8bfc:	2200      	movs	r2, #0
    8bfe:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:260
          break;
    8c00:	e00d      	b.n	8c1e <flash_isempty+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:254 (discriminator 2)
   for(i = 0; i<N; i++)   //遍历区域内字节
    8c02:	230e      	movs	r3, #14
    8c04:	446b      	add	r3, sp
    8c06:	881a      	ldrh	r2, [r3, #0]
    8c08:	230e      	movs	r3, #14
    8c0a:	446b      	add	r3, sp
    8c0c:	3201      	adds	r2, #1
    8c0e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:254 (discriminator 1)
    8c10:	220e      	movs	r2, #14
    8c12:	446a      	add	r2, sp
    8c14:	ab01      	add	r3, sp, #4
    8c16:	8812      	ldrh	r2, [r2, #0]
    8c18:	881b      	ldrh	r3, [r3, #0]
    8c1a:	429a      	cmp	r2, r3
    8c1c:	d3e0      	bcc.n	8be0 <flash_isempty+0x28>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:263
       }
   }
   return flag;
    8c1e:	ab03      	add	r3, sp, #12
    8c20:	881b      	ldrh	r3, [r3, #0]
    8c22:	b2db      	uxtb	r3, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:264
}
    8c24:	0018      	movs	r0, r3
    8c26:	b004      	add	sp, #16
    8c28:	4770      	bx	lr
	...

00008c2c <flash_cmd_launch>:
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:339
//函数返回：0-成功 1-失败
//参数说明：无
//功能概要：启动Flash命令
//======================================================================
uint32_t flash_cmd_launch(void)
{
    8c2c:	b082      	sub	sp, #8
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:340
	uint8_t irq_flag=0;
    8c2e:	466b      	mov	r3, sp
    8c30:	3307      	adds	r3, #7
    8c32:	2200      	movs	r2, #0
    8c34:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:342
    // 清除访问错误标志位和非法访问标志位
    FTFA_FSTAT = ACCERR | FPVIOL;
    8c36:	4b16      	ldr	r3, [pc, #88]	; (8c90 <flash_cmd_launch+0x64>)
    8c38:	2230      	movs	r2, #48	; 0x30
    8c3a:	701a      	strb	r2, [r3, #0]
__get_PRIMASK():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cmFunc.h:484
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8c3c:	f3ef 8310 	mrs	r3, PRIMASK
    8c40:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cmFunc.h:485
  return(result);
    8c42:	9b00      	ldr	r3, [sp, #0]
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:343
    if(__get_PRIMASK() == 0U)
    8c44:	2b00      	cmp	r3, #0
    8c46:	d105      	bne.n	8c54 <flash_cmd_launch+0x28>
__disable_irq():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cmFunc.h:344
  __ASM volatile ("cpsid i" : : : "memory");
    8c48:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cmFunc.h:345
}
    8c4a:	46c0      	nop			; (mov r8, r8)
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:346
    {
    	__disable_irq();  //关总中断
    	irq_flag = 1;
    8c4c:	466b      	mov	r3, sp
    8c4e:	3307      	adds	r3, #7
    8c50:	2201      	movs	r2, #1
    8c52:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:349
    }
    // 启动命令
    FTFA_FSTAT = CCIF;
    8c54:	4b0e      	ldr	r3, [pc, #56]	; (8c90 <flash_cmd_launch+0x64>)
    8c56:	2280      	movs	r2, #128	; 0x80
    8c58:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:351
    // 等待命令结束
    while(!(FTFA_FSTAT & CCIF));
    8c5a:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:351 (discriminator 1)
    8c5c:	4b0c      	ldr	r3, [pc, #48]	; (8c90 <flash_cmd_launch+0x64>)
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	b2db      	uxtb	r3, r3
    8c62:	b25b      	sxtb	r3, r3
    8c64:	2b00      	cmp	r3, #0
    8c66:	daf9      	bge.n	8c5c <flash_cmd_launch+0x30>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:352
    if(irq_flag == 1)
    8c68:	466b      	mov	r3, sp
    8c6a:	3307      	adds	r3, #7
    8c6c:	781b      	ldrb	r3, [r3, #0]
    8c6e:	2b01      	cmp	r3, #1
    8c70:	d101      	bne.n	8c76 <flash_cmd_launch+0x4a>
__enable_irq():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cmFunc.h:333
  __ASM volatile ("cpsie i" : : : "memory");
    8c72:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cmFunc.h:334
}
    8c74:	46c0      	nop			; (mov r8, r8)
flash_cmd_launch():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:357
    {
    	__enable_irq();  //开总中断
    }
    // 检查错误标志
    if(FTFA_FSTAT & (ACCERR | FPVIOL | MGSTAT0))
    8c76:	4b06      	ldr	r3, [pc, #24]	; (8c90 <flash_cmd_launch+0x64>)
    8c78:	781b      	ldrb	r3, [r3, #0]
    8c7a:	b2db      	uxtb	r3, r3
    8c7c:	001a      	movs	r2, r3
    8c7e:	2331      	movs	r3, #49	; 0x31
    8c80:	4013      	ands	r3, r2
    8c82:	d001      	beq.n	8c88 <flash_cmd_launch+0x5c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:358
        return 1 ; //执行命令出错
    8c84:	2301      	movs	r3, #1
    8c86:	e000      	b.n	8c8a <flash_cmd_launch+0x5e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:359
    return 0; //执行命令成功
    8c88:	2300      	movs	r3, #0
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/flash.c:360
}
    8c8a:	0018      	movs	r0, r3
    8c8c:	b002      	add	sp, #8
    8c8e:	4770      	bx	lr
    8c90:	40020000 	.word	0x40020000

00008c94 <NVIC_EnableIRQ>:
NVIC_EnableIRQ():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:684
{
    8c94:	b082      	sub	sp, #8
    8c96:	0002      	movs	r2, r0
    8c98:	466b      	mov	r3, sp
    8c9a:	3307      	adds	r3, #7
    8c9c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:685
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8c9e:	466b      	mov	r3, sp
    8ca0:	3307      	adds	r3, #7
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	001a      	movs	r2, r3
    8ca6:	231f      	movs	r3, #31
    8ca8:	401a      	ands	r2, r3
    8caa:	4b04      	ldr	r3, [pc, #16]	; (8cbc <NVIC_EnableIRQ+0x28>)
    8cac:	2101      	movs	r1, #1
    8cae:	4091      	lsls	r1, r2
    8cb0:	000a      	movs	r2, r1
    8cb2:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\02_CPU/core_cm0plus.h:686
}
    8cb4:	46c0      	nop			; (mov r8, r8)
    8cb6:	b002      	add	sp, #8
    8cb8:	4770      	bx	lr
    8cba:	46c0      	nop			; (mov r8, r8)
    8cbc:	e000e100 	.word	0xe000e100

00008cc0 <suart_init>:
suart_init():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:7

// 内部函数声明
void suart_get_port_pin(uint16_t port_pin, uint8_t* port, uint8_t* pin);

// 模拟串口初始化
void suart_init(uint16_t port_pin, uint8_t dir) {
    8cc0:	b500      	push	{lr}
    8cc2:	b085      	sub	sp, #20
    8cc4:	0002      	movs	r2, r0
    8cc6:	466b      	mov	r3, sp
    8cc8:	3306      	adds	r3, #6
    8cca:	801a      	strh	r2, [r3, #0]
    8ccc:	466b      	mov	r3, sp
    8cce:	3305      	adds	r3, #5
    8cd0:	1c0a      	adds	r2, r1, #0
    8cd2:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:9
    uint8_t port, pin;
    suart_get_port_pin(port_pin, &port, &pin);
    8cd4:	220e      	movs	r2, #14
    8cd6:	446a      	add	r2, sp
    8cd8:	210f      	movs	r1, #15
    8cda:	4469      	add	r1, sp
    8cdc:	466b      	mov	r3, sp
    8cde:	3306      	adds	r3, #6
    8ce0:	881b      	ldrh	r3, [r3, #0]
    8ce2:	0018      	movs	r0, r3
    8ce4:	f000 fc66 	bl	95b4 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:12

    //设定相应端口的相应引脚功port能为GPIO（即令引脚控制寄存器的MUX=0b001）
    PORT_PCR(port, pin) &= ~PORT_PCR_MUX_MASK;//置D10-D8=000
    8ce8:	230f      	movs	r3, #15
    8cea:	446b      	add	r3, sp
    8cec:	781b      	ldrb	r3, [r3, #0]
    8cee:	029b      	lsls	r3, r3, #10
    8cf0:	220e      	movs	r2, #14
    8cf2:	446a      	add	r2, sp
    8cf4:	7812      	ldrb	r2, [r2, #0]
    8cf6:	189b      	adds	r3, r3, r2
    8cf8:	009b      	lsls	r3, r3, #2
    8cfa:	4a43      	ldr	r2, [pc, #268]	; (8e08 <suart_init+0x148>)
    8cfc:	4694      	mov	ip, r2
    8cfe:	4463      	add	r3, ip
    8d00:	681a      	ldr	r2, [r3, #0]
    8d02:	230f      	movs	r3, #15
    8d04:	446b      	add	r3, sp
    8d06:	781b      	ldrb	r3, [r3, #0]
    8d08:	029b      	lsls	r3, r3, #10
    8d0a:	210e      	movs	r1, #14
    8d0c:	4469      	add	r1, sp
    8d0e:	7809      	ldrb	r1, [r1, #0]
    8d10:	185b      	adds	r3, r3, r1
    8d12:	009b      	lsls	r3, r3, #2
    8d14:	493c      	ldr	r1, [pc, #240]	; (8e08 <suart_init+0x148>)
    8d16:	468c      	mov	ip, r1
    8d18:	4463      	add	r3, ip
    8d1a:	493c      	ldr	r1, [pc, #240]	; (8e0c <suart_init+0x14c>)
    8d1c:	400a      	ands	r2, r1
    8d1e:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:13
    PORT_PCR(port, pin) |= PORT_PCR_MUX(1);//置D10-D8=001
    8d20:	230f      	movs	r3, #15
    8d22:	446b      	add	r3, sp
    8d24:	781b      	ldrb	r3, [r3, #0]
    8d26:	029b      	lsls	r3, r3, #10
    8d28:	220e      	movs	r2, #14
    8d2a:	446a      	add	r2, sp
    8d2c:	7812      	ldrb	r2, [r2, #0]
    8d2e:	189b      	adds	r3, r3, r2
    8d30:	009b      	lsls	r3, r3, #2
    8d32:	4a35      	ldr	r2, [pc, #212]	; (8e08 <suart_init+0x148>)
    8d34:	4694      	mov	ip, r2
    8d36:	4463      	add	r3, ip
    8d38:	681a      	ldr	r2, [r3, #0]
    8d3a:	230f      	movs	r3, #15
    8d3c:	446b      	add	r3, sp
    8d3e:	781b      	ldrb	r3, [r3, #0]
    8d40:	029b      	lsls	r3, r3, #10
    8d42:	210e      	movs	r1, #14
    8d44:	4469      	add	r1, sp
    8d46:	7809      	ldrb	r1, [r1, #0]
    8d48:	185b      	adds	r3, r3, r1
    8d4a:	009b      	lsls	r3, r3, #2
    8d4c:	492e      	ldr	r1, [pc, #184]	; (8e08 <suart_init+0x148>)
    8d4e:	468c      	mov	ip, r1
    8d50:	4463      	add	r3, ip
    8d52:	2180      	movs	r1, #128	; 0x80
    8d54:	0049      	lsls	r1, r1, #1
    8d56:	430a      	orrs	r2, r1
    8d58:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:16

    // 根据带入参数dir, 决定引脚为输出还是输入
    if (dir == 1) {
    8d5a:	466b      	mov	r3, sp
    8d5c:	3305      	adds	r3, #5
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	2b01      	cmp	r3, #1
    8d62:	d132      	bne.n	8dca <suart_init+0x10a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:18
        // 数据方向寄存器对应位设为1，表示输出
        BSET(pin, SUART_PDDR(port));
    8d64:	230f      	movs	r3, #15
    8d66:	446b      	add	r3, sp
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	019b      	lsls	r3, r3, #6
    8d6c:	3314      	adds	r3, #20
    8d6e:	4a28      	ldr	r2, [pc, #160]	; (8e10 <suart_init+0x150>)
    8d70:	4694      	mov	ip, r2
    8d72:	4463      	add	r3, ip
    8d74:	681a      	ldr	r2, [r3, #0]
    8d76:	230e      	movs	r3, #14
    8d78:	446b      	add	r3, sp
    8d7a:	781b      	ldrb	r3, [r3, #0]
    8d7c:	0019      	movs	r1, r3
    8d7e:	2301      	movs	r3, #1
    8d80:	408b      	lsls	r3, r1
    8d82:	0019      	movs	r1, r3
    8d84:	230f      	movs	r3, #15
    8d86:	446b      	add	r3, sp
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	019b      	lsls	r3, r3, #6
    8d8c:	3314      	adds	r3, #20
    8d8e:	4820      	ldr	r0, [pc, #128]	; (8e10 <suart_init+0x150>)
    8d90:	4684      	mov	ip, r0
    8d92:	4463      	add	r3, ip
    8d94:	430a      	orrs	r2, r1
    8d96:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:21

        // 数据输出寄存器对应位设为1(没有数据时保持高电平)，表示高电平
        BSET(pin, SUART_PDOR(port));
    8d98:	230f      	movs	r3, #15
    8d9a:	446b      	add	r3, sp
    8d9c:	781b      	ldrb	r3, [r3, #0]
    8d9e:	019b      	lsls	r3, r3, #6
    8da0:	4a1b      	ldr	r2, [pc, #108]	; (8e10 <suart_init+0x150>)
    8da2:	4694      	mov	ip, r2
    8da4:	4463      	add	r3, ip
    8da6:	681a      	ldr	r2, [r3, #0]
    8da8:	230e      	movs	r3, #14
    8daa:	446b      	add	r3, sp
    8dac:	781b      	ldrb	r3, [r3, #0]
    8dae:	0019      	movs	r1, r3
    8db0:	2301      	movs	r3, #1
    8db2:	408b      	lsls	r3, r1
    8db4:	0019      	movs	r1, r3
    8db6:	230f      	movs	r3, #15
    8db8:	446b      	add	r3, sp
    8dba:	781b      	ldrb	r3, [r3, #0]
    8dbc:	019b      	lsls	r3, r3, #6
    8dbe:	4814      	ldr	r0, [pc, #80]	; (8e10 <suart_init+0x150>)
    8dc0:	4684      	mov	ip, r0
    8dc2:	4463      	add	r3, ip
    8dc4:	430a      	orrs	r2, r1
    8dc6:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:27
    }
    else {
        // 数据方向寄存器对应位设为0，表示输入
        BCLR(pin, SUART_PDDR(port));
    }
}
    8dc8:	e01a      	b.n	8e00 <suart_init+0x140>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:25
        BCLR(pin, SUART_PDDR(port));
    8dca:	230f      	movs	r3, #15
    8dcc:	446b      	add	r3, sp
    8dce:	781b      	ldrb	r3, [r3, #0]
    8dd0:	019b      	lsls	r3, r3, #6
    8dd2:	3314      	adds	r3, #20
    8dd4:	4a0e      	ldr	r2, [pc, #56]	; (8e10 <suart_init+0x150>)
    8dd6:	4694      	mov	ip, r2
    8dd8:	4463      	add	r3, ip
    8dda:	681a      	ldr	r2, [r3, #0]
    8ddc:	230e      	movs	r3, #14
    8dde:	446b      	add	r3, sp
    8de0:	781b      	ldrb	r3, [r3, #0]
    8de2:	0019      	movs	r1, r3
    8de4:	2301      	movs	r3, #1
    8de6:	408b      	lsls	r3, r1
    8de8:	43db      	mvns	r3, r3
    8dea:	0019      	movs	r1, r3
    8dec:	230f      	movs	r3, #15
    8dee:	446b      	add	r3, sp
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	019b      	lsls	r3, r3, #6
    8df4:	3314      	adds	r3, #20
    8df6:	4806      	ldr	r0, [pc, #24]	; (8e10 <suart_init+0x150>)
    8df8:	4684      	mov	ip, r0
    8dfa:	4463      	add	r3, ip
    8dfc:	400a      	ands	r2, r1
    8dfe:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:27
}
    8e00:	46c0      	nop			; (mov r8, r8)
    8e02:	b005      	add	sp, #20
    8e04:	bd00      	pop	{pc}
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	40049000 	.word	0x40049000
    8e0c:	fffff8ff 	.word	0xfffff8ff
    8e10:	400ff000 	.word	0x400ff000

00008e14 <suart_set>:
suart_set():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:29

void suart_set(uint8_t port, uint8_t pin, uint8_t status) {
    8e14:	b510      	push	{r4, lr}
    8e16:	b082      	sub	sp, #8
    8e18:	0004      	movs	r4, r0
    8e1a:	0008      	movs	r0, r1
    8e1c:	0011      	movs	r1, r2
    8e1e:	466b      	mov	r3, sp
    8e20:	3307      	adds	r3, #7
    8e22:	1c22      	adds	r2, r4, #0
    8e24:	701a      	strb	r2, [r3, #0]
    8e26:	466b      	mov	r3, sp
    8e28:	3306      	adds	r3, #6
    8e2a:	1c02      	adds	r2, r0, #0
    8e2c:	701a      	strb	r2, [r3, #0]
    8e2e:	466b      	mov	r3, sp
    8e30:	3305      	adds	r3, #5
    8e32:	1c0a      	adds	r2, r1, #0
    8e34:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:30
    if (status == 1) {
    8e36:	466b      	mov	r3, sp
    8e38:	3305      	adds	r3, #5
    8e3a:	781b      	ldrb	r3, [r3, #0]
    8e3c:	2b01      	cmp	r3, #1
    8e3e:	d118      	bne.n	8e72 <suart_set+0x5e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:31
        BSET(pin, SUART_PDOR(port));
    8e40:	466b      	mov	r3, sp
    8e42:	3307      	adds	r3, #7
    8e44:	781b      	ldrb	r3, [r3, #0]
    8e46:	019b      	lsls	r3, r3, #6
    8e48:	4a18      	ldr	r2, [pc, #96]	; (8eac <suart_set+0x98>)
    8e4a:	4694      	mov	ip, r2
    8e4c:	4463      	add	r3, ip
    8e4e:	681a      	ldr	r2, [r3, #0]
    8e50:	466b      	mov	r3, sp
    8e52:	3306      	adds	r3, #6
    8e54:	781b      	ldrb	r3, [r3, #0]
    8e56:	2101      	movs	r1, #1
    8e58:	4099      	lsls	r1, r3
    8e5a:	000b      	movs	r3, r1
    8e5c:	0019      	movs	r1, r3
    8e5e:	466b      	mov	r3, sp
    8e60:	3307      	adds	r3, #7
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	019b      	lsls	r3, r3, #6
    8e66:	4811      	ldr	r0, [pc, #68]	; (8eac <suart_set+0x98>)
    8e68:	4684      	mov	ip, r0
    8e6a:	4463      	add	r3, ip
    8e6c:	430a      	orrs	r2, r1
    8e6e:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:36
    }
    else {
        BCLR(pin, SUART_PDOR(port));
    }
}
    8e70:	e018      	b.n	8ea4 <suart_set+0x90>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:34
        BCLR(pin, SUART_PDOR(port));
    8e72:	466b      	mov	r3, sp
    8e74:	3307      	adds	r3, #7
    8e76:	781b      	ldrb	r3, [r3, #0]
    8e78:	019b      	lsls	r3, r3, #6
    8e7a:	4a0c      	ldr	r2, [pc, #48]	; (8eac <suart_set+0x98>)
    8e7c:	4694      	mov	ip, r2
    8e7e:	4463      	add	r3, ip
    8e80:	681a      	ldr	r2, [r3, #0]
    8e82:	466b      	mov	r3, sp
    8e84:	3306      	adds	r3, #6
    8e86:	781b      	ldrb	r3, [r3, #0]
    8e88:	2101      	movs	r1, #1
    8e8a:	4099      	lsls	r1, r3
    8e8c:	000b      	movs	r3, r1
    8e8e:	43db      	mvns	r3, r3
    8e90:	0019      	movs	r1, r3
    8e92:	466b      	mov	r3, sp
    8e94:	3307      	adds	r3, #7
    8e96:	781b      	ldrb	r3, [r3, #0]
    8e98:	019b      	lsls	r3, r3, #6
    8e9a:	4804      	ldr	r0, [pc, #16]	; (8eac <suart_set+0x98>)
    8e9c:	4684      	mov	ip, r0
    8e9e:	4463      	add	r3, ip
    8ea0:	400a      	ands	r2, r1
    8ea2:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:36
}
    8ea4:	46c0      	nop			; (mov r8, r8)
    8ea6:	b002      	add	sp, #8
    8ea8:	bd10      	pop	{r4, pc}
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	400ff000 	.word	0x400ff000

00008eb0 <suart_get>:
suart_get():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:39


uint8_t suart_get(uint8_t port, uint8_t pin) {
    8eb0:	b082      	sub	sp, #8
    8eb2:	0002      	movs	r2, r0
    8eb4:	466b      	mov	r3, sp
    8eb6:	3307      	adds	r3, #7
    8eb8:	701a      	strb	r2, [r3, #0]
    8eba:	466b      	mov	r3, sp
    8ebc:	3306      	adds	r3, #6
    8ebe:	1c0a      	adds	r2, r1, #0
    8ec0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:41
    // 一般都是获取相应引脚的输入寄存器的值
    return BGET(pin, SUART_PDIR(port));
    8ec2:	466b      	mov	r3, sp
    8ec4:	3307      	adds	r3, #7
    8ec6:	781b      	ldrb	r3, [r3, #0]
    8ec8:	019b      	lsls	r3, r3, #6
    8eca:	3310      	adds	r3, #16
    8ecc:	4a07      	ldr	r2, [pc, #28]	; (8eec <suart_get+0x3c>)
    8ece:	4694      	mov	ip, r2
    8ed0:	4463      	add	r3, ip
    8ed2:	681a      	ldr	r2, [r3, #0]
    8ed4:	466b      	mov	r3, sp
    8ed6:	3306      	adds	r3, #6
    8ed8:	781b      	ldrb	r3, [r3, #0]
    8eda:	40da      	lsrs	r2, r3
    8edc:	0013      	movs	r3, r2
    8ede:	b2db      	uxtb	r3, r3
    8ee0:	2201      	movs	r2, #1
    8ee2:	4013      	ands	r3, r2
    8ee4:	b2db      	uxtb	r3, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:42
}
    8ee6:	0018      	movs	r0, r3
    8ee8:	b002      	add	sp, #8
    8eea:	4770      	bx	lr
    8eec:	400ff000 	.word	0x400ff000

00008ef0 <suart_send>:
suart_send():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:48

// 这个函数的实现本可以用循环来操作，可减少代码量
// 但是经过测试发现，循环每次判断操作也占用一定时间
// 可能会引起一定的误差（用while循环，大概1us），所以就直接对每一位操作
// 下面的suart_receive()函数同理
void suart_send(uint16_t port_pin, uint8_t* arr, uint32_t len) {
    8ef0:	b500      	push	{lr}
    8ef2:	b08f      	sub	sp, #60	; 0x3c
    8ef4:	9102      	str	r1, [sp, #8]
    8ef6:	9201      	str	r2, [sp, #4]
    8ef8:	230e      	movs	r3, #14
    8efa:	446b      	add	r3, sp
    8efc:	1c02      	adds	r2, r0, #0
    8efe:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:50
    uint8_t port, pin;
    suart_get_port_pin(port_pin, &port, &pin);
    8f00:	aa07      	add	r2, sp, #28
    8f02:	211d      	movs	r1, #29
    8f04:	4469      	add	r1, sp
    8f06:	230e      	movs	r3, #14
    8f08:	446b      	add	r3, sp
    8f0a:	881b      	ldrh	r3, [r3, #0]
    8f0c:	0018      	movs	r0, r3
    8f0e:	f000 fb51 	bl	95b4 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:54

    uint8_t bit[8];

    for (uint32_t count = 0; count < len; count++) {
    8f12:	2300      	movs	r3, #0
    8f14:	930d      	str	r3, [sp, #52]	; 0x34
    8f16:	e11e      	b.n	9156 <suart_send+0x266>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:56
        // 将字符转成二进制数组
        for (uint8_t i = 0; i < 8; i++) {
    8f18:	2333      	movs	r3, #51	; 0x33
    8f1a:	446b      	add	r3, sp
    8f1c:	2200      	movs	r2, #0
    8f1e:	701a      	strb	r2, [r3, #0]
    8f20:	e019      	b.n	8f56 <suart_send+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:57 (discriminator 3)
            bit[i] = arr[count] >> i & 1;
    8f22:	9a02      	ldr	r2, [sp, #8]
    8f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8f26:	18d3      	adds	r3, r2, r3
    8f28:	781b      	ldrb	r3, [r3, #0]
    8f2a:	001a      	movs	r2, r3
    8f2c:	2333      	movs	r3, #51	; 0x33
    8f2e:	446b      	add	r3, sp
    8f30:	781b      	ldrb	r3, [r3, #0]
    8f32:	411a      	asrs	r2, r3
    8f34:	0013      	movs	r3, r2
    8f36:	b2da      	uxtb	r2, r3
    8f38:	2333      	movs	r3, #51	; 0x33
    8f3a:	446b      	add	r3, sp
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	2101      	movs	r1, #1
    8f40:	400a      	ands	r2, r1
    8f42:	b2d1      	uxtb	r1, r2
    8f44:	aa05      	add	r2, sp, #20
    8f46:	54d1      	strb	r1, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:56 (discriminator 3)
        for (uint8_t i = 0; i < 8; i++) {
    8f48:	2333      	movs	r3, #51	; 0x33
    8f4a:	446b      	add	r3, sp
    8f4c:	781a      	ldrb	r2, [r3, #0]
    8f4e:	2333      	movs	r3, #51	; 0x33
    8f50:	446b      	add	r3, sp
    8f52:	3201      	adds	r2, #1
    8f54:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:56 (discriminator 1)
    8f56:	2333      	movs	r3, #51	; 0x33
    8f58:	446b      	add	r3, sp
    8f5a:	781b      	ldrb	r3, [r3, #0]
    8f5c:	2b07      	cmp	r3, #7
    8f5e:	d9e0      	bls.n	8f22 <suart_send+0x32>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:61
        }

        // 起始位，将电平拉低一个周期表示开始发送数据
        suart_set(port, pin, 0);
    8f60:	231d      	movs	r3, #29
    8f62:	446b      	add	r3, sp
    8f64:	7818      	ldrb	r0, [r3, #0]
    8f66:	ab07      	add	r3, sp, #28
    8f68:	781b      	ldrb	r3, [r3, #0]
    8f6a:	2200      	movs	r2, #0
    8f6c:	0019      	movs	r1, r3
    8f6e:	f7ff ff51 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:62
        for (uint16_t i = 0; i < delayCount; i++) {}
    8f72:	ab0c      	add	r3, sp, #48	; 0x30
    8f74:	2200      	movs	r2, #0
    8f76:	801a      	strh	r2, [r3, #0]
    8f78:	e004      	b.n	8f84 <suart_send+0x94>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:62 (discriminator 3)
    8f7a:	ab0c      	add	r3, sp, #48	; 0x30
    8f7c:	881a      	ldrh	r2, [r3, #0]
    8f7e:	ab0c      	add	r3, sp, #48	; 0x30
    8f80:	3201      	adds	r2, #1
    8f82:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:62 (discriminator 1)
    8f84:	ab0c      	add	r3, sp, #48	; 0x30
    8f86:	881b      	ldrh	r3, [r3, #0]
    8f88:	2b15      	cmp	r3, #21
    8f8a:	d9f6      	bls.n	8f7a <suart_send+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:65

        // 第0位
        suart_set(port, pin, bit[0]);
    8f8c:	231d      	movs	r3, #29
    8f8e:	446b      	add	r3, sp
    8f90:	7818      	ldrb	r0, [r3, #0]
    8f92:	ab07      	add	r3, sp, #28
    8f94:	7819      	ldrb	r1, [r3, #0]
    8f96:	ab05      	add	r3, sp, #20
    8f98:	781b      	ldrb	r3, [r3, #0]
    8f9a:	001a      	movs	r2, r3
    8f9c:	f7ff ff3a 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:66
        for (uint16_t i = 0; i < delayCount; i++) {}
    8fa0:	232e      	movs	r3, #46	; 0x2e
    8fa2:	446b      	add	r3, sp
    8fa4:	2200      	movs	r2, #0
    8fa6:	801a      	strh	r2, [r3, #0]
    8fa8:	e006      	b.n	8fb8 <suart_send+0xc8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:66 (discriminator 3)
    8faa:	232e      	movs	r3, #46	; 0x2e
    8fac:	446b      	add	r3, sp
    8fae:	881a      	ldrh	r2, [r3, #0]
    8fb0:	232e      	movs	r3, #46	; 0x2e
    8fb2:	446b      	add	r3, sp
    8fb4:	3201      	adds	r2, #1
    8fb6:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:66 (discriminator 1)
    8fb8:	232e      	movs	r3, #46	; 0x2e
    8fba:	446b      	add	r3, sp
    8fbc:	881b      	ldrh	r3, [r3, #0]
    8fbe:	2b15      	cmp	r3, #21
    8fc0:	d9f3      	bls.n	8faa <suart_send+0xba>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:69

        // 第1位
        suart_set(port, pin, bit[1]);
    8fc2:	231d      	movs	r3, #29
    8fc4:	446b      	add	r3, sp
    8fc6:	7818      	ldrb	r0, [r3, #0]
    8fc8:	ab07      	add	r3, sp, #28
    8fca:	7819      	ldrb	r1, [r3, #0]
    8fcc:	ab05      	add	r3, sp, #20
    8fce:	785b      	ldrb	r3, [r3, #1]
    8fd0:	001a      	movs	r2, r3
    8fd2:	f7ff ff1f 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:70
        for (uint16_t i = 0; i < delayCount; i++) {}
    8fd6:	ab0b      	add	r3, sp, #44	; 0x2c
    8fd8:	2200      	movs	r2, #0
    8fda:	801a      	strh	r2, [r3, #0]
    8fdc:	e004      	b.n	8fe8 <suart_send+0xf8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:70 (discriminator 3)
    8fde:	ab0b      	add	r3, sp, #44	; 0x2c
    8fe0:	881a      	ldrh	r2, [r3, #0]
    8fe2:	ab0b      	add	r3, sp, #44	; 0x2c
    8fe4:	3201      	adds	r2, #1
    8fe6:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:70 (discriminator 1)
    8fe8:	ab0b      	add	r3, sp, #44	; 0x2c
    8fea:	881b      	ldrh	r3, [r3, #0]
    8fec:	2b15      	cmp	r3, #21
    8fee:	d9f6      	bls.n	8fde <suart_send+0xee>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:73

        // 第2位
        suart_set(port, pin, bit[2]);
    8ff0:	231d      	movs	r3, #29
    8ff2:	446b      	add	r3, sp
    8ff4:	7818      	ldrb	r0, [r3, #0]
    8ff6:	ab07      	add	r3, sp, #28
    8ff8:	7819      	ldrb	r1, [r3, #0]
    8ffa:	ab05      	add	r3, sp, #20
    8ffc:	789b      	ldrb	r3, [r3, #2]
    8ffe:	001a      	movs	r2, r3
    9000:	f7ff ff08 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:74
        for (uint16_t i = 0; i < delayCount; i++) {}
    9004:	232a      	movs	r3, #42	; 0x2a
    9006:	446b      	add	r3, sp
    9008:	2200      	movs	r2, #0
    900a:	801a      	strh	r2, [r3, #0]
    900c:	e006      	b.n	901c <suart_send+0x12c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:74 (discriminator 3)
    900e:	232a      	movs	r3, #42	; 0x2a
    9010:	446b      	add	r3, sp
    9012:	881a      	ldrh	r2, [r3, #0]
    9014:	232a      	movs	r3, #42	; 0x2a
    9016:	446b      	add	r3, sp
    9018:	3201      	adds	r2, #1
    901a:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:74 (discriminator 1)
    901c:	232a      	movs	r3, #42	; 0x2a
    901e:	446b      	add	r3, sp
    9020:	881b      	ldrh	r3, [r3, #0]
    9022:	2b15      	cmp	r3, #21
    9024:	d9f3      	bls.n	900e <suart_send+0x11e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:77

        // 第3位
        suart_set(port, pin, bit[3]);
    9026:	231d      	movs	r3, #29
    9028:	446b      	add	r3, sp
    902a:	7818      	ldrb	r0, [r3, #0]
    902c:	ab07      	add	r3, sp, #28
    902e:	7819      	ldrb	r1, [r3, #0]
    9030:	ab05      	add	r3, sp, #20
    9032:	78db      	ldrb	r3, [r3, #3]
    9034:	001a      	movs	r2, r3
    9036:	f7ff feed 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:78
        for (uint16_t i = 0; i < delayCount; i++) {}
    903a:	ab0a      	add	r3, sp, #40	; 0x28
    903c:	2200      	movs	r2, #0
    903e:	801a      	strh	r2, [r3, #0]
    9040:	e004      	b.n	904c <suart_send+0x15c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:78 (discriminator 3)
    9042:	ab0a      	add	r3, sp, #40	; 0x28
    9044:	881a      	ldrh	r2, [r3, #0]
    9046:	ab0a      	add	r3, sp, #40	; 0x28
    9048:	3201      	adds	r2, #1
    904a:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:78 (discriminator 1)
    904c:	ab0a      	add	r3, sp, #40	; 0x28
    904e:	881b      	ldrh	r3, [r3, #0]
    9050:	2b15      	cmp	r3, #21
    9052:	d9f6      	bls.n	9042 <suart_send+0x152>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:81

        // 第4位
        suart_set(port, pin, bit[4]);
    9054:	231d      	movs	r3, #29
    9056:	446b      	add	r3, sp
    9058:	7818      	ldrb	r0, [r3, #0]
    905a:	ab07      	add	r3, sp, #28
    905c:	7819      	ldrb	r1, [r3, #0]
    905e:	ab05      	add	r3, sp, #20
    9060:	791b      	ldrb	r3, [r3, #4]
    9062:	001a      	movs	r2, r3
    9064:	f7ff fed6 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:82
        for (uint16_t i = 0; i < delayCount; i++) {}
    9068:	2326      	movs	r3, #38	; 0x26
    906a:	446b      	add	r3, sp
    906c:	2200      	movs	r2, #0
    906e:	801a      	strh	r2, [r3, #0]
    9070:	e006      	b.n	9080 <suart_send+0x190>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:82 (discriminator 3)
    9072:	2326      	movs	r3, #38	; 0x26
    9074:	446b      	add	r3, sp
    9076:	881a      	ldrh	r2, [r3, #0]
    9078:	2326      	movs	r3, #38	; 0x26
    907a:	446b      	add	r3, sp
    907c:	3201      	adds	r2, #1
    907e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:82 (discriminator 1)
    9080:	2326      	movs	r3, #38	; 0x26
    9082:	446b      	add	r3, sp
    9084:	881b      	ldrh	r3, [r3, #0]
    9086:	2b15      	cmp	r3, #21
    9088:	d9f3      	bls.n	9072 <suart_send+0x182>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:85

        // 第5位
        suart_set(port, pin, bit[5]);
    908a:	231d      	movs	r3, #29
    908c:	446b      	add	r3, sp
    908e:	7818      	ldrb	r0, [r3, #0]
    9090:	ab07      	add	r3, sp, #28
    9092:	7819      	ldrb	r1, [r3, #0]
    9094:	ab05      	add	r3, sp, #20
    9096:	795b      	ldrb	r3, [r3, #5]
    9098:	001a      	movs	r2, r3
    909a:	f7ff febb 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:86
        for (uint16_t i = 0; i < delayCount; i++) {}
    909e:	ab09      	add	r3, sp, #36	; 0x24
    90a0:	2200      	movs	r2, #0
    90a2:	801a      	strh	r2, [r3, #0]
    90a4:	e004      	b.n	90b0 <suart_send+0x1c0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:86 (discriminator 3)
    90a6:	ab09      	add	r3, sp, #36	; 0x24
    90a8:	881a      	ldrh	r2, [r3, #0]
    90aa:	ab09      	add	r3, sp, #36	; 0x24
    90ac:	3201      	adds	r2, #1
    90ae:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:86 (discriminator 1)
    90b0:	ab09      	add	r3, sp, #36	; 0x24
    90b2:	881b      	ldrh	r3, [r3, #0]
    90b4:	2b15      	cmp	r3, #21
    90b6:	d9f6      	bls.n	90a6 <suart_send+0x1b6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:89

        // 第6位
        suart_set(port, pin, bit[6]);
    90b8:	231d      	movs	r3, #29
    90ba:	446b      	add	r3, sp
    90bc:	7818      	ldrb	r0, [r3, #0]
    90be:	ab07      	add	r3, sp, #28
    90c0:	7819      	ldrb	r1, [r3, #0]
    90c2:	ab05      	add	r3, sp, #20
    90c4:	799b      	ldrb	r3, [r3, #6]
    90c6:	001a      	movs	r2, r3
    90c8:	f7ff fea4 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:90
        for (uint16_t i = 0; i < delayCount; i++) {}
    90cc:	2322      	movs	r3, #34	; 0x22
    90ce:	446b      	add	r3, sp
    90d0:	2200      	movs	r2, #0
    90d2:	801a      	strh	r2, [r3, #0]
    90d4:	e006      	b.n	90e4 <suart_send+0x1f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:90 (discriminator 3)
    90d6:	2322      	movs	r3, #34	; 0x22
    90d8:	446b      	add	r3, sp
    90da:	881a      	ldrh	r2, [r3, #0]
    90dc:	2322      	movs	r3, #34	; 0x22
    90de:	446b      	add	r3, sp
    90e0:	3201      	adds	r2, #1
    90e2:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:90 (discriminator 1)
    90e4:	2322      	movs	r3, #34	; 0x22
    90e6:	446b      	add	r3, sp
    90e8:	881b      	ldrh	r3, [r3, #0]
    90ea:	2b15      	cmp	r3, #21
    90ec:	d9f3      	bls.n	90d6 <suart_send+0x1e6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:93

        // 第7位
        suart_set(port, pin, bit[7]);
    90ee:	231d      	movs	r3, #29
    90f0:	446b      	add	r3, sp
    90f2:	7818      	ldrb	r0, [r3, #0]
    90f4:	ab07      	add	r3, sp, #28
    90f6:	7819      	ldrb	r1, [r3, #0]
    90f8:	ab05      	add	r3, sp, #20
    90fa:	79db      	ldrb	r3, [r3, #7]
    90fc:	001a      	movs	r2, r3
    90fe:	f7ff fe89 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:94
        for (uint16_t i = 0; i < delayCount; i++) {}
    9102:	ab08      	add	r3, sp, #32
    9104:	2200      	movs	r2, #0
    9106:	801a      	strh	r2, [r3, #0]
    9108:	e004      	b.n	9114 <suart_send+0x224>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:94 (discriminator 3)
    910a:	ab08      	add	r3, sp, #32
    910c:	881a      	ldrh	r2, [r3, #0]
    910e:	ab08      	add	r3, sp, #32
    9110:	3201      	adds	r2, #1
    9112:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:94 (discriminator 1)
    9114:	ab08      	add	r3, sp, #32
    9116:	881b      	ldrh	r3, [r3, #0]
    9118:	2b15      	cmp	r3, #21
    911a:	d9f6      	bls.n	910a <suart_send+0x21a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:97

        // 终止位, 将电平拉高
        suart_set(port, pin, 1);
    911c:	231d      	movs	r3, #29
    911e:	446b      	add	r3, sp
    9120:	7818      	ldrb	r0, [r3, #0]
    9122:	ab07      	add	r3, sp, #28
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	2201      	movs	r2, #1
    9128:	0019      	movs	r1, r3
    912a:	f7ff fe73 	bl	8e14 <suart_set>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:98
        for (uint16_t i = 0; i < delayCount; i++) {}
    912e:	231e      	movs	r3, #30
    9130:	446b      	add	r3, sp
    9132:	2200      	movs	r2, #0
    9134:	801a      	strh	r2, [r3, #0]
    9136:	e006      	b.n	9146 <suart_send+0x256>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:98 (discriminator 3)
    9138:	231e      	movs	r3, #30
    913a:	446b      	add	r3, sp
    913c:	881a      	ldrh	r2, [r3, #0]
    913e:	231e      	movs	r3, #30
    9140:	446b      	add	r3, sp
    9142:	3201      	adds	r2, #1
    9144:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:98 (discriminator 1)
    9146:	231e      	movs	r3, #30
    9148:	446b      	add	r3, sp
    914a:	881b      	ldrh	r3, [r3, #0]
    914c:	2b15      	cmp	r3, #21
    914e:	d9f3      	bls.n	9138 <suart_send+0x248>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:54 (discriminator 2)
    for (uint32_t count = 0; count < len; count++) {
    9150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9152:	3301      	adds	r3, #1
    9154:	930d      	str	r3, [sp, #52]	; 0x34
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:54 (discriminator 1)
    9156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9158:	9b01      	ldr	r3, [sp, #4]
    915a:	429a      	cmp	r2, r3
    915c:	d200      	bcs.n	9160 <suart_send+0x270>
    915e:	e6db      	b.n	8f18 <suart_send+0x28>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:100
    }
}
    9160:	46c0      	nop			; (mov r8, r8)
    9162:	46c0      	nop			; (mov r8, r8)
    9164:	b00f      	add	sp, #60	; 0x3c
    9166:	bd00      	pop	{pc}

00009168 <suart_receive>:
suart_receive():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:103


uint32_t suart_receive(uint16_t port_pin, uint8_t* arr) {
    9168:	b500      	push	{lr}
    916a:	b08d      	sub	sp, #52	; 0x34
    916c:	0002      	movs	r2, r0
    916e:	9100      	str	r1, [sp, #0]
    9170:	466b      	mov	r3, sp
    9172:	3306      	adds	r3, #6
    9174:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:106

    uint8_t port, pin;
    uint16_t count = 4096;
    9176:	232e      	movs	r3, #46	; 0x2e
    9178:	446b      	add	r3, sp
    917a:	2280      	movs	r2, #128	; 0x80
    917c:	0152      	lsls	r2, r2, #5
    917e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:107
    uint32_t len = 0;
    9180:	2300      	movs	r3, #0
    9182:	930a      	str	r3, [sp, #40]	; 0x28
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:108
    arr[len] = 0;
    9184:	9a00      	ldr	r2, [sp, #0]
    9186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9188:	18d3      	adds	r3, r2, r3
    918a:	2200      	movs	r2, #0
    918c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:111
    uint8_t bit[8];

    suart_get_port_pin(port_pin, &port, &pin);
    918e:	2211      	movs	r2, #17
    9190:	446a      	add	r2, sp
    9192:	2112      	movs	r1, #18
    9194:	4469      	add	r1, sp
    9196:	466b      	mov	r3, sp
    9198:	3306      	adds	r3, #6
    919a:	881b      	ldrh	r3, [r3, #0]
    919c:	0018      	movs	r0, r3
    919e:	f000 fa09 	bl	95b4 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:113

    while (count--) {
    91a2:	e184      	b.n	94ae <suart_receive+0x346>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:115
        // 起始位
        for (uint16_t i = 0; i < delayCount / 2; i++) {}
    91a4:	2326      	movs	r3, #38	; 0x26
    91a6:	446b      	add	r3, sp
    91a8:	2200      	movs	r2, #0
    91aa:	801a      	strh	r2, [r3, #0]
    91ac:	e006      	b.n	91bc <suart_receive+0x54>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:115 (discriminator 3)
    91ae:	2326      	movs	r3, #38	; 0x26
    91b0:	446b      	add	r3, sp
    91b2:	881a      	ldrh	r2, [r3, #0]
    91b4:	2326      	movs	r3, #38	; 0x26
    91b6:	446b      	add	r3, sp
    91b8:	3201      	adds	r2, #1
    91ba:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:115 (discriminator 1)
    91bc:	2326      	movs	r3, #38	; 0x26
    91be:	446b      	add	r3, sp
    91c0:	881b      	ldrh	r3, [r3, #0]
    91c2:	2b0a      	cmp	r3, #10
    91c4:	d9f3      	bls.n	91ae <suart_receive+0x46>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:116
        suart_get(port, pin);
    91c6:	2312      	movs	r3, #18
    91c8:	446b      	add	r3, sp
    91ca:	781a      	ldrb	r2, [r3, #0]
    91cc:	2311      	movs	r3, #17
    91ce:	446b      	add	r3, sp
    91d0:	781b      	ldrb	r3, [r3, #0]
    91d2:	0019      	movs	r1, r3
    91d4:	0010      	movs	r0, r2
    91d6:	f7ff fe6b 	bl	8eb0 <suart_get>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:119

        // 第0位
        for (uint16_t i = 0; i < delayCount; i++) {}
    91da:	ab09      	add	r3, sp, #36	; 0x24
    91dc:	2200      	movs	r2, #0
    91de:	801a      	strh	r2, [r3, #0]
    91e0:	e004      	b.n	91ec <suart_receive+0x84>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:119 (discriminator 3)
    91e2:	ab09      	add	r3, sp, #36	; 0x24
    91e4:	881a      	ldrh	r2, [r3, #0]
    91e6:	ab09      	add	r3, sp, #36	; 0x24
    91e8:	3201      	adds	r2, #1
    91ea:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:119 (discriminator 1)
    91ec:	ab09      	add	r3, sp, #36	; 0x24
    91ee:	881b      	ldrh	r3, [r3, #0]
    91f0:	2b15      	cmp	r3, #21
    91f2:	d9f6      	bls.n	91e2 <suart_receive+0x7a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:120
        bit[0] = suart_get(port, pin);
    91f4:	2312      	movs	r3, #18
    91f6:	446b      	add	r3, sp
    91f8:	781a      	ldrb	r2, [r3, #0]
    91fa:	2311      	movs	r3, #17
    91fc:	446b      	add	r3, sp
    91fe:	781b      	ldrb	r3, [r3, #0]
    9200:	0019      	movs	r1, r3
    9202:	0010      	movs	r0, r2
    9204:	f7ff fe54 	bl	8eb0 <suart_get>
    9208:	0003      	movs	r3, r0
    920a:	001a      	movs	r2, r3
    920c:	ab02      	add	r3, sp, #8
    920e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:123

        // 第1位
        for (uint16_t i = 0; i < delayCount; i++) {}
    9210:	2322      	movs	r3, #34	; 0x22
    9212:	446b      	add	r3, sp
    9214:	2200      	movs	r2, #0
    9216:	801a      	strh	r2, [r3, #0]
    9218:	e006      	b.n	9228 <suart_receive+0xc0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:123 (discriminator 3)
    921a:	2322      	movs	r3, #34	; 0x22
    921c:	446b      	add	r3, sp
    921e:	881a      	ldrh	r2, [r3, #0]
    9220:	2322      	movs	r3, #34	; 0x22
    9222:	446b      	add	r3, sp
    9224:	3201      	adds	r2, #1
    9226:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:123 (discriminator 1)
    9228:	2322      	movs	r3, #34	; 0x22
    922a:	446b      	add	r3, sp
    922c:	881b      	ldrh	r3, [r3, #0]
    922e:	2b15      	cmp	r3, #21
    9230:	d9f3      	bls.n	921a <suart_receive+0xb2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:124
        bit[1] = suart_get(port, pin);
    9232:	2312      	movs	r3, #18
    9234:	446b      	add	r3, sp
    9236:	781a      	ldrb	r2, [r3, #0]
    9238:	2311      	movs	r3, #17
    923a:	446b      	add	r3, sp
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	0019      	movs	r1, r3
    9240:	0010      	movs	r0, r2
    9242:	f7ff fe35 	bl	8eb0 <suart_get>
    9246:	0003      	movs	r3, r0
    9248:	001a      	movs	r2, r3
    924a:	ab02      	add	r3, sp, #8
    924c:	705a      	strb	r2, [r3, #1]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:127

        // 第2位
        for (uint16_t i = 0; i < delayCount; i++) {}
    924e:	ab08      	add	r3, sp, #32
    9250:	2200      	movs	r2, #0
    9252:	801a      	strh	r2, [r3, #0]
    9254:	e004      	b.n	9260 <suart_receive+0xf8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:127 (discriminator 3)
    9256:	ab08      	add	r3, sp, #32
    9258:	881a      	ldrh	r2, [r3, #0]
    925a:	ab08      	add	r3, sp, #32
    925c:	3201      	adds	r2, #1
    925e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:127 (discriminator 1)
    9260:	ab08      	add	r3, sp, #32
    9262:	881b      	ldrh	r3, [r3, #0]
    9264:	2b15      	cmp	r3, #21
    9266:	d9f6      	bls.n	9256 <suart_receive+0xee>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:128
        bit[2] = suart_get(port, pin);
    9268:	2312      	movs	r3, #18
    926a:	446b      	add	r3, sp
    926c:	781a      	ldrb	r2, [r3, #0]
    926e:	2311      	movs	r3, #17
    9270:	446b      	add	r3, sp
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	0019      	movs	r1, r3
    9276:	0010      	movs	r0, r2
    9278:	f7ff fe1a 	bl	8eb0 <suart_get>
    927c:	0003      	movs	r3, r0
    927e:	001a      	movs	r2, r3
    9280:	ab02      	add	r3, sp, #8
    9282:	709a      	strb	r2, [r3, #2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:131

        // 第3位
        for (uint16_t i = 0; i < delayCount; i++) {}
    9284:	231e      	movs	r3, #30
    9286:	446b      	add	r3, sp
    9288:	2200      	movs	r2, #0
    928a:	801a      	strh	r2, [r3, #0]
    928c:	e006      	b.n	929c <suart_receive+0x134>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:131 (discriminator 3)
    928e:	231e      	movs	r3, #30
    9290:	446b      	add	r3, sp
    9292:	881a      	ldrh	r2, [r3, #0]
    9294:	231e      	movs	r3, #30
    9296:	446b      	add	r3, sp
    9298:	3201      	adds	r2, #1
    929a:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:131 (discriminator 1)
    929c:	231e      	movs	r3, #30
    929e:	446b      	add	r3, sp
    92a0:	881b      	ldrh	r3, [r3, #0]
    92a2:	2b15      	cmp	r3, #21
    92a4:	d9f3      	bls.n	928e <suart_receive+0x126>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:132
        bit[3] = suart_get(port, pin);
    92a6:	2312      	movs	r3, #18
    92a8:	446b      	add	r3, sp
    92aa:	781a      	ldrb	r2, [r3, #0]
    92ac:	2311      	movs	r3, #17
    92ae:	446b      	add	r3, sp
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	0019      	movs	r1, r3
    92b4:	0010      	movs	r0, r2
    92b6:	f7ff fdfb 	bl	8eb0 <suart_get>
    92ba:	0003      	movs	r3, r0
    92bc:	001a      	movs	r2, r3
    92be:	ab02      	add	r3, sp, #8
    92c0:	70da      	strb	r2, [r3, #3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:135

        // 第4位
        for (uint16_t i = 0; i < delayCount; i++) {}
    92c2:	ab07      	add	r3, sp, #28
    92c4:	2200      	movs	r2, #0
    92c6:	801a      	strh	r2, [r3, #0]
    92c8:	e004      	b.n	92d4 <suart_receive+0x16c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:135 (discriminator 3)
    92ca:	ab07      	add	r3, sp, #28
    92cc:	881a      	ldrh	r2, [r3, #0]
    92ce:	ab07      	add	r3, sp, #28
    92d0:	3201      	adds	r2, #1
    92d2:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:135 (discriminator 1)
    92d4:	ab07      	add	r3, sp, #28
    92d6:	881b      	ldrh	r3, [r3, #0]
    92d8:	2b15      	cmp	r3, #21
    92da:	d9f6      	bls.n	92ca <suart_receive+0x162>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:136
        bit[4] = suart_get(port, pin);
    92dc:	2312      	movs	r3, #18
    92de:	446b      	add	r3, sp
    92e0:	781a      	ldrb	r2, [r3, #0]
    92e2:	2311      	movs	r3, #17
    92e4:	446b      	add	r3, sp
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	0019      	movs	r1, r3
    92ea:	0010      	movs	r0, r2
    92ec:	f7ff fde0 	bl	8eb0 <suart_get>
    92f0:	0003      	movs	r3, r0
    92f2:	001a      	movs	r2, r3
    92f4:	ab02      	add	r3, sp, #8
    92f6:	711a      	strb	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:139

        // 第5位
        for (uint16_t i = 0; i < delayCount; i++) {}
    92f8:	231a      	movs	r3, #26
    92fa:	446b      	add	r3, sp
    92fc:	2200      	movs	r2, #0
    92fe:	801a      	strh	r2, [r3, #0]
    9300:	e006      	b.n	9310 <suart_receive+0x1a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:139 (discriminator 3)
    9302:	231a      	movs	r3, #26
    9304:	446b      	add	r3, sp
    9306:	881a      	ldrh	r2, [r3, #0]
    9308:	231a      	movs	r3, #26
    930a:	446b      	add	r3, sp
    930c:	3201      	adds	r2, #1
    930e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:139 (discriminator 1)
    9310:	231a      	movs	r3, #26
    9312:	446b      	add	r3, sp
    9314:	881b      	ldrh	r3, [r3, #0]
    9316:	2b15      	cmp	r3, #21
    9318:	d9f3      	bls.n	9302 <suart_receive+0x19a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:140
        bit[5] = suart_get(port, pin);
    931a:	2312      	movs	r3, #18
    931c:	446b      	add	r3, sp
    931e:	781a      	ldrb	r2, [r3, #0]
    9320:	2311      	movs	r3, #17
    9322:	446b      	add	r3, sp
    9324:	781b      	ldrb	r3, [r3, #0]
    9326:	0019      	movs	r1, r3
    9328:	0010      	movs	r0, r2
    932a:	f7ff fdc1 	bl	8eb0 <suart_get>
    932e:	0003      	movs	r3, r0
    9330:	001a      	movs	r2, r3
    9332:	ab02      	add	r3, sp, #8
    9334:	715a      	strb	r2, [r3, #5]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:143

        // 第6位
        for (uint16_t i = 0; i < delayCount; i++) {}
    9336:	ab06      	add	r3, sp, #24
    9338:	2200      	movs	r2, #0
    933a:	801a      	strh	r2, [r3, #0]
    933c:	e004      	b.n	9348 <suart_receive+0x1e0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:143 (discriminator 3)
    933e:	ab06      	add	r3, sp, #24
    9340:	881a      	ldrh	r2, [r3, #0]
    9342:	ab06      	add	r3, sp, #24
    9344:	3201      	adds	r2, #1
    9346:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:143 (discriminator 1)
    9348:	ab06      	add	r3, sp, #24
    934a:	881b      	ldrh	r3, [r3, #0]
    934c:	2b15      	cmp	r3, #21
    934e:	d9f6      	bls.n	933e <suart_receive+0x1d6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:144
        bit[6] = suart_get(port, pin);
    9350:	2312      	movs	r3, #18
    9352:	446b      	add	r3, sp
    9354:	781a      	ldrb	r2, [r3, #0]
    9356:	2311      	movs	r3, #17
    9358:	446b      	add	r3, sp
    935a:	781b      	ldrb	r3, [r3, #0]
    935c:	0019      	movs	r1, r3
    935e:	0010      	movs	r0, r2
    9360:	f7ff fda6 	bl	8eb0 <suart_get>
    9364:	0003      	movs	r3, r0
    9366:	001a      	movs	r2, r3
    9368:	ab02      	add	r3, sp, #8
    936a:	719a      	strb	r2, [r3, #6]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:147

        // 第7位
        for (uint16_t i = 0; i < delayCount; i++) {}
    936c:	2316      	movs	r3, #22
    936e:	446b      	add	r3, sp
    9370:	2200      	movs	r2, #0
    9372:	801a      	strh	r2, [r3, #0]
    9374:	e006      	b.n	9384 <suart_receive+0x21c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:147 (discriminator 3)
    9376:	2316      	movs	r3, #22
    9378:	446b      	add	r3, sp
    937a:	881a      	ldrh	r2, [r3, #0]
    937c:	2316      	movs	r3, #22
    937e:	446b      	add	r3, sp
    9380:	3201      	adds	r2, #1
    9382:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:147 (discriminator 1)
    9384:	2316      	movs	r3, #22
    9386:	446b      	add	r3, sp
    9388:	881b      	ldrh	r3, [r3, #0]
    938a:	2b15      	cmp	r3, #21
    938c:	d9f3      	bls.n	9376 <suart_receive+0x20e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:148
        bit[7] = suart_get(port, pin);
    938e:	2312      	movs	r3, #18
    9390:	446b      	add	r3, sp
    9392:	781a      	ldrb	r2, [r3, #0]
    9394:	2311      	movs	r3, #17
    9396:	446b      	add	r3, sp
    9398:	781b      	ldrb	r3, [r3, #0]
    939a:	0019      	movs	r1, r3
    939c:	0010      	movs	r0, r2
    939e:	f7ff fd87 	bl	8eb0 <suart_get>
    93a2:	0003      	movs	r3, r0
    93a4:	001a      	movs	r2, r3
    93a6:	ab02      	add	r3, sp, #8
    93a8:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:152

        // 终止位, 这里减少10次，是因为下面的语句执行也要占用一定时间
        // 所以利用终止位的时间来进行这些运算
        for (uint16_t i = 0; i < delayCount - 10; i++) {}
    93aa:	ab05      	add	r3, sp, #20
    93ac:	2200      	movs	r2, #0
    93ae:	801a      	strh	r2, [r3, #0]
    93b0:	e004      	b.n	93bc <suart_receive+0x254>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:152 (discriminator 3)
    93b2:	ab05      	add	r3, sp, #20
    93b4:	881a      	ldrh	r2, [r3, #0]
    93b6:	ab05      	add	r3, sp, #20
    93b8:	3201      	adds	r2, #1
    93ba:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:152 (discriminator 1)
    93bc:	ab05      	add	r3, sp, #20
    93be:	881b      	ldrh	r3, [r3, #0]
    93c0:	2b0b      	cmp	r3, #11
    93c2:	d9f6      	bls.n	93b2 <suart_receive+0x24a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:154

        for (uint8_t i = 0; i < 8; i++) {
    93c4:	2313      	movs	r3, #19
    93c6:	446b      	add	r3, sp
    93c8:	2200      	movs	r2, #0
    93ca:	701a      	strb	r2, [r3, #0]
    93cc:	e01c      	b.n	9408 <suart_receive+0x2a0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:155 (discriminator 3)
            arr[len] += (bit[i] << i);
    93ce:	9a00      	ldr	r2, [sp, #0]
    93d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    93d2:	18d3      	adds	r3, r2, r3
    93d4:	7819      	ldrb	r1, [r3, #0]
    93d6:	2313      	movs	r3, #19
    93d8:	446b      	add	r3, sp
    93da:	781b      	ldrb	r3, [r3, #0]
    93dc:	aa02      	add	r2, sp, #8
    93de:	5cd3      	ldrb	r3, [r2, r3]
    93e0:	001a      	movs	r2, r3
    93e2:	2313      	movs	r3, #19
    93e4:	446b      	add	r3, sp
    93e6:	781b      	ldrb	r3, [r3, #0]
    93e8:	409a      	lsls	r2, r3
    93ea:	0013      	movs	r3, r2
    93ec:	b2da      	uxtb	r2, r3
    93ee:	9800      	ldr	r0, [sp, #0]
    93f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    93f2:	18c3      	adds	r3, r0, r3
    93f4:	188a      	adds	r2, r1, r2
    93f6:	b2d2      	uxtb	r2, r2
    93f8:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:154 (discriminator 3)
        for (uint8_t i = 0; i < 8; i++) {
    93fa:	2313      	movs	r3, #19
    93fc:	446b      	add	r3, sp
    93fe:	781a      	ldrb	r2, [r3, #0]
    9400:	2313      	movs	r3, #19
    9402:	446b      	add	r3, sp
    9404:	3201      	adds	r2, #1
    9406:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:154 (discriminator 1)
    9408:	2313      	movs	r3, #19
    940a:	446b      	add	r3, sp
    940c:	781b      	ldrb	r3, [r3, #0]
    940e:	2b07      	cmp	r3, #7
    9410:	d9dd      	bls.n	93ce <suart_receive+0x266>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:157
        }
        if (!(arr[len] ^ 255)) {
    9412:	9a00      	ldr	r2, [sp, #0]
    9414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9416:	18d3      	adds	r3, r2, r3
    9418:	781b      	ldrb	r3, [r3, #0]
    941a:	2bff      	cmp	r3, #255	; 0xff
    941c:	d123      	bne.n	9466 <suart_receive+0x2fe>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:158
            arr[len] = '\0';
    941e:	9a00      	ldr	r2, [sp, #0]
    9420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9422:	18d3      	adds	r3, r2, r3
    9424:	2200      	movs	r2, #0
    9426:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:159
            PORT_PCR(port, pin) |= PORT_PCR_ISF(1); // 清除中断状态
    9428:	2312      	movs	r3, #18
    942a:	446b      	add	r3, sp
    942c:	781b      	ldrb	r3, [r3, #0]
    942e:	029b      	lsls	r3, r3, #10
    9430:	2211      	movs	r2, #17
    9432:	446a      	add	r2, sp
    9434:	7812      	ldrb	r2, [r2, #0]
    9436:	189b      	adds	r3, r3, r2
    9438:	009b      	lsls	r3, r3, #2
    943a:	4a23      	ldr	r2, [pc, #140]	; (94c8 <suart_receive+0x360>)
    943c:	4694      	mov	ip, r2
    943e:	4463      	add	r3, ip
    9440:	681a      	ldr	r2, [r3, #0]
    9442:	2312      	movs	r3, #18
    9444:	446b      	add	r3, sp
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	029b      	lsls	r3, r3, #10
    944a:	2111      	movs	r1, #17
    944c:	4469      	add	r1, sp
    944e:	7809      	ldrb	r1, [r1, #0]
    9450:	185b      	adds	r3, r3, r1
    9452:	009b      	lsls	r3, r3, #2
    9454:	491c      	ldr	r1, [pc, #112]	; (94c8 <suart_receive+0x360>)
    9456:	468c      	mov	ip, r1
    9458:	4463      	add	r3, ip
    945a:	2180      	movs	r1, #128	; 0x80
    945c:	0449      	lsls	r1, r1, #17
    945e:	430a      	orrs	r2, r1
    9460:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:160
            return len;
    9462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9464:	e02d      	b.n	94c2 <suart_receive+0x35a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:162
        }
        count = 4096;
    9466:	232e      	movs	r3, #46	; 0x2e
    9468:	446b      	add	r3, sp
    946a:	2280      	movs	r2, #128	; 0x80
    946c:	0152      	lsls	r2, r2, #5
    946e:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:163
        arr[++len] = 0;
    9470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9472:	3301      	adds	r3, #1
    9474:	930a      	str	r3, [sp, #40]	; 0x28
    9476:	9a00      	ldr	r2, [sp, #0]
    9478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    947a:	18d3      	adds	r3, r2, r3
    947c:	2200      	movs	r2, #0
    947e:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:166

        // 消耗掉终止位剩余的时间，方便进行下一个字符的接收
        while (count--) {
    9480:	e00c      	b.n	949c <suart_receive+0x334>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:167
            if (!suart_get(port, pin)) {
    9482:	2312      	movs	r3, #18
    9484:	446b      	add	r3, sp
    9486:	781a      	ldrb	r2, [r3, #0]
    9488:	2311      	movs	r3, #17
    948a:	446b      	add	r3, sp
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	0019      	movs	r1, r3
    9490:	0010      	movs	r0, r2
    9492:	f7ff fd0d 	bl	8eb0 <suart_get>
    9496:	1e03      	subs	r3, r0, #0
    9498:	d100      	bne.n	949c <suart_receive+0x334>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:168
                break;
    949a:	e008      	b.n	94ae <suart_receive+0x346>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:166
        while (count--) {
    949c:	232e      	movs	r3, #46	; 0x2e
    949e:	446b      	add	r3, sp
    94a0:	881b      	ldrh	r3, [r3, #0]
    94a2:	222e      	movs	r2, #46	; 0x2e
    94a4:	446a      	add	r2, sp
    94a6:	1e59      	subs	r1, r3, #1
    94a8:	8011      	strh	r1, [r2, #0]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d1e9      	bne.n	9482 <suart_receive+0x31a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:113
    while (count--) {
    94ae:	232e      	movs	r3, #46	; 0x2e
    94b0:	446b      	add	r3, sp
    94b2:	881b      	ldrh	r3, [r3, #0]
    94b4:	222e      	movs	r2, #46	; 0x2e
    94b6:	446a      	add	r2, sp
    94b8:	1e59      	subs	r1, r3, #1
    94ba:	8011      	strh	r1, [r2, #0]
    94bc:	2b00      	cmp	r3, #0
    94be:	d000      	beq.n	94c2 <suart_receive+0x35a>
    94c0:	e670      	b.n	91a4 <suart_receive+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:172
            }
        }
    }
}
    94c2:	0018      	movs	r0, r3
    94c4:	b00d      	add	sp, #52	; 0x34
    94c6:	bd00      	pop	{pc}
    94c8:	40049000 	.word	0x40049000

000094cc <suart_enable_receive_interupt>:
suart_enable_receive_interupt():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:175

// 打开串口接收中断, 下降沿触发
void suart_enable_receive_interupt(uint16_t port_pin) {
    94cc:	b500      	push	{lr}
    94ce:	b085      	sub	sp, #20
    94d0:	0002      	movs	r2, r0
    94d2:	466b      	mov	r3, sp
    94d4:	3306      	adds	r3, #6
    94d6:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:177
    uint8_t port, pin;
    suart_get_port_pin(port_pin, &port, &pin);
    94d8:	220e      	movs	r2, #14
    94da:	446a      	add	r2, sp
    94dc:	210f      	movs	r1, #15
    94de:	4469      	add	r1, sp
    94e0:	466b      	mov	r3, sp
    94e2:	3306      	adds	r3, #6
    94e4:	881b      	ldrh	r3, [r3, #0]
    94e6:	0018      	movs	r0, r3
    94e8:	f000 f864 	bl	95b4 <suart_get_port_pin>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:180

    // 清引脚控制寄存器中断配置字段，将D19-D16置零
    PORT_PCR(port, pin) &= ~PORT_PCR_IRQC_MASK;
    94ec:	230f      	movs	r3, #15
    94ee:	446b      	add	r3, sp
    94f0:	781b      	ldrb	r3, [r3, #0]
    94f2:	029b      	lsls	r3, r3, #10
    94f4:	220e      	movs	r2, #14
    94f6:	446a      	add	r2, sp
    94f8:	7812      	ldrb	r2, [r2, #0]
    94fa:	189b      	adds	r3, r3, r2
    94fc:	009b      	lsls	r3, r3, #2
    94fe:	4a29      	ldr	r2, [pc, #164]	; (95a4 <suart_enable_receive_interupt+0xd8>)
    9500:	4694      	mov	ip, r2
    9502:	4463      	add	r3, ip
    9504:	681a      	ldr	r2, [r3, #0]
    9506:	230f      	movs	r3, #15
    9508:	446b      	add	r3, sp
    950a:	781b      	ldrb	r3, [r3, #0]
    950c:	029b      	lsls	r3, r3, #10
    950e:	210e      	movs	r1, #14
    9510:	4469      	add	r1, sp
    9512:	7809      	ldrb	r1, [r1, #0]
    9514:	185b      	adds	r3, r3, r1
    9516:	009b      	lsls	r3, r3, #2
    9518:	4922      	ldr	r1, [pc, #136]	; (95a4 <suart_enable_receive_interupt+0xd8>)
    951a:	468c      	mov	ip, r1
    951c:	4463      	add	r3, ip
    951e:	4922      	ldr	r1, [pc, #136]	; (95a8 <suart_enable_receive_interupt+0xdc>)
    9520:	400a      	ands	r2, r1
    9522:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:182
    // 将D19-D16置成1010， 表示下降沿触发
    PORT_PCR(port, pin) |= PORT_PCR_IRQC(10);
    9524:	230f      	movs	r3, #15
    9526:	446b      	add	r3, sp
    9528:	781b      	ldrb	r3, [r3, #0]
    952a:	029b      	lsls	r3, r3, #10
    952c:	220e      	movs	r2, #14
    952e:	446a      	add	r2, sp
    9530:	7812      	ldrb	r2, [r2, #0]
    9532:	189b      	adds	r3, r3, r2
    9534:	009b      	lsls	r3, r3, #2
    9536:	4a1b      	ldr	r2, [pc, #108]	; (95a4 <suart_enable_receive_interupt+0xd8>)
    9538:	4694      	mov	ip, r2
    953a:	4463      	add	r3, ip
    953c:	681a      	ldr	r2, [r3, #0]
    953e:	230f      	movs	r3, #15
    9540:	446b      	add	r3, sp
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	029b      	lsls	r3, r3, #10
    9546:	210e      	movs	r1, #14
    9548:	4469      	add	r1, sp
    954a:	7809      	ldrb	r1, [r1, #0]
    954c:	185b      	adds	r3, r3, r1
    954e:	009b      	lsls	r3, r3, #2
    9550:	4914      	ldr	r1, [pc, #80]	; (95a4 <suart_enable_receive_interupt+0xd8>)
    9552:	468c      	mov	ip, r1
    9554:	4463      	add	r3, ip
    9556:	21a0      	movs	r1, #160	; 0xa0
    9558:	0309      	lsls	r1, r1, #12
    955a:	430a      	orrs	r2, r1
    955c:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:184

    if (port == 0) {
    955e:	230f      	movs	r3, #15
    9560:	446b      	add	r3, sp
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	2b00      	cmp	r3, #0
    9566:	d103      	bne.n	9570 <suart_enable_receive_interupt+0xa4>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:185
        NVIC_EnableIRQ(PORTA_IRQn);    //使能A端口中断
    9568:	201e      	movs	r0, #30
    956a:	f7ff fb93 	bl	8c94 <NVIC_EnableIRQ>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:195
    else {
        printf("Fail to init port interupt！！！\n");
        printf("Please select around Port A or C or D\n");
    }

}
    956e:	e015      	b.n	959c <suart_enable_receive_interupt+0xd0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:187
    else if (port == 2 || port == 3) {
    9570:	230f      	movs	r3, #15
    9572:	446b      	add	r3, sp
    9574:	781b      	ldrb	r3, [r3, #0]
    9576:	2b02      	cmp	r3, #2
    9578:	d004      	beq.n	9584 <suart_enable_receive_interupt+0xb8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:187 (discriminator 1)
    957a:	230f      	movs	r3, #15
    957c:	446b      	add	r3, sp
    957e:	781b      	ldrb	r3, [r3, #0]
    9580:	2b03      	cmp	r3, #3
    9582:	d103      	bne.n	958c <suart_enable_receive_interupt+0xc0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:188
        NVIC_EnableIRQ(PORTC_PORTD_IRQn);    //使能C、D端口中断
    9584:	201f      	movs	r0, #31
    9586:	f7ff fb85 	bl	8c94 <NVIC_EnableIRQ>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:195
}
    958a:	e007      	b.n	959c <suart_enable_receive_interupt+0xd0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:191
        printf("Fail to init port interupt！！！\n");
    958c:	4b07      	ldr	r3, [pc, #28]	; (95ac <suart_enable_receive_interupt+0xe0>)
    958e:	0018      	movs	r0, r3
    9590:	f000 ff5e 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:192
        printf("Please select around Port A or C or D\n");
    9594:	4b06      	ldr	r3, [pc, #24]	; (95b0 <suart_enable_receive_interupt+0xe4>)
    9596:	0018      	movs	r0, r3
    9598:	f000 ff5a 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:195
}
    959c:	46c0      	nop			; (mov r8, r8)
    959e:	b005      	add	sp, #20
    95a0:	bd00      	pop	{pc}
    95a2:	46c0      	nop			; (mov r8, r8)
    95a4:	40049000 	.word	0x40049000
    95a8:	fff0ffff 	.word	0xfff0ffff
    95ac:	0000a4dc 	.word	0x0000a4dc
    95b0:	0000a500 	.word	0x0000a500

000095b4 <suart_get_port_pin>:
suart_get_port_pin():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:200


// 内部函数存放处
void suart_get_port_pin(uint16_t port_pin, uint8_t* port, uint8_t* pin)
{
    95b4:	b084      	sub	sp, #16
    95b6:	9102      	str	r1, [sp, #8]
    95b8:	9201      	str	r2, [sp, #4]
    95ba:	230e      	movs	r3, #14
    95bc:	446b      	add	r3, sp
    95be:	1c02      	adds	r2, r0, #0
    95c0:	801a      	strh	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:201
    *port = (port_pin >> 8);
    95c2:	230e      	movs	r3, #14
    95c4:	446b      	add	r3, sp
    95c6:	881b      	ldrh	r3, [r3, #0]
    95c8:	0a1b      	lsrs	r3, r3, #8
    95ca:	b29b      	uxth	r3, r3
    95cc:	b2da      	uxtb	r2, r3
    95ce:	9b02      	ldr	r3, [sp, #8]
    95d0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:202
    *pin = port_pin;
    95d2:	230e      	movs	r3, #14
    95d4:	446b      	add	r3, sp
    95d6:	881b      	ldrh	r3, [r3, #0]
    95d8:	b2da      	uxtb	r2, r3
    95da:	9b01      	ldr	r3, [sp, #4]
    95dc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/suart.c:203
}
    95de:	46c0      	nop			; (mov r8, r8)
    95e0:	b004      	add	sp, #16
    95e2:	4770      	bx	lr

000095e4 <wdog_stop>:
wdog_stop():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/wdog.c:40
//参数说明：无
//函数返回：无
//=========================================================================
void wdog_stop()
{
    SIM_COPC &= ~SIM_COPC_COPT_MASK;
    95e4:	4a06      	ldr	r2, [pc, #24]	; (9600 <wdog_stop+0x1c>)
    95e6:	2388      	movs	r3, #136	; 0x88
    95e8:	015b      	lsls	r3, r3, #5
    95ea:	58d3      	ldr	r3, [r2, r3]
    95ec:	4904      	ldr	r1, [pc, #16]	; (9600 <wdog_stop+0x1c>)
    95ee:	220c      	movs	r2, #12
    95f0:	4393      	bics	r3, r2
    95f2:	001a      	movs	r2, r3
    95f4:	2388      	movs	r3, #136	; 0x88
    95f6:	015b      	lsls	r3, r3, #5
    95f8:	50ca      	str	r2, [r1, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/wdog.c:41
}
    95fa:	46c0      	nop			; (mov r8, r8)
    95fc:	4770      	bx	lr
    95fe:	46c0      	nop			; (mov r8, r8)
    9600:	40047000 	.word	0x40047000

00009604 <Vectors_Init>:
Vectors_Init():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:15
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
    9604:	b580      	push	{r7, lr}
    9606:	4f2e      	ldr	r7, [pc, #184]	; (96c0 <Vectors_Init+0xbc>)
    9608:	44bd      	add	sp, r7
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:19
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)   
    //（1）若Flash倒数2扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
    960a:	2118      	movs	r1, #24
    960c:	203f      	movs	r0, #63	; 0x3f
    960e:	f7ff fad3 	bl	8bb8 <flash_isempty>
    9612:	1e03      	subs	r3, r0, #0
    9614:	d006      	beq.n	9624 <Vectors_Init+0x20>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:21
    {
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
    9616:	4a2b      	ldr	r2, [pc, #172]	; (96c4 <Vectors_Init+0xc0>)
    9618:	23fc      	movs	r3, #252	; 0xfc
    961a:	021b      	lsls	r3, r3, #8
    961c:	2118      	movs	r1, #24
    961e:	0018      	movs	r0, r3
    9620:	f7ff fa6e 	bl	8b00 <flash_write_physical>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:25
        MCU_FLASH_ADDR_START,24,(uint8_t *)"0123456789ABCDEF20200716");
    }
    //（2）继承BIOS的串口中断              
    void ** bios=MCU_FLASH_ADDR_START;   //向量表起始地址  
    9624:	2300      	movs	r3, #0
    9626:	aaff      	add	r2, sp, #1020	; 0x3fc
    9628:	3208      	adds	r2, #8
    962a:	6013      	str	r3, [r2, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:28
    uint32_t user[MCU_SECTORSIZE/4];     //向量表变量数组
    //读取USER中断向量表各中断处理程序地址赋给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
    962c:	2380      	movs	r3, #128	; 0x80
    962e:	00da      	lsls	r2, r3, #3
    9630:	23d0      	movs	r3, #208	; 0xd0
    9632:	01d9      	lsls	r1, r3, #7
    9634:	ab01      	add	r3, sp, #4
    9636:	0018      	movs	r0, r3
    9638:	f7ff faaa 	bl	8b90 <flash_read_physical>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:32
    MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE);
    //判断USER中串口更新中断是否为BIOS对应中断地址。若是，则不作操作；否则修改
    //为BIOS对应中断地址
    if(user[BIOS_UART_UPDATE_IRQn] != (uint32_t)bios[BIOS_UART_UPDATE_IRQn])
    963c:	4b22      	ldr	r3, [pc, #136]	; (96c8 <Vectors_Init+0xc4>)
    963e:	aaff      	add	r2, sp, #1020	; 0x3fc
    9640:	320c      	adds	r2, #12
    9642:	4694      	mov	ip, r2
    9644:	4463      	add	r3, ip
    9646:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    9648:	abff      	add	r3, sp, #1020	; 0x3fc
    964a:	3308      	adds	r3, #8
    964c:	681b      	ldr	r3, [r3, #0]
    964e:	3378      	adds	r3, #120	; 0x78
    9650:	681b      	ldr	r3, [r3, #0]
    9652:	429a      	cmp	r2, r3
    9654:	d022      	beq.n	969c <Vectors_Init+0x98>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:35
    {
        //改变User中断向量表中BIOS_UART中断向量
        flash_erase(GEC_USER_SECTOR_START);
    9656:	201a      	movs	r0, #26
    9658:	f7ff fa06 	bl	8a68 <flash_erase>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:37
        //改USER中断向量表的BIOS程序写入串口的中断处理程序地址
        user[2]=(uint32_t)bios[2];     //【20200903】
    965c:	abff      	add	r3, sp, #1020	; 0x3fc
    965e:	3308      	adds	r3, #8
    9660:	681b      	ldr	r3, [r3, #0]
    9662:	3308      	adds	r3, #8
    9664:	681b      	ldr	r3, [r3, #0]
    9666:	001a      	movs	r2, r3
    9668:	4b17      	ldr	r3, [pc, #92]	; (96c8 <Vectors_Init+0xc4>)
    966a:	a9ff      	add	r1, sp, #1020	; 0x3fc
    966c:	310c      	adds	r1, #12
    966e:	468c      	mov	ip, r1
    9670:	4463      	add	r3, ip
    9672:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:38
        user[BIOS_UART_UPDATE_IRQn]=(uint32_t)bios[BIOS_UART_UPDATE_IRQn];
    9674:	abff      	add	r3, sp, #1020	; 0x3fc
    9676:	3308      	adds	r3, #8
    9678:	681b      	ldr	r3, [r3, #0]
    967a:	3378      	adds	r3, #120	; 0x78
    967c:	681b      	ldr	r3, [r3, #0]
    967e:	001a      	movs	r2, r3
    9680:	4b11      	ldr	r3, [pc, #68]	; (96c8 <Vectors_Init+0xc4>)
    9682:	a9ff      	add	r1, sp, #1020	; 0x3fc
    9684:	310c      	adds	r1, #12
    9686:	468c      	mov	ip, r1
    9688:	4463      	add	r3, ip
    968a:	679a      	str	r2, [r3, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:39
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    968c:	aa01      	add	r2, sp, #4
    968e:	2380      	movs	r3, #128	; 0x80
    9690:	00d9      	lsls	r1, r3, #3
    9692:	23d0      	movs	r3, #208	; 0xd0
    9694:	01db      	lsls	r3, r3, #7
    9696:	0018      	movs	r0, r3
    9698:	f7ff fa32 	bl	8b00 <flash_write_physical>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:44
        MCU_FLASH_ADDR_START,MCU_SECTORSIZE,(uint8_t *)user);
    }
    
    //（3）中断向量表指针重定向到USER程序的中断向量表
    SCB->VTOR = (uint32_t)(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    969c:	4b0b      	ldr	r3, [pc, #44]	; (96cc <Vectors_Init+0xc8>)
    969e:	22d0      	movs	r2, #208	; 0xd0
    96a0:	01d2      	lsls	r2, r2, #7
    96a2:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:47
    MCU_FLASH_ADDR_START);  
    //（4）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+
    96a4:	4b0a      	ldr	r3, [pc, #40]	; (96d0 <Vectors_Init+0xcc>)
    96a6:	22e0      	movs	r2, #224	; 0xe0
    96a8:	0192      	lsls	r2, r2, #6
    96aa:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:50
    GEC_COMPONENT_LST_START*MCU_SECTORSIZE); 
    //（5）printf提示             
    printf("  【User提示】：将进入User的main()执行...\r\n");
    96ac:	4b09      	ldr	r3, [pc, #36]	; (96d4 <Vectors_Init+0xd0>)
    96ae:	0018      	movs	r0, r3
    96b0:	f000 fece 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/gec.c:53
    
    #endif
}
    96b4:	46c0      	nop			; (mov r8, r8)
    96b6:	2381      	movs	r3, #129	; 0x81
    96b8:	00db      	lsls	r3, r3, #3
    96ba:	449d      	add	sp, r3
    96bc:	bd80      	pop	{r7, pc}
    96be:	46c0      	nop			; (mov r8, r8)
    96c0:	fffffbf8 	.word	0xfffffbf8
    96c4:	0000a528 	.word	0x0000a528
    96c8:	fffffbfc 	.word	0xfffffbfc
    96cc:	e000ed00 	.word	0xe000ed00
    96d0:	20000424 	.word	0x20000424
    96d4:	0000a544 	.word	0x0000a544

000096d8 <uart_send1>:
uart_send1():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:173
//          ch:要发送的字节
//函数返回：函数执行状态：1=发送成功；0=发送失败。
//功能概要：串行发送1个字节
//======================================================================
uint8_t uart_send1(uint8_t uartNo, uint8_t ch)
{
    96d8:	b500      	push	{lr}
    96da:	b087      	sub	sp, #28
    96dc:	0002      	movs	r2, r0
    96de:	466b      	mov	r3, sp
    96e0:	3307      	adds	r3, #7
    96e2:	701a      	strb	r2, [r3, #0]
    96e4:	466b      	mov	r3, sp
    96e6:	3306      	adds	r3, #6
    96e8:	1c0a      	adds	r2, r1, #0
    96ea:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:176
    uint32_t t;
    uint32_t i;
    UART0_MemMapPtr UART_2h_0=UART0_BASE_PTR; //获取UART0基地址
    96ec:	4b22      	ldr	r3, [pc, #136]	; (9778 <uart_send1+0xa0>)
    96ee:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:177
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    96f0:	466b      	mov	r3, sp
    96f2:	3307      	adds	r3, #7
    96f4:	781b      	ldrb	r3, [r3, #0]
    96f6:	1e5a      	subs	r2, r3, #1
    96f8:	4b20      	ldr	r3, [pc, #128]	; (977c <uart_send1+0xa4>)
    96fa:	0092      	lsls	r2, r2, #2
    96fc:	58d3      	ldr	r3, [r2, r3]
    96fe:	9303      	str	r3, [sp, #12]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:185
    {
    	__asm (" nop ");
    }
    */
    //判断传入串口号参数是否有误，有误直接退出
    if(!uart_is_uartNo(uartNo))
    9700:	466b      	mov	r3, sp
    9702:	3307      	adds	r3, #7
    9704:	781b      	ldrb	r3, [r3, #0]
    9706:	0018      	movs	r0, r3
    9708:	f000 f83c 	bl	9784 <uart_is_uartNo>
    970c:	1e03      	subs	r3, r0, #0
    970e:	d101      	bne.n	9714 <uart_send1+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:187
    {
        return 0;
    9710:	2300      	movs	r3, #0
    9712:	e02d      	b.n	9770 <uart_send1+0x98>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:190
    }

    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9714:	2300      	movs	r3, #0
    9716:	9305      	str	r3, [sp, #20]
    9718:	e01f      	b.n	975a <uart_send1+0x82>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:192
    {
        if(0==uartNo)     //判断使用的哪个串口
    971a:	466b      	mov	r3, sp
    971c:	3307      	adds	r3, #7
    971e:	781b      	ldrb	r3, [r3, #0]
    9720:	2b00      	cmp	r3, #0
    9722:	d10b      	bne.n	973c <uart_send1+0x64>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:195
        {
        	//发送缓冲区为空则发送数据
            if ( UART0_S1_REG(UART_2h_0) & UART0_S1_TDRE_MASK )
    9724:	9b04      	ldr	r3, [sp, #16]
    9726:	791b      	ldrb	r3, [r3, #4]
    9728:	b2db      	uxtb	r3, r3
    972a:	b25b      	sxtb	r3, r3
    972c:	2b00      	cmp	r3, #0
    972e:	da11      	bge.n	9754 <uart_send1+0x7c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:197
            {
                UART0_D_REG(UART_2h_0) = ch;
    9730:	9b04      	ldr	r3, [sp, #16]
    9732:	466a      	mov	r2, sp
    9734:	3206      	adds	r2, #6
    9736:	7812      	ldrb	r2, [r2, #0]
    9738:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:198
                break;
    973a:	e012      	b.n	9762 <uart_send1+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:204
            }
        }
        else
        {
        	//发送缓冲区为空则发送数据
            if (UART_S1_REG(UART_2h_1_2) & UART_S1_TDRE_MASK )
    973c:	9b03      	ldr	r3, [sp, #12]
    973e:	791b      	ldrb	r3, [r3, #4]
    9740:	b2db      	uxtb	r3, r3
    9742:	b25b      	sxtb	r3, r3
    9744:	2b00      	cmp	r3, #0
    9746:	da05      	bge.n	9754 <uart_send1+0x7c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:206
            {
                UART_D_REG(UART_2h_1_2) = ch;
    9748:	9b03      	ldr	r3, [sp, #12]
    974a:	466a      	mov	r2, sp
    974c:	3206      	adds	r2, #6
    974e:	7812      	ldrb	r2, [r2, #0]
    9750:	71da      	strb	r2, [r3, #7]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:207
                break;
    9752:	e006      	b.n	9762 <uart_send1+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:190 (discriminator 2)
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9754:	9b05      	ldr	r3, [sp, #20]
    9756:	3301      	adds	r3, #1
    9758:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:190 (discriminator 1)
    975a:	9b05      	ldr	r3, [sp, #20]
    975c:	4a08      	ldr	r2, [pc, #32]	; (9780 <uart_send1+0xa8>)
    975e:	4293      	cmp	r3, r2
    9760:	d9db      	bls.n	971a <uart_send1+0x42>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:217
    for(i=0;i<5000;i++)
    {
    	__asm (" nop ");
    }
    */
    if (t >= 0xFBBB)
    9762:	9b05      	ldr	r3, [sp, #20]
    9764:	4a06      	ldr	r2, [pc, #24]	; (9780 <uart_send1+0xa8>)
    9766:	4293      	cmp	r3, r2
    9768:	d901      	bls.n	976e <uart_send1+0x96>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:218
        return 0; //发送超时，发送失败
    976a:	2300      	movs	r3, #0
    976c:	e000      	b.n	9770 <uart_send1+0x98>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:220
    else
        return 1; //成功发送
    976e:	2301      	movs	r3, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:221
}
    9770:	0018      	movs	r0, r3
    9772:	b007      	add	sp, #28
    9774:	bd00      	pop	{pc}
    9776:	46c0      	nop			; (mov r8, r8)
    9778:	4006a000 	.word	0x4006a000
    977c:	0000a5dc 	.word	0x0000a5dc
    9780:	0000fbba 	.word	0x0000fbba

00009784 <uart_is_uartNo>:
uart_is_uartNo():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:538
//函数返回：1:串口号在合理范围内，0：串口号不合理
//参数说明：串口号uartNo  :UART_0、UART_1、UART_2
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo)
{
    9784:	b082      	sub	sp, #8
    9786:	0002      	movs	r2, r0
    9788:	466b      	mov	r3, sp
    978a:	3307      	adds	r3, #7
    978c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:539
    if(uartNo < UART_0 || uartNo > UART_2)
    978e:	466b      	mov	r3, sp
    9790:	3307      	adds	r3, #7
    9792:	781b      	ldrb	r3, [r3, #0]
    9794:	2b02      	cmp	r3, #2
    9796:	d901      	bls.n	979c <uart_is_uartNo+0x18>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:540
        return 0;
    9798:	2300      	movs	r3, #0
    979a:	e000      	b.n	979e <uart_is_uartNo+0x1a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:542
    else
        return 1;
    979c:	2301      	movs	r3, #1
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/uart.c:543
}
    979e:	0018      	movs	r0, r3
    97a0:	b002      	add	sp, #8
    97a2:	4770      	bx	lr

000097a4 <PORTC_PORTD_IRQHandler>:
PORTC_PORTD_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:9
//版本更新：20170801-20191020
//功能描述：提供中断处理程序编程框架
//=====================================================================
#include "includes.h"

void SUART_PortC_PortD_Handler(void) {
    97a4:	b500      	push	{lr}
    97a6:	b083      	sub	sp, #12
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:11

    uint32_t len = suart_receive(SUART_RX, gRecvBuff);
    97a8:	4b0b      	ldr	r3, [pc, #44]	; (97d8 <PORTC_PORTD_IRQHandler+0x34>)
    97aa:	4a0c      	ldr	r2, [pc, #48]	; (97dc <PORTC_PORTD_IRQHandler+0x38>)
    97ac:	0019      	movs	r1, r3
    97ae:	0010      	movs	r0, r2
    97b0:	f7ff fcda 	bl	9168 <suart_receive>
    97b4:	0003      	movs	r3, r0
    97b6:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:12
    printf("gLenth: %d\n", len);
    97b8:	9a01      	ldr	r2, [sp, #4]
    97ba:	4b09      	ldr	r3, [pc, #36]	; (97e0 <PORTC_PORTD_IRQHandler+0x3c>)
    97bc:	0011      	movs	r1, r2
    97be:	0018      	movs	r0, r3
    97c0:	f000 fe46 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:14

    gI2CSendFlag = gRecvBuff[0] - '0';
    97c4:	4b04      	ldr	r3, [pc, #16]	; (97d8 <PORTC_PORTD_IRQHandler+0x34>)
    97c6:	781b      	ldrb	r3, [r3, #0]
    97c8:	3b30      	subs	r3, #48	; 0x30
    97ca:	b2da      	uxtb	r2, r3
    97cc:	4b05      	ldr	r3, [pc, #20]	; (97e4 <PORTC_PORTD_IRQHandler+0x40>)
    97ce:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:15
}
    97d0:	46c0      	nop			; (mov r8, r8)
    97d2:	b003      	add	sp, #12
    97d4:	bd00      	pop	{pc}
    97d6:	46c0      	nop			; (mov r8, r8)
    97d8:	2000042c 	.word	0x2000042c
    97dc:	00000302 	.word	0x00000302
    97e0:	0000a570 	.word	0x0000a570
    97e4:	20000497 	.word	0x20000497

000097e8 <I2C0_IRQHandler>:
I2C0_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:17

void I2C_M0_Handler(void) {
    97e8:	b510      	push	{r4, lr}
    97ea:	b082      	sub	sp, #8
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:18
    printf("send\n");
    97ec:	4b1b      	ldr	r3, [pc, #108]	; (985c <I2C0_IRQHandler+0x74>)
    97ee:	0018      	movs	r0, r3
    97f0:	f000 fe2e 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:20
    static uint8_t isMe = 0;
    DISABLE_INTERRUPTS;     //关总中断
    97f4:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:24

    // 如果isMe = 0; 则进行判断是否是和自己通信,
    // 如果地址匹配，说明是和自己通信，令isMe = 1
    if (!isMe) {
    97f6:	4b1a      	ldr	r3, [pc, #104]	; (9860 <I2C0_IRQHandler+0x78>)
    97f8:	781b      	ldrb	r3, [r3, #0]
    97fa:	2b00      	cmp	r3, #0
    97fc:	d110      	bne.n	9820 <I2C0_IRQHandler+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:26
        // 因为地址和数据方向位合并在一起了，所以判断的时候也要现将地址和方向合并再判断
        if ((i2c_m0_addr << 1 & 0xFE) == i2c_read(I2C_M0)) {
    97fe:	4b19      	ldr	r3, [pc, #100]	; (9864 <I2C0_IRQHandler+0x7c>)
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	b2db      	uxtb	r3, r3
    9804:	005b      	lsls	r3, r3, #1
    9806:	22fe      	movs	r2, #254	; 0xfe
    9808:	4013      	ands	r3, r2
    980a:	001c      	movs	r4, r3
    980c:	2000      	movs	r0, #0
    980e:	f7fe fee3 	bl	85d8 <i2c_read>
    9812:	0003      	movs	r3, r0
    9814:	429c      	cmp	r4, r3
    9816:	d11a      	bne.n	984e <I2C0_IRQHandler+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:27
            isMe = 1;
    9818:	4b11      	ldr	r3, [pc, #68]	; (9860 <I2C0_IRQHandler+0x78>)
    981a:	2201      	movs	r2, #1
    981c:	701a      	strb	r2, [r3, #0]
    981e:	e016      	b.n	984e <I2C0_IRQHandler+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:31
        }
    }
    else {
        uint32_t len = i2c_recv(I2C_M0, gRecvBuff);
    9820:	4b11      	ldr	r3, [pc, #68]	; (9868 <I2C0_IRQHandler+0x80>)
    9822:	0019      	movs	r1, r3
    9824:	2000      	movs	r0, #0
    9826:	f7fe ff6b 	bl	8700 <i2c_recv>
    982a:	0003      	movs	r3, r0
    982c:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:32
        if (len) {
    982e:	9b01      	ldr	r3, [sp, #4]
    9830:	2b00      	cmp	r3, #0
    9832:	d00c      	beq.n	984e <I2C0_IRQHandler+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:33
            suart_send(SUART_TX, gRecvBuff, strlen(gRecvBuff));
    9834:	4b0c      	ldr	r3, [pc, #48]	; (9868 <I2C0_IRQHandler+0x80>)
    9836:	0018      	movs	r0, r3
    9838:	f7fe fcb4 	bl	81a4 <strlen>
    983c:	0002      	movs	r2, r0
    983e:	4b0a      	ldr	r3, [pc, #40]	; (9868 <I2C0_IRQHandler+0x80>)
    9840:	480a      	ldr	r0, [pc, #40]	; (986c <I2C0_IRQHandler+0x84>)
    9842:	0019      	movs	r1, r3
    9844:	f7ff fb54 	bl	8ef0 <suart_send>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:34
            isMe = 0;
    9848:	4b05      	ldr	r3, [pc, #20]	; (9860 <I2C0_IRQHandler+0x78>)
    984a:	2200      	movs	r2, #0
    984c:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:39
        }
    }

    // 清中断
    i2c_clear_re_int(I2C_M0);
    984e:	2000      	movs	r0, #0
    9850:	f7fe fe6c 	bl	852c <i2c_clear_re_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:40
    ENABLE_INTERRUPTS;      //开总中断
    9854:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:41
}
    9856:	46c0      	nop			; (mov r8, r8)
    9858:	b002      	add	sp, #8
    985a:	bd10      	pop	{r4, pc}
    985c:	0000a57c 	.word	0x0000a57c
    9860:	20000420 	.word	0x20000420
    9864:	20000498 	.word	0x20000498
    9868:	2000042c 	.word	0x2000042c
    986c:	00000303 	.word	0x00000303

00009870 <I2C1_IRQHandler>:
I2C1_IRQHandler():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:43

void I2C_M1_Handler(void) {
    9870:	b510      	push	{r4, lr}
    9872:	b082      	sub	sp, #8
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:44
    printf("receive\n");
    9874:	4b1b      	ldr	r3, [pc, #108]	; (98e4 <I2C1_IRQHandler+0x74>)
    9876:	0018      	movs	r0, r3
    9878:	f000 fdea 	bl	a450 <myprintf>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:46
    static uint8_t isMe = 0;
    DISABLE_INTERRUPTS;     //关总中断
    987c:	b672      	cpsid	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:50

    // 如果isMe = 0; 则进行判断是否是和自己通信,
    // 如果地址匹配，说明是和自己通信，令isMe = 1
    if (isMe == 0) {
    987e:	4b1a      	ldr	r3, [pc, #104]	; (98e8 <I2C1_IRQHandler+0x78>)
    9880:	781b      	ldrb	r3, [r3, #0]
    9882:	2b00      	cmp	r3, #0
    9884:	d110      	bne.n	98a8 <I2C1_IRQHandler+0x38>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:52
        // 因为地址和数据方向位合并在一起了，所以判断的时候也要现将地址和方向合并再判断
        if ((i2c_m1_addr << 1 & 0xFE) == i2c_read(I2C_M1)) {
    9886:	4b19      	ldr	r3, [pc, #100]	; (98ec <I2C1_IRQHandler+0x7c>)
    9888:	781b      	ldrb	r3, [r3, #0]
    988a:	b2db      	uxtb	r3, r3
    988c:	005b      	lsls	r3, r3, #1
    988e:	22fe      	movs	r2, #254	; 0xfe
    9890:	4013      	ands	r3, r2
    9892:	001c      	movs	r4, r3
    9894:	2001      	movs	r0, #1
    9896:	f7fe fe9f 	bl	85d8 <i2c_read>
    989a:	0003      	movs	r3, r0
    989c:	429c      	cmp	r4, r3
    989e:	d11a      	bne.n	98d6 <I2C1_IRQHandler+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:53
            isMe = 1;
    98a0:	4b11      	ldr	r3, [pc, #68]	; (98e8 <I2C1_IRQHandler+0x78>)
    98a2:	2201      	movs	r2, #1
    98a4:	701a      	strb	r2, [r3, #0]
    98a6:	e016      	b.n	98d6 <I2C1_IRQHandler+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:57
        }
    }
    else {
        uint32_t len = i2c_recv(I2C_M1, gRecvBuff);
    98a8:	4b11      	ldr	r3, [pc, #68]	; (98f0 <I2C1_IRQHandler+0x80>)
    98aa:	0019      	movs	r1, r3
    98ac:	2001      	movs	r0, #1
    98ae:	f7fe ff27 	bl	8700 <i2c_recv>
    98b2:	0003      	movs	r3, r0
    98b4:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:58
        if (len) {
    98b6:	9b01      	ldr	r3, [sp, #4]
    98b8:	2b00      	cmp	r3, #0
    98ba:	d00c      	beq.n	98d6 <I2C1_IRQHandler+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:59
            suart_send(SUART_TX, gRecvBuff, strlen(gRecvBuff));
    98bc:	4b0c      	ldr	r3, [pc, #48]	; (98f0 <I2C1_IRQHandler+0x80>)
    98be:	0018      	movs	r0, r3
    98c0:	f7fe fc70 	bl	81a4 <strlen>
    98c4:	0002      	movs	r2, r0
    98c6:	4b0a      	ldr	r3, [pc, #40]	; (98f0 <I2C1_IRQHandler+0x80>)
    98c8:	480a      	ldr	r0, [pc, #40]	; (98f4 <I2C1_IRQHandler+0x84>)
    98ca:	0019      	movs	r1, r3
    98cc:	f7ff fb10 	bl	8ef0 <suart_send>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:61
            // 当处理完毕接收的字符串后，令isMe = 0; 方便进行下一次通信判断
            isMe = 0;
    98d0:	4b05      	ldr	r3, [pc, #20]	; (98e8 <I2C1_IRQHandler+0x78>)
    98d2:	2200      	movs	r2, #0
    98d4:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:66
        }

    }

    i2c_clear_re_int(I2C_M1);
    98d6:	2001      	movs	r0, #1
    98d8:	f7fe fe28 	bl	852c <i2c_clear_re_int>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:67
    ENABLE_INTERRUPTS;      //开总中断
    98dc:	b662      	cpsie	i
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/isr.c:68
    98de:	46c0      	nop			; (mov r8, r8)
    98e0:	b002      	add	sp, #8
    98e2:	bd10      	pop	{r4, pc}
    98e4:	0000a584 	.word	0x0000a584
    98e8:	20000421 	.word	0x20000421
    98ec:	20000490 	.word	0x20000490
    98f0:	2000042c 	.word	0x2000042c
    98f4:	00000303 	.word	0x00000303

000098f8 <out_char>:
out_char():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:17
//参数说明：uartNo:串口号：UARTA、UARTB、UARTC、UART_DEBUG
//       data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================

void out_char(char data) {
    98f8:	b500      	push	{lr}
    98fa:	b083      	sub	sp, #12
    98fc:	0002      	movs	r2, r0
    98fe:	466b      	mov	r3, sp
    9900:	3307      	adds	r3, #7
    9902:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:19
	// suart_send_char(SUART_TX_PORT, SUART_TX_PIN, data);
	uart_send1(UART_printf, data);
    9904:	466b      	mov	r3, sp
    9906:	3307      	adds	r3, #7
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	0019      	movs	r1, r3
    990c:	2002      	movs	r0, #2
    990e:	f7ff fee3 	bl	96d8 <uart_send1>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:20
}
    9912:	46c0      	nop			; (mov r8, r8)
    9914:	b003      	add	sp, #12
    9916:	bd00      	pop	{pc}

00009918 <printk_putc>:
printk_putc():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:27
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int* count, PRINTK_INFO* info)
{
    9918:	b500      	push	{lr}
    991a:	b085      	sub	sp, #20
    991c:	9003      	str	r0, [sp, #12]
    991e:	9102      	str	r1, [sp, #8]
    9920:	9201      	str	r2, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:28
	switch (info->dest) {
    9922:	9b01      	ldr	r3, [sp, #4]
    9924:	681b      	ldr	r3, [r3, #0]
    9926:	2b01      	cmp	r3, #1
    9928:	d002      	beq.n	9930 <printk_putc+0x18>
    992a:	2b02      	cmp	r3, #2
    992c:	d007      	beq.n	993e <printk_putc+0x26>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:37
	case DEST_STRING:
		*(info->loc) = (unsigned char)c;
		++(info->loc);
		break;
	default:
		break;
    992e:	e011      	b.n	9954 <printk_putc+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:30
		info->func((char)c);
    9930:	9b01      	ldr	r3, [sp, #4]
    9932:	685b      	ldr	r3, [r3, #4]
    9934:	9a03      	ldr	r2, [sp, #12]
    9936:	b252      	sxtb	r2, r2
    9938:	0010      	movs	r0, r2
    993a:	4798      	blx	r3
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:31
		break;
    993c:	e00a      	b.n	9954 <printk_putc+0x3c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:33
		*(info->loc) = (unsigned char)c;
    993e:	9b01      	ldr	r3, [sp, #4]
    9940:	689b      	ldr	r3, [r3, #8]
    9942:	9a03      	ldr	r2, [sp, #12]
    9944:	b252      	sxtb	r2, r2
    9946:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:34
		++(info->loc);
    9948:	9b01      	ldr	r3, [sp, #4]
    994a:	689b      	ldr	r3, [r3, #8]
    994c:	1c5a      	adds	r2, r3, #1
    994e:	9b01      	ldr	r3, [sp, #4]
    9950:	609a      	str	r2, [r3, #8]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:35
		break;
    9952:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:39
	}
	*count += 1;
    9954:	9b02      	ldr	r3, [sp, #8]
    9956:	681b      	ldr	r3, [r3, #0]
    9958:	1c5a      	adds	r2, r3, #1
    995a:	9b02      	ldr	r3, [sp, #8]
    995c:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:40
}
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	b005      	add	sp, #20
    9962:	bd00      	pop	{pc}

00009964 <printk_mkfloatstr>:
printk_mkfloatstr():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:48
//参数说明： *f:浮点型数据：float型数据
//       c[]:字符串数组：转化后的到的字符串数组
//函数返回：无
//======================================================================
int printk_mkfloatstr(double* f, char c[], int precision_width)
{
    9964:	b530      	push	{r4, r5, lr}
    9966:	b0a7      	sub	sp, #156	; 0x9c
    9968:	9003      	str	r0, [sp, #12]
    996a:	9102      	str	r1, [sp, #8]
    996c:	9201      	str	r2, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:49
	uint32_t p, i, j, k, a[5] = { 0 }, b[19] = { 0 };
    996e:	ab17      	add	r3, sp, #92	; 0x5c
    9970:	0018      	movs	r0, r3
    9972:	2314      	movs	r3, #20
    9974:	001a      	movs	r2, r3
    9976:	2100      	movs	r1, #0
    9978:	f000 fd91 	bl	a49e <memset>
    997c:	ab04      	add	r3, sp, #16
    997e:	0018      	movs	r0, r3
    9980:	234c      	movs	r3, #76	; 0x4c
    9982:	001a      	movs	r2, r3
    9984:	2100      	movs	r1, #0
    9986:	f000 fd8a 	bl	a49e <memset>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:52
	uint64_t q;
	double tempf;
	p = 0;
    998a:	2300      	movs	r3, #0
    998c:	9325      	str	r3, [sp, #148]	; 0x94
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:53
	q = 0;
    998e:	2200      	movs	r2, #0
    9990:	2300      	movs	r3, #0
    9992:	9220      	str	r2, [sp, #128]	; 0x80
    9994:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:56
	//float m;
	double m;
	p = (uint32_t)*f;//整数部分
    9996:	9b03      	ldr	r3, [sp, #12]
    9998:	681a      	ldr	r2, [r3, #0]
    999a:	685b      	ldr	r3, [r3, #4]
    999c:	0010      	movs	r0, r2
    999e:	0019      	movs	r1, r3
    99a0:	f7fd fb56 	bl	7050 <__aeabi_d2uiz>
    99a4:	0003      	movs	r3, r0
    99a6:	9325      	str	r3, [sp, #148]	; 0x94
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:57
	tempf = (*f - p);
    99a8:	9b03      	ldr	r3, [sp, #12]
    99aa:	681c      	ldr	r4, [r3, #0]
    99ac:	685d      	ldr	r5, [r3, #4]
    99ae:	9825      	ldr	r0, [sp, #148]	; 0x94
    99b0:	f7fe fba8 	bl	8104 <__aeabi_ui2d>
    99b4:	0002      	movs	r2, r0
    99b6:	000b      	movs	r3, r1
    99b8:	0020      	movs	r0, r4
    99ba:	0029      	movs	r1, r5
    99bc:	f7fd ffda 	bl	7974 <__aeabi_dsub>
    99c0:	0002      	movs	r2, r0
    99c2:	000b      	movs	r3, r1
    99c4:	921e      	str	r2, [sp, #120]	; 0x78
    99c6:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:58
	if (precision_width == 0)
    99c8:	9b01      	ldr	r3, [sp, #4]
    99ca:	2b00      	cmp	r3, #0
    99cc:	d128      	bne.n	9a20 <printk_mkfloatstr+0xbc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:59
		q = (*f - p) * 100000000000000000;//小数部分
    99ce:	9b03      	ldr	r3, [sp, #12]
    99d0:	681c      	ldr	r4, [r3, #0]
    99d2:	685d      	ldr	r5, [r3, #4]
    99d4:	9825      	ldr	r0, [sp, #148]	; 0x94
    99d6:	f7fe fb95 	bl	8104 <__aeabi_ui2d>
    99da:	0002      	movs	r2, r0
    99dc:	000b      	movs	r3, r1
    99de:	0020      	movs	r0, r4
    99e0:	0029      	movs	r1, r5
    99e2:	f7fd ffc7 	bl	7974 <__aeabi_dsub>
    99e6:	0002      	movs	r2, r0
    99e8:	000b      	movs	r3, r1
    99ea:	0010      	movs	r0, r2
    99ec:	0019      	movs	r1, r3
    99ee:	4a77      	ldr	r2, [pc, #476]	; (9bcc <printk_mkfloatstr+0x268>)
    99f0:	4b77      	ldr	r3, [pc, #476]	; (9bd0 <printk_mkfloatstr+0x26c>)
    99f2:	f7fd fd53 	bl	749c <__aeabi_dmul>
    99f6:	0002      	movs	r2, r0
    99f8:	000b      	movs	r3, r1
    99fa:	0010      	movs	r0, r2
    99fc:	0019      	movs	r1, r3
    99fe:	f7fd fb45 	bl	708c <__aeabi_d2ulz>
    9a02:	0002      	movs	r2, r0
    9a04:	000b      	movs	r3, r1
    9a06:	9220      	str	r2, [sp, #128]	; 0x80
    9a08:	9321      	str	r3, [sp, #132]	; 0x84
    9a0a:	e016      	b.n	9a3a <printk_mkfloatstr+0xd6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:63
	else
	{
		while (precision_width--)
			tempf *= 10;
    9a0c:	2200      	movs	r2, #0
    9a0e:	4b71      	ldr	r3, [pc, #452]	; (9bd4 <printk_mkfloatstr+0x270>)
    9a10:	981e      	ldr	r0, [sp, #120]	; 0x78
    9a12:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9a14:	f7fd fd42 	bl	749c <__aeabi_dmul>
    9a18:	0002      	movs	r2, r0
    9a1a:	000b      	movs	r3, r1
    9a1c:	921e      	str	r2, [sp, #120]	; 0x78
    9a1e:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:62
		while (precision_width--)
    9a20:	9b01      	ldr	r3, [sp, #4]
    9a22:	1e5a      	subs	r2, r3, #1
    9a24:	9201      	str	r2, [sp, #4]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d1f0      	bne.n	9a0c <printk_mkfloatstr+0xa8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:64
		q = tempf;
    9a2a:	981e      	ldr	r0, [sp, #120]	; 0x78
    9a2c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9a2e:	f7fd fb2d 	bl	708c <__aeabi_d2ulz>
    9a32:	0002      	movs	r2, r0
    9a34:	000b      	movs	r3, r1
    9a36:	9220      	str	r2, [sp, #128]	; 0x80
    9a38:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:66
	}
	m = *f - p;
    9a3a:	9b03      	ldr	r3, [sp, #12]
    9a3c:	681c      	ldr	r4, [r3, #0]
    9a3e:	685d      	ldr	r5, [r3, #4]
    9a40:	9825      	ldr	r0, [sp, #148]	; 0x94
    9a42:	f7fe fb5f 	bl	8104 <__aeabi_ui2d>
    9a46:	0002      	movs	r2, r0
    9a48:	000b      	movs	r3, r1
    9a4a:	0020      	movs	r0, r4
    9a4c:	0029      	movs	r1, r5
    9a4e:	f7fd ff91 	bl	7974 <__aeabi_dsub>
    9a52:	0002      	movs	r2, r0
    9a54:	000b      	movs	r3, r1
    9a56:	921c      	str	r2, [sp, #112]	; 0x70
    9a58:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:67
	k = 0;
    9a5a:	2300      	movs	r3, #0
    9a5c:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:68
	while (m < 1)
    9a5e:	e00c      	b.n	9a7a <printk_mkfloatstr+0x116>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:70
	{
		m = m * 10;
    9a60:	2200      	movs	r2, #0
    9a62:	4b5c      	ldr	r3, [pc, #368]	; (9bd4 <printk_mkfloatstr+0x270>)
    9a64:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a66:	991d      	ldr	r1, [sp, #116]	; 0x74
    9a68:	f7fd fd18 	bl	749c <__aeabi_dmul>
    9a6c:	0002      	movs	r2, r0
    9a6e:	000b      	movs	r3, r1
    9a70:	921c      	str	r2, [sp, #112]	; 0x70
    9a72:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:71
		k++;
    9a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9a76:	3301      	adds	r3, #1
    9a78:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:68
	while (m < 1)
    9a7a:	2200      	movs	r2, #0
    9a7c:	4b56      	ldr	r3, [pc, #344]	; (9bd8 <printk_mkfloatstr+0x274>)
    9a7e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a80:	991d      	ldr	r1, [sp, #116]	; 0x74
    9a82:	f7fd fa9d 	bl	6fc0 <__aeabi_dcmplt>
    9a86:	1e03      	subs	r3, r0, #0
    9a88:	d1ea      	bne.n	9a60 <printk_mkfloatstr+0xfc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:73
	};
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
    9a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9a8c:	3b01      	subs	r3, #1
    9a8e:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:75

	i = 0;
    9a90:	2300      	movs	r3, #0
    9a92:	9324      	str	r3, [sp, #144]	; 0x90
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:76
	if (0 == p)     //整数部分为0
    9a94:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9a96:	2b00      	cmp	r3, #0
    9a98:	d107      	bne.n	9aaa <printk_mkfloatstr+0x146>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:77
		c[i++] = '0';
    9a9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9a9c:	1c5a      	adds	r2, r3, #1
    9a9e:	9224      	str	r2, [sp, #144]	; 0x90
    9aa0:	9a02      	ldr	r2, [sp, #8]
    9aa2:	18d3      	adds	r3, r2, r3
    9aa4:	2230      	movs	r2, #48	; 0x30
    9aa6:	701a      	strb	r2, [r3, #0]
    9aa8:	e02f      	b.n	9b0a <printk_mkfloatstr+0x1a6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:80
	else        //整数部分不为0
	{
		j = 0;
    9aaa:	2300      	movs	r3, #0
    9aac:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:81
		while (p != 0)//倒序的数字
    9aae:	e013      	b.n	9ad8 <printk_mkfloatstr+0x174>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:83
		{
			a[j++] = p % 10;
    9ab0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    9ab2:	1c63      	adds	r3, r4, #1
    9ab4:	9323      	str	r3, [sp, #140]	; 0x8c
    9ab6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9ab8:	210a      	movs	r1, #10
    9aba:	0018      	movs	r0, r3
    9abc:	f7fd f97a 	bl	6db4 <__aeabi_uidivmod>
    9ac0:	000b      	movs	r3, r1
    9ac2:	0019      	movs	r1, r3
    9ac4:	ab17      	add	r3, sp, #92	; 0x5c
    9ac6:	00a2      	lsls	r2, r4, #2
    9ac8:	50d1      	str	r1, [r2, r3]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:84
			p /= 10;
    9aca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9acc:	210a      	movs	r1, #10
    9ace:	0018      	movs	r0, r3
    9ad0:	f7fd f8ea 	bl	6ca8 <__udivsi3>
    9ad4:	0003      	movs	r3, r0
    9ad6:	9325      	str	r3, [sp, #148]	; 0x94
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:81
		while (p != 0)//倒序的数字
    9ad8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9ada:	2b00      	cmp	r3, #0
    9adc:	d1e8      	bne.n	9ab0 <printk_mkfloatstr+0x14c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:86
		}
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    9ade:	e011      	b.n	9b04 <printk_mkfloatstr+0x1a0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:88
		{
			c[i++] = a[j - 1] + '0';
    9ae0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9ae2:	1e5a      	subs	r2, r3, #1
    9ae4:	ab17      	add	r3, sp, #92	; 0x5c
    9ae6:	0092      	lsls	r2, r2, #2
    9ae8:	58d3      	ldr	r3, [r2, r3]
    9aea:	b2db      	uxtb	r3, r3
    9aec:	3330      	adds	r3, #48	; 0x30
    9aee:	b2d9      	uxtb	r1, r3
    9af0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9af2:	1c5a      	adds	r2, r3, #1
    9af4:	9224      	str	r2, [sp, #144]	; 0x90
    9af6:	9a02      	ldr	r2, [sp, #8]
    9af8:	18d3      	adds	r3, r2, r3
    9afa:	b24a      	sxtb	r2, r1
    9afc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:89
			--j;
    9afe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b00:	3b01      	subs	r3, #1
    9b02:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:86
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    9b04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b06:	2b00      	cmp	r3, #0
    9b08:	d1ea      	bne.n	9ae0 <printk_mkfloatstr+0x17c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:92
		}
	}
	c[i++] = '.';     //小数点
    9b0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9b0c:	1c5a      	adds	r2, r3, #1
    9b0e:	9224      	str	r2, [sp, #144]	; 0x90
    9b10:	9a02      	ldr	r2, [sp, #8]
    9b12:	18d3      	adds	r3, r2, r3
    9b14:	222e      	movs	r2, #46	; 0x2e
    9b16:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:93
	if (0 == q)        //小数部分为0
    9b18:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9b1c:	4313      	orrs	r3, r2
    9b1e:	d107      	bne.n	9b30 <printk_mkfloatstr+0x1cc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:94
		c[i++] = '0';
    9b20:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9b22:	1c5a      	adds	r2, r3, #1
    9b24:	9224      	str	r2, [sp, #144]	; 0x90
    9b26:	9a02      	ldr	r2, [sp, #8]
    9b28:	18d3      	adds	r3, r2, r3
    9b2a:	2230      	movs	r2, #48	; 0x30
    9b2c:	701a      	strb	r2, [r3, #0]
    9b2e:	e043      	b.n	9bb8 <printk_mkfloatstr+0x254>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:97
	else           //小数部分不为0
	{
		j = 0;
    9b30:	2300      	movs	r3, #0
    9b32:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:99

		while (q != 0)//倒序的数字
    9b34:	e018      	b.n	9b68 <printk_mkfloatstr+0x204>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:101
		{
			b[j++] = q % 10;
    9b36:	9820      	ldr	r0, [sp, #128]	; 0x80
    9b38:	9921      	ldr	r1, [sp, #132]	; 0x84
    9b3a:	220a      	movs	r2, #10
    9b3c:	2300      	movs	r3, #0
    9b3e:	f7fd fa67 	bl	7010 <__aeabi_uldivmod>
    9b42:	0010      	movs	r0, r2
    9b44:	0019      	movs	r1, r3
    9b46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b48:	1c5a      	adds	r2, r3, #1
    9b4a:	9223      	str	r2, [sp, #140]	; 0x8c
    9b4c:	0001      	movs	r1, r0
    9b4e:	aa04      	add	r2, sp, #16
    9b50:	009b      	lsls	r3, r3, #2
    9b52:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:102
			q /= 10;
    9b54:	9820      	ldr	r0, [sp, #128]	; 0x80
    9b56:	9921      	ldr	r1, [sp, #132]	; 0x84
    9b58:	220a      	movs	r2, #10
    9b5a:	2300      	movs	r3, #0
    9b5c:	f7fd fa58 	bl	7010 <__aeabi_uldivmod>
    9b60:	0002      	movs	r2, r0
    9b62:	000b      	movs	r3, r1
    9b64:	9220      	str	r2, [sp, #128]	; 0x80
    9b66:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:99
		while (q != 0)//倒序的数字
    9b68:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9b6c:	4313      	orrs	r3, r2
    9b6e:	d1e2      	bne.n	9b36 <printk_mkfloatstr+0x1d2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:104
		}
		while (k != 0)
    9b70:	e009      	b.n	9b86 <printk_mkfloatstr+0x222>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:106
		{
			b[j++] = 0;
    9b72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b74:	1c5a      	adds	r2, r3, #1
    9b76:	9223      	str	r2, [sp, #140]	; 0x8c
    9b78:	aa04      	add	r2, sp, #16
    9b7a:	009b      	lsls	r3, r3, #2
    9b7c:	2100      	movs	r1, #0
    9b7e:	5099      	str	r1, [r3, r2]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:107
			k--;
    9b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9b82:	3b01      	subs	r3, #1
    9b84:	9322      	str	r3, [sp, #136]	; 0x88
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:104
		while (k != 0)
    9b86:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d1f2      	bne.n	9b72 <printk_mkfloatstr+0x20e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:109
		}
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    9b8c:	e011      	b.n	9bb2 <printk_mkfloatstr+0x24e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:111
		{
			c[i++] = b[j - 1] + '0';
    9b8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9b90:	1e5a      	subs	r2, r3, #1
    9b92:	ab04      	add	r3, sp, #16
    9b94:	0092      	lsls	r2, r2, #2
    9b96:	58d3      	ldr	r3, [r2, r3]
    9b98:	b2db      	uxtb	r3, r3
    9b9a:	3330      	adds	r3, #48	; 0x30
    9b9c:	b2d9      	uxtb	r1, r3
    9b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9ba0:	1c5a      	adds	r2, r3, #1
    9ba2:	9224      	str	r2, [sp, #144]	; 0x90
    9ba4:	9a02      	ldr	r2, [sp, #8]
    9ba6:	18d3      	adds	r3, r2, r3
    9ba8:	b24a      	sxtb	r2, r1
    9baa:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:112
			--j;
    9bac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9bae:	3b01      	subs	r3, #1
    9bb0:	9323      	str	r3, [sp, #140]	; 0x8c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:109
		while (j > 0)//将倒序数字转为正序，并转换为对应的字符形式
    9bb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	d1ea      	bne.n	9b8e <printk_mkfloatstr+0x22a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:115
		}
	}
	c[i] = '\0';
    9bb8:	9a02      	ldr	r2, [sp, #8]
    9bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9bbc:	18d3      	adds	r3, r2, r3
    9bbe:	2200      	movs	r2, #0
    9bc0:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:116
	return i;
    9bc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:117
}
    9bc4:	0018      	movs	r0, r3
    9bc6:	b027      	add	sp, #156	; 0x9c
    9bc8:	bd30      	pop	{r4, r5, pc}
    9bca:	46c0      	nop			; (mov r8, r8)
    9bcc:	85d8a000 	.word	0x85d8a000
    9bd0:	43763457 	.word	0x43763457
    9bd4:	40240000 	.word	0x40240000
    9bd8:	3ff00000 	.word	0x3ff00000

00009bdc <printk_mknumstr>:
printk_mknumstr():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:127
//       neg:有无符号:判断数据时有符号还是无符号整形
//       radix:格式选择:确定输出格式例如：十进制或十六进制...
//函数返回：无
//======================================================================
static int printk_mknumstr(char* numstr, void* nump, int neg, int radix)
{
    9bdc:	b500      	push	{lr}
    9bde:	b08d      	sub	sp, #52	; 0x34
    9be0:	9003      	str	r0, [sp, #12]
    9be2:	9102      	str	r1, [sp, #8]
    9be4:	9201      	str	r2, [sp, #4]
    9be6:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:133
	int a, b, c;
	unsigned int ua, ub, uc;
	int nlen;
	char* nstrp;

	nlen = 0;
    9be8:	2300      	movs	r3, #0
    9bea:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:134
	nstrp = numstr;
    9bec:	9b03      	ldr	r3, [sp, #12]
    9bee:	9306      	str	r3, [sp, #24]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:135
	*nstrp++ = '\0';
    9bf0:	9b06      	ldr	r3, [sp, #24]
    9bf2:	1c5a      	adds	r2, r3, #1
    9bf4:	9206      	str	r2, [sp, #24]
    9bf6:	2200      	movs	r2, #0
    9bf8:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:137

	if (neg) {
    9bfa:	9b01      	ldr	r3, [sp, #4]
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	d032      	beq.n	9c66 <printk_mknumstr+0x8a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:138
		a = *(int*)nump;
    9c00:	9b02      	ldr	r3, [sp, #8]
    9c02:	681b      	ldr	r3, [r3, #0]
    9c04:	930b      	str	r3, [sp, #44]	; 0x2c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:139
		if (a == 0) {
    9c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d128      	bne.n	9c5e <printk_mknumstr+0x82>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:140
			*nstrp = '0';
    9c0c:	9b06      	ldr	r3, [sp, #24]
    9c0e:	2230      	movs	r2, #48	; 0x30
    9c10:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:141
			++nlen;
    9c12:	9b07      	ldr	r3, [sp, #28]
    9c14:	3301      	adds	r3, #1
    9c16:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:142
			goto done;
    9c18:	e058      	b.n	9ccc <printk_mknumstr+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:145
		}
		while (a != 0) {
			b = (int)a / (int)radix;
    9c1a:	9900      	ldr	r1, [sp, #0]
    9c1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9c1e:	f7fd f8cd 	bl	6dbc <__divsi3>
    9c22:	0003      	movs	r3, r0
    9c24:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:146
			c = (int)a - ((int)b * (int)radix);
    9c26:	9b04      	ldr	r3, [sp, #16]
    9c28:	9a00      	ldr	r2, [sp, #0]
    9c2a:	4353      	muls	r3, r2
    9c2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c2e:	1ad3      	subs	r3, r2, r3
    9c30:	930a      	str	r3, [sp, #40]	; 0x28
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:147
			if (c < 0) {
    9c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c34:	2b00      	cmp	r3, #0
    9c36:	da04      	bge.n	9c42 <printk_mknumstr+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:148
				c = ~c + 1 + '0';
    9c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c3a:	2230      	movs	r2, #48	; 0x30
    9c3c:	1ad3      	subs	r3, r2, r3
    9c3e:	930a      	str	r3, [sp, #40]	; 0x28
    9c40:	e002      	b.n	9c48 <printk_mknumstr+0x6c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:151
			}
			else {
				c = c + '0';
    9c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c44:	3330      	adds	r3, #48	; 0x30
    9c46:	930a      	str	r3, [sp, #40]	; 0x28
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:153
			}
			a = b;
    9c48:	9b04      	ldr	r3, [sp, #16]
    9c4a:	930b      	str	r3, [sp, #44]	; 0x2c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:154
			*nstrp++ = (char)c;
    9c4c:	9b06      	ldr	r3, [sp, #24]
    9c4e:	1c5a      	adds	r2, r3, #1
    9c50:	9206      	str	r2, [sp, #24]
    9c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c54:	b252      	sxtb	r2, r2
    9c56:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:155
			++nlen;
    9c58:	9b07      	ldr	r3, [sp, #28]
    9c5a:	3301      	adds	r3, #1
    9c5c:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:144
		while (a != 0) {
    9c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c60:	2b00      	cmp	r3, #0
    9c62:	d1da      	bne.n	9c1a <printk_mknumstr+0x3e>
    9c64:	e032      	b.n	9ccc <printk_mknumstr+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:159
		}
	}
	else {
		ua = *(unsigned int*)nump;
    9c66:	9b02      	ldr	r3, [sp, #8]
    9c68:	681b      	ldr	r3, [r3, #0]
    9c6a:	9309      	str	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:160
		if (ua == 0) {
    9c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c6e:	2b00      	cmp	r3, #0
    9c70:	d128      	bne.n	9cc4 <printk_mknumstr+0xe8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:161
			*nstrp = '0';
    9c72:	9b06      	ldr	r3, [sp, #24]
    9c74:	2230      	movs	r2, #48	; 0x30
    9c76:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:162
			++nlen;
    9c78:	9b07      	ldr	r3, [sp, #28]
    9c7a:	3301      	adds	r3, #1
    9c7c:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:163
			goto done;
    9c7e:	e025      	b.n	9ccc <printk_mknumstr+0xf0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:166
		}
		while (ua != 0) {
			ub = (unsigned int)ua / (unsigned int)radix;
    9c80:	9b00      	ldr	r3, [sp, #0]
    9c82:	0019      	movs	r1, r3
    9c84:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c86:	f7fd f80f 	bl	6ca8 <__udivsi3>
    9c8a:	0003      	movs	r3, r0
    9c8c:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:167
			uc = (unsigned int)ua - ((unsigned int)ub * (unsigned int)radix);
    9c8e:	9b00      	ldr	r3, [sp, #0]
    9c90:	9a05      	ldr	r2, [sp, #20]
    9c92:	4353      	muls	r3, r2
    9c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9c96:	1ad3      	subs	r3, r2, r3
    9c98:	9308      	str	r3, [sp, #32]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:168
			if (uc < 10) {
    9c9a:	9b08      	ldr	r3, [sp, #32]
    9c9c:	2b09      	cmp	r3, #9
    9c9e:	d803      	bhi.n	9ca8 <printk_mknumstr+0xcc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:169
				uc = uc + '0';
    9ca0:	9b08      	ldr	r3, [sp, #32]
    9ca2:	3330      	adds	r3, #48	; 0x30
    9ca4:	9308      	str	r3, [sp, #32]
    9ca6:	e002      	b.n	9cae <printk_mknumstr+0xd2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:172
			}
			else {
				uc = uc - 10 + 'A';
    9ca8:	9b08      	ldr	r3, [sp, #32]
    9caa:	3337      	adds	r3, #55	; 0x37
    9cac:	9308      	str	r3, [sp, #32]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:174
			}
			ua = ub;
    9cae:	9b05      	ldr	r3, [sp, #20]
    9cb0:	9309      	str	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:175
			*nstrp++ = (char)uc;
    9cb2:	9b06      	ldr	r3, [sp, #24]
    9cb4:	1c5a      	adds	r2, r3, #1
    9cb6:	9206      	str	r2, [sp, #24]
    9cb8:	9a08      	ldr	r2, [sp, #32]
    9cba:	b252      	sxtb	r2, r2
    9cbc:	701a      	strb	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:176
			++nlen;
    9cbe:	9b07      	ldr	r3, [sp, #28]
    9cc0:	3301      	adds	r3, #1
    9cc2:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:165
		while (ua != 0) {
    9cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d1da      	bne.n	9c80 <printk_mknumstr+0xa4>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:179
		}
	}
	done: return nlen;
    9cca:	46c0      	nop			; (mov r8, r8)
    9ccc:	9b07      	ldr	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:180
}
    9cce:	0018      	movs	r0, r3
    9cd0:	b00d      	add	sp, #52	; 0x34
    9cd2:	bd00      	pop	{pc}

00009cd4 <printk_pad_zero>:
printk_pad_zero():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:183
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int* count,
	PRINTK_INFO* info) {
    9cd4:	b500      	push	{lr}
    9cd6:	b087      	sub	sp, #28
    9cd8:	9003      	str	r0, [sp, #12]
    9cda:	9102      	str	r1, [sp, #8]
    9cdc:	9201      	str	r2, [sp, #4]
    9cde:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:186
	int i;

	for (i = curlen; i < field_width; i++) {
    9ce0:	9b03      	ldr	r3, [sp, #12]
    9ce2:	9305      	str	r3, [sp, #20]
    9ce4:	e008      	b.n	9cf8 <printk_pad_zero+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:187 (discriminator 3)
		printk_putc('0', count, info);
    9ce6:	9a00      	ldr	r2, [sp, #0]
    9ce8:	9b01      	ldr	r3, [sp, #4]
    9cea:	0019      	movs	r1, r3
    9cec:	2030      	movs	r0, #48	; 0x30
    9cee:	f7ff fe13 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:186 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    9cf2:	9b05      	ldr	r3, [sp, #20]
    9cf4:	3301      	adds	r3, #1
    9cf6:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:186 (discriminator 1)
    9cf8:	9a05      	ldr	r2, [sp, #20]
    9cfa:	9b02      	ldr	r3, [sp, #8]
    9cfc:	429a      	cmp	r2, r3
    9cfe:	dbf2      	blt.n	9ce6 <printk_pad_zero+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:189
	}
}
    9d00:	46c0      	nop			; (mov r8, r8)
    9d02:	46c0      	nop			; (mov r8, r8)
    9d04:	b007      	add	sp, #28
    9d06:	bd00      	pop	{pc}

00009d08 <printk_pad_space>:
printk_pad_space():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:193

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int* count,
	PRINTK_INFO* info) {
    9d08:	b500      	push	{lr}
    9d0a:	b087      	sub	sp, #28
    9d0c:	9003      	str	r0, [sp, #12]
    9d0e:	9102      	str	r1, [sp, #8]
    9d10:	9201      	str	r2, [sp, #4]
    9d12:	9300      	str	r3, [sp, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:196
	int i;

	for (i = curlen; i < field_width; i++) {
    9d14:	9b03      	ldr	r3, [sp, #12]
    9d16:	9305      	str	r3, [sp, #20]
    9d18:	e008      	b.n	9d2c <printk_pad_space+0x24>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:197 (discriminator 3)
		printk_putc(' ', count, info);
    9d1a:	9a00      	ldr	r2, [sp, #0]
    9d1c:	9b01      	ldr	r3, [sp, #4]
    9d1e:	0019      	movs	r1, r3
    9d20:	2020      	movs	r0, #32
    9d22:	f7ff fdf9 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:196 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    9d26:	9b05      	ldr	r3, [sp, #20]
    9d28:	3301      	adds	r3, #1
    9d2a:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:196 (discriminator 1)
    9d2c:	9a05      	ldr	r2, [sp, #20]
    9d2e:	9b02      	ldr	r3, [sp, #8]
    9d30:	429a      	cmp	r2, r3
    9d32:	dbf2      	blt.n	9d1a <printk_pad_space+0x12>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:199
	}
}
    9d34:	46c0      	nop			; (mov r8, r8)
    9d36:	46c0      	nop			; (mov r8, r8)
    9d38:	b007      	add	sp, #28
    9d3a:	bd00      	pop	{pc}

00009d3c <printk>:
printk():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:208
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO* info, const char* fmt, char* ap)
{
    9d3c:	b530      	push	{r4, r5, lr}
    9d3e:	b0a3      	sub	sp, #140	; 0x8c
    9d40:	9003      	str	r0, [sp, #12]
    9d42:	9102      	str	r1, [sp, #8]
    9d44:	9201      	str	r2, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:232

		}un1;*/
	char* p;
	int c;
	//char temp1;
	char vstr[33] = { '0' };
    9d46:	ab0a      	add	r3, sp, #40	; 0x28
    9d48:	2230      	movs	r2, #48	; 0x30
    9d4a:	601a      	str	r2, [r3, #0]
    9d4c:	3304      	adds	r3, #4
    9d4e:	221d      	movs	r2, #29
    9d50:	2100      	movs	r1, #0
    9d52:	0018      	movs	r0, r3
    9d54:	f000 fba3 	bl	a49e <memset>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:253
	int* ivalp;
	char* sval;
	int cval;
	unsigned int uval;

	count = 0;
    9d58:	2300      	movs	r3, #0
    9d5a:	9309      	str	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:254
	length_modifier = 0;
    9d5c:	2300      	movs	r3, #0
    9d5e:	931b      	str	r3, [sp, #108]	; 0x6c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:255
	precision_used = TRUE;
    9d60:	2301      	movs	r3, #1
    9d62:	931a      	str	r3, [sp, #104]	; 0x68
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:257
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char*)fmt; (c = *p) != 0; p++)
    9d64:	9b02      	ldr	r3, [sp, #8]
    9d66:	9321      	str	r3, [sp, #132]	; 0x84
    9d68:	f000 fb66 	bl	a438 <printk+0x6fc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:260
	{
		//读取%前面的字符，直接输出的字符和最后的\n类的转义字符
		if (c != '%')
    9d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9d6e:	2b25      	cmp	r3, #37	; 0x25
    9d70:	d017      	beq.n	9da2 <printk+0x66>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:264
		{
#ifndef UNIX_DEBUG
			//%之前的字符
			if (c != '\n') {
    9d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9d74:	2b0a      	cmp	r3, #10
    9d76:	d007      	beq.n	9d88 <printk+0x4c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:265
				printk_putc(c, &count, info);
    9d78:	9a03      	ldr	r2, [sp, #12]
    9d7a:	a909      	add	r1, sp, #36	; 0x24
    9d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9d7e:	0018      	movs	r0, r3
    9d80:	f7ff fdca 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:276
			}
#else
			printk_putc(c, &count, info);
#endif

			continue;
    9d84:	f000 fb55 	bl	a432 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:269
				printk_putc(0x0D /* CR */, &count, info);
    9d88:	9a03      	ldr	r2, [sp, #12]
    9d8a:	ab09      	add	r3, sp, #36	; 0x24
    9d8c:	0019      	movs	r1, r3
    9d8e:	200d      	movs	r0, #13
    9d90:	f7ff fdc2 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:270
				printk_putc(0x0A /* LF */, &count, info);
    9d94:	9a03      	ldr	r2, [sp, #12]
    9d96:	ab09      	add	r3, sp, #36	; 0x24
    9d98:	0019      	movs	r1, r3
    9d9a:	200a      	movs	r0, #10
    9d9c:	f7ff fdbc 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:276
			continue;
    9da0:	e347      	b.n	a432 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:282
		}


		//此时字符为%  查看百分号后的第一个格式字符，对输出格式字符并做出相应输出判断
		//检查相应的修改标志
		flags_used = 0;
    9da2:	2300      	movs	r3, #0
    9da4:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:283
		done = FALSE;
    9da6:	2300      	movs	r3, #0
    9da8:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:284
		while (!done) {
    9daa:	e02c      	b.n	9e06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:285
			switch (/* c = */*++p) {
    9dac:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9dae:	3301      	adds	r3, #1
    9db0:	9321      	str	r3, [sp, #132]	; 0x84
    9db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	b25b      	sxtb	r3, r3
    9db8:	3b20      	subs	r3, #32
    9dba:	2b10      	cmp	r3, #16
    9dbc:	d81d      	bhi.n	9dfa <printk+0xbe>
    9dbe:	009a      	lsls	r2, r3, #2
    9dc0:	4bca      	ldr	r3, [pc, #808]	; (a0ec <printk+0x3b0>)
    9dc2:	18d3      	adds	r3, r2, r3
    9dc4:	681b      	ldr	r3, [r3, #0]
    9dc6:	469f      	mov	pc, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:287
			case '-':
				flags_used |= FLAGS_MINUS;
    9dc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9dca:	2201      	movs	r2, #1
    9dcc:	4313      	orrs	r3, r2
    9dce:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:288
				break;
    9dd0:	e019      	b.n	9e06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:290
			case '+':
				flags_used |= FLAGS_PLUS;
    9dd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9dd4:	2202      	movs	r2, #2
    9dd6:	4313      	orrs	r3, r2
    9dd8:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:291
				break;
    9dda:	e014      	b.n	9e06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:293
			case ' ':
				flags_used |= FLAGS_SPACE;
    9ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9dde:	2204      	movs	r2, #4
    9de0:	4313      	orrs	r3, r2
    9de2:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:294
				break;
    9de4:	e00f      	b.n	9e06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:296
			case '0':
				flags_used |= FLAGS_ZERO;
    9de6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9de8:	2208      	movs	r2, #8
    9dea:	4313      	orrs	r3, r2
    9dec:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:297
				break;
    9dee:	e00a      	b.n	9e06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:299
			case '#':
				flags_used |= FLAGS_POUND;
    9df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9df2:	2210      	movs	r2, #16
    9df4:	4313      	orrs	r3, r2
    9df6:	931d      	str	r3, [sp, #116]	; 0x74
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:300
				break;
    9df8:	e005      	b.n	9e06 <printk+0xca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:303
			default:
				/* we've gone one char too far */
				--p;
    9dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9dfc:	3b01      	subs	r3, #1
    9dfe:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:304
				done = TRUE;
    9e00:	2301      	movs	r3, #1
    9e02:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:305
				break;
    9e04:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:284
		while (!done) {
    9e06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9e08:	2b00      	cmp	r3, #0
    9e0a:	d0cf      	beq.n	9dac <printk+0x70>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:311
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
    9e0c:	2300      	movs	r3, #0
    9e0e:	931c      	str	r3, [sp, #112]	; 0x70
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:312
		done = FALSE;
    9e10:	2300      	movs	r3, #0
    9e12:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:313
		while (!done) {
    9e14:	e01b      	b.n	9e4e <printk+0x112>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:314
			switch (c = *++p) {
    9e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e18:	3301      	adds	r3, #1
    9e1a:	9321      	str	r3, [sp, #132]	; 0x84
    9e1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	b25b      	sxtb	r3, r3
    9e22:	9315      	str	r3, [sp, #84]	; 0x54
    9e24:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9e26:	3b30      	subs	r3, #48	; 0x30
    9e28:	2b09      	cmp	r3, #9
    9e2a:	d80a      	bhi.n	9e42 <printk+0x106>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:325
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				field_width = (field_width * 10) + (c - '0');
    9e2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9e2e:	0013      	movs	r3, r2
    9e30:	009b      	lsls	r3, r3, #2
    9e32:	189b      	adds	r3, r3, r2
    9e34:	005b      	lsls	r3, r3, #1
    9e36:	001a      	movs	r2, r3
    9e38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9e3a:	3b30      	subs	r3, #48	; 0x30
    9e3c:	18d3      	adds	r3, r2, r3
    9e3e:	931c      	str	r3, [sp, #112]	; 0x70
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:326
				break;
    9e40:	e005      	b.n	9e4e <printk+0x112>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:329
			default:
				/* we've gone one char too far */
				--p;
    9e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e44:	3b01      	subs	r3, #1
    9e46:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:330
				done = TRUE;
    9e48:	2301      	movs	r3, #1
    9e4a:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:331
				break;
    9e4c:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:313
		while (!done) {
    9e4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9e50:	2b00      	cmp	r3, #0
    9e52:	d0e0      	beq.n	9e16 <printk+0xda>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:335
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
    9e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e56:	3301      	adds	r3, #1
    9e58:	9321      	str	r3, [sp, #132]	; 0x84
    9e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e5c:	781b      	ldrb	r3, [r3, #0]
    9e5e:	b25b      	sxtb	r3, r3
    9e60:	2b2e      	cmp	r3, #46	; 0x2e
    9e62:	d124      	bne.n	9eae <printk+0x172>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:341
			/* precision_used = TRUE; */

			/*
			 * Must get precision field width, if present.
			 */
			precision_width = 0;
    9e64:	2300      	movs	r3, #0
    9e66:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:342
			done = FALSE;
    9e68:	2300      	movs	r3, #0
    9e6a:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:343
			while (!done) {
    9e6c:	e01b      	b.n	9ea6 <printk+0x16a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:344
				switch (c = *++p) {
    9e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e70:	3301      	adds	r3, #1
    9e72:	9321      	str	r3, [sp, #132]	; 0x84
    9e74:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e76:	781b      	ldrb	r3, [r3, #0]
    9e78:	b25b      	sxtb	r3, r3
    9e7a:	9315      	str	r3, [sp, #84]	; 0x54
    9e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9e7e:	3b30      	subs	r3, #48	; 0x30
    9e80:	2b09      	cmp	r3, #9
    9e82:	d80a      	bhi.n	9e9a <printk+0x15e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:356
				case '6':
				case '7':
				case '8':
				case '9':
#if 1
					precision_width = (precision_width * 10) + (c - '0');
    9e84:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9e86:	0013      	movs	r3, r2
    9e88:	009b      	lsls	r3, r3, #2
    9e8a:	189b      	adds	r3, r3, r2
    9e8c:	005b      	lsls	r3, r3, #1
    9e8e:	001a      	movs	r2, r3
    9e90:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9e92:	3b30      	subs	r3, #48	; 0x30
    9e94:	18d3      	adds	r3, r2, r3
    9e96:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:359

#endif
					break;
    9e98:	e005      	b.n	9ea6 <printk+0x16a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:362
				default:
					/* we've gone one char too far */
					--p;
    9e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9e9c:	3b01      	subs	r3, #1
    9e9e:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:363
					done = TRUE;
    9ea0:	2301      	movs	r3, #1
    9ea2:	931e      	str	r3, [sp, #120]	; 0x78
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:364
					break;
    9ea4:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:343
			while (!done) {
    9ea6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d0e0      	beq.n	9e6e <printk+0x132>
    9eac:	e006      	b.n	9ebc <printk+0x180>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:370
				}
			}
		}
		else {
			/* we've gone one char too far */
			--p;
    9eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eb0:	3b01      	subs	r3, #1
    9eb2:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:372
#if 1
			precision_used = FALSE;
    9eb4:	2300      	movs	r3, #0
    9eb6:	931a      	str	r3, [sp, #104]	; 0x68
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:373
			precision_width = 0;
    9eb8:	2300      	movs	r3, #0
    9eba:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:377
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
    9ebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ebe:	3301      	adds	r3, #1
    9ec0:	9321      	str	r3, [sp, #132]	; 0x84
    9ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ec4:	781b      	ldrb	r3, [r3, #0]
    9ec6:	b25b      	sxtb	r3, r3
    9ec8:	2b6c      	cmp	r3, #108	; 0x6c
    9eca:	d005      	beq.n	9ed8 <printk+0x19c>
    9ecc:	dc0e      	bgt.n	9eec <printk+0x1b0>
    9ece:	2b4c      	cmp	r3, #76	; 0x4c
    9ed0:	d007      	beq.n	9ee2 <printk+0x1a6>
    9ed2:	2b68      	cmp	r3, #104	; 0x68
    9ed4:	d10a      	bne.n	9eec <printk+0x1b0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:380
		case 'h':
			// length_modifier |= LENMOD_h;
			break;
    9ed6:	e00d      	b.n	9ef4 <printk+0x1b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:382
		case 'l':
			length_modifier |= LENMOD_l;
    9ed8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9eda:	2201      	movs	r2, #1
    9edc:	4313      	orrs	r3, r2
    9ede:	931b      	str	r3, [sp, #108]	; 0x6c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:383
			break;
    9ee0:	e008      	b.n	9ef4 <printk+0x1b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:385
		case 'L':
			length_modifier |= LENMOD_L;
    9ee2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9ee4:	2202      	movs	r2, #2
    9ee6:	4313      	orrs	r3, r2
    9ee8:	931b      	str	r3, [sp, #108]	; 0x6c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:386
			break;
    9eea:	e003      	b.n	9ef4 <printk+0x1b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:389
		default:
			/* we've gone one char too far */
			--p;
    9eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eee:	3b01      	subs	r3, #1
    9ef0:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:390
			break;
    9ef2:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:394
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
    9ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ef6:	3301      	adds	r3, #1
    9ef8:	9321      	str	r3, [sp, #132]	; 0x84
    9efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9efc:	781b      	ldrb	r3, [r3, #0]
    9efe:	b25b      	sxtb	r3, r3
    9f00:	9315      	str	r3, [sp, #84]	; 0x54
    9f02:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9f04:	3b58      	subs	r3, #88	; 0x58
    9f06:	2b20      	cmp	r3, #32
    9f08:	d900      	bls.n	9f0c <printk+0x1d0>
    9f0a:	e286      	b.n	a41a <printk+0x6de>
    9f0c:	009a      	lsls	r2, r3, #2
    9f0e:	4b78      	ldr	r3, [pc, #480]	; (a0f0 <printk+0x3b4>)
    9f10:	18d3      	adds	r3, r2, r3
    9f12:	681b      	ldr	r3, [r3, #0]
    9f14:	469f      	mov	pc, r3
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:399
		case 'd':
		case 'i':
			//此时ap为指向可变参数列表的第一个参数
			//返回当前参数，并将ap指向下一个参数
			ival = (int)va_arg(ap, int);
    9f16:	9b01      	ldr	r3, [sp, #4]
    9f18:	3304      	adds	r3, #4
    9f1a:	9301      	str	r3, [sp, #4]
    9f1c:	9b01      	ldr	r3, [sp, #4]
    9f1e:	3b04      	subs	r3, #4
    9f20:	681b      	ldr	r3, [r3, #0]
    9f22:	9308      	str	r3, [sp, #32]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:401
			//将整型转换成字符型保存在vstr中，返回字符数vlen
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);
    9f24:	a908      	add	r1, sp, #32
    9f26:	a80a      	add	r0, sp, #40	; 0x28
    9f28:	230a      	movs	r3, #10
    9f2a:	2201      	movs	r2, #1
    9f2c:	f7ff fe56 	bl	9bdc <printk_mknumstr>
    9f30:	0003      	movs	r3, r0
    9f32:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:403
			//指向转换后的最后一个字符
			vstrp = &vstr[vlen];
    9f34:	aa0a      	add	r2, sp, #40	; 0x28
    9f36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9f38:	18d3      	adds	r3, r2, r3
    9f3a:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:406

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
    9f3c:	9b08      	ldr	r3, [sp, #32]
    9f3e:	2b00      	cmp	r3, #0
    9f40:	da05      	bge.n	9f4e <printk+0x212>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:407
				schar = '-';
    9f42:	232d      	movs	r3, #45	; 0x2d
    9f44:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:408
				++vlen;
    9f46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9f48:	3301      	adds	r3, #1
    9f4a:	931f      	str	r3, [sp, #124]	; 0x7c
    9f4c:	e015      	b.n	9f7a <printk+0x23e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:412
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    9f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9f50:	2202      	movs	r2, #2
    9f52:	4013      	ands	r3, r2
    9f54:	d005      	beq.n	9f62 <printk+0x226>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:413
					schar = '+';
    9f56:	232b      	movs	r3, #43	; 0x2b
    9f58:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:414
					++vlen;
    9f5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9f5c:	3301      	adds	r3, #1
    9f5e:	931f      	str	r3, [sp, #124]	; 0x7c
    9f60:	e00b      	b.n	9f7a <printk+0x23e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:417
				}
				else {
					if (IS_FLAG_SPACE(flags_used)) {
    9f62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9f64:	2204      	movs	r2, #4
    9f66:	4013      	ands	r3, r2
    9f68:	d005      	beq.n	9f76 <printk+0x23a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:418
						schar = ' ';
    9f6a:	2320      	movs	r3, #32
    9f6c:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:419
						++vlen;
    9f6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9f70:	3301      	adds	r3, #1
    9f72:	931f      	str	r3, [sp, #124]	; 0x7c
    9f74:	e001      	b.n	9f7a <printk+0x23e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:422
					}
					else {
						schar = 0;
    9f76:	2300      	movs	r3, #0
    9f78:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:426
					}
				}
			}
			dschar = FALSE;
    9f7a:	2300      	movs	r3, #0
    9f7c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:431

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    9f7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9f80:	2208      	movs	r2, #8
    9f82:	4013      	ands	r3, r2
    9f84:	d013      	beq.n	9fae <printk+0x272>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:432
				if (schar)
    9f86:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9f88:	2b00      	cmp	r3, #0
    9f8a:	d005      	beq.n	9f98 <printk+0x25c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:433
					printk_putc(schar, &count, info);  //输出符号
    9f8c:	9a03      	ldr	r2, [sp, #12]
    9f8e:	a909      	add	r1, sp, #36	; 0x24
    9f90:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9f92:	0018      	movs	r0, r3
    9f94:	f7ff fcc0 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:434
				dschar = TRUE;
    9f98:	2301      	movs	r3, #1
    9f9a:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:435
				printk_pad_zero(vlen, field_width, &count, info);
    9f9c:	9b03      	ldr	r3, [sp, #12]
    9f9e:	aa09      	add	r2, sp, #36	; 0x24
    9fa0:	991c      	ldr	r1, [sp, #112]	; 0x70
    9fa2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9fa4:	f7ff fe96 	bl	9cd4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:436
				vlen = field_width;
    9fa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9faa:	931f      	str	r3, [sp, #124]	; 0x7c
    9fac:	e014      	b.n	9fd8 <printk+0x29c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:439
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    9fae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9fb0:	2201      	movs	r2, #1
    9fb2:	4013      	ands	r3, r2
    9fb4:	d110      	bne.n	9fd8 <printk+0x29c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:440
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    9fb6:	9b03      	ldr	r3, [sp, #12]
    9fb8:	aa09      	add	r2, sp, #36	; 0x24
    9fba:	991c      	ldr	r1, [sp, #112]	; 0x70
    9fbc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9fbe:	f7ff fea3 	bl	9d08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:442

					if (schar)
    9fc2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9fc4:	2b00      	cmp	r3, #0
    9fc6:	d005      	beq.n	9fd4 <printk+0x298>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:443
						printk_putc(schar, &count, info);
    9fc8:	9a03      	ldr	r2, [sp, #12]
    9fca:	a909      	add	r1, sp, #36	; 0x24
    9fcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9fce:	0018      	movs	r0, r3
    9fd0:	f7ff fca2 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:444
					dschar = TRUE;
    9fd4:	2301      	movs	r3, #1
    9fd6:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:450
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    9fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d000      	beq.n	9fe0 <printk+0x2a4>
    9fde:	e190      	b.n	a302 <printk+0x5c6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:450 (discriminator 1)
    9fe0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d100      	bne.n	9fe8 <printk+0x2ac>
    9fe6:	e18c      	b.n	a302 <printk+0x5c6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:451
				printk_putc(schar, &count, info);
    9fe8:	9a03      	ldr	r2, [sp, #12]
    9fea:	a909      	add	r1, sp, #36	; 0x24
    9fec:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9fee:	0018      	movs	r0, r3
    9ff0:	f7ff fc92 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:453
			}
			goto cont_xd;  //开始跳转
    9ff4:	e185      	b.n	a302 <printk+0x5c6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:464
			//3.140001 对double数:0x40091EB85F577E6C
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。

			//【20200816】  XSX，解决浮点数不优化问题
			ap = ap + 4;
    9ff6:	9b01      	ldr	r3, [sp, #4]
    9ff8:	3304      	adds	r3, #4
    9ffa:	9301      	str	r3, [sp, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:465
			fval = (double)va_arg(ap, double);
    9ffc:	9b01      	ldr	r3, [sp, #4]
    9ffe:	3308      	adds	r3, #8
    a000:	9301      	str	r3, [sp, #4]
    a002:	9b01      	ldr	r3, [sp, #4]
    a004:	3b08      	subs	r3, #8
    a006:	681a      	ldr	r2, [r3, #0]
    a008:	685b      	ldr	r3, [r3, #4]
    a00a:	9206      	str	r2, [sp, #24]
    a00c:	9307      	str	r3, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:469

			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
    a00e:	9806      	ldr	r0, [sp, #24]
    a010:	9907      	ldr	r1, [sp, #28]
    a012:	2200      	movs	r2, #0
    a014:	2300      	movs	r3, #0
    a016:	f7fc ffd3 	bl	6fc0 <__aeabi_dcmplt>
    a01a:	1e03      	subs	r3, r0, #0
    a01c:	d00f      	beq.n	a03e <printk+0x302>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:470
				schar = '-';
    a01e:	232d      	movs	r3, #45	; 0x2d
    a020:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:471
				fval = -fval;				//负数取它的正数
    a022:	9a06      	ldr	r2, [sp, #24]
    a024:	9b07      	ldr	r3, [sp, #28]
    a026:	0011      	movs	r1, r2
    a028:	000c      	movs	r4, r1
    a02a:	2180      	movs	r1, #128	; 0x80
    a02c:	0609      	lsls	r1, r1, #24
    a02e:	4059      	eors	r1, r3
    a030:	000d      	movs	r5, r1
    a032:	9406      	str	r4, [sp, #24]
    a034:	9507      	str	r5, [sp, #28]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:472
				++vlen;
    a036:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a038:	3301      	adds	r3, #1
    a03a:	931f      	str	r3, [sp, #124]	; 0x7c
    a03c:	e015      	b.n	a06a <printk+0x32e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:476
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    a03e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a040:	2202      	movs	r2, #2
    a042:	4013      	ands	r3, r2
    a044:	d005      	beq.n	a052 <printk+0x316>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:477
					schar = '+';
    a046:	232b      	movs	r3, #43	; 0x2b
    a048:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:478
					++vlen;
    a04a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a04c:	3301      	adds	r3, #1
    a04e:	931f      	str	r3, [sp, #124]	; 0x7c
    a050:	e00b      	b.n	a06a <printk+0x32e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:481
				}
				else {
					if (IS_FLAG_SPACE(flags_used)) {
    a052:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a054:	2204      	movs	r2, #4
    a056:	4013      	ands	r3, r2
    a058:	d005      	beq.n	a066 <printk+0x32a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:482
						schar = ' ';
    a05a:	2320      	movs	r3, #32
    a05c:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:483
						++vlen;
    a05e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a060:	3301      	adds	r3, #1
    a062:	931f      	str	r3, [sp, #124]	; 0x7c
    a064:	e001      	b.n	a06a <printk+0x32e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:486
					}
					else {
						schar = 0;
    a066:	2300      	movs	r3, #0
    a068:	9318      	str	r3, [sp, #96]	; 0x60
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:490
					}
				}
			}
			dschar = FALSE;
    a06a:	2300      	movs	r3, #0
    a06c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:493

			//确定是否使用小数点精度数值
			if (precision_used)
    a06e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a070:	2b00      	cmp	r3, #0
    a072:	d00a      	beq.n	a08a <printk+0x34e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:496
			{
				//将整型转换成字符型保存在vstr中，返回字符数vlen
				vlen = printk_mkfloatstr(&fval, vstr, precision_width);
    a074:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a076:	a90a      	add	r1, sp, #40	; 0x28
    a078:	ab06      	add	r3, sp, #24
    a07a:	0018      	movs	r0, r3
    a07c:	f7ff fc72 	bl	9964 <printk_mkfloatstr>
    a080:	0003      	movs	r3, r0
    a082:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:497
				vstrp = &vstr[0];  //指向转换后的第一个字符
    a084:	ab0a      	add	r3, sp, #40	; 0x28
    a086:	9320      	str	r3, [sp, #128]	; 0x80
    a088:	e017      	b.n	a0ba <printk+0x37e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:501
			}
			else
			{	//浮点型精度到小数点后8位
				if (length_modifier == 0)
    a08a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a08c:	2b00      	cmp	r3, #0
    a08e:	d10a      	bne.n	a0a6 <printk+0x36a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:503
				{	//将整型转换成字符型保存在vstr中，返回字符数vlen
					vlen = printk_mkfloatstr(&fval, vstr, 8);
    a090:	a90a      	add	r1, sp, #40	; 0x28
    a092:	ab06      	add	r3, sp, #24
    a094:	2208      	movs	r2, #8
    a096:	0018      	movs	r0, r3
    a098:	f7ff fc64 	bl	9964 <printk_mkfloatstr>
    a09c:	0003      	movs	r3, r0
    a09e:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:505
					//指向转换后的第一个字符
					vstrp = &vstr[0];
    a0a0:	ab0a      	add	r3, sp, #40	; 0x28
    a0a2:	9320      	str	r3, [sp, #128]	; 0x80
    a0a4:	e009      	b.n	a0ba <printk+0x37e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:509
				}
				else
				{	//将整型转换成字符型保存在vstr中，返回字符数vlen
					vlen = printk_mkfloatstr(&fval, vstr, precision_width);
    a0a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a0a8:	a90a      	add	r1, sp, #40	; 0x28
    a0aa:	ab06      	add	r3, sp, #24
    a0ac:	0018      	movs	r0, r3
    a0ae:	f7ff fc59 	bl	9964 <printk_mkfloatstr>
    a0b2:	0003      	movs	r3, r0
    a0b4:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:511
					//指向转换后的第一个字符
					vstrp = &vstr[0];
    a0b6:	ab0a      	add	r3, sp, #40	; 0x28
    a0b8:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:521


			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    a0ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a0bc:	2208      	movs	r2, #8
    a0be:	4013      	ands	r3, r2
    a0c0:	d018      	beq.n	a0f4 <printk+0x3b8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:522
				if (schar)
    a0c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d005      	beq.n	a0d4 <printk+0x398>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:523
					printk_putc(schar, &count, info);  //输出符号
    a0c8:	9a03      	ldr	r2, [sp, #12]
    a0ca:	a909      	add	r1, sp, #36	; 0x24
    a0cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a0ce:	0018      	movs	r0, r3
    a0d0:	f7ff fc22 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:524
				dschar = TRUE;
    a0d4:	2301      	movs	r3, #1
    a0d6:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:525
				printk_pad_zero(vlen, field_width, &count, info);
    a0d8:	9b03      	ldr	r3, [sp, #12]
    a0da:	aa09      	add	r2, sp, #36	; 0x24
    a0dc:	991c      	ldr	r1, [sp, #112]	; 0x70
    a0de:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a0e0:	f7ff fdf8 	bl	9cd4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:526
				vlen = field_width;
    a0e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a0e6:	931f      	str	r3, [sp, #124]	; 0x7c
    a0e8:	e019      	b.n	a11e <printk+0x3e2>
    a0ea:	46c0      	nop			; (mov r8, r8)
    a0ec:	0000a5e4 	.word	0x0000a5e4
    a0f0:	0000a628 	.word	0x0000a628
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:529
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    a0f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a0f6:	2201      	movs	r2, #1
    a0f8:	4013      	ands	r3, r2
    a0fa:	d110      	bne.n	a11e <printk+0x3e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:530
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    a0fc:	9b03      	ldr	r3, [sp, #12]
    a0fe:	aa09      	add	r2, sp, #36	; 0x24
    a100:	991c      	ldr	r1, [sp, #112]	; 0x70
    a102:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a104:	f7ff fe00 	bl	9d08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:532

					if (schar)
    a108:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a10a:	2b00      	cmp	r3, #0
    a10c:	d005      	beq.n	a11a <printk+0x3de>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:533
						printk_putc(schar, &count, info);
    a10e:	9a03      	ldr	r2, [sp, #12]
    a110:	a909      	add	r1, sp, #36	; 0x24
    a112:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a114:	0018      	movs	r0, r3
    a116:	f7ff fbff 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:534
					dschar = TRUE;
    a11a:	2301      	movs	r3, #1
    a11c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:540
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    a11e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a120:	2b00      	cmp	r3, #0
    a122:	d114      	bne.n	a14e <printk+0x412>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:540 (discriminator 1)
    a124:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a126:	2b00      	cmp	r3, #0
    a128:	d011      	beq.n	a14e <printk+0x412>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:541
				printk_putc(schar, &count, info);
    a12a:	9a03      	ldr	r2, [sp, #12]
    a12c:	a909      	add	r1, sp, #36	; 0x24
    a12e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a130:	0018      	movs	r0, r3
    a132:	f7ff fbf1 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:543
			}
			while (*vstrp)
    a136:	e00a      	b.n	a14e <printk+0x412>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:544
				printk_putc(*vstrp++, &count, info);
    a138:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a13a:	1c5a      	adds	r2, r3, #1
    a13c:	9220      	str	r2, [sp, #128]	; 0x80
    a13e:	781b      	ldrb	r3, [r3, #0]
    a140:	b25b      	sxtb	r3, r3
    a142:	0018      	movs	r0, r3
    a144:	9a03      	ldr	r2, [sp, #12]
    a146:	ab09      	add	r3, sp, #36	; 0x24
    a148:	0019      	movs	r1, r3
    a14a:	f7ff fbe5 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:543
			while (*vstrp)
    a14e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a150:	781b      	ldrb	r3, [r3, #0]
    a152:	b25b      	sxtb	r3, r3
    a154:	2b00      	cmp	r3, #0
    a156:	d1ef      	bne.n	a138 <printk+0x3fc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:545
			if (IS_FLAG_MINUS(flags_used)) {
    a158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a15a:	2201      	movs	r2, #1
    a15c:	4013      	ands	r3, r2
    a15e:	d100      	bne.n	a162 <printk+0x426>
    a160:	e162      	b.n	a428 <printk+0x6ec>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:546
				printk_pad_space(vlen, field_width, &count, info);
    a162:	9b03      	ldr	r3, [sp, #12]
    a164:	aa09      	add	r2, sp, #36	; 0x24
    a166:	991c      	ldr	r1, [sp, #112]	; 0x70
    a168:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a16a:	f7ff fdcd 	bl	9d08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:548
			}
			break;
    a16e:	e15b      	b.n	a428 <printk+0x6ec>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:552
			//以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int)va_arg(ap, unsigned int);
    a170:	9b01      	ldr	r3, [sp, #4]
    a172:	3304      	adds	r3, #4
    a174:	9301      	str	r3, [sp, #4]
    a176:	9b01      	ldr	r3, [sp, #4]
    a178:	3b04      	subs	r3, #4
    a17a:	681b      	ldr	r3, [r3, #0]
    a17c:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:553
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    a17e:	a905      	add	r1, sp, #20
    a180:	a80a      	add	r0, sp, #40	; 0x28
    a182:	2310      	movs	r3, #16
    a184:	2200      	movs	r2, #0
    a186:	f7ff fd29 	bl	9bdc <printk_mknumstr>
    a18a:	0003      	movs	r3, r0
    a18c:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:554
			vstrp = &vstr[vlen];
    a18e:	aa0a      	add	r2, sp, #40	; 0x28
    a190:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a192:	18d3      	adds	r3, r2, r3
    a194:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:556

			dschar = FALSE;
    a196:	2300      	movs	r3, #0
    a198:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:557
			if (IS_FLAG_ZERO(flags_used)) {
    a19a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a19c:	2208      	movs	r2, #8
    a19e:	4013      	ands	r3, r2
    a1a0:	d01a      	beq.n	a1d8 <printk+0x49c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:558
				if (IS_FLAG_POUND(flags_used)) {
    a1a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a1a4:	2210      	movs	r2, #16
    a1a6:	4013      	ands	r3, r2
    a1a8:	d00d      	beq.n	a1c6 <printk+0x48a>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:559
					printk_putc('0', &count, info);
    a1aa:	9a03      	ldr	r2, [sp, #12]
    a1ac:	ab09      	add	r3, sp, #36	; 0x24
    a1ae:	0019      	movs	r1, r3
    a1b0:	2030      	movs	r0, #48	; 0x30
    a1b2:	f7ff fbb1 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:560
					printk_putc('x', &count, info);
    a1b6:	9a03      	ldr	r2, [sp, #12]
    a1b8:	ab09      	add	r3, sp, #36	; 0x24
    a1ba:	0019      	movs	r1, r3
    a1bc:	2078      	movs	r0, #120	; 0x78
    a1be:	f7ff fbab 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:562
					/*vlen += 2;*/
					dschar = TRUE;
    a1c2:	2301      	movs	r3, #1
    a1c4:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:564
				}
				printk_pad_zero(vlen, field_width, &count, info);
    a1c6:	9b03      	ldr	r3, [sp, #12]
    a1c8:	aa09      	add	r2, sp, #36	; 0x24
    a1ca:	991c      	ldr	r1, [sp, #112]	; 0x70
    a1cc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a1ce:	f7ff fd81 	bl	9cd4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:565
				vlen = field_width;
    a1d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a1d4:	931f      	str	r3, [sp, #124]	; 0x7c
    a1d6:	e022      	b.n	a21e <printk+0x4e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:568
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    a1d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a1da:	2201      	movs	r2, #1
    a1dc:	4013      	ands	r3, r2
    a1de:	d11e      	bne.n	a21e <printk+0x4e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:569
					if (IS_FLAG_POUND(flags_used)) {
    a1e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a1e2:	2210      	movs	r2, #16
    a1e4:	4013      	ands	r3, r2
    a1e6:	d002      	beq.n	a1ee <printk+0x4b2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:570
						vlen += 2;
    a1e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a1ea:	3302      	adds	r3, #2
    a1ec:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:572
					}
					printk_pad_space(vlen, field_width, &count, info);
    a1ee:	9b03      	ldr	r3, [sp, #12]
    a1f0:	aa09      	add	r2, sp, #36	; 0x24
    a1f2:	991c      	ldr	r1, [sp, #112]	; 0x70
    a1f4:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a1f6:	f7ff fd87 	bl	9d08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:573
					if (IS_FLAG_POUND(flags_used)) {
    a1fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a1fc:	2210      	movs	r2, #16
    a1fe:	4013      	ands	r3, r2
    a200:	d00d      	beq.n	a21e <printk+0x4e2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:574
						printk_putc('0', &count, info);
    a202:	9a03      	ldr	r2, [sp, #12]
    a204:	ab09      	add	r3, sp, #36	; 0x24
    a206:	0019      	movs	r1, r3
    a208:	2030      	movs	r0, #48	; 0x30
    a20a:	f7ff fb85 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:575
						printk_putc('x', &count, info);
    a20e:	9a03      	ldr	r2, [sp, #12]
    a210:	ab09      	add	r3, sp, #36	; 0x24
    a212:	0019      	movs	r1, r3
    a214:	2078      	movs	r0, #120	; 0x78
    a216:	f7ff fb7f 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:576
						dschar = TRUE;
    a21a:	2301      	movs	r3, #1
    a21c:	9317      	str	r3, [sp, #92]	; 0x5c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:581
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
    a21e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a220:	2210      	movs	r2, #16
    a222:	4013      	ands	r3, r2
    a224:	d06f      	beq.n	a306 <printk+0x5ca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:581 (discriminator 1)
    a226:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a228:	2b00      	cmp	r3, #0
    a22a:	d16c      	bne.n	a306 <printk+0x5ca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:582
				printk_putc('0', &count, info);
    a22c:	9a03      	ldr	r2, [sp, #12]
    a22e:	ab09      	add	r3, sp, #36	; 0x24
    a230:	0019      	movs	r1, r3
    a232:	2030      	movs	r0, #48	; 0x30
    a234:	f7ff fb70 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:583
				printk_putc('x', &count, info);
    a238:	9a03      	ldr	r2, [sp, #12]
    a23a:	ab09      	add	r3, sp, #36	; 0x24
    a23c:	0019      	movs	r1, r3
    a23e:	2078      	movs	r0, #120	; 0x78
    a240:	f7ff fb6a 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:584
				vlen += 2;
    a244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a246:	3302      	adds	r3, #2
    a248:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:586
			}
			goto cont_xd;
    a24a:	e05c      	b.n	a306 <printk+0x5ca>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:589
			//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int)va_arg(ap, unsigned int);
    a24c:	9b01      	ldr	r3, [sp, #4]
    a24e:	3304      	adds	r3, #4
    a250:	9301      	str	r3, [sp, #4]
    a252:	9b01      	ldr	r3, [sp, #4]
    a254:	3b04      	subs	r3, #4
    a256:	681b      	ldr	r3, [r3, #0]
    a258:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:590
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
    a25a:	a905      	add	r1, sp, #20
    a25c:	a80a      	add	r0, sp, #40	; 0x28
    a25e:	2308      	movs	r3, #8
    a260:	2200      	movs	r2, #0
    a262:	f7ff fcbb 	bl	9bdc <printk_mknumstr>
    a266:	0003      	movs	r3, r0
    a268:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:591
			goto cont_u;
    a26a:	e02e      	b.n	a2ca <printk+0x58e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:594
			//二进制输出
		case 'b':
			uval = (unsigned int)va_arg(ap, unsigned int);
    a26c:	9b01      	ldr	r3, [sp, #4]
    a26e:	3304      	adds	r3, #4
    a270:	9301      	str	r3, [sp, #4]
    a272:	9b01      	ldr	r3, [sp, #4]
    a274:	3b04      	subs	r3, #4
    a276:	681b      	ldr	r3, [r3, #0]
    a278:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:595
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
    a27a:	a905      	add	r1, sp, #20
    a27c:	a80a      	add	r0, sp, #40	; 0x28
    a27e:	2302      	movs	r3, #2
    a280:	2200      	movs	r2, #0
    a282:	f7ff fcab 	bl	9bdc <printk_mknumstr>
    a286:	0003      	movs	r3, r0
    a288:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:596
			goto cont_u;
    a28a:	e01e      	b.n	a2ca <printk+0x58e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:599
			//输出指针的值
		case 'p':
			uval = (unsigned int)va_arg(ap, void*);
    a28c:	9b01      	ldr	r3, [sp, #4]
    a28e:	3304      	adds	r3, #4
    a290:	9301      	str	r3, [sp, #4]
    a292:	9b01      	ldr	r3, [sp, #4]
    a294:	3b04      	subs	r3, #4
    a296:	681b      	ldr	r3, [r3, #0]
    a298:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:600
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    a29a:	a905      	add	r1, sp, #20
    a29c:	a80a      	add	r0, sp, #40	; 0x28
    a29e:	2310      	movs	r3, #16
    a2a0:	2200      	movs	r2, #0
    a2a2:	f7ff fc9b 	bl	9bdc <printk_mknumstr>
    a2a6:	0003      	movs	r3, r0
    a2a8:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:601
			goto cont_u;
    a2aa:	e00e      	b.n	a2ca <printk+0x58e>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:603
		case 'u':
			uval = (unsigned int)va_arg(ap, unsigned int);
    a2ac:	9b01      	ldr	r3, [sp, #4]
    a2ae:	3304      	adds	r3, #4
    a2b0:	9301      	str	r3, [sp, #4]
    a2b2:	9b01      	ldr	r3, [sp, #4]
    a2b4:	3b04      	subs	r3, #4
    a2b6:	681b      	ldr	r3, [r3, #0]
    a2b8:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:604
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
    a2ba:	a905      	add	r1, sp, #20
    a2bc:	a80a      	add	r0, sp, #40	; 0x28
    a2be:	230a      	movs	r3, #10
    a2c0:	2200      	movs	r2, #0
    a2c2:	f7ff fc8b 	bl	9bdc <printk_mknumstr>
    a2c6:	0003      	movs	r3, r0
    a2c8:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:606

			cont_u: vstrp = &vstr[vlen];
    a2ca:	aa0a      	add	r2, sp, #40	; 0x28
    a2cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a2ce:	18d3      	adds	r3, r2, r3
    a2d0:	9320      	str	r3, [sp, #128]	; 0x80
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:608

			if (IS_FLAG_ZERO(flags_used)) {
    a2d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a2d4:	2208      	movs	r2, #8
    a2d6:	4013      	ands	r3, r2
    a2d8:	d008      	beq.n	a2ec <printk+0x5b0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:609
				printk_pad_zero(vlen, field_width, &count, info);
    a2da:	9b03      	ldr	r3, [sp, #12]
    a2dc:	aa09      	add	r2, sp, #36	; 0x24
    a2de:	991c      	ldr	r1, [sp, #112]	; 0x70
    a2e0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a2e2:	f7ff fcf7 	bl	9cd4 <printk_pad_zero>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:610
				vlen = field_width;
    a2e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a2e8:	931f      	str	r3, [sp, #124]	; 0x7c
    a2ea:	e01b      	b.n	a324 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:613
			}
			else {
				if (!IS_FLAG_MINUS(flags_used)) {
    a2ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a2ee:	2201      	movs	r2, #1
    a2f0:	4013      	ands	r3, r2
    a2f2:	d10a      	bne.n	a30a <printk+0x5ce>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:614
					printk_pad_space(vlen, field_width, &count, info);
    a2f4:	9b03      	ldr	r3, [sp, #12]
    a2f6:	aa09      	add	r2, sp, #36	; 0x24
    a2f8:	991c      	ldr	r1, [sp, #112]	; 0x70
    a2fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a2fc:	f7ff fd04 	bl	9d08 <printk_pad_space>
    a300:	e010      	b.n	a324 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:453
			goto cont_xd;  //开始跳转
    a302:	46c0      	nop			; (mov r8, r8)
    a304:	e00e      	b.n	a324 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:586
			goto cont_xd;
    a306:	46c0      	nop			; (mov r8, r8)
    a308:	e00c      	b.n	a324 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:618
				}
			}

			cont_xd: while (*vstrp)
    a30a:	46c0      	nop			; (mov r8, r8)
    a30c:	e00a      	b.n	a324 <printk+0x5e8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:619
				printk_putc(*vstrp--, &count, info);
    a30e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a310:	1e5a      	subs	r2, r3, #1
    a312:	9220      	str	r2, [sp, #128]	; 0x80
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	b25b      	sxtb	r3, r3
    a318:	0018      	movs	r0, r3
    a31a:	9a03      	ldr	r2, [sp, #12]
    a31c:	ab09      	add	r3, sp, #36	; 0x24
    a31e:	0019      	movs	r1, r3
    a320:	f7ff fafa 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:618 (discriminator 1)
			cont_xd: while (*vstrp)
    a324:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a326:	781b      	ldrb	r3, [r3, #0]
    a328:	b25b      	sxtb	r3, r3
    a32a:	2b00      	cmp	r3, #0
    a32c:	d1ef      	bne.n	a30e <printk+0x5d2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:621

			if (IS_FLAG_MINUS(flags_used)) {
    a32e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a330:	2201      	movs	r2, #1
    a332:	4013      	ands	r3, r2
    a334:	d100      	bne.n	a338 <printk+0x5fc>
    a336:	e079      	b.n	a42c <printk+0x6f0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:622
				printk_pad_space(vlen, field_width, &count, info);
    a338:	9b03      	ldr	r3, [sp, #12]
    a33a:	aa09      	add	r2, sp, #36	; 0x24
    a33c:	991c      	ldr	r1, [sp, #112]	; 0x70
    a33e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a340:	f7ff fce2 	bl	9d08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:625
			}

			break;
    a344:	e072      	b.n	a42c <printk+0x6f0>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:628
			//字符型输出
		case 'c':
			cval = (char)va_arg(ap, unsigned int);
    a346:	9b01      	ldr	r3, [sp, #4]
    a348:	3304      	adds	r3, #4
    a34a:	9301      	str	r3, [sp, #4]
    a34c:	9b01      	ldr	r3, [sp, #4]
    a34e:	3b04      	subs	r3, #4
    a350:	681b      	ldr	r3, [r3, #0]
    a352:	b25b      	sxtb	r3, r3
    a354:	9313      	str	r3, [sp, #76]	; 0x4c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:629
			printk_putc(cval, &count, info);
    a356:	9a03      	ldr	r2, [sp, #12]
    a358:	a909      	add	r1, sp, #36	; 0x24
    a35a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a35c:	0018      	movs	r0, r3
    a35e:	f7ff fadb 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:630
			break;
    a362:	e066      	b.n	a432 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:632
		case 's':
			sval = (char*)va_arg(ap, char*);
    a364:	9b01      	ldr	r3, [sp, #4]
    a366:	3304      	adds	r3, #4
    a368:	9301      	str	r3, [sp, #4]
    a36a:	9b01      	ldr	r3, [sp, #4]
    a36c:	3b04      	subs	r3, #4
    a36e:	681b      	ldr	r3, [r3, #0]
    a370:	9316      	str	r3, [sp, #88]	; 0x58
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:633
			if (sval) {
    a372:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a374:	2b00      	cmp	r3, #0
    a376:	d05b      	beq.n	a430 <printk+0x6f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:634
				vlen = strlen(sval);
    a378:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a37a:	0018      	movs	r0, r3
    a37c:	f7fd ff12 	bl	81a4 <strlen>
    a380:	0003      	movs	r3, r0
    a382:	931f      	str	r3, [sp, #124]	; 0x7c
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:635
				if (!IS_FLAG_MINUS(flags_used)) {
    a384:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a386:	2201      	movs	r2, #1
    a388:	4013      	ands	r3, r2
    a38a:	d105      	bne.n	a398 <printk+0x65c>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:636
					printk_pad_space(vlen, field_width, &count, info);
    a38c:	9b03      	ldr	r3, [sp, #12]
    a38e:	aa09      	add	r2, sp, #36	; 0x24
    a390:	991c      	ldr	r1, [sp, #112]	; 0x70
    a392:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a394:	f7ff fcb8 	bl	9d08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:638
				}
				if (precision_width != 0)
    a398:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a39a:	2b00      	cmp	r3, #0
    a39c:	d022      	beq.n	a3e4 <printk+0x6a8>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:640
				{
					while (*sval)
    a39e:	e010      	b.n	a3c2 <printk+0x686>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:642
					{
						if (precision_width >= 1)
    a3a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a3a2:	2b00      	cmp	r3, #0
    a3a4:	dd0d      	ble.n	a3c2 <printk+0x686>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:644
						{
							precision_width--;
    a3a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a3a8:	3b01      	subs	r3, #1
    a3aa:	9319      	str	r3, [sp, #100]	; 0x64
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:645
							printk_putc(*sval++, &count, info);
    a3ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a3ae:	1c5a      	adds	r2, r3, #1
    a3b0:	9216      	str	r2, [sp, #88]	; 0x58
    a3b2:	781b      	ldrb	r3, [r3, #0]
    a3b4:	b25b      	sxtb	r3, r3
    a3b6:	0018      	movs	r0, r3
    a3b8:	9a03      	ldr	r2, [sp, #12]
    a3ba:	ab09      	add	r3, sp, #36	; 0x24
    a3bc:	0019      	movs	r1, r3
    a3be:	f7ff faab 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:640
					while (*sval)
    a3c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a3c4:	781b      	ldrb	r3, [r3, #0]
    a3c6:	b25b      	sxtb	r3, r3
    a3c8:	2b00      	cmp	r3, #0
    a3ca:	d1e9      	bne.n	a3a0 <printk+0x664>
    a3cc:	e00f      	b.n	a3ee <printk+0x6b2>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:652
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
						printk_putc(*sval++, &count, info);
    a3ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a3d0:	1c5a      	adds	r2, r3, #1
    a3d2:	9216      	str	r2, [sp, #88]	; 0x58
    a3d4:	781b      	ldrb	r3, [r3, #0]
    a3d6:	b25b      	sxtb	r3, r3
    a3d8:	0018      	movs	r0, r3
    a3da:	9a03      	ldr	r2, [sp, #12]
    a3dc:	ab09      	add	r3, sp, #36	; 0x24
    a3de:	0019      	movs	r1, r3
    a3e0:	f7ff fa9a 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:651
					while (*sval)
    a3e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a3e6:	781b      	ldrb	r3, [r3, #0]
    a3e8:	b25b      	sxtb	r3, r3
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d1ef      	bne.n	a3ce <printk+0x692>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:654
				}
				if (IS_FLAG_MINUS(flags_used)) {
    a3ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a3f0:	2201      	movs	r2, #1
    a3f2:	4013      	ands	r3, r2
    a3f4:	d01c      	beq.n	a430 <printk+0x6f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:655
					printk_pad_space(vlen, field_width, &count, info);
    a3f6:	9b03      	ldr	r3, [sp, #12]
    a3f8:	aa09      	add	r2, sp, #36	; 0x24
    a3fa:	991c      	ldr	r1, [sp, #112]	; 0x70
    a3fc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a3fe:	f7ff fc83 	bl	9d08 <printk_pad_space>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:658
				}
			}
			break;
    a402:	e015      	b.n	a430 <printk+0x6f4>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:660
		case 'n':
			ivalp = (int*)va_arg(ap, int*);
    a404:	9b01      	ldr	r3, [sp, #4]
    a406:	3304      	adds	r3, #4
    a408:	9301      	str	r3, [sp, #4]
    a40a:	9b01      	ldr	r3, [sp, #4]
    a40c:	3b04      	subs	r3, #4
    a40e:	681b      	ldr	r3, [r3, #0]
    a410:	9314      	str	r3, [sp, #80]	; 0x50
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:661
			*ivalp = count;
    a412:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a414:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a416:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:662
			break;
    a418:	e00b      	b.n	a432 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:665

		default:
			printk_putc(c, &count, info);
    a41a:	9a03      	ldr	r2, [sp, #12]
    a41c:	a909      	add	r1, sp, #36	; 0x24
    a41e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a420:	0018      	movs	r0, r3
    a422:	f7ff fa79 	bl	9918 <printk_putc>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:666
			break;
    a426:	e004      	b.n	a432 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:548
			break;
    a428:	46c0      	nop			; (mov r8, r8)
    a42a:	e002      	b.n	a432 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:625
			break;
    a42c:	46c0      	nop			; (mov r8, r8)
    a42e:	e000      	b.n	a432 <printk+0x6f6>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:658
			break;
    a430:	46c0      	nop			; (mov r8, r8)
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:257 (discriminator 2)
	for (p = (char*)fmt; (c = *p) != 0; p++)
    a432:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a434:	3301      	adds	r3, #1
    a436:	9321      	str	r3, [sp, #132]	; 0x84
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:257 (discriminator 1)
    a438:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a43a:	781b      	ldrb	r3, [r3, #0]
    a43c:	b25b      	sxtb	r3, r3
    a43e:	9315      	str	r3, [sp, #84]	; 0x54
    a440:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a442:	2b00      	cmp	r3, #0
    a444:	d000      	beq.n	a448 <printk+0x70c>
    a446:	e491      	b.n	9d6c <printk+0x30>
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:669
		}
	}
	return count;
    a448:	9b09      	ldr	r3, [sp, #36]	; 0x24
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:670
}
    a44a:	0018      	movs	r0, r3
    a44c:	b023      	add	sp, #140	; 0x8c
    a44e:	bd30      	pop	{r4, r5, pc}

0000a450 <myprintf>:
myprintf():
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:678
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char* fmt, ...)
{
    a450:	b40f      	push	{r0, r1, r2, r3}
    a452:	b500      	push	{lr}
    a454:	b087      	sub	sp, #28
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:682
	char* ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
    a456:	ab01      	add	r3, sp, #4
    a458:	2201      	movs	r2, #1
    a45a:	601a      	str	r2, [r3, #0]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:683
	info.func = &out_char;     //调用的串口输出函数
    a45c:	ab01      	add	r3, sp, #4
    a45e:	4a0a      	ldr	r2, [pc, #40]	; (a488 <myprintf+0x38>)
    a460:	605a      	str	r2, [r3, #4]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:685
	//对ap 进行初始化，让它指向可变参数表里面的第一个参数
	va_start(ap, fmt);
    a462:	ab09      	add	r3, sp, #36	; 0x24
    a464:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:686
	rvalue = printk(&info, fmt, ap);
    a466:	9908      	ldr	r1, [sp, #32]
    a468:	9a05      	ldr	r2, [sp, #20]
    a46a:	ab01      	add	r3, sp, #4
    a46c:	0018      	movs	r0, r3
    a46e:	f7ff fc65 	bl	9d3c <printk>
    a472:	0003      	movs	r3, r0
    a474:	9304      	str	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:688

	va_end(ap);
    a476:	2300      	movs	r3, #0
    a478:	9305      	str	r3, [sp, #20]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:690

	return rvalue;
    a47a:	9b04      	ldr	r3, [sp, #16]
F:\WorkSpace\AHL-GEC-EXP\Temp\I2C_实现基本功能\Debug/srcc/printf.c:691
}
    a47c:	0018      	movs	r0, r3
    a47e:	b007      	add	sp, #28
    a480:	bc08      	pop	{r3}
    a482:	b004      	add	sp, #16
    a484:	4718      	bx	r3
    a486:	46c0      	nop			; (mov r8, r8)
    a488:	000098f9 	.word	0x000098f9

0000a48c <memcpy>:
memcpy():
    a48c:	2300      	movs	r3, #0
    a48e:	b510      	push	{r4, lr}
    a490:	429a      	cmp	r2, r3
    a492:	d100      	bne.n	a496 <memcpy+0xa>
    a494:	bd10      	pop	{r4, pc}
    a496:	5ccc      	ldrb	r4, [r1, r3]
    a498:	54c4      	strb	r4, [r0, r3]
    a49a:	3301      	adds	r3, #1
    a49c:	e7f8      	b.n	a490 <memcpy+0x4>

0000a49e <memset>:
memset():
    a49e:	0003      	movs	r3, r0
    a4a0:	1882      	adds	r2, r0, r2
    a4a2:	4293      	cmp	r3, r2
    a4a4:	d100      	bne.n	a4a8 <memset+0xa>
    a4a6:	4770      	bx	lr
    a4a8:	7019      	strb	r1, [r3, #0]
    a4aa:	3301      	adds	r3, #1
    a4ac:	e7f9      	b.n	a4a2 <memset+0x4>
    a4ae:	0000      	movs	r0, r0
    a4b0:	31313131 	.word	0x31313131
    a4b4:	0000000a 	.word	0x0000000a
    a4b8:	32323232 	.word	0x32323232
    a4bc:	0000000a 	.word	0x0000000a
    a4c0:	6c6c6548 	.word	0x6c6c6548
    a4c4:	57202c6f 	.word	0x57202c6f
    a4c8:	646c726f 	.word	0x646c726f
    a4cc:	00000a21 	.word	0x00000a21
    a4d0:	59554951 	.word	0x59554951
    a4d4:	4a495945 	.word	0x4a495945
    a4d8:	004e4149 	.word	0x004e4149
    a4dc:	6c696146 	.word	0x6c696146
    a4e0:	206f7420 	.word	0x206f7420
    a4e4:	74696e69 	.word	0x74696e69
    a4e8:	726f7020 	.word	0x726f7020
    a4ec:	6e692074 	.word	0x6e692074
    a4f0:	75726574 	.word	0x75726574
    a4f4:	a1a37470 	.word	0xa1a37470
    a4f8:	a1a3a1a3 	.word	0xa1a3a1a3
    a4fc:	0000000a 	.word	0x0000000a
    a500:	61656c50 	.word	0x61656c50
    a504:	73206573 	.word	0x73206573
    a508:	63656c65 	.word	0x63656c65
    a50c:	72612074 	.word	0x72612074
    a510:	646e756f 	.word	0x646e756f
    a514:	726f5020 	.word	0x726f5020
    a518:	20412074 	.word	0x20412074
    a51c:	4320726f 	.word	0x4320726f
    a520:	20726f20 	.word	0x20726f20
    a524:	00000a44 	.word	0x00000a44
    a528:	33323130 	.word	0x33323130
    a52c:	37363534 	.word	0x37363534
    a530:	42413938 	.word	0x42413938
    a534:	46454443 	.word	0x46454443
    a538:	30323032 	.word	0x30323032
    a53c:	36313730 	.word	0x36313730
    a540:	00000000 	.word	0x00000000
    a544:	bea12020 	.word	0xbea12020
    a548:	72657355 	.word	0x72657355
    a54c:	becae1cc 	.word	0xbecae1cc
    a550:	baa3bfa1 	.word	0xbaa3bfa1
    a554:	f8bdabbd 	.word	0xf8bdabbd
    a558:	7355ebc8 	.word	0x7355ebc8
    a55c:	c4b57265 	.word	0xc4b57265
    a560:	6e69616d 	.word	0x6e69616d
    a564:	b4d62928 	.word	0xb4d62928
    a568:	2e2ed0d0 	.word	0x2e2ed0d0
    a56c:	000a0d2e 	.word	0x000a0d2e
    a570:	6e654c67 	.word	0x6e654c67
    a574:	203a6874 	.word	0x203a6874
    a578:	000a6425 	.word	0x000a6425
    a57c:	646e6573 	.word	0x646e6573
    a580:	0000000a 	.word	0x0000000a
    a584:	65636572 	.word	0x65636572
    a588:	0a657669 	.word	0x0a657669
    a58c:	00000000 	.word	0x00000000
    a590:	00007630 	.word	0x00007630
    a594:	0000755e 	.word	0x0000755e
    a598:	0000755e 	.word	0x0000755e
    a59c:	0000755a 	.word	0x0000755a
    a5a0:	00007564 	.word	0x00007564
    a5a4:	00007564 	.word	0x00007564
    a5a8:	00007850 	.word	0x00007850
    a5ac:	0000755a 	.word	0x0000755a
    a5b0:	00007564 	.word	0x00007564
    a5b4:	00007850 	.word	0x00007850
    a5b8:	00007564 	.word	0x00007564
    a5bc:	0000755a 	.word	0x0000755a
    a5c0:	000077ee 	.word	0x000077ee
    a5c4:	000077ee 	.word	0x000077ee
    a5c8:	000077ee 	.word	0x000077ee
    a5cc:	000078ba 	.word	0x000078ba

0000a5d0 <I2C_BASE_TABLE>:
    a5d0:	40066000 40067000                       .`.@.p.@

0000a5d8 <I2C_IRQ_TABLE>:
    a5d8:	00000908                                ....

0000a5dc <UART_ARR>:
    a5dc:	4006b000 4006c000 00009ddc 00009dfa     ...@...@........
    a5ec:	00009dfa 00009df0 00009dfa 00009dfa     ................
    a5fc:	00009dfa 00009dfa 00009dfa 00009dfa     ................
    a60c:	00009dfa 00009dd2 00009dfa 00009dc8     ................
    a61c:	00009dfa 00009dfa 00009de6 0000a170     ............p...
    a62c:	0000a41a 0000a41a 0000a41a 0000a41a     ................
    a63c:	0000a41a 0000a41a 0000a41a 0000a41a     ................
    a64c:	0000a41a 0000a26c 0000a346 00009f16     ....l...F.......
    a65c:	0000a41a 00009ff6 0000a41a 0000a41a     ................
    a66c:	00009f16 0000a41a 0000a41a 0000a41a     ................
    a67c:	0000a41a 0000a404 0000a24c 0000a28c     ........L.......
    a68c:	0000a41a 0000a41a 0000a364 0000a41a     ........d.......
    a69c:	0000a2ac 0000a41a 0000a41a 0000a170     ............p...

0000a6ac <_init>:
_init():
    a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6ae:	46c0      	nop			; (mov r8, r8)
    a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a6b2:	bc08      	pop	{r3}
    a6b4:	469e      	mov	lr, r3
    a6b6:	4770      	bx	lr

0000a6b8 <_fini>:
_fini():
    a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6ba:	46c0      	nop			; (mov r8, r8)
    a6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a6be:	bc08      	pop	{r3}
    a6c0:	469e      	mov	lr, r3
    a6c2:	4770      	bx	lr
